
TESTmqtt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013924  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a304  08013af8  08013af8  00023af8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ddfc  0801ddfc  00030434  2**0
                  CONTENTS
  4 .ARM          00000008  0801ddfc  0801ddfc  0002ddfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801de04  0801de04  00030434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801de04  0801de04  0002de04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801de08  0801de08  0002de08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f4  20000000  0801de0c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200002f4  0801e100  000302f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000394  0801e1a0  00030394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000032cc  20000438  0801e240  00030438  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  20003704  0801e240  00033704  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030434  2**0
                  CONTENTS, READONLY
 14 .debug_info   00020817  00000000  00000000  00030464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002a7f  00000000  00000000  00050c7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a98  00000000  00000000  00053700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001ab0  00000000  00000000  00055198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002938d  00000000  00000000  00056c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001ce1a  00000000  00000000  0007ffd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fc139  00000000  00000000  0009cdef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000049  00000000  00000000  00198f28  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008694  00000000  00000000  00198f74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000438 	.word	0x20000438
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08013adc 	.word	0x08013adc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000043c 	.word	0x2000043c
 800020c:	08013adc 	.word	0x08013adc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strcmp>:
 80002b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002b8:	2a01      	cmp	r2, #1
 80002ba:	bf28      	it	cs
 80002bc:	429a      	cmpcs	r2, r3
 80002be:	d0f7      	beq.n	80002b0 <strcmp>
 80002c0:	1ad0      	subs	r0, r2, r3
 80002c2:	4770      	bx	lr

080002c4 <strlen>:
 80002c4:	4603      	mov	r3, r0
 80002c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d1fb      	bne.n	80002c6 <strlen+0x2>
 80002ce:	1a18      	subs	r0, r3, r0
 80002d0:	3801      	subs	r0, #1
 80002d2:	4770      	bx	lr

080002d4 <__aeabi_drsub>:
 80002d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d8:	e002      	b.n	80002e0 <__adddf3>
 80002da:	bf00      	nop

080002dc <__aeabi_dsub>:
 80002dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002e0 <__adddf3>:
 80002e0:	b530      	push	{r4, r5, lr}
 80002e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ea:	ea94 0f05 	teq	r4, r5
 80002ee:	bf08      	it	eq
 80002f0:	ea90 0f02 	teqeq	r0, r2
 80002f4:	bf1f      	itttt	ne
 80002f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000302:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000306:	f000 80e2 	beq.w	80004ce <__adddf3+0x1ee>
 800030a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000312:	bfb8      	it	lt
 8000314:	426d      	neglt	r5, r5
 8000316:	dd0c      	ble.n	8000332 <__adddf3+0x52>
 8000318:	442c      	add	r4, r5
 800031a:	ea80 0202 	eor.w	r2, r0, r2
 800031e:	ea81 0303 	eor.w	r3, r1, r3
 8000322:	ea82 0000 	eor.w	r0, r2, r0
 8000326:	ea83 0101 	eor.w	r1, r3, r1
 800032a:	ea80 0202 	eor.w	r2, r0, r2
 800032e:	ea81 0303 	eor.w	r3, r1, r3
 8000332:	2d36      	cmp	r5, #54	; 0x36
 8000334:	bf88      	it	hi
 8000336:	bd30      	pophi	{r4, r5, pc}
 8000338:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800033c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000340:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000344:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x70>
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000354:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000358:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800035c:	d002      	beq.n	8000364 <__adddf3+0x84>
 800035e:	4252      	negs	r2, r2
 8000360:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000364:	ea94 0f05 	teq	r4, r5
 8000368:	f000 80a7 	beq.w	80004ba <__adddf3+0x1da>
 800036c:	f1a4 0401 	sub.w	r4, r4, #1
 8000370:	f1d5 0e20 	rsbs	lr, r5, #32
 8000374:	db0d      	blt.n	8000392 <__adddf3+0xb2>
 8000376:	fa02 fc0e 	lsl.w	ip, r2, lr
 800037a:	fa22 f205 	lsr.w	r2, r2, r5
 800037e:	1880      	adds	r0, r0, r2
 8000380:	f141 0100 	adc.w	r1, r1, #0
 8000384:	fa03 f20e 	lsl.w	r2, r3, lr
 8000388:	1880      	adds	r0, r0, r2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	4159      	adcs	r1, r3
 8000390:	e00e      	b.n	80003b0 <__adddf3+0xd0>
 8000392:	f1a5 0520 	sub.w	r5, r5, #32
 8000396:	f10e 0e20 	add.w	lr, lr, #32
 800039a:	2a01      	cmp	r2, #1
 800039c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003a0:	bf28      	it	cs
 80003a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	18c0      	adds	r0, r0, r3
 80003ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b4:	d507      	bpl.n	80003c6 <__adddf3+0xe6>
 80003b6:	f04f 0e00 	mov.w	lr, #0
 80003ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80003be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ca:	d31b      	bcc.n	8000404 <__adddf3+0x124>
 80003cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003d0:	d30c      	bcc.n	80003ec <__adddf3+0x10c>
 80003d2:	0849      	lsrs	r1, r1, #1
 80003d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003dc:	f104 0401 	add.w	r4, r4, #1
 80003e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e8:	f080 809a 	bcs.w	8000520 <__adddf3+0x240>
 80003ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003f0:	bf08      	it	eq
 80003f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f6:	f150 0000 	adcs.w	r0, r0, #0
 80003fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fe:	ea41 0105 	orr.w	r1, r1, r5
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000408:	4140      	adcs	r0, r0
 800040a:	eb41 0101 	adc.w	r1, r1, r1
 800040e:	3c01      	subs	r4, #1
 8000410:	bf28      	it	cs
 8000412:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000416:	d2e9      	bcs.n	80003ec <__adddf3+0x10c>
 8000418:	f091 0f00 	teq	r1, #0
 800041c:	bf04      	itt	eq
 800041e:	4601      	moveq	r1, r0
 8000420:	2000      	moveq	r0, #0
 8000422:	fab1 f381 	clz	r3, r1
 8000426:	bf08      	it	eq
 8000428:	3320      	addeq	r3, #32
 800042a:	f1a3 030b 	sub.w	r3, r3, #11
 800042e:	f1b3 0220 	subs.w	r2, r3, #32
 8000432:	da0c      	bge.n	800044e <__adddf3+0x16e>
 8000434:	320c      	adds	r2, #12
 8000436:	dd08      	ble.n	800044a <__adddf3+0x16a>
 8000438:	f102 0c14 	add.w	ip, r2, #20
 800043c:	f1c2 020c 	rsb	r2, r2, #12
 8000440:	fa01 f00c 	lsl.w	r0, r1, ip
 8000444:	fa21 f102 	lsr.w	r1, r1, r2
 8000448:	e00c      	b.n	8000464 <__adddf3+0x184>
 800044a:	f102 0214 	add.w	r2, r2, #20
 800044e:	bfd8      	it	le
 8000450:	f1c2 0c20 	rsble	ip, r2, #32
 8000454:	fa01 f102 	lsl.w	r1, r1, r2
 8000458:	fa20 fc0c 	lsr.w	ip, r0, ip
 800045c:	bfdc      	itt	le
 800045e:	ea41 010c 	orrle.w	r1, r1, ip
 8000462:	4090      	lslle	r0, r2
 8000464:	1ae4      	subs	r4, r4, r3
 8000466:	bfa2      	ittt	ge
 8000468:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800046c:	4329      	orrge	r1, r5
 800046e:	bd30      	popge	{r4, r5, pc}
 8000470:	ea6f 0404 	mvn.w	r4, r4
 8000474:	3c1f      	subs	r4, #31
 8000476:	da1c      	bge.n	80004b2 <__adddf3+0x1d2>
 8000478:	340c      	adds	r4, #12
 800047a:	dc0e      	bgt.n	800049a <__adddf3+0x1ba>
 800047c:	f104 0414 	add.w	r4, r4, #20
 8000480:	f1c4 0220 	rsb	r2, r4, #32
 8000484:	fa20 f004 	lsr.w	r0, r0, r4
 8000488:	fa01 f302 	lsl.w	r3, r1, r2
 800048c:	ea40 0003 	orr.w	r0, r0, r3
 8000490:	fa21 f304 	lsr.w	r3, r1, r4
 8000494:	ea45 0103 	orr.w	r1, r5, r3
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f1c4 040c 	rsb	r4, r4, #12
 800049e:	f1c4 0220 	rsb	r2, r4, #32
 80004a2:	fa20 f002 	lsr.w	r0, r0, r2
 80004a6:	fa01 f304 	lsl.w	r3, r1, r4
 80004aa:	ea40 0003 	orr.w	r0, r0, r3
 80004ae:	4629      	mov	r1, r5
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	fa21 f004 	lsr.w	r0, r1, r4
 80004b6:	4629      	mov	r1, r5
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	f094 0f00 	teq	r4, #0
 80004be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004c2:	bf06      	itte	eq
 80004c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c8:	3401      	addeq	r4, #1
 80004ca:	3d01      	subne	r5, #1
 80004cc:	e74e      	b.n	800036c <__adddf3+0x8c>
 80004ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d2:	bf18      	it	ne
 80004d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d8:	d029      	beq.n	800052e <__adddf3+0x24e>
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	d005      	beq.n	80004f2 <__adddf3+0x212>
 80004e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ea:	bf04      	itt	eq
 80004ec:	4619      	moveq	r1, r3
 80004ee:	4610      	moveq	r0, r2
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	ea91 0f03 	teq	r1, r3
 80004f6:	bf1e      	ittt	ne
 80004f8:	2100      	movne	r1, #0
 80004fa:	2000      	movne	r0, #0
 80004fc:	bd30      	popne	{r4, r5, pc}
 80004fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000502:	d105      	bne.n	8000510 <__adddf3+0x230>
 8000504:	0040      	lsls	r0, r0, #1
 8000506:	4149      	adcs	r1, r1
 8000508:	bf28      	it	cs
 800050a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000514:	bf3c      	itt	cc
 8000516:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800051a:	bd30      	popcc	{r4, r5, pc}
 800051c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000520:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000524:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000528:	f04f 0000 	mov.w	r0, #0
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000532:	bf1a      	itte	ne
 8000534:	4619      	movne	r1, r3
 8000536:	4610      	movne	r0, r2
 8000538:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800053c:	bf1c      	itt	ne
 800053e:	460b      	movne	r3, r1
 8000540:	4602      	movne	r2, r0
 8000542:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000546:	bf06      	itte	eq
 8000548:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800054c:	ea91 0f03 	teqeq	r1, r3
 8000550:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	bf00      	nop

08000558 <__aeabi_ui2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056c:	f04f 0500 	mov.w	r5, #0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e750      	b.n	8000418 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_i2d>:
 8000578:	f090 0f00 	teq	r0, #0
 800057c:	bf04      	itt	eq
 800057e:	2100      	moveq	r1, #0
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000588:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000590:	bf48      	it	mi
 8000592:	4240      	negmi	r0, r0
 8000594:	f04f 0100 	mov.w	r1, #0
 8000598:	e73e      	b.n	8000418 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_f2d>:
 800059c:	0042      	lsls	r2, r0, #1
 800059e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005aa:	bf1f      	itttt	ne
 80005ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b8:	4770      	bxne	lr
 80005ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005be:	bf08      	it	eq
 80005c0:	4770      	bxeq	lr
 80005c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c6:	bf04      	itt	eq
 80005c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	e71c      	b.n	8000418 <__adddf3+0x138>
 80005de:	bf00      	nop

080005e0 <__aeabi_ul2d>:
 80005e0:	ea50 0201 	orrs.w	r2, r0, r1
 80005e4:	bf08      	it	eq
 80005e6:	4770      	bxeq	lr
 80005e8:	b530      	push	{r4, r5, lr}
 80005ea:	f04f 0500 	mov.w	r5, #0
 80005ee:	e00a      	b.n	8000606 <__aeabi_l2d+0x16>

080005f0 <__aeabi_l2d>:
 80005f0:	ea50 0201 	orrs.w	r2, r0, r1
 80005f4:	bf08      	it	eq
 80005f6:	4770      	bxeq	lr
 80005f8:	b530      	push	{r4, r5, lr}
 80005fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fe:	d502      	bpl.n	8000606 <__aeabi_l2d+0x16>
 8000600:	4240      	negs	r0, r0
 8000602:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000606:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800060a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000612:	f43f aed8 	beq.w	80003c6 <__adddf3+0xe6>
 8000616:	f04f 0203 	mov.w	r2, #3
 800061a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061e:	bf18      	it	ne
 8000620:	3203      	addne	r2, #3
 8000622:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000626:	bf18      	it	ne
 8000628:	3203      	addne	r2, #3
 800062a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062e:	f1c2 0320 	rsb	r3, r2, #32
 8000632:	fa00 fc03 	lsl.w	ip, r0, r3
 8000636:	fa20 f002 	lsr.w	r0, r0, r2
 800063a:	fa01 fe03 	lsl.w	lr, r1, r3
 800063e:	ea40 000e 	orr.w	r0, r0, lr
 8000642:	fa21 f102 	lsr.w	r1, r1, r2
 8000646:	4414      	add	r4, r2
 8000648:	e6bd      	b.n	80003c6 <__adddf3+0xe6>
 800064a:	bf00      	nop

0800064c <__aeabi_dmul>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000652:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000656:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800065a:	bf1d      	ittte	ne
 800065c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000660:	ea94 0f0c 	teqne	r4, ip
 8000664:	ea95 0f0c 	teqne	r5, ip
 8000668:	f000 f8de 	bleq	8000828 <__aeabi_dmul+0x1dc>
 800066c:	442c      	add	r4, r5
 800066e:	ea81 0603 	eor.w	r6, r1, r3
 8000672:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000676:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800067a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067e:	bf18      	it	ne
 8000680:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800068c:	d038      	beq.n	8000700 <__aeabi_dmul+0xb4>
 800068e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000692:	f04f 0500 	mov.w	r5, #0
 8000696:	fbe1 e502 	umlal	lr, r5, r1, r2
 800069a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006a2:	f04f 0600 	mov.w	r6, #0
 80006a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006aa:	f09c 0f00 	teq	ip, #0
 80006ae:	bf18      	it	ne
 80006b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006c0:	d204      	bcs.n	80006cc <__aeabi_dmul+0x80>
 80006c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c6:	416d      	adcs	r5, r5
 80006c8:	eb46 0606 	adc.w	r6, r6, r6
 80006cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e4:	bf88      	it	hi
 80006e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ea:	d81e      	bhi.n	800072a <__aeabi_dmul+0xde>
 80006ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006f0:	bf08      	it	eq
 80006f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f6:	f150 0000 	adcs.w	r0, r0, #0
 80006fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000704:	ea46 0101 	orr.w	r1, r6, r1
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000714:	bfc2      	ittt	gt
 8000716:	ebd4 050c 	rsbsgt	r5, r4, ip
 800071a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071e:	bd70      	popgt	{r4, r5, r6, pc}
 8000720:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000724:	f04f 0e00 	mov.w	lr, #0
 8000728:	3c01      	subs	r4, #1
 800072a:	f300 80ab 	bgt.w	8000884 <__aeabi_dmul+0x238>
 800072e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000732:	bfde      	ittt	le
 8000734:	2000      	movle	r0, #0
 8000736:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800073a:	bd70      	pople	{r4, r5, r6, pc}
 800073c:	f1c4 0400 	rsb	r4, r4, #0
 8000740:	3c20      	subs	r4, #32
 8000742:	da35      	bge.n	80007b0 <__aeabi_dmul+0x164>
 8000744:	340c      	adds	r4, #12
 8000746:	dc1b      	bgt.n	8000780 <__aeabi_dmul+0x134>
 8000748:	f104 0414 	add.w	r4, r4, #20
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f305 	lsl.w	r3, r0, r5
 8000754:	fa20 f004 	lsr.w	r0, r0, r4
 8000758:	fa01 f205 	lsl.w	r2, r1, r5
 800075c:	ea40 0002 	orr.w	r0, r0, r2
 8000760:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000764:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	fa21 f604 	lsr.w	r6, r1, r4
 8000770:	eb42 0106 	adc.w	r1, r2, r6
 8000774:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000778:	bf08      	it	eq
 800077a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077e:	bd70      	pop	{r4, r5, r6, pc}
 8000780:	f1c4 040c 	rsb	r4, r4, #12
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f304 	lsl.w	r3, r0, r4
 800078c:	fa20 f005 	lsr.w	r0, r0, r5
 8000790:	fa01 f204 	lsl.w	r2, r1, r4
 8000794:	ea40 0002 	orr.w	r0, r0, r2
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a0:	f141 0100 	adc.w	r1, r1, #0
 80007a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a8:	bf08      	it	eq
 80007aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ae:	bd70      	pop	{r4, r5, r6, pc}
 80007b0:	f1c4 0520 	rsb	r5, r4, #32
 80007b4:	fa00 f205 	lsl.w	r2, r0, r5
 80007b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80007bc:	fa20 f304 	lsr.w	r3, r0, r4
 80007c0:	fa01 f205 	lsl.w	r2, r1, r5
 80007c4:	ea43 0302 	orr.w	r3, r3, r2
 80007c8:	fa21 f004 	lsr.w	r0, r1, r4
 80007cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d0:	fa21 f204 	lsr.w	r2, r1, r4
 80007d4:	ea20 0002 	bic.w	r0, r0, r2
 80007d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e0:	bf08      	it	eq
 80007e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e6:	bd70      	pop	{r4, r5, r6, pc}
 80007e8:	f094 0f00 	teq	r4, #0
 80007ec:	d10f      	bne.n	800080e <__aeabi_dmul+0x1c2>
 80007ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007f2:	0040      	lsls	r0, r0, #1
 80007f4:	eb41 0101 	adc.w	r1, r1, r1
 80007f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007fc:	bf08      	it	eq
 80007fe:	3c01      	subeq	r4, #1
 8000800:	d0f7      	beq.n	80007f2 <__aeabi_dmul+0x1a6>
 8000802:	ea41 0106 	orr.w	r1, r1, r6
 8000806:	f095 0f00 	teq	r5, #0
 800080a:	bf18      	it	ne
 800080c:	4770      	bxne	lr
 800080e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000812:	0052      	lsls	r2, r2, #1
 8000814:	eb43 0303 	adc.w	r3, r3, r3
 8000818:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800081c:	bf08      	it	eq
 800081e:	3d01      	subeq	r5, #1
 8000820:	d0f7      	beq.n	8000812 <__aeabi_dmul+0x1c6>
 8000822:	ea43 0306 	orr.w	r3, r3, r6
 8000826:	4770      	bx	lr
 8000828:	ea94 0f0c 	teq	r4, ip
 800082c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000830:	bf18      	it	ne
 8000832:	ea95 0f0c 	teqne	r5, ip
 8000836:	d00c      	beq.n	8000852 <__aeabi_dmul+0x206>
 8000838:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083c:	bf18      	it	ne
 800083e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000842:	d1d1      	bne.n	80007e8 <__aeabi_dmul+0x19c>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000856:	bf06      	itte	eq
 8000858:	4610      	moveq	r0, r2
 800085a:	4619      	moveq	r1, r3
 800085c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000860:	d019      	beq.n	8000896 <__aeabi_dmul+0x24a>
 8000862:	ea94 0f0c 	teq	r4, ip
 8000866:	d102      	bne.n	800086e <__aeabi_dmul+0x222>
 8000868:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800086c:	d113      	bne.n	8000896 <__aeabi_dmul+0x24a>
 800086e:	ea95 0f0c 	teq	r5, ip
 8000872:	d105      	bne.n	8000880 <__aeabi_dmul+0x234>
 8000874:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000878:	bf1c      	itt	ne
 800087a:	4610      	movne	r0, r2
 800087c:	4619      	movne	r1, r3
 800087e:	d10a      	bne.n	8000896 <__aeabi_dmul+0x24a>
 8000880:	ea81 0103 	eor.w	r1, r1, r3
 8000884:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000888:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000890:	f04f 0000 	mov.w	r0, #0
 8000894:	bd70      	pop	{r4, r5, r6, pc}
 8000896:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800089a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089e:	bd70      	pop	{r4, r5, r6, pc}

080008a0 <__aeabi_ddiv>:
 80008a0:	b570      	push	{r4, r5, r6, lr}
 80008a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ae:	bf1d      	ittte	ne
 80008b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b4:	ea94 0f0c 	teqne	r4, ip
 80008b8:	ea95 0f0c 	teqne	r5, ip
 80008bc:	f000 f8a7 	bleq	8000a0e <__aeabi_ddiv+0x16e>
 80008c0:	eba4 0405 	sub.w	r4, r4, r5
 80008c4:	ea81 0e03 	eor.w	lr, r1, r3
 80008c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008d0:	f000 8088 	beq.w	80009e4 <__aeabi_ddiv+0x144>
 80008d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f8:	429d      	cmp	r5, r3
 80008fa:	bf08      	it	eq
 80008fc:	4296      	cmpeq	r6, r2
 80008fe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000902:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000906:	d202      	bcs.n	800090e <__aeabi_ddiv+0x6e>
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	1ab6      	subs	r6, r6, r2
 8000910:	eb65 0503 	sbc.w	r5, r5, r3
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000922:	ebb6 0e02 	subs.w	lr, r6, r2
 8000926:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092a:	bf22      	ittt	cs
 800092c:	1ab6      	subcs	r6, r6, r2
 800092e:	4675      	movcs	r5, lr
 8000930:	ea40 000c 	orrcs.w	r0, r0, ip
 8000934:	085b      	lsrs	r3, r3, #1
 8000936:	ea4f 0232 	mov.w	r2, r2, rrx
 800093a:	ebb6 0e02 	subs.w	lr, r6, r2
 800093e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000942:	bf22      	ittt	cs
 8000944:	1ab6      	subcs	r6, r6, r2
 8000946:	4675      	movcs	r5, lr
 8000948:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800094c:	085b      	lsrs	r3, r3, #1
 800094e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000952:	ebb6 0e02 	subs.w	lr, r6, r2
 8000956:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095a:	bf22      	ittt	cs
 800095c:	1ab6      	subcs	r6, r6, r2
 800095e:	4675      	movcs	r5, lr
 8000960:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000964:	085b      	lsrs	r3, r3, #1
 8000966:	ea4f 0232 	mov.w	r2, r2, rrx
 800096a:	ebb6 0e02 	subs.w	lr, r6, r2
 800096e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000972:	bf22      	ittt	cs
 8000974:	1ab6      	subcs	r6, r6, r2
 8000976:	4675      	movcs	r5, lr
 8000978:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800097c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000980:	d018      	beq.n	80009b4 <__aeabi_ddiv+0x114>
 8000982:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000986:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800098a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000992:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000996:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800099a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099e:	d1c0      	bne.n	8000922 <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	d10b      	bne.n	80009be <__aeabi_ddiv+0x11e>
 80009a6:	ea41 0100 	orr.w	r1, r1, r0
 80009aa:	f04f 0000 	mov.w	r0, #0
 80009ae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009b2:	e7b6      	b.n	8000922 <__aeabi_ddiv+0x82>
 80009b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b8:	bf04      	itt	eq
 80009ba:	4301      	orreq	r1, r0
 80009bc:	2000      	moveq	r0, #0
 80009be:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009c2:	bf88      	it	hi
 80009c4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c8:	f63f aeaf 	bhi.w	800072a <__aeabi_dmul+0xde>
 80009cc:	ebb5 0c03 	subs.w	ip, r5, r3
 80009d0:	bf04      	itt	eq
 80009d2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009da:	f150 0000 	adcs.w	r0, r0, #0
 80009de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009e2:	bd70      	pop	{r4, r5, r6, pc}
 80009e4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009f0:	bfc2      	ittt	gt
 80009f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009fa:	bd70      	popgt	{r4, r5, r6, pc}
 80009fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a00:	f04f 0e00 	mov.w	lr, #0
 8000a04:	3c01      	subs	r4, #1
 8000a06:	e690      	b.n	800072a <__aeabi_dmul+0xde>
 8000a08:	ea45 0e06 	orr.w	lr, r5, r6
 8000a0c:	e68d      	b.n	800072a <__aeabi_dmul+0xde>
 8000a0e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a12:	ea94 0f0c 	teq	r4, ip
 8000a16:	bf08      	it	eq
 8000a18:	ea95 0f0c 	teqeq	r5, ip
 8000a1c:	f43f af3b 	beq.w	8000896 <__aeabi_dmul+0x24a>
 8000a20:	ea94 0f0c 	teq	r4, ip
 8000a24:	d10a      	bne.n	8000a3c <__aeabi_ddiv+0x19c>
 8000a26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a2a:	f47f af34 	bne.w	8000896 <__aeabi_dmul+0x24a>
 8000a2e:	ea95 0f0c 	teq	r5, ip
 8000a32:	f47f af25 	bne.w	8000880 <__aeabi_dmul+0x234>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e72c      	b.n	8000896 <__aeabi_dmul+0x24a>
 8000a3c:	ea95 0f0c 	teq	r5, ip
 8000a40:	d106      	bne.n	8000a50 <__aeabi_ddiv+0x1b0>
 8000a42:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a46:	f43f aefd 	beq.w	8000844 <__aeabi_dmul+0x1f8>
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	e722      	b.n	8000896 <__aeabi_dmul+0x24a>
 8000a50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a5a:	f47f aec5 	bne.w	80007e8 <__aeabi_dmul+0x19c>
 8000a5e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a62:	f47f af0d 	bne.w	8000880 <__aeabi_dmul+0x234>
 8000a66:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a6a:	f47f aeeb 	bne.w	8000844 <__aeabi_dmul+0x1f8>
 8000a6e:	e712      	b.n	8000896 <__aeabi_dmul+0x24a>

08000a70 <__gedf2>:
 8000a70:	f04f 3cff 	mov.w	ip, #4294967295
 8000a74:	e006      	b.n	8000a84 <__cmpdf2+0x4>
 8000a76:	bf00      	nop

08000a78 <__ledf2>:
 8000a78:	f04f 0c01 	mov.w	ip, #1
 8000a7c:	e002      	b.n	8000a84 <__cmpdf2+0x4>
 8000a7e:	bf00      	nop

08000a80 <__cmpdf2>:
 8000a80:	f04f 0c01 	mov.w	ip, #1
 8000a84:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	bf18      	it	ne
 8000a96:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a9a:	d01b      	beq.n	8000ad4 <__cmpdf2+0x54>
 8000a9c:	b001      	add	sp, #4
 8000a9e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aa2:	bf0c      	ite	eq
 8000aa4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa8:	ea91 0f03 	teqne	r1, r3
 8000aac:	bf02      	ittt	eq
 8000aae:	ea90 0f02 	teqeq	r0, r2
 8000ab2:	2000      	moveq	r0, #0
 8000ab4:	4770      	bxeq	lr
 8000ab6:	f110 0f00 	cmn.w	r0, #0
 8000aba:	ea91 0f03 	teq	r1, r3
 8000abe:	bf58      	it	pl
 8000ac0:	4299      	cmppl	r1, r3
 8000ac2:	bf08      	it	eq
 8000ac4:	4290      	cmpeq	r0, r2
 8000ac6:	bf2c      	ite	cs
 8000ac8:	17d8      	asrcs	r0, r3, #31
 8000aca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ace:	f040 0001 	orr.w	r0, r0, #1
 8000ad2:	4770      	bx	lr
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__cmpdf2+0x64>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d107      	bne.n	8000af4 <__cmpdf2+0x74>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d1d6      	bne.n	8000a9c <__cmpdf2+0x1c>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d0d3      	beq.n	8000a9c <__cmpdf2+0x1c>
 8000af4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_cdrcmple>:
 8000afc:	4684      	mov	ip, r0
 8000afe:	4610      	mov	r0, r2
 8000b00:	4662      	mov	r2, ip
 8000b02:	468c      	mov	ip, r1
 8000b04:	4619      	mov	r1, r3
 8000b06:	4663      	mov	r3, ip
 8000b08:	e000      	b.n	8000b0c <__aeabi_cdcmpeq>
 8000b0a:	bf00      	nop

08000b0c <__aeabi_cdcmpeq>:
 8000b0c:	b501      	push	{r0, lr}
 8000b0e:	f7ff ffb7 	bl	8000a80 <__cmpdf2>
 8000b12:	2800      	cmp	r0, #0
 8000b14:	bf48      	it	mi
 8000b16:	f110 0f00 	cmnmi.w	r0, #0
 8000b1a:	bd01      	pop	{r0, pc}

08000b1c <__aeabi_dcmpeq>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff fff4 	bl	8000b0c <__aeabi_cdcmpeq>
 8000b24:	bf0c      	ite	eq
 8000b26:	2001      	moveq	r0, #1
 8000b28:	2000      	movne	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmplt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffea 	bl	8000b0c <__aeabi_cdcmpeq>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmple>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffe0 	bl	8000b0c <__aeabi_cdcmpeq>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpge>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffce 	bl	8000afc <__aeabi_cdrcmple>
 8000b60:	bf94      	ite	ls
 8000b62:	2001      	movls	r0, #1
 8000b64:	2000      	movhi	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpgt>:
 8000b6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b70:	f7ff ffc4 	bl	8000afc <__aeabi_cdrcmple>
 8000b74:	bf34      	ite	cc
 8000b76:	2001      	movcc	r0, #1
 8000b78:	2000      	movcs	r0, #0
 8000b7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7e:	bf00      	nop

08000b80 <__aeabi_d2iz>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b88:	d215      	bcs.n	8000bb6 <__aeabi_d2iz+0x36>
 8000b8a:	d511      	bpl.n	8000bb0 <__aeabi_d2iz+0x30>
 8000b8c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b94:	d912      	bls.n	8000bbc <__aeabi_d2iz+0x3c>
 8000b96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ba2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba6:	fa23 f002 	lsr.w	r0, r3, r2
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d105      	bne.n	8000bc8 <__aeabi_d2iz+0x48>
 8000bbc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc0:	bf08      	it	eq
 8000bc2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_d2uiz>:
 8000bd0:	004a      	lsls	r2, r1, #1
 8000bd2:	d211      	bcs.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bd4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd8:	d211      	bcs.n	8000bfe <__aeabi_d2uiz+0x2e>
 8000bda:	d50d      	bpl.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bdc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000be4:	d40e      	bmi.n	8000c04 <__aeabi_d2uiz+0x34>
 8000be6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bf2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d102      	bne.n	8000c0a <__aeabi_d2uiz+0x3a>
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	4770      	bx	lr
 8000c0a:	f04f 0000 	mov.w	r0, #0
 8000c0e:	4770      	bx	lr

08000c10 <__aeabi_ldivmod>:
 8000c10:	b97b      	cbnz	r3, 8000c32 <__aeabi_ldivmod+0x22>
 8000c12:	b972      	cbnz	r2, 8000c32 <__aeabi_ldivmod+0x22>
 8000c14:	2900      	cmp	r1, #0
 8000c16:	bfbe      	ittt	lt
 8000c18:	2000      	movlt	r0, #0
 8000c1a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c1e:	e006      	blt.n	8000c2e <__aeabi_ldivmod+0x1e>
 8000c20:	bf08      	it	eq
 8000c22:	2800      	cmpeq	r0, #0
 8000c24:	bf1c      	itt	ne
 8000c26:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c2a:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2e:	f000 b9f5 	b.w	800101c <__aeabi_idiv0>
 8000c32:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c36:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c3a:	2900      	cmp	r1, #0
 8000c3c:	db09      	blt.n	8000c52 <__aeabi_ldivmod+0x42>
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	db1a      	blt.n	8000c78 <__aeabi_ldivmod+0x68>
 8000c42:	f000 f883 	bl	8000d4c <__udivmoddi4>
 8000c46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4e:	b004      	add	sp, #16
 8000c50:	4770      	bx	lr
 8000c52:	4240      	negs	r0, r0
 8000c54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	db1b      	blt.n	8000c94 <__aeabi_ldivmod+0x84>
 8000c5c:	f000 f876 	bl	8000d4c <__udivmoddi4>
 8000c60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c68:	b004      	add	sp, #16
 8000c6a:	4240      	negs	r0, r0
 8000c6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c70:	4252      	negs	r2, r2
 8000c72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c76:	4770      	bx	lr
 8000c78:	4252      	negs	r2, r2
 8000c7a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c7e:	f000 f865 	bl	8000d4c <__udivmoddi4>
 8000c82:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c8a:	b004      	add	sp, #16
 8000c8c:	4240      	negs	r0, r0
 8000c8e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c92:	4770      	bx	lr
 8000c94:	4252      	negs	r2, r2
 8000c96:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c9a:	f000 f857 	bl	8000d4c <__udivmoddi4>
 8000c9e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca6:	b004      	add	sp, #16
 8000ca8:	4252      	negs	r2, r2
 8000caa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cae:	4770      	bx	lr

08000cb0 <__aeabi_uldivmod>:
 8000cb0:	b953      	cbnz	r3, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb2:	b94a      	cbnz	r2, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb4:	2900      	cmp	r1, #0
 8000cb6:	bf08      	it	eq
 8000cb8:	2800      	cmpeq	r0, #0
 8000cba:	bf1c      	itt	ne
 8000cbc:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc4:	f000 b9aa 	b.w	800101c <__aeabi_idiv0>
 8000cc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ccc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd0:	f000 f83c 	bl	8000d4c <__udivmoddi4>
 8000cd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cdc:	b004      	add	sp, #16
 8000cde:	4770      	bx	lr

08000ce0 <__aeabi_d2lz>:
 8000ce0:	b538      	push	{r3, r4, r5, lr}
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	4604      	mov	r4, r0
 8000ce8:	460d      	mov	r5, r1
 8000cea:	f7ff ff21 	bl	8000b30 <__aeabi_dcmplt>
 8000cee:	b928      	cbnz	r0, 8000cfc <__aeabi_d2lz+0x1c>
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	4629      	mov	r1, r5
 8000cf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf8:	f000 b80a 	b.w	8000d10 <__aeabi_d2ulz>
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d02:	f000 f805 	bl	8000d10 <__aeabi_d2ulz>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	bd38      	pop	{r3, r4, r5, pc}
 8000d0e:	bf00      	nop

08000d10 <__aeabi_d2ulz>:
 8000d10:	b5d0      	push	{r4, r6, r7, lr}
 8000d12:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <__aeabi_d2ulz+0x34>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	4606      	mov	r6, r0
 8000d18:	460f      	mov	r7, r1
 8000d1a:	f7ff fc97 	bl	800064c <__aeabi_dmul>
 8000d1e:	f7ff ff57 	bl	8000bd0 <__aeabi_d2uiz>
 8000d22:	4604      	mov	r4, r0
 8000d24:	f7ff fc18 	bl	8000558 <__aeabi_ui2d>
 8000d28:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <__aeabi_d2ulz+0x38>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f7ff fc8e 	bl	800064c <__aeabi_dmul>
 8000d30:	4602      	mov	r2, r0
 8000d32:	460b      	mov	r3, r1
 8000d34:	4630      	mov	r0, r6
 8000d36:	4639      	mov	r1, r7
 8000d38:	f7ff fad0 	bl	80002dc <__aeabi_dsub>
 8000d3c:	f7ff ff48 	bl	8000bd0 <__aeabi_d2uiz>
 8000d40:	4621      	mov	r1, r4
 8000d42:	bdd0      	pop	{r4, r6, r7, pc}
 8000d44:	3df00000 	.word	0x3df00000
 8000d48:	41f00000 	.word	0x41f00000

08000d4c <__udivmoddi4>:
 8000d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d50:	9d08      	ldr	r5, [sp, #32]
 8000d52:	4604      	mov	r4, r0
 8000d54:	468e      	mov	lr, r1
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d14d      	bne.n	8000df6 <__udivmoddi4+0xaa>
 8000d5a:	428a      	cmp	r2, r1
 8000d5c:	4694      	mov	ip, r2
 8000d5e:	d969      	bls.n	8000e34 <__udivmoddi4+0xe8>
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	b152      	cbz	r2, 8000d7c <__udivmoddi4+0x30>
 8000d66:	fa01 f302 	lsl.w	r3, r1, r2
 8000d6a:	f1c2 0120 	rsb	r1, r2, #32
 8000d6e:	fa20 f101 	lsr.w	r1, r0, r1
 8000d72:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d76:	ea41 0e03 	orr.w	lr, r1, r3
 8000d7a:	4094      	lsls	r4, r2
 8000d7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d80:	0c21      	lsrs	r1, r4, #16
 8000d82:	fbbe f6f8 	udiv	r6, lr, r8
 8000d86:	fa1f f78c 	uxth.w	r7, ip
 8000d8a:	fb08 e316 	mls	r3, r8, r6, lr
 8000d8e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d92:	fb06 f107 	mul.w	r1, r6, r7
 8000d96:	4299      	cmp	r1, r3
 8000d98:	d90a      	bls.n	8000db0 <__udivmoddi4+0x64>
 8000d9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d9e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000da2:	f080 811f 	bcs.w	8000fe4 <__udivmoddi4+0x298>
 8000da6:	4299      	cmp	r1, r3
 8000da8:	f240 811c 	bls.w	8000fe4 <__udivmoddi4+0x298>
 8000dac:	3e02      	subs	r6, #2
 8000dae:	4463      	add	r3, ip
 8000db0:	1a5b      	subs	r3, r3, r1
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db8:	fb08 3310 	mls	r3, r8, r0, r3
 8000dbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc0:	fb00 f707 	mul.w	r7, r0, r7
 8000dc4:	42a7      	cmp	r7, r4
 8000dc6:	d90a      	bls.n	8000dde <__udivmoddi4+0x92>
 8000dc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd0:	f080 810a 	bcs.w	8000fe8 <__udivmoddi4+0x29c>
 8000dd4:	42a7      	cmp	r7, r4
 8000dd6:	f240 8107 	bls.w	8000fe8 <__udivmoddi4+0x29c>
 8000dda:	4464      	add	r4, ip
 8000ddc:	3802      	subs	r0, #2
 8000dde:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de2:	1be4      	subs	r4, r4, r7
 8000de4:	2600      	movs	r6, #0
 8000de6:	b11d      	cbz	r5, 8000df0 <__udivmoddi4+0xa4>
 8000de8:	40d4      	lsrs	r4, r2
 8000dea:	2300      	movs	r3, #0
 8000dec:	e9c5 4300 	strd	r4, r3, [r5]
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	428b      	cmp	r3, r1
 8000df8:	d909      	bls.n	8000e0e <__udivmoddi4+0xc2>
 8000dfa:	2d00      	cmp	r5, #0
 8000dfc:	f000 80ef 	beq.w	8000fde <__udivmoddi4+0x292>
 8000e00:	2600      	movs	r6, #0
 8000e02:	e9c5 0100 	strd	r0, r1, [r5]
 8000e06:	4630      	mov	r0, r6
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	fab3 f683 	clz	r6, r3
 8000e12:	2e00      	cmp	r6, #0
 8000e14:	d14a      	bne.n	8000eac <__udivmoddi4+0x160>
 8000e16:	428b      	cmp	r3, r1
 8000e18:	d302      	bcc.n	8000e20 <__udivmoddi4+0xd4>
 8000e1a:	4282      	cmp	r2, r0
 8000e1c:	f200 80f9 	bhi.w	8001012 <__udivmoddi4+0x2c6>
 8000e20:	1a84      	subs	r4, r0, r2
 8000e22:	eb61 0303 	sbc.w	r3, r1, r3
 8000e26:	2001      	movs	r0, #1
 8000e28:	469e      	mov	lr, r3
 8000e2a:	2d00      	cmp	r5, #0
 8000e2c:	d0e0      	beq.n	8000df0 <__udivmoddi4+0xa4>
 8000e2e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e32:	e7dd      	b.n	8000df0 <__udivmoddi4+0xa4>
 8000e34:	b902      	cbnz	r2, 8000e38 <__udivmoddi4+0xec>
 8000e36:	deff      	udf	#255	; 0xff
 8000e38:	fab2 f282 	clz	r2, r2
 8000e3c:	2a00      	cmp	r2, #0
 8000e3e:	f040 8092 	bne.w	8000f66 <__udivmoddi4+0x21a>
 8000e42:	eba1 010c 	sub.w	r1, r1, ip
 8000e46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4a:	fa1f fe8c 	uxth.w	lr, ip
 8000e4e:	2601      	movs	r6, #1
 8000e50:	0c20      	lsrs	r0, r4, #16
 8000e52:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e56:	fb07 1113 	mls	r1, r7, r3, r1
 8000e5a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5e:	fb0e f003 	mul.w	r0, lr, r3
 8000e62:	4288      	cmp	r0, r1
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x12c>
 8000e66:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x12a>
 8000e70:	4288      	cmp	r0, r1
 8000e72:	f200 80cb 	bhi.w	800100c <__udivmoddi4+0x2c0>
 8000e76:	4643      	mov	r3, r8
 8000e78:	1a09      	subs	r1, r1, r0
 8000e7a:	b2a4      	uxth	r4, r4
 8000e7c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e80:	fb07 1110 	mls	r1, r7, r0, r1
 8000e84:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e88:	fb0e fe00 	mul.w	lr, lr, r0
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x156>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e98:	d202      	bcs.n	8000ea0 <__udivmoddi4+0x154>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	f200 80bb 	bhi.w	8001016 <__udivmoddi4+0x2ca>
 8000ea0:	4608      	mov	r0, r1
 8000ea2:	eba4 040e 	sub.w	r4, r4, lr
 8000ea6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000eaa:	e79c      	b.n	8000de6 <__udivmoddi4+0x9a>
 8000eac:	f1c6 0720 	rsb	r7, r6, #32
 8000eb0:	40b3      	lsls	r3, r6
 8000eb2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eb6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eba:	fa20 f407 	lsr.w	r4, r0, r7
 8000ebe:	fa01 f306 	lsl.w	r3, r1, r6
 8000ec2:	431c      	orrs	r4, r3
 8000ec4:	40f9      	lsrs	r1, r7
 8000ec6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eca:	fa00 f306 	lsl.w	r3, r0, r6
 8000ece:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ed2:	0c20      	lsrs	r0, r4, #16
 8000ed4:	fa1f fe8c 	uxth.w	lr, ip
 8000ed8:	fb09 1118 	mls	r1, r9, r8, r1
 8000edc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee0:	fb08 f00e 	mul.w	r0, r8, lr
 8000ee4:	4288      	cmp	r0, r1
 8000ee6:	fa02 f206 	lsl.w	r2, r2, r6
 8000eea:	d90b      	bls.n	8000f04 <__udivmoddi4+0x1b8>
 8000eec:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ef4:	f080 8088 	bcs.w	8001008 <__udivmoddi4+0x2bc>
 8000ef8:	4288      	cmp	r0, r1
 8000efa:	f240 8085 	bls.w	8001008 <__udivmoddi4+0x2bc>
 8000efe:	f1a8 0802 	sub.w	r8, r8, #2
 8000f02:	4461      	add	r1, ip
 8000f04:	1a09      	subs	r1, r1, r0
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f0c:	fb09 1110 	mls	r1, r9, r0, r1
 8000f10:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f14:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f18:	458e      	cmp	lr, r1
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x1e2>
 8000f1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f20:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f24:	d26c      	bcs.n	8001000 <__udivmoddi4+0x2b4>
 8000f26:	458e      	cmp	lr, r1
 8000f28:	d96a      	bls.n	8001000 <__udivmoddi4+0x2b4>
 8000f2a:	3802      	subs	r0, #2
 8000f2c:	4461      	add	r1, ip
 8000f2e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f32:	fba0 9402 	umull	r9, r4, r0, r2
 8000f36:	eba1 010e 	sub.w	r1, r1, lr
 8000f3a:	42a1      	cmp	r1, r4
 8000f3c:	46c8      	mov	r8, r9
 8000f3e:	46a6      	mov	lr, r4
 8000f40:	d356      	bcc.n	8000ff0 <__udivmoddi4+0x2a4>
 8000f42:	d053      	beq.n	8000fec <__udivmoddi4+0x2a0>
 8000f44:	b15d      	cbz	r5, 8000f5e <__udivmoddi4+0x212>
 8000f46:	ebb3 0208 	subs.w	r2, r3, r8
 8000f4a:	eb61 010e 	sbc.w	r1, r1, lr
 8000f4e:	fa01 f707 	lsl.w	r7, r1, r7
 8000f52:	fa22 f306 	lsr.w	r3, r2, r6
 8000f56:	40f1      	lsrs	r1, r6
 8000f58:	431f      	orrs	r7, r3
 8000f5a:	e9c5 7100 	strd	r7, r1, [r5]
 8000f5e:	2600      	movs	r6, #0
 8000f60:	4631      	mov	r1, r6
 8000f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f66:	f1c2 0320 	rsb	r3, r2, #32
 8000f6a:	40d8      	lsrs	r0, r3
 8000f6c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f70:	fa21 f303 	lsr.w	r3, r1, r3
 8000f74:	4091      	lsls	r1, r2
 8000f76:	4301      	orrs	r1, r0
 8000f78:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f7c:	fa1f fe8c 	uxth.w	lr, ip
 8000f80:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f84:	fb07 3610 	mls	r6, r7, r0, r3
 8000f88:	0c0b      	lsrs	r3, r1, #16
 8000f8a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f8e:	fb00 f60e 	mul.w	r6, r0, lr
 8000f92:	429e      	cmp	r6, r3
 8000f94:	fa04 f402 	lsl.w	r4, r4, r2
 8000f98:	d908      	bls.n	8000fac <__udivmoddi4+0x260>
 8000f9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f9e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fa2:	d22f      	bcs.n	8001004 <__udivmoddi4+0x2b8>
 8000fa4:	429e      	cmp	r6, r3
 8000fa6:	d92d      	bls.n	8001004 <__udivmoddi4+0x2b8>
 8000fa8:	3802      	subs	r0, #2
 8000faa:	4463      	add	r3, ip
 8000fac:	1b9b      	subs	r3, r3, r6
 8000fae:	b289      	uxth	r1, r1
 8000fb0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fb4:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fbc:	fb06 f30e 	mul.w	r3, r6, lr
 8000fc0:	428b      	cmp	r3, r1
 8000fc2:	d908      	bls.n	8000fd6 <__udivmoddi4+0x28a>
 8000fc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fcc:	d216      	bcs.n	8000ffc <__udivmoddi4+0x2b0>
 8000fce:	428b      	cmp	r3, r1
 8000fd0:	d914      	bls.n	8000ffc <__udivmoddi4+0x2b0>
 8000fd2:	3e02      	subs	r6, #2
 8000fd4:	4461      	add	r1, ip
 8000fd6:	1ac9      	subs	r1, r1, r3
 8000fd8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fdc:	e738      	b.n	8000e50 <__udivmoddi4+0x104>
 8000fde:	462e      	mov	r6, r5
 8000fe0:	4628      	mov	r0, r5
 8000fe2:	e705      	b.n	8000df0 <__udivmoddi4+0xa4>
 8000fe4:	4606      	mov	r6, r0
 8000fe6:	e6e3      	b.n	8000db0 <__udivmoddi4+0x64>
 8000fe8:	4618      	mov	r0, r3
 8000fea:	e6f8      	b.n	8000dde <__udivmoddi4+0x92>
 8000fec:	454b      	cmp	r3, r9
 8000fee:	d2a9      	bcs.n	8000f44 <__udivmoddi4+0x1f8>
 8000ff0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ff4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff8:	3801      	subs	r0, #1
 8000ffa:	e7a3      	b.n	8000f44 <__udivmoddi4+0x1f8>
 8000ffc:	4646      	mov	r6, r8
 8000ffe:	e7ea      	b.n	8000fd6 <__udivmoddi4+0x28a>
 8001000:	4620      	mov	r0, r4
 8001002:	e794      	b.n	8000f2e <__udivmoddi4+0x1e2>
 8001004:	4640      	mov	r0, r8
 8001006:	e7d1      	b.n	8000fac <__udivmoddi4+0x260>
 8001008:	46d0      	mov	r8, sl
 800100a:	e77b      	b.n	8000f04 <__udivmoddi4+0x1b8>
 800100c:	3b02      	subs	r3, #2
 800100e:	4461      	add	r1, ip
 8001010:	e732      	b.n	8000e78 <__udivmoddi4+0x12c>
 8001012:	4630      	mov	r0, r6
 8001014:	e709      	b.n	8000e2a <__udivmoddi4+0xde>
 8001016:	4464      	add	r4, ip
 8001018:	3802      	subs	r0, #2
 800101a:	e742      	b.n	8000ea2 <__udivmoddi4+0x156>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <mg_millis>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint64_t mg_millis(void) {
 8001020:	b5b0      	push	{r4, r5, r7, lr}
 8001022:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8001024:	f00e fc82 	bl	800f92c <HAL_GetTick>
 8001028:	4603      	mov	r3, r0
 800102a:	2200      	movs	r2, #0
 800102c:	461c      	mov	r4, r3
 800102e:	4615      	mov	r5, r2
 8001030:	4622      	mov	r2, r4
 8001032:	462b      	mov	r3, r5
}
 8001034:	4610      	mov	r0, r2
 8001036:	4619      	mov	r1, r3
 8001038:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800103c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800103c:	b5b0      	push	{r4, r5, r7, lr}
 800103e:	b096      	sub	sp, #88	; 0x58
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001042:	f00e fc52 	bl	800f8ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001046:	f000 f833 	bl	80010b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800104a:	f000 f91b 	bl	8001284 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800104e:	f000 f8e9 	bl	8001224 <MX_USART3_UART_Init>
  MX_ETH_Init();
 8001052:	f000 f899 	bl	8001188 <MX_ETH_Init>
  /* USER CODE BEGIN 2 */
  struct mg_mgr mgr;
  mg_mgr_init(&mgr);
 8001056:	f107 0318 	add.w	r3, r7, #24
 800105a:	4618      	mov	r0, r3
 800105c:	f007 fb08 	bl	8008670 <mg_mgr_init>
//  uint8_t GroupID = 0;
//  uint8_t DeviceID = 0;
//
//  my_add[3] = GroupID*10 + DeviceID;

  struct mip_cfg c = {.mac = {0, 0, 1, 2, 3, 4},
 8001060:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <main+0x64>)
 8001062:	1d3c      	adds	r4, r7, #4
 8001064:	461d      	mov	r5, r3
 8001066:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001068:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800106a:	682b      	ldr	r3, [r5, #0]
 800106c:	6023      	str	r3, [r4, #0]
		  .ip = 0,
		  .mask = 0,
		  .gw = 0};
  struct mip_driver_stm32 driver_data = {.mdc_cr = 4};  // See driver_stm32.h
 800106e:	2304      	movs	r3, #4
 8001070:	603b      	str	r3, [r7, #0]

  mip_init(&mgr, &c, &mip_driver_stm32, &driver_data);
 8001072:	463b      	mov	r3, r7
 8001074:	1d39      	adds	r1, r7, #4
 8001076:	f107 0018 	add.w	r0, r7, #24
 800107a:	4a0a      	ldr	r2, [pc, #40]	; (80010a4 <main+0x68>)
 800107c:	f00d f934 	bl	800e2e8 <mip_init>

  extern void device_dashboard_fn(struct mg_connection *c, int ev, void *ev_data,
                                  void *fn_data);
  mg_http_listen(&mgr, "http://0.0.0.0", device_dashboard_fn, &mgr);
 8001080:	f107 0318 	add.w	r3, r7, #24
 8001084:	f107 0018 	add.w	r0, r7, #24
 8001088:	4a07      	ldr	r2, [pc, #28]	; (80010a8 <main+0x6c>)
 800108a:	4908      	ldr	r1, [pc, #32]	; (80010ac <main+0x70>)
 800108c:	f005 f8c2 	bl	8006214 <mg_http_listen>

//  mg_http_listen(&mgr, "http://0.0.0.0", fn, &mgr);

  for (;;) mg_mgr_poll(&mgr, 100);
 8001090:	f107 0318 	add.w	r3, r7, #24
 8001094:	2164      	movs	r1, #100	; 0x64
 8001096:	4618      	mov	r0, r3
 8001098:	f00d fad5 	bl	800e646 <mg_mgr_poll>
 800109c:	e7f8      	b.n	8001090 <main+0x54>
 800109e:	bf00      	nop
 80010a0:	08013b10 	.word	0x08013b10
 80010a4:	20000240 	.word	0x20000240
 80010a8:	0800ecd9 	.word	0x0800ecd9
 80010ac:	08013b00 	.word	0x08013b00

080010b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b094      	sub	sp, #80	; 0x50
 80010b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b6:	f107 0320 	add.w	r3, r7, #32
 80010ba:	2230      	movs	r2, #48	; 0x30
 80010bc:	2100      	movs	r1, #0
 80010be:	4618      	mov	r0, r3
 80010c0:	f011 fb62 	bl	8012788 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c4:	f107 030c 	add.w	r3, r7, #12
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d4:	4b2a      	ldr	r3, [pc, #168]	; (8001180 <SystemClock_Config+0xd0>)
 80010d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d8:	4a29      	ldr	r2, [pc, #164]	; (8001180 <SystemClock_Config+0xd0>)
 80010da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010de:	6413      	str	r3, [r2, #64]	; 0x40
 80010e0:	4b27      	ldr	r3, [pc, #156]	; (8001180 <SystemClock_Config+0xd0>)
 80010e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ec:	4b25      	ldr	r3, [pc, #148]	; (8001184 <SystemClock_Config+0xd4>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a24      	ldr	r2, [pc, #144]	; (8001184 <SystemClock_Config+0xd4>)
 80010f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010f6:	6013      	str	r3, [r2, #0]
 80010f8:	4b22      	ldr	r3, [pc, #136]	; (8001184 <SystemClock_Config+0xd4>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001104:	2302      	movs	r3, #2
 8001106:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001108:	2301      	movs	r3, #1
 800110a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800110c:	2310      	movs	r3, #16
 800110e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001110:	2302      	movs	r3, #2
 8001112:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001114:	2300      	movs	r3, #0
 8001116:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001118:	2308      	movs	r3, #8
 800111a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 800111c:	23d8      	movs	r3, #216	; 0xd8
 800111e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001120:	2302      	movs	r3, #2
 8001122:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001124:	2302      	movs	r3, #2
 8001126:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001128:	f107 0320 	add.w	r3, r7, #32
 800112c:	4618      	mov	r0, r3
 800112e:	f00f fa4b 	bl	80105c8 <HAL_RCC_OscConfig>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001138:	f000 f918 	bl	800136c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800113c:	f00f f9f4 	bl	8010528 <HAL_PWREx_EnableOverDrive>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001146:	f000 f911 	bl	800136c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800114a:	230f      	movs	r3, #15
 800114c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800114e:	2302      	movs	r3, #2
 8001150:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001156:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800115a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800115c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001160:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001162:	f107 030c 	add.w	r3, r7, #12
 8001166:	2107      	movs	r1, #7
 8001168:	4618      	mov	r0, r3
 800116a:	f00f fcd1 	bl	8010b10 <HAL_RCC_ClockConfig>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001174:	f000 f8fa 	bl	800136c <Error_Handler>
  }
}
 8001178:	bf00      	nop
 800117a:	3750      	adds	r7, #80	; 0x50
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40023800 	.word	0x40023800
 8001184:	40007000 	.word	0x40007000

08001188 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800118c:	4b1f      	ldr	r3, [pc, #124]	; (800120c <MX_ETH_Init+0x84>)
 800118e:	4a20      	ldr	r2, [pc, #128]	; (8001210 <MX_ETH_Init+0x88>)
 8001190:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001192:	4b20      	ldr	r3, [pc, #128]	; (8001214 <MX_ETH_Init+0x8c>)
 8001194:	2200      	movs	r2, #0
 8001196:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001198:	4b1e      	ldr	r3, [pc, #120]	; (8001214 <MX_ETH_Init+0x8c>)
 800119a:	2280      	movs	r2, #128	; 0x80
 800119c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800119e:	4b1d      	ldr	r3, [pc, #116]	; (8001214 <MX_ETH_Init+0x8c>)
 80011a0:	22e1      	movs	r2, #225	; 0xe1
 80011a2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80011a4:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <MX_ETH_Init+0x8c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80011aa:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <MX_ETH_Init+0x8c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80011b0:	4b18      	ldr	r3, [pc, #96]	; (8001214 <MX_ETH_Init+0x8c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <MX_ETH_Init+0x84>)
 80011b8:	4a16      	ldr	r2, [pc, #88]	; (8001214 <MX_ETH_Init+0x8c>)
 80011ba:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80011bc:	4b13      	ldr	r3, [pc, #76]	; (800120c <MX_ETH_Init+0x84>)
 80011be:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80011c2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80011c4:	4b11      	ldr	r3, [pc, #68]	; (800120c <MX_ETH_Init+0x84>)
 80011c6:	4a14      	ldr	r2, [pc, #80]	; (8001218 <MX_ETH_Init+0x90>)
 80011c8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <MX_ETH_Init+0x84>)
 80011cc:	4a13      	ldr	r2, [pc, #76]	; (800121c <MX_ETH_Init+0x94>)
 80011ce:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80011d0:	4b0e      	ldr	r3, [pc, #56]	; (800120c <MX_ETH_Init+0x84>)
 80011d2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80011d6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80011d8:	480c      	ldr	r0, [pc, #48]	; (800120c <MX_ETH_Init+0x84>)
 80011da:	f00e fcb9 	bl	800fb50 <HAL_ETH_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80011e4:	f000 f8c2 	bl	800136c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80011e8:	2238      	movs	r2, #56	; 0x38
 80011ea:	2100      	movs	r1, #0
 80011ec:	480c      	ldr	r0, [pc, #48]	; (8001220 <MX_ETH_Init+0x98>)
 80011ee:	f011 facb 	bl	8012788 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <MX_ETH_Init+0x98>)
 80011f4:	2221      	movs	r2, #33	; 0x21
 80011f6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80011f8:	4b09      	ldr	r3, [pc, #36]	; (8001220 <MX_ETH_Init+0x98>)
 80011fa:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80011fe:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001200:	4b07      	ldr	r3, [pc, #28]	; (8001220 <MX_ETH_Init+0x98>)
 8001202:	2200      	movs	r2, #0
 8001204:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	2000048c 	.word	0x2000048c
 8001210:	40028000 	.word	0x40028000
 8001214:	200005c4 	.word	0x200005c4
 8001218:	20000394 	.word	0x20000394
 800121c:	200002f4 	.word	0x200002f4
 8001220:	20000454 	.word	0x20000454

08001224 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001228:	4b14      	ldr	r3, [pc, #80]	; (800127c <MX_USART3_UART_Init+0x58>)
 800122a:	4a15      	ldr	r2, [pc, #84]	; (8001280 <MX_USART3_UART_Init+0x5c>)
 800122c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800122e:	4b13      	ldr	r3, [pc, #76]	; (800127c <MX_USART3_UART_Init+0x58>)
 8001230:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001234:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <MX_USART3_UART_Init+0x58>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800123c:	4b0f      	ldr	r3, [pc, #60]	; (800127c <MX_USART3_UART_Init+0x58>)
 800123e:	2200      	movs	r2, #0
 8001240:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <MX_USART3_UART_Init+0x58>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001248:	4b0c      	ldr	r3, [pc, #48]	; (800127c <MX_USART3_UART_Init+0x58>)
 800124a:	220c      	movs	r2, #12
 800124c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800124e:	4b0b      	ldr	r3, [pc, #44]	; (800127c <MX_USART3_UART_Init+0x58>)
 8001250:	2200      	movs	r2, #0
 8001252:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001254:	4b09      	ldr	r3, [pc, #36]	; (800127c <MX_USART3_UART_Init+0x58>)
 8001256:	2200      	movs	r2, #0
 8001258:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800125a:	4b08      	ldr	r3, [pc, #32]	; (800127c <MX_USART3_UART_Init+0x58>)
 800125c:	2200      	movs	r2, #0
 800125e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <MX_USART3_UART_Init+0x58>)
 8001262:	2200      	movs	r2, #0
 8001264:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001266:	4805      	ldr	r0, [pc, #20]	; (800127c <MX_USART3_UART_Init+0x58>)
 8001268:	f010 fd3a 	bl	8011ce0 <HAL_UART_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001272:	f000 f87b 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	2000053c 	.word	0x2000053c
 8001280:	40004800 	.word	0x40004800

08001284 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08a      	sub	sp, #40	; 0x28
 8001288:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128a:	f107 0314 	add.w	r3, r7, #20
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
 8001298:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800129a:	4b29      	ldr	r3, [pc, #164]	; (8001340 <MX_GPIO_Init+0xbc>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a28      	ldr	r2, [pc, #160]	; (8001340 <MX_GPIO_Init+0xbc>)
 80012a0:	f043 0304 	orr.w	r3, r3, #4
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b26      	ldr	r3, [pc, #152]	; (8001340 <MX_GPIO_Init+0xbc>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0304 	and.w	r3, r3, #4
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b2:	4b23      	ldr	r3, [pc, #140]	; (8001340 <MX_GPIO_Init+0xbc>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a22      	ldr	r2, [pc, #136]	; (8001340 <MX_GPIO_Init+0xbc>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b20      	ldr	r3, [pc, #128]	; (8001340 <MX_GPIO_Init+0xbc>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ca:	4b1d      	ldr	r3, [pc, #116]	; (8001340 <MX_GPIO_Init+0xbc>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a1c      	ldr	r2, [pc, #112]	; (8001340 <MX_GPIO_Init+0xbc>)
 80012d0:	f043 0302 	orr.w	r3, r3, #2
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b1a      	ldr	r3, [pc, #104]	; (8001340 <MX_GPIO_Init+0xbc>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	60bb      	str	r3, [r7, #8]
 80012e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e2:	4b17      	ldr	r3, [pc, #92]	; (8001340 <MX_GPIO_Init+0xbc>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4a16      	ldr	r2, [pc, #88]	; (8001340 <MX_GPIO_Init+0xbc>)
 80012e8:	f043 0308 	orr.w	r3, r3, #8
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4b14      	ldr	r3, [pc, #80]	; (8001340 <MX_GPIO_Init+0xbc>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f003 0308 	and.w	r3, r3, #8
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012fa:	4b11      	ldr	r3, [pc, #68]	; (8001340 <MX_GPIO_Init+0xbc>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a10      	ldr	r2, [pc, #64]	; (8001340 <MX_GPIO_Init+0xbc>)
 8001300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <MX_GPIO_Init+0xbc>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800130e:	603b      	str	r3, [r7, #0]
 8001310:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin, GPIO_PIN_RESET);
 8001312:	2200      	movs	r2, #0
 8001314:	2180      	movs	r1, #128	; 0x80
 8001316:	480b      	ldr	r0, [pc, #44]	; (8001344 <MX_GPIO_Init+0xc0>)
 8001318:	f00f f8ec 	bl	80104f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_LED_Pin;
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001320:	2301      	movs	r3, #1
 8001322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001328:	2300      	movs	r3, #0
 800132a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	4619      	mov	r1, r3
 8001332:	4804      	ldr	r0, [pc, #16]	; (8001344 <MX_GPIO_Init+0xc0>)
 8001334:	f00e ff32 	bl	801019c <HAL_GPIO_Init>

}
 8001338:	bf00      	nop
 800133a:	3728      	adds	r7, #40	; 0x28
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40023800 	.word	0x40023800
 8001344:	40020400 	.word	0x40020400

08001348 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a04      	ldr	r2, [pc, #16]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d101      	bne.n	800135e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800135a:	f00e fad3 	bl	800f904 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40001000 	.word	0x40001000

0800136c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001370:	b672      	cpsid	i
}
 8001372:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001374:	e7fe      	b.n	8001374 <Error_Handler+0x8>

08001376 <mg_b64idx>:
#line 1 "src/base64.c"
#endif



static int mg_b64idx(int c) {
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
  if (c < 26) {
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2b19      	cmp	r3, #25
 8001382:	dc02      	bgt.n	800138a <mg_b64idx+0x14>
    return c + 'A';
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3341      	adds	r3, #65	; 0x41
 8001388:	e011      	b.n	80013ae <mg_b64idx+0x38>
  } else if (c < 52) {
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2b33      	cmp	r3, #51	; 0x33
 800138e:	dc02      	bgt.n	8001396 <mg_b64idx+0x20>
    return c - 26 + 'a';
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3347      	adds	r3, #71	; 0x47
 8001394:	e00b      	b.n	80013ae <mg_b64idx+0x38>
  } else if (c < 62) {
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b3d      	cmp	r3, #61	; 0x3d
 800139a:	dc02      	bgt.n	80013a2 <mg_b64idx+0x2c>
    return c - 52 + '0';
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3b04      	subs	r3, #4
 80013a0:	e005      	b.n	80013ae <mg_b64idx+0x38>
  } else {
    return c == 62 ? '+' : '/';
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2b3e      	cmp	r3, #62	; 0x3e
 80013a6:	d101      	bne.n	80013ac <mg_b64idx+0x36>
 80013a8:	232b      	movs	r3, #43	; 0x2b
 80013aa:	e000      	b.n	80013ae <mg_b64idx+0x38>
 80013ac:	232f      	movs	r3, #47	; 0x2f
  }
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <mg_b64rev>:

static int mg_b64rev(int c) {
 80013ba:	b480      	push	{r7}
 80013bc:	b083      	sub	sp, #12
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
  if (c >= 'A' && c <= 'Z') {
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b40      	cmp	r3, #64	; 0x40
 80013c6:	dd05      	ble.n	80013d4 <mg_b64rev+0x1a>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b5a      	cmp	r3, #90	; 0x5a
 80013cc:	dc02      	bgt.n	80013d4 <mg_b64rev+0x1a>
    return c - 'A';
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	3b41      	subs	r3, #65	; 0x41
 80013d2:	e022      	b.n	800141a <mg_b64rev+0x60>
  } else if (c >= 'a' && c <= 'z') {
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b60      	cmp	r3, #96	; 0x60
 80013d8:	dd05      	ble.n	80013e6 <mg_b64rev+0x2c>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2b7a      	cmp	r3, #122	; 0x7a
 80013de:	dc02      	bgt.n	80013e6 <mg_b64rev+0x2c>
    return c + 26 - 'a';
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3b47      	subs	r3, #71	; 0x47
 80013e4:	e019      	b.n	800141a <mg_b64rev+0x60>
  } else if (c >= '0' && c <= '9') {
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2b2f      	cmp	r3, #47	; 0x2f
 80013ea:	dd05      	ble.n	80013f8 <mg_b64rev+0x3e>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b39      	cmp	r3, #57	; 0x39
 80013f0:	dc02      	bgt.n	80013f8 <mg_b64rev+0x3e>
    return c + 52 - '0';
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	3304      	adds	r3, #4
 80013f6:	e010      	b.n	800141a <mg_b64rev+0x60>
  } else if (c == '+') {
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b2b      	cmp	r3, #43	; 0x2b
 80013fc:	d101      	bne.n	8001402 <mg_b64rev+0x48>
    return 62;
 80013fe:	233e      	movs	r3, #62	; 0x3e
 8001400:	e00b      	b.n	800141a <mg_b64rev+0x60>
  } else if (c == '/') {
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b2f      	cmp	r3, #47	; 0x2f
 8001406:	d101      	bne.n	800140c <mg_b64rev+0x52>
    return 63;
 8001408:	233f      	movs	r3, #63	; 0x3f
 800140a:	e006      	b.n	800141a <mg_b64rev+0x60>
  } else if (c == '=') {
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b3d      	cmp	r3, #61	; 0x3d
 8001410:	d101      	bne.n	8001416 <mg_b64rev+0x5c>
    return 64;
 8001412:	2340      	movs	r3, #64	; 0x40
 8001414:	e001      	b.n	800141a <mg_b64rev+0x60>
  } else {
    return -1;
 8001416:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 800141a:	4618      	mov	r0, r3
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
	...

08001428 <mg_base64_update>:

int mg_base64_update(unsigned char ch, char *to, int n) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
 8001434:	73fb      	strb	r3, [r7, #15]
  int rem = (n & 3) % 3;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f003 0203 	and.w	r2, r3, #3
 800143c:	4b39      	ldr	r3, [pc, #228]	; (8001524 <mg_base64_update+0xfc>)
 800143e:	fb83 3102 	smull	r3, r1, r3, r2
 8001442:	17d3      	asrs	r3, r2, #31
 8001444:	1ac9      	subs	r1, r1, r3
 8001446:	460b      	mov	r3, r1
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	440b      	add	r3, r1
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	617b      	str	r3, [r7, #20]
  if (rem == 0) {
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d119      	bne.n	800148a <mg_base64_update+0x62>
    to[n] = (char) mg_b64idx(ch >> 2);
 8001456:	7bfb      	ldrb	r3, [r7, #15]
 8001458:	089b      	lsrs	r3, r3, #2
 800145a:	b2db      	uxtb	r3, r3
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff8a 	bl	8001376 <mg_b64idx>
 8001462:	4601      	mov	r1, r0
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	68ba      	ldr	r2, [r7, #8]
 8001468:	4413      	add	r3, r2
 800146a:	b2ca      	uxtb	r2, r1
 800146c:	701a      	strb	r2, [r3, #0]
    to[++n] = (char) ((ch & 3) << 4);
 800146e:	7bfb      	ldrb	r3, [r7, #15]
 8001470:	011b      	lsls	r3, r3, #4
 8001472:	b2da      	uxtb	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3301      	adds	r3, #1
 8001478:	607b      	str	r3, [r7, #4]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	68b9      	ldr	r1, [r7, #8]
 800147e:	440b      	add	r3, r1
 8001480:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8001484:	b2d2      	uxtb	r2, r2
 8001486:	701a      	strb	r2, [r3, #0]
 8001488:	e046      	b.n	8001518 <mg_base64_update+0xf0>
  } else if (rem == 1) {
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d11f      	bne.n	80014d0 <mg_base64_update+0xa8>
    to[n] = (char) mg_b64idx(to[n] | (ch >> 4));
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	4413      	add	r3, r2
 8001496:	781a      	ldrb	r2, [r3, #0]
 8001498:	7bfb      	ldrb	r3, [r7, #15]
 800149a:	091b      	lsrs	r3, r3, #4
 800149c:	b2db      	uxtb	r3, r3
 800149e:	4313      	orrs	r3, r2
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff ff67 	bl	8001376 <mg_b64idx>
 80014a8:	4601      	mov	r1, r0
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	68ba      	ldr	r2, [r7, #8]
 80014ae:	4413      	add	r3, r2
 80014b0:	b2ca      	uxtb	r2, r1
 80014b2:	701a      	strb	r2, [r3, #0]
    to[++n] = (char) ((ch & 15) << 2);
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	3301      	adds	r3, #1
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68b9      	ldr	r1, [r7, #8]
 80014c4:	440b      	add	r3, r1
 80014c6:	f002 023c 	and.w	r2, r2, #60	; 0x3c
 80014ca:	b2d2      	uxtb	r2, r2
 80014cc:	701a      	strb	r2, [r3, #0]
 80014ce:	e023      	b.n	8001518 <mg_base64_update+0xf0>
  } else {
    to[n] = (char) mg_b64idx(to[n] | (ch >> 6));
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68ba      	ldr	r2, [r7, #8]
 80014d4:	4413      	add	r3, r2
 80014d6:	781a      	ldrb	r2, [r3, #0]
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	099b      	lsrs	r3, r3, #6
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	4313      	orrs	r3, r2
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff ff47 	bl	8001376 <mg_b64idx>
 80014e8:	4601      	mov	r1, r0
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	68ba      	ldr	r2, [r7, #8]
 80014ee:	4413      	add	r3, r2
 80014f0:	b2ca      	uxtb	r2, r1
 80014f2:	701a      	strb	r2, [r3, #0]
    to[++n] = (char) mg_b64idx(ch & 63);
 80014f4:	7bfb      	ldrb	r3, [r7, #15]
 80014f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff ff3b 	bl	8001376 <mg_b64idx>
 8001500:	4601      	mov	r1, r0
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	3301      	adds	r3, #1
 8001506:	607b      	str	r3, [r7, #4]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	4413      	add	r3, r2
 800150e:	b2ca      	uxtb	r2, r1
 8001510:	701a      	strb	r2, [r3, #0]
    n++;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	3301      	adds	r3, #1
 8001516:	607b      	str	r3, [r7, #4]
  }
  return n;
 8001518:	687b      	ldr	r3, [r7, #4]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	55555556 	.word	0x55555556

08001528 <mg_base64_final>:

int mg_base64_final(char *to, int n) {
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  int saved = n;
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	60fb      	str	r3, [r7, #12]
  // printf("---[%.*s]\n", n, to);
  if (n & 3) n = mg_base64_update(0, to, n);
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	f003 0303 	and.w	r3, r3, #3
 800153c:	2b00      	cmp	r3, #0
 800153e:	d005      	beq.n	800154c <mg_base64_final+0x24>
 8001540:	683a      	ldr	r2, [r7, #0]
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	2000      	movs	r0, #0
 8001546:	f7ff ff6f 	bl	8001428 <mg_base64_update>
 800154a:	6038      	str	r0, [r7, #0]
  if ((saved & 3) == 2) n--;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f003 0303 	and.w	r3, r3, #3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d10b      	bne.n	800156e <mg_base64_final+0x46>
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	3b01      	subs	r3, #1
 800155a:	603b      	str	r3, [r7, #0]
  // printf("    %d[%.*s]\n", n, n, to);
  while (n & 3) to[n++] = '=';
 800155c:	e007      	b.n	800156e <mg_base64_final+0x46>
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	1c5a      	adds	r2, r3, #1
 8001562:	603a      	str	r2, [r7, #0]
 8001564:	461a      	mov	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4413      	add	r3, r2
 800156a:	223d      	movs	r2, #61	; 0x3d
 800156c:	701a      	strb	r2, [r3, #0]
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	f003 0303 	and.w	r3, r3, #3
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1f2      	bne.n	800155e <mg_base64_final+0x36>
  to[n] = '\0';
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	4413      	add	r3, r2
 800157e:	2200      	movs	r2, #0
 8001580:	701a      	strb	r2, [r3, #0]
  return n;
 8001582:	683b      	ldr	r3, [r7, #0]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <mg_base64_encode>:

int mg_base64_encode(const unsigned char *p, int n, char *to) {
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
  int i, len = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	613b      	str	r3, [r7, #16]
  for (i = 0; i < n; i++) len = mg_base64_update(p[i], to, len);
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
 80015a0:	e00c      	b.n	80015bc <mg_base64_encode+0x30>
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	68fa      	ldr	r2, [r7, #12]
 80015a6:	4413      	add	r3, r2
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	6879      	ldr	r1, [r7, #4]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff ff3a 	bl	8001428 <mg_base64_update>
 80015b4:	6138      	str	r0, [r7, #16]
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	3301      	adds	r3, #1
 80015ba:	617b      	str	r3, [r7, #20]
 80015bc:	697a      	ldr	r2, [r7, #20]
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	dbee      	blt.n	80015a2 <mg_base64_encode+0x16>
  len = mg_base64_final(to, len);
 80015c4:	6939      	ldr	r1, [r7, #16]
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff ffae 	bl	8001528 <mg_base64_final>
 80015cc:	6138      	str	r0, [r7, #16]
  return len;
 80015ce:	693b      	ldr	r3, [r7, #16]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3718      	adds	r7, #24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <mg_base64_decode>:

int mg_base64_decode(const char *src, int n, char *dst) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	; 0x28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
  const char *end = src == NULL ? NULL : src + n;  // Cannot add to NULL
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <mg_base64_decode+0x1a>
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	68fa      	ldr	r2, [r7, #12]
 80015ee:	4413      	add	r3, r2
 80015f0:	e000      	b.n	80015f4 <mg_base64_decode+0x1c>
 80015f2:	2300      	movs	r3, #0
 80015f4:	623b      	str	r3, [r7, #32]
  int len = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
  while (src != NULL && src + 3 < end) {
 80015fa:	e06a      	b.n	80016d2 <mg_base64_decode+0xfa>
    int a = mg_b64rev(src[0]), b = mg_b64rev(src[1]), c = mg_b64rev(src[2]),
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff feda 	bl	80013ba <mg_b64rev>
 8001606:	61f8      	str	r0, [r7, #28]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	3301      	adds	r3, #1
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fed3 	bl	80013ba <mg_b64rev>
 8001614:	61b8      	str	r0, [r7, #24]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	3302      	adds	r3, #2
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fecc 	bl	80013ba <mg_b64rev>
 8001622:	6178      	str	r0, [r7, #20]
        d = mg_b64rev(src[3]);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	3303      	adds	r3, #3
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff fec5 	bl	80013ba <mg_b64rev>
 8001630:	6138      	str	r0, [r7, #16]
    if (a == 64 || a < 0 || b == 64 || b < 0 || c < 0 || d < 0) return 0;
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	2b40      	cmp	r3, #64	; 0x40
 8001636:	d00e      	beq.n	8001656 <mg_base64_decode+0x7e>
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	2b00      	cmp	r3, #0
 800163c:	db0b      	blt.n	8001656 <mg_base64_decode+0x7e>
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	2b40      	cmp	r3, #64	; 0x40
 8001642:	d008      	beq.n	8001656 <mg_base64_decode+0x7e>
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	2b00      	cmp	r3, #0
 8001648:	db05      	blt.n	8001656 <mg_base64_decode+0x7e>
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	2b00      	cmp	r3, #0
 800164e:	db02      	blt.n	8001656 <mg_base64_decode+0x7e>
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	2b00      	cmp	r3, #0
 8001654:	da01      	bge.n	800165a <mg_base64_decode+0x82>
 8001656:	2300      	movs	r3, #0
 8001658:	e049      	b.n	80016ee <mg_base64_decode+0x116>
    dst[len++] = (char) ((a << 2) | (b >> 4));
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	b25a      	sxtb	r2, r3
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	111b      	asrs	r3, r3, #4
 8001664:	b25b      	sxtb	r3, r3
 8001666:	4313      	orrs	r3, r2
 8001668:	b259      	sxtb	r1, r3
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	1c5a      	adds	r2, r3, #1
 800166e:	627a      	str	r2, [r7, #36]	; 0x24
 8001670:	461a      	mov	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4413      	add	r3, r2
 8001676:	b2ca      	uxtb	r2, r1
 8001678:	701a      	strb	r2, [r3, #0]
    if (src[2] != '=') {
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	3302      	adds	r3, #2
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b3d      	cmp	r3, #61	; 0x3d
 8001682:	d023      	beq.n	80016cc <mg_base64_decode+0xf4>
      dst[len++] = (char) ((b << 4) | (c >> 2));
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	011b      	lsls	r3, r3, #4
 8001688:	b25a      	sxtb	r2, r3
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	109b      	asrs	r3, r3, #2
 800168e:	b25b      	sxtb	r3, r3
 8001690:	4313      	orrs	r3, r2
 8001692:	b259      	sxtb	r1, r3
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	627a      	str	r2, [r7, #36]	; 0x24
 800169a:	461a      	mov	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4413      	add	r3, r2
 80016a0:	b2ca      	uxtb	r2, r1
 80016a2:	701a      	strb	r2, [r3, #0]
      if (src[3] != '=') dst[len++] = (char) ((c << 6) | d);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	3303      	adds	r3, #3
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b3d      	cmp	r3, #61	; 0x3d
 80016ac:	d00e      	beq.n	80016cc <mg_base64_decode+0xf4>
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	019b      	lsls	r3, r3, #6
 80016b2:	b25a      	sxtb	r2, r3
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	b25b      	sxtb	r3, r3
 80016b8:	4313      	orrs	r3, r2
 80016ba:	b259      	sxtb	r1, r3
 80016bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016be:	1c5a      	adds	r2, r3, #1
 80016c0:	627a      	str	r2, [r7, #36]	; 0x24
 80016c2:	461a      	mov	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4413      	add	r3, r2
 80016c8:	b2ca      	uxtb	r2, r1
 80016ca:	701a      	strb	r2, [r3, #0]
    }
    src += 4;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	3304      	adds	r3, #4
 80016d0:	60fb      	str	r3, [r7, #12]
  while (src != NULL && src + 3 < end) {
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d004      	beq.n	80016e2 <mg_base64_decode+0x10a>
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	3303      	adds	r3, #3
 80016dc:	6a3a      	ldr	r2, [r7, #32]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d88c      	bhi.n	80015fc <mg_base64_decode+0x24>
  }
  dst[len] = '\0';
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	4413      	add	r3, r2
 80016e8:	2200      	movs	r2, #0
 80016ea:	701a      	strb	r2, [r3, #0]
  return len;
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3728      	adds	r7, #40	; 0x28
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <mg_dns_free>:
};

static void mg_sendnsreq(struct mg_connection *, struct mg_str *, int,
                         struct mg_dns *, bool);

static void mg_dns_free(struct mg_connection *c, struct dns_data *d) {
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b084      	sub	sp, #16
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
 80016fe:	6039      	str	r1, [r7, #0]
  LIST_DELETE(struct dns_data,
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	332c      	adds	r3, #44	; 0x2c
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	e002      	b.n	8001710 <mg_dns_free+0x1a>
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	429a      	cmp	r2, r3
 8001718:	d1f7      	bne.n	800170a <mg_dns_free+0x14>
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	601a      	str	r2, [r3, #0]
              (struct dns_data **) &c->mgr->active_dns_requests, d);
  free(d);
 8001722:	6838      	ldr	r0, [r7, #0]
 8001724:	f010 fff0 	bl	8012708 <free>
}
 8001728:	bf00      	nop
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <mg_resolve_cancel>:

void mg_resolve_cancel(struct mg_connection *c) {
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  struct dns_data *tmp, *d = (struct dns_data *) c->mgr->active_dns_requests;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173e:	60fb      	str	r3, [r7, #12]
  for (; d != NULL; d = tmp) {
 8001740:	e00d      	b.n	800175e <mg_resolve_cancel+0x2e>
    tmp = d->next;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	60bb      	str	r3, [r7, #8]
    if (d->c == c) mg_dns_free(c, d);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	429a      	cmp	r2, r3
 8001750:	d103      	bne.n	800175a <mg_resolve_cancel+0x2a>
 8001752:	68f9      	ldr	r1, [r7, #12]
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff ffce 	bl	80016f6 <mg_dns_free>
  for (; d != NULL; d = tmp) {
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1ee      	bne.n	8001742 <mg_resolve_cancel+0x12>
  }
}
 8001764:	bf00      	nop
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <mg_dns_parse_name_depth>:

static size_t mg_dns_parse_name_depth(const uint8_t *s, size_t len, size_t ofs,
                                      char *to, size_t tolen, size_t j,
                                      int depth) {
 800176e:	b580      	push	{r7, lr}
 8001770:	b08c      	sub	sp, #48	; 0x30
 8001772:	af04      	add	r7, sp, #16
 8001774:	60f8      	str	r0, [r7, #12]
 8001776:	60b9      	str	r1, [r7, #8]
 8001778:	607a      	str	r2, [r7, #4]
 800177a:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	61fb      	str	r3, [r7, #28]
  if (tolen > 0 && depth == 0) to[0] = '\0';
 8001780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001782:	2b00      	cmp	r3, #0
 8001784:	d005      	beq.n	8001792 <mg_dns_parse_name_depth+0x24>
 8001786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001788:	2b00      	cmp	r3, #0
 800178a:	d102      	bne.n	8001792 <mg_dns_parse_name_depth+0x24>
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	2200      	movs	r2, #0
 8001790:	701a      	strb	r2, [r3, #0]
  if (depth > 5) return 0;
 8001792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001794:	2b05      	cmp	r3, #5
 8001796:	f340 8084 	ble.w	80018a2 <mg_dns_parse_name_depth+0x134>
 800179a:	2300      	movs	r3, #0
 800179c:	e093      	b.n	80018c6 <mg_dns_parse_name_depth+0x158>
  // MG_INFO(("ofs %lx %x %x", (unsigned long) ofs, s[ofs], s[ofs + 1]));
  while (ofs + i + 1 < len) {
    size_t n = s[ofs + i];
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	4413      	add	r3, r2
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	4413      	add	r3, r2
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	61bb      	str	r3, [r7, #24]
    if (n == 0) {
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d103      	bne.n	80017ba <mg_dns_parse_name_depth+0x4c>
      i++;
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	3301      	adds	r3, #1
 80017b6:	61fb      	str	r3, [r7, #28]
      break;
 80017b8:	e07b      	b.n	80018b2 <mg_dns_parse_name_depth+0x144>
    }
    if (n & 0xc0) {
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d02f      	beq.n	8001824 <mg_dns_parse_name_depth+0xb6>
      size_t ptr = (((n & 0x3f) << 8) | s[ofs + i + 1]);  // 12 is hdr len
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	021b      	lsls	r3, r3, #8
 80017c8:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80017cc:	6879      	ldr	r1, [r7, #4]
 80017ce:	69fa      	ldr	r2, [r7, #28]
 80017d0:	440a      	add	r2, r1
 80017d2:	3201      	adds	r2, #1
 80017d4:	68f9      	ldr	r1, [r7, #12]
 80017d6:	440a      	add	r2, r1
 80017d8:	7812      	ldrb	r2, [r2, #0]
 80017da:	4313      	orrs	r3, r2
 80017dc:	617b      	str	r3, [r7, #20]
      // MG_INFO(("PTR %lx", (unsigned long) ptr));
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	3301      	adds	r3, #1
 80017e2:	68ba      	ldr	r2, [r7, #8]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d919      	bls.n	800181c <mg_dns_parse_name_depth+0xae>
 80017e8:	68fa      	ldr	r2, [r7, #12]
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	4413      	add	r3, r2
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d111      	bne.n	800181c <mg_dns_parse_name_depth+0xae>
          mg_dns_parse_name_depth(s, len, ptr, to, tolen, j, depth + 1) == 0)
 80017f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017fa:	3301      	adds	r3, #1
 80017fc:	9302      	str	r3, [sp, #8]
 80017fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001800:	9301      	str	r3, [sp, #4]
 8001802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	697a      	ldr	r2, [r7, #20]
 800180a:	68b9      	ldr	r1, [r7, #8]
 800180c:	68f8      	ldr	r0, [r7, #12]
 800180e:	f7ff ffae 	bl	800176e <mg_dns_parse_name_depth>
 8001812:	4603      	mov	r3, r0
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 8001814:	2b00      	cmp	r3, #0
 8001816:	d101      	bne.n	800181c <mg_dns_parse_name_depth+0xae>
        return 0;
 8001818:	2300      	movs	r3, #0
 800181a:	e054      	b.n	80018c6 <mg_dns_parse_name_depth+0x158>
      i += 2;
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	3302      	adds	r3, #2
 8001820:	61fb      	str	r3, [r7, #28]
      break;
 8001822:	e046      	b.n	80018b2 <mg_dns_parse_name_depth+0x144>
    }
    if (ofs + i + n + 1 >= len) return 0;
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	441a      	add	r2, r3
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	4413      	add	r3, r2
 800182e:	3301      	adds	r3, #1
 8001830:	68ba      	ldr	r2, [r7, #8]
 8001832:	429a      	cmp	r2, r3
 8001834:	d801      	bhi.n	800183a <mg_dns_parse_name_depth+0xcc>
 8001836:	2300      	movs	r3, #0
 8001838:	e045      	b.n	80018c6 <mg_dns_parse_name_depth+0x158>
    if (j > 0) {
 800183a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183c:	2b00      	cmp	r3, #0
 800183e:	d00b      	beq.n	8001858 <mg_dns_parse_name_depth+0xea>
      if (j < tolen) to[j] = '.';
 8001840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001844:	429a      	cmp	r2, r3
 8001846:	d204      	bcs.n	8001852 <mg_dns_parse_name_depth+0xe4>
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800184c:	4413      	add	r3, r2
 800184e:	222e      	movs	r2, #46	; 0x2e
 8001850:	701a      	strb	r2, [r3, #0]
      j++;
 8001852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001854:	3301      	adds	r3, #1
 8001856:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    if (j + n < tolen) memcpy(&to[j], &s[ofs + i + 1], n);
 8001858:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	4413      	add	r3, r2
 800185e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001860:	429a      	cmp	r2, r3
 8001862:	d90c      	bls.n	800187e <mg_dns_parse_name_depth+0x110>
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001868:	18d0      	adds	r0, r2, r3
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	4413      	add	r3, r2
 8001870:	3301      	adds	r3, #1
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	4413      	add	r3, r2
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4619      	mov	r1, r3
 800187a:	f010 ff5d 	bl	8012738 <memcpy>
    j += n;
 800187e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	4413      	add	r3, r2
 8001884:	62fb      	str	r3, [r7, #44]	; 0x2c
    i += n + 1;
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	4413      	add	r3, r2
 800188c:	3301      	adds	r3, #1
 800188e:	61fb      	str	r3, [r7, #28]
    if (j < tolen) to[j] = '\0';  // Zero-terminate this chunk
 8001890:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001894:	429a      	cmp	r2, r3
 8001896:	d204      	bcs.n	80018a2 <mg_dns_parse_name_depth+0x134>
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800189c:	4413      	add	r3, r2
 800189e:	2200      	movs	r2, #0
 80018a0:	701a      	strb	r2, [r3, #0]
  while (ofs + i + 1 < len) {
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	4413      	add	r3, r2
 80018a8:	3301      	adds	r3, #1
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	f63f af76 	bhi.w	800179e <mg_dns_parse_name_depth+0x30>
    // MG_INFO(("--> [%s]", to));
  }
  if (tolen > 0) to[tolen - 1] = '\0';  // Make sure make sure it is nul-term
 80018b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d005      	beq.n	80018c4 <mg_dns_parse_name_depth+0x156>
 80018b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ba:	3b01      	subs	r3, #1
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	4413      	add	r3, r2
 80018c0:	2200      	movs	r2, #0
 80018c2:	701a      	strb	r2, [r3, #0]
  return i;
 80018c4:	69fb      	ldr	r3, [r7, #28]
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3720      	adds	r7, #32
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <mg_dns_parse_name>:

static size_t mg_dns_parse_name(const uint8_t *s, size_t n, size_t ofs,
                                char *dst, size_t dstlen) {
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b088      	sub	sp, #32
 80018d2:	af04      	add	r7, sp, #16
 80018d4:	60f8      	str	r0, [r7, #12]
 80018d6:	60b9      	str	r1, [r7, #8]
 80018d8:	607a      	str	r2, [r7, #4]
 80018da:	603b      	str	r3, [r7, #0]
  return mg_dns_parse_name_depth(s, n, ofs, dst, dstlen, 0, 0);
 80018dc:	2300      	movs	r3, #0
 80018de:	9302      	str	r3, [sp, #8]
 80018e0:	2300      	movs	r3, #0
 80018e2:	9301      	str	r3, [sp, #4]
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	68b9      	ldr	r1, [r7, #8]
 80018ee:	68f8      	ldr	r0, [r7, #12]
 80018f0:	f7ff ff3d 	bl	800176e <mg_dns_parse_name_depth>
 80018f4:	4603      	mov	r3, r0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <mg_dns_parse_rr>:

size_t mg_dns_parse_rr(const uint8_t *buf, size_t len, size_t ofs,
                       bool is_question, struct mg_dns_rr *rr) {
 80018fe:	b580      	push	{r7, lr}
 8001900:	b088      	sub	sp, #32
 8001902:	af02      	add	r7, sp, #8
 8001904:	60f8      	str	r0, [r7, #12]
 8001906:	60b9      	str	r1, [r7, #8]
 8001908:	607a      	str	r2, [r7, #4]
 800190a:	70fb      	strb	r3, [r7, #3]
  const uint8_t *s = buf + ofs, *e = &buf[len];
 800190c:	68fa      	ldr	r2, [r7, #12]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4413      	add	r3, r2
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	4413      	add	r3, r2
 800191a:	613b      	str	r3, [r7, #16]

  memset(rr, 0, sizeof(*rr));
 800191c:	2208      	movs	r2, #8
 800191e:	2100      	movs	r1, #0
 8001920:	6a38      	ldr	r0, [r7, #32]
 8001922:	f010 ff31 	bl	8012788 <memset>
  if (len < sizeof(struct mg_dns_header)) return 0;  // Too small
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	2b0b      	cmp	r3, #11
 800192a:	d801      	bhi.n	8001930 <mg_dns_parse_rr+0x32>
 800192c:	2300      	movs	r3, #0
 800192e:	e074      	b.n	8001a1a <mg_dns_parse_rr+0x11c>
  if (len > 512) return 0;  //  Too large, we don't expect that
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001936:	d901      	bls.n	800193c <mg_dns_parse_rr+0x3e>
 8001938:	2300      	movs	r3, #0
 800193a:	e06e      	b.n	8001a1a <mg_dns_parse_rr+0x11c>
  if (s >= e) return 0;     //  Overflow
 800193c:	697a      	ldr	r2, [r7, #20]
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	429a      	cmp	r2, r3
 8001942:	d301      	bcc.n	8001948 <mg_dns_parse_rr+0x4a>
 8001944:	2300      	movs	r3, #0
 8001946:	e068      	b.n	8001a1a <mg_dns_parse_rr+0x11c>

  if ((rr->nlen = (uint16_t) mg_dns_parse_name(buf, len, ofs, NULL, 0)) == 0)
 8001948:	2300      	movs	r3, #0
 800194a:	9300      	str	r3, [sp, #0]
 800194c:	2300      	movs	r3, #0
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	68b9      	ldr	r1, [r7, #8]
 8001952:	68f8      	ldr	r0, [r7, #12]
 8001954:	f7ff ffbb 	bl	80018ce <mg_dns_parse_name>
 8001958:	4603      	mov	r3, r0
 800195a:	b29a      	uxth	r2, r3
 800195c:	6a3b      	ldr	r3, [r7, #32]
 800195e:	801a      	strh	r2, [r3, #0]
 8001960:	6a3b      	ldr	r3, [r7, #32]
 8001962:	881b      	ldrh	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d101      	bne.n	800196c <mg_dns_parse_rr+0x6e>
    return 0;
 8001968:	2300      	movs	r3, #0
 800196a:	e056      	b.n	8001a1a <mg_dns_parse_rr+0x11c>
  s += rr->nlen + 4;
 800196c:	6a3b      	ldr	r3, [r7, #32]
 800196e:	881b      	ldrh	r3, [r3, #0]
 8001970:	3304      	adds	r3, #4
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	4413      	add	r3, r2
 8001976:	617b      	str	r3, [r7, #20]
  if (s > e) return 0;
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	429a      	cmp	r2, r3
 800197e:	d901      	bls.n	8001984 <mg_dns_parse_rr+0x86>
 8001980:	2300      	movs	r3, #0
 8001982:	e04a      	b.n	8001a1a <mg_dns_parse_rr+0x11c>
  rr->atype = (uint16_t) (((uint16_t) s[-4] << 8) | s[-3]);
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	3b04      	subs	r3, #4
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	021b      	lsls	r3, r3, #8
 800198c:	b21a      	sxth	r2, r3
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	3b03      	subs	r3, #3
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	b21b      	sxth	r3, r3
 8001996:	4313      	orrs	r3, r2
 8001998:	b21b      	sxth	r3, r3
 800199a:	b29a      	uxth	r2, r3
 800199c:	6a3b      	ldr	r3, [r7, #32]
 800199e:	805a      	strh	r2, [r3, #2]
  rr->aclass = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	3b02      	subs	r3, #2
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	021b      	lsls	r3, r3, #8
 80019a8:	b21a      	sxth	r2, r3
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	3b01      	subs	r3, #1
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	b21b      	sxth	r3, r3
 80019b2:	4313      	orrs	r3, r2
 80019b4:	b21b      	sxth	r3, r3
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	6a3b      	ldr	r3, [r7, #32]
 80019ba:	809a      	strh	r2, [r3, #4]
  if (is_question) return (size_t) (rr->nlen + 4);
 80019bc:	78fb      	ldrb	r3, [r7, #3]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <mg_dns_parse_rr+0xcc>
 80019c2:	6a3b      	ldr	r3, [r7, #32]
 80019c4:	881b      	ldrh	r3, [r3, #0]
 80019c6:	3304      	adds	r3, #4
 80019c8:	e027      	b.n	8001a1a <mg_dns_parse_rr+0x11c>

  s += 6;
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	3306      	adds	r3, #6
 80019ce:	617b      	str	r3, [r7, #20]
  if (s > e) return 0;
 80019d0:	697a      	ldr	r2, [r7, #20]
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d901      	bls.n	80019dc <mg_dns_parse_rr+0xde>
 80019d8:	2300      	movs	r3, #0
 80019da:	e01e      	b.n	8001a1a <mg_dns_parse_rr+0x11c>
  rr->alen = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	3b02      	subs	r3, #2
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	021b      	lsls	r3, r3, #8
 80019e4:	b21a      	sxth	r2, r3
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	3b01      	subs	r3, #1
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	b21b      	sxth	r3, r3
 80019ee:	4313      	orrs	r3, r2
 80019f0:	b21b      	sxth	r3, r3
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	6a3b      	ldr	r3, [r7, #32]
 80019f6:	80da      	strh	r2, [r3, #6]
  if (s + rr->alen > e) return 0;
 80019f8:	6a3b      	ldr	r3, [r7, #32]
 80019fa:	88db      	ldrh	r3, [r3, #6]
 80019fc:	461a      	mov	r2, r3
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	4413      	add	r3, r2
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d201      	bcs.n	8001a0c <mg_dns_parse_rr+0x10e>
 8001a08:	2300      	movs	r3, #0
 8001a0a:	e006      	b.n	8001a1a <mg_dns_parse_rr+0x11c>
  return (size_t) (rr->nlen + rr->alen + 10);
 8001a0c:	6a3b      	ldr	r3, [r7, #32]
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	461a      	mov	r2, r3
 8001a12:	6a3b      	ldr	r3, [r7, #32]
 8001a14:	88db      	ldrh	r3, [r3, #6]
 8001a16:	4413      	add	r3, r2
 8001a18:	330a      	adds	r3, #10
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <mg_dns_parse>:

bool mg_dns_parse(const uint8_t *buf, size_t len, struct mg_dns_message *dm) {
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b08c      	sub	sp, #48	; 0x30
 8001a26:	af02      	add	r7, sp, #8
 8001a28:	60f8      	str	r0, [r7, #12]
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	607a      	str	r2, [r7, #4]
  const struct mg_dns_header *h = (struct mg_dns_header *) buf;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	61fb      	str	r3, [r7, #28]
  struct mg_dns_rr rr;
  size_t i, n, ofs = sizeof(*h);
 8001a32:	230c      	movs	r3, #12
 8001a34:	623b      	str	r3, [r7, #32]
  memset(dm, 0, sizeof(*dm));
 8001a36:	f44f 7290 	mov.w	r2, #288	; 0x120
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f010 fea3 	bl	8012788 <memset>

  if (len < sizeof(*h)) return 0;                // Too small, headers dont fit
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	2b0b      	cmp	r3, #11
 8001a46:	d801      	bhi.n	8001a4c <mg_dns_parse+0x2a>
 8001a48:	2300      	movs	r3, #0
 8001a4a:	e0a0      	b.n	8001b8e <mg_dns_parse+0x16c>
  if (mg_ntohs(h->num_questions) > 1) return 0;  // Sanity
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	889b      	ldrh	r3, [r3, #4]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f009 fbab 	bl	800b1ac <mg_ntohs>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d901      	bls.n	8001a60 <mg_dns_parse+0x3e>
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	e096      	b.n	8001b8e <mg_dns_parse+0x16c>
  if (mg_ntohs(h->num_answers) > 10) return 0;   // Sanity
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	88db      	ldrh	r3, [r3, #6]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f009 fba1 	bl	800b1ac <mg_ntohs>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b0a      	cmp	r3, #10
 8001a6e:	d901      	bls.n	8001a74 <mg_dns_parse+0x52>
 8001a70:	2300      	movs	r3, #0
 8001a72:	e08c      	b.n	8001b8e <mg_dns_parse+0x16c>
  dm->txnid = mg_ntohs(h->txnid);
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f009 fb97 	bl	800b1ac <mg_ntohs>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	461a      	mov	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	801a      	strh	r2, [r3, #0]

  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 8001a86:	2300      	movs	r3, #0
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
 8001a8a:	e015      	b.n	8001ab8 <mg_dns_parse+0x96>
    if ((n = mg_dns_parse_rr(buf, len, ofs, true, &rr)) == 0) return false;
 8001a8c:	f107 0310 	add.w	r3, r7, #16
 8001a90:	9300      	str	r3, [sp, #0]
 8001a92:	2301      	movs	r3, #1
 8001a94:	6a3a      	ldr	r2, [r7, #32]
 8001a96:	68b9      	ldr	r1, [r7, #8]
 8001a98:	68f8      	ldr	r0, [r7, #12]
 8001a9a:	f7ff ff30 	bl	80018fe <mg_dns_parse_rr>
 8001a9e:	61b8      	str	r0, [r7, #24]
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <mg_dns_parse+0x88>
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	e071      	b.n	8001b8e <mg_dns_parse+0x16c>
    // MG_INFO(("Q %lu %lu %hu/%hu", ofs, n, rr.atype, rr.aclass));
    ofs += n;
 8001aaa:	6a3a      	ldr	r2, [r7, #32]
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	4413      	add	r3, r2
 8001ab0:	623b      	str	r3, [r7, #32]
  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	889b      	ldrh	r3, [r3, #4]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f009 fb75 	bl	800b1ac <mg_ntohs>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d3df      	bcc.n	8001a8c <mg_dns_parse+0x6a>
  }
  for (i = 0; i < mg_ntohs(h->num_answers); i++) {
 8001acc:	2300      	movs	r3, #0
 8001ace:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad0:	e052      	b.n	8001b78 <mg_dns_parse+0x156>
    if ((n = mg_dns_parse_rr(buf, len, ofs, false, &rr)) == 0) return false;
 8001ad2:	f107 0310 	add.w	r3, r7, #16
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	2300      	movs	r3, #0
 8001ada:	6a3a      	ldr	r2, [r7, #32]
 8001adc:	68b9      	ldr	r1, [r7, #8]
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	f7ff ff0d 	bl	80018fe <mg_dns_parse_rr>
 8001ae4:	61b8      	str	r0, [r7, #24]
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d101      	bne.n	8001af0 <mg_dns_parse+0xce>
 8001aec:	2300      	movs	r3, #0
 8001aee:	e04e      	b.n	8001b8e <mg_dns_parse+0x16c>
    // MG_INFO(("A -- %lu %lu %hu/%hu %s", ofs, n, rr.atype, rr.aclass,
    // dm->name));
    mg_dns_parse_name(buf, len, ofs, dm->name, sizeof(dm->name));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3320      	adds	r3, #32
 8001af4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001af8:	9200      	str	r2, [sp, #0]
 8001afa:	6a3a      	ldr	r2, [r7, #32]
 8001afc:	68b9      	ldr	r1, [r7, #8]
 8001afe:	68f8      	ldr	r0, [r7, #12]
 8001b00:	f7ff fee5 	bl	80018ce <mg_dns_parse_name>
    ofs += n;
 8001b04:	6a3a      	ldr	r2, [r7, #32]
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	4413      	add	r3, r2
 8001b0a:	623b      	str	r3, [r7, #32]

    if (rr.alen == 4 && rr.atype == 1 && rr.aclass == 1) {
 8001b0c:	8afb      	ldrh	r3, [r7, #22]
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	d114      	bne.n	8001b3c <mg_dns_parse+0x11a>
 8001b12:	8a7b      	ldrh	r3, [r7, #18]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d111      	bne.n	8001b3c <mg_dns_parse+0x11a>
 8001b18:	8abb      	ldrh	r3, [r7, #20]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d10e      	bne.n	8001b3c <mg_dns_parse+0x11a>
      dm->addr.is_ip6 = false;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	771a      	strb	r2, [r3, #28]
      memcpy(&dm->addr.ip, &buf[ofs - 4], 4);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3308      	adds	r3, #8
 8001b28:	6a3a      	ldr	r2, [r7, #32]
 8001b2a:	3a04      	subs	r2, #4
 8001b2c:	68f9      	ldr	r1, [r7, #12]
 8001b2e:	440a      	add	r2, r1
 8001b30:	6812      	ldr	r2, [r2, #0]
 8001b32:	601a      	str	r2, [r3, #0]
      dm->resolved = true;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	709a      	strb	r2, [r3, #2]
      break;  // Return success
 8001b3a:	e027      	b.n	8001b8c <mg_dns_parse+0x16a>
    } else if (rr.alen == 16 && rr.atype == 28 && rr.aclass == 1) {
 8001b3c:	8afb      	ldrh	r3, [r7, #22]
 8001b3e:	2b10      	cmp	r3, #16
 8001b40:	d117      	bne.n	8001b72 <mg_dns_parse+0x150>
 8001b42:	8a7b      	ldrh	r3, [r7, #18]
 8001b44:	2b1c      	cmp	r3, #28
 8001b46:	d114      	bne.n	8001b72 <mg_dns_parse+0x150>
 8001b48:	8abb      	ldrh	r3, [r7, #20]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d111      	bne.n	8001b72 <mg_dns_parse+0x150>
      dm->addr.is_ip6 = true;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	771a      	strb	r2, [r3, #28]
      memcpy(&dm->addr.ip6, &buf[ofs - 16], 16);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f103 000c 	add.w	r0, r3, #12
 8001b5a:	6a3b      	ldr	r3, [r7, #32]
 8001b5c:	3b10      	subs	r3, #16
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	4413      	add	r3, r2
 8001b62:	2210      	movs	r2, #16
 8001b64:	4619      	mov	r1, r3
 8001b66:	f010 fde7 	bl	8012738 <memcpy>
      dm->resolved = true;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	709a      	strb	r2, [r3, #2]
      break;  // Return success
 8001b70:	e00c      	b.n	8001b8c <mg_dns_parse+0x16a>
  for (i = 0; i < mg_ntohs(h->num_answers); i++) {
 8001b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b74:	3301      	adds	r3, #1
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	88db      	ldrh	r3, [r3, #6]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f009 fb15 	bl	800b1ac <mg_ntohs>
 8001b82:	4603      	mov	r3, r0
 8001b84:	461a      	mov	r2, r3
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d3a2      	bcc.n	8001ad2 <mg_dns_parse+0xb0>
    }
  }
  return true;
 8001b8c:	2301      	movs	r3, #1
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3728      	adds	r7, #40	; 0x28
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
	...

08001b98 <dns_cb>:

static void dns_cb(struct mg_connection *c, int ev, void *ev_data,
                   void *fn_data) {
 8001b98:	b5b0      	push	{r4, r5, r7, lr}
 8001b9a:	b0ec      	sub	sp, #432	; 0x1b0
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	f507 74d8 	add.w	r4, r7, #432	; 0x1b0
 8001ba2:	f5a4 74d2 	sub.w	r4, r4, #420	; 0x1a4
 8001ba6:	6020      	str	r0, [r4, #0]
 8001ba8:	f507 70d8 	add.w	r0, r7, #432	; 0x1b0
 8001bac:	f5a0 70d4 	sub.w	r0, r0, #424	; 0x1a8
 8001bb0:	6001      	str	r1, [r0, #0]
 8001bb2:	f507 71d8 	add.w	r1, r7, #432	; 0x1b0
 8001bb6:	f5a1 71d6 	sub.w	r1, r1, #428	; 0x1ac
 8001bba:	600a      	str	r2, [r1, #0]
 8001bbc:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8001bc0:	f5a2 72d8 	sub.w	r2, r2, #432	; 0x1b0
 8001bc4:	6013      	str	r3, [r2, #0]
  struct dns_data *d, *tmp;
  if (ev == MG_EV_POLL) {
 8001bc6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001bca:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d131      	bne.n	8001c38 <dns_cb+0xa0>
    uint64_t now = *(uint64_t *) ev_data;
 8001bd4:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001bd8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be2:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
    for (d = (struct dns_data *) c->mgr->active_dns_requests; d != NULL;
 8001be6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001bea:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8001bf8:	e019      	b.n	8001c2e <dns_cb+0x96>
         d = tmp) {
      tmp = d->next;
 8001bfa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      // MG_DEBUG ("%lu %lu dns poll", d->expire, now));
      if (now > d->expire) mg_error(d->c, "DNS timeout");
 8001c04:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001c08:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001c0c:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 8001c10:	4290      	cmp	r0, r2
 8001c12:	eb71 0303 	sbcs.w	r3, r1, r3
 8001c16:	d206      	bcs.n	8001c26 <dns_cb+0x8e>
 8001c18:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	499c      	ldr	r1, [pc, #624]	; (8001e90 <dns_cb+0x2f8>)
 8001c20:	4618      	mov	r0, r3
 8001c22:	f000 fb4f 	bl	80022c4 <mg_error>
         d = tmp) {
 8001c26:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001c2a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
    for (d = (struct dns_data *) c->mgr->active_dns_requests; d != NULL;
 8001c2e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1e1      	bne.n	8001bfa <dns_cb+0x62>
      mg_error(d->c, "DNS error");
      mg_dns_free(c, d);
    }
  }
  (void) fn_data;
}
 8001c36:	e126      	b.n	8001e86 <dns_cb+0x2ee>
  } else if (ev == MG_EV_READ) {
 8001c38:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001c3c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2b07      	cmp	r3, #7
 8001c44:	f040 80f1 	bne.w	8001e2a <dns_cb+0x292>
    int resolved = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
    if (mg_dns_parse(c->recv.buf, c->recv.len, &dm) == false) {
 8001c4e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001c52:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001c5a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001c5e:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c66:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	f7ff fed9 	bl	8001a22 <mg_dns_parse>
 8001c70:	4603      	mov	r3, r0
 8001c72:	f083 0301 	eor.w	r3, r3, #1
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d01d      	beq.n	8001cb8 <dns_cb+0x120>
      MG_ERROR(("Unexpected DNS response:"));
 8001c7c:	4b85      	ldr	r3, [pc, #532]	; (8001e94 <dns_cb+0x2fc>)
 8001c7e:	f240 1207 	movw	r2, #263	; 0x107
 8001c82:	4985      	ldr	r1, [pc, #532]	; (8001e98 <dns_cb+0x300>)
 8001c84:	2001      	movs	r0, #1
 8001c86:	f005 fa0d 	bl	80070a4 <mg_log_prefix>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d002      	beq.n	8001c96 <dns_cb+0xfe>
 8001c90:	4882      	ldr	r0, [pc, #520]	; (8001e9c <dns_cb+0x304>)
 8001c92:	f005 fa61 	bl	8007158 <mg_log>
      mg_hexdump(c->recv.buf, c->recv.len);
 8001c96:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001c9a:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001ca2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001ca6:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4610      	mov	r0, r2
 8001cb2:	f005 fa85 	bl	80071c0 <mg_hexdump>
 8001cb6:	e09f      	b.n	8001df8 <dns_cb+0x260>
      for (d = (struct dns_data *) c->mgr->active_dns_requests; d != NULL;
 8001cb8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001cbc:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8001cca:	e090      	b.n	8001dee <dns_cb+0x256>
        tmp = d->next;
 8001ccc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
        if (dm.txnid != d->txnid) continue;
 8001cd6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001cda:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001cde:	881a      	ldrh	r2, [r3, #0]
 8001ce0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001ce4:	8a1b      	ldrh	r3, [r3, #16]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d17c      	bne.n	8001de4 <dns_cb+0x24c>
        if (d->c->is_resolving) {
 8001cea:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8001cf4:	f003 0308 	and.w	r3, r3, #8
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d053      	beq.n	8001da6 <dns_cb+0x20e>
          if (dm.resolved) {
 8001cfe:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001d02:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001d06:	789b      	ldrb	r3, [r3, #2]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d041      	beq.n	8001d90 <dns_cb+0x1f8>
            dm.addr.port = d->c->rem.port;  // Save port
 8001d0c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8001d14:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001d18:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001d1c:	809a      	strh	r2, [r3, #4]
            d->c->rem = dm.addr;            // Copy resolved address
 8001d1e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001d22:	685a      	ldr	r2, [r3, #4]
 8001d24:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001d28:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001d2c:	f102 0424 	add.w	r4, r2, #36	; 0x24
 8001d30:	1d1d      	adds	r5, r3, #4
 8001d32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d36:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            MG_DEBUG(("%lu %s is %s", d->c->id, dm.name,
 8001d3e:	4b55      	ldr	r3, [pc, #340]	; (8001e94 <dns_cb+0x2fc>)
 8001d40:	f240 1215 	movw	r2, #277	; 0x115
 8001d44:	4954      	ldr	r1, [pc, #336]	; (8001e98 <dns_cb+0x300>)
 8001d46:	2003      	movs	r0, #3
 8001d48:	f005 f9ac 	bl	80070a4 <mg_log_prefix>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d017      	beq.n	8001d82 <dns_cb+0x1ea>
 8001d52:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8001d5a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	3324      	adds	r3, #36	; 0x24
 8001d62:	f107 0114 	add.w	r1, r7, #20
 8001d66:	2264      	movs	r2, #100	; 0x64
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f005 fff5 	bl	8007d58 <mg_ntoa>
 8001d6e:	4601      	mov	r1, r0
 8001d70:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001d74:	f103 0220 	add.w	r2, r3, #32
 8001d78:	460b      	mov	r3, r1
 8001d7a:	4621      	mov	r1, r4
 8001d7c:	4848      	ldr	r0, [pc, #288]	; (8001ea0 <dns_cb+0x308>)
 8001d7e:	f005 f9eb 	bl	8007158 <mg_log>
            mg_connect_resolved(d->c);
 8001d82:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f00c fb01 	bl	800e390 <mg_connect_resolved>
 8001d8e:	e01c      	b.n	8001dca <dns_cb+0x232>
            mg_error(d->c, "%s DNS lookup failed", dm.name);
 8001d90:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001d94:	6858      	ldr	r0, [r3, #4]
 8001d96:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001d9a:	3320      	adds	r3, #32
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	4941      	ldr	r1, [pc, #260]	; (8001ea4 <dns_cb+0x30c>)
 8001da0:	f000 fa90 	bl	80022c4 <mg_error>
 8001da4:	e011      	b.n	8001dca <dns_cb+0x232>
          MG_ERROR(("%lu already resolved", d->c->id));
 8001da6:	4b3b      	ldr	r3, [pc, #236]	; (8001e94 <dns_cb+0x2fc>)
 8001da8:	f44f 7291 	mov.w	r2, #290	; 0x122
 8001dac:	493a      	ldr	r1, [pc, #232]	; (8001e98 <dns_cb+0x300>)
 8001dae:	2001      	movs	r0, #1
 8001db0:	f005 f978 	bl	80070a4 <mg_log_prefix>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d007      	beq.n	8001dca <dns_cb+0x232>
 8001dba:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4838      	ldr	r0, [pc, #224]	; (8001ea8 <dns_cb+0x310>)
 8001dc6:	f005 f9c7 	bl	8007158 <mg_log>
        mg_dns_free(c, d);
 8001dca:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001dce:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8001dd2:	f8d7 11ac 	ldr.w	r1, [r7, #428]	; 0x1ac
 8001dd6:	6818      	ldr	r0, [r3, #0]
 8001dd8:	f7ff fc8d 	bl	80016f6 <mg_dns_free>
        resolved = 1;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001de2:	e000      	b.n	8001de6 <dns_cb+0x24e>
        if (dm.txnid != d->txnid) continue;
 8001de4:	bf00      	nop
           d = tmp) {
 8001de6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001dea:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
      for (d = (struct dns_data *) c->mgr->active_dns_requests; d != NULL;
 8001dee:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f47f af6a 	bne.w	8001ccc <dns_cb+0x134>
    if (!resolved) MG_ERROR(("stray DNS reply"));
 8001df8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d10c      	bne.n	8001e1a <dns_cb+0x282>
 8001e00:	4b24      	ldr	r3, [pc, #144]	; (8001e94 <dns_cb+0x2fc>)
 8001e02:	f44f 7294 	mov.w	r2, #296	; 0x128
 8001e06:	4924      	ldr	r1, [pc, #144]	; (8001e98 <dns_cb+0x300>)
 8001e08:	2001      	movs	r0, #1
 8001e0a:	f005 f94b 	bl	80070a4 <mg_log_prefix>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d002      	beq.n	8001e1a <dns_cb+0x282>
 8001e14:	4825      	ldr	r0, [pc, #148]	; (8001eac <dns_cb+0x314>)
 8001e16:	f005 f99f 	bl	8007158 <mg_log>
    c->recv.len = 0;
 8001e1a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001e1e:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2200      	movs	r2, #0
 8001e26:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001e28:	e02d      	b.n	8001e86 <dns_cb+0x2ee>
  } else if (ev == MG_EV_CLOSE) {
 8001e2a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001e2e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2b09      	cmp	r3, #9
 8001e36:	d126      	bne.n	8001e86 <dns_cb+0x2ee>
    for (d = (struct dns_data *) c->mgr->active_dns_requests; d != NULL;
 8001e38:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001e3c:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e46:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8001e4a:	e018      	b.n	8001e7e <dns_cb+0x2e6>
      tmp = d->next;
 8001e4c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      mg_error(d->c, "DNS error");
 8001e56:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	4914      	ldr	r1, [pc, #80]	; (8001eb0 <dns_cb+0x318>)
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f000 fa30 	bl	80022c4 <mg_error>
      mg_dns_free(c, d);
 8001e64:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001e68:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8001e6c:	f8d7 11ac 	ldr.w	r1, [r7, #428]	; 0x1ac
 8001e70:	6818      	ldr	r0, [r3, #0]
 8001e72:	f7ff fc40 	bl	80016f6 <mg_dns_free>
         d = tmp) {
 8001e76:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001e7a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
    for (d = (struct dns_data *) c->mgr->active_dns_requests; d != NULL;
 8001e7e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1e2      	bne.n	8001e4c <dns_cb+0x2b4>
}
 8001e86:	bf00      	nop
 8001e88:	f507 77d8 	add.w	r7, r7, #432	; 0x1b0
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bdb0      	pop	{r4, r5, r7, pc}
 8001e90:	08013b24 	.word	0x08013b24
 8001e94:	08015678 	.word	0x08015678
 8001e98:	08013b30 	.word	0x08013b30
 8001e9c:	08013b48 	.word	0x08013b48
 8001ea0:	08013b64 	.word	0x08013b64
 8001ea4:	08013b74 	.word	0x08013b74
 8001ea8:	08013b8c 	.word	0x08013b8c
 8001eac:	08013ba4 	.word	0x08013ba4
 8001eb0:	08013bb4 	.word	0x08013bb4

08001eb4 <mg_dns_send>:

static bool mg_dns_send(struct mg_connection *c, const struct mg_str *name,
                        uint16_t txnid, bool ipv6) {
 8001eb4:	b590      	push	{r4, r7, lr}
 8001eb6:	b0cb      	sub	sp, #300	; 0x12c
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	f507 7494 	add.w	r4, r7, #296	; 0x128
 8001ebe:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8001ec2:	6020      	str	r0, [r4, #0]
 8001ec4:	f507 7094 	add.w	r0, r7, #296	; 0x128
 8001ec8:	f5a0 7090 	sub.w	r0, r0, #288	; 0x120
 8001ecc:	6001      	str	r1, [r0, #0]
 8001ece:	4619      	mov	r1, r3
 8001ed0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001ed4:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 8001ed8:	801a      	strh	r2, [r3, #0]
 8001eda:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001ede:	f2a3 1323 	subw	r3, r3, #291	; 0x123
 8001ee2:	460a      	mov	r2, r1
 8001ee4:	701a      	strb	r2, [r3, #0]
  struct {
    struct mg_dns_header header;
    uint8_t data[256];
  } pkt;
  size_t i, n;
  memset(&pkt, 0, sizeof(pkt));
 8001ee6:	f107 0314 	add.w	r3, r7, #20
 8001eea:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8001eee:	2100      	movs	r1, #0
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f010 fc49 	bl	8012788 <memset>
  pkt.header.txnid = mg_htons(txnid);
 8001ef6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001efa:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 8001efe:	881b      	ldrh	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f009 f953 	bl	800b1ac <mg_ntohs>
 8001f06:	4603      	mov	r3, r0
 8001f08:	461a      	mov	r2, r3
 8001f0a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001f0e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001f12:	801a      	strh	r2, [r3, #0]
  pkt.header.flags = mg_htons(0x100);
 8001f14:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001f18:	f009 f948 	bl	800b1ac <mg_ntohs>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	461a      	mov	r2, r3
 8001f20:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001f24:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001f28:	805a      	strh	r2, [r3, #2]
  pkt.header.num_questions = mg_htons(1);
 8001f2a:	2001      	movs	r0, #1
 8001f2c:	f009 f93e 	bl	800b1ac <mg_ntohs>
 8001f30:	4603      	mov	r3, r0
 8001f32:	461a      	mov	r2, r3
 8001f34:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001f38:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001f3c:	809a      	strh	r2, [r3, #4]
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 8001f3e:	2300      	movs	r3, #0
 8001f40:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001f44:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001f48:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001f4c:	e054      	b.n	8001ff8 <mg_dns_send+0x144>
    if (name->ptr[i] == '.' || i >= name->len) {
 8001f4e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001f52:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001f5e:	4413      	add	r3, r2
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b2e      	cmp	r3, #46	; 0x2e
 8001f64:	d009      	beq.n	8001f7a <mg_dns_send+0xc6>
 8001f66:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001f6a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d32f      	bcc.n	8001fda <mg_dns_send+0x126>
      pkt.data[n] = (uint8_t) (i - n);
 8001f7a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	b2d9      	uxtb	r1, r3
 8001f8a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001f8e:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 8001f92:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001f96:	4413      	add	r3, r2
 8001f98:	330c      	adds	r3, #12
 8001f9a:	460a      	mov	r2, r1
 8001f9c:	701a      	strb	r2, [r3, #0]
      memcpy(&pkt.data[n + 1], name->ptr + n, i - n);
 8001f9e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	f107 0214 	add.w	r2, r7, #20
 8001fa8:	3308      	adds	r3, #8
 8001faa:	4413      	add	r3, r2
 8001fac:	1d18      	adds	r0, r3, #4
 8001fae:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001fb2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001fbe:	18d1      	adds	r1, r2, r3
 8001fc0:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001fc4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	461a      	mov	r2, r3
 8001fcc:	f010 fbb4 	bl	8012738 <memcpy>
      n = i + 1;
 8001fd0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    }
    if (i >= name->len) break;
 8001fda:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001fde:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d209      	bcs.n	8002002 <mg_dns_send+0x14e>
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 8001fee:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001ff8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001ffc:	2bfa      	cmp	r3, #250	; 0xfa
 8001ffe:	d9a6      	bls.n	8001f4e <mg_dns_send+0x9a>
 8002000:	e000      	b.n	8002004 <mg_dns_send+0x150>
    if (i >= name->len) break;
 8002002:	bf00      	nop
  }
  memcpy(&pkt.data[n], "\x00\x00\x01\x00\x01", 5);  // A query
 8002004:	f107 0214 	add.w	r2, r7, #20
 8002008:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800200c:	3308      	adds	r3, #8
 800200e:	4413      	add	r3, r2
 8002010:	3304      	adds	r3, #4
 8002012:	2205      	movs	r2, #5
 8002014:	4916      	ldr	r1, [pc, #88]	; (8002070 <mg_dns_send+0x1bc>)
 8002016:	4618      	mov	r0, r3
 8002018:	f010 fb8e 	bl	8012738 <memcpy>
  n += 5;
 800201c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002020:	3305      	adds	r3, #5
 8002022:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  if (ipv6) pkt.data[n - 3] = 0x1c;  // AAAA query
 8002026:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800202a:	f2a3 1323 	subw	r3, r3, #291	; 0x123
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d009      	beq.n	8002048 <mg_dns_send+0x194>
 8002034:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002038:	3b03      	subs	r3, #3
 800203a:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800203e:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 8002042:	4413      	add	r3, r2
 8002044:	221c      	movs	r2, #28
 8002046:	731a      	strb	r2, [r3, #12]
  // memcpy(&pkt.data[n], "\xc0\x0c\x00\x1c\x00\x01", 6);  // AAAA query
  // n += 6;
  return mg_send(c, &pkt, sizeof(pkt.header) + n);
 8002048:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800204c:	f103 020c 	add.w	r2, r3, #12
 8002050:	f107 0114 	add.w	r1, r7, #20
 8002054:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002058:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800205c:	6818      	ldr	r0, [r3, #0]
 800205e:	f00c fb4d 	bl	800e6fc <mg_send>
 8002062:	4603      	mov	r3, r0
}
 8002064:	4618      	mov	r0, r3
 8002066:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 800206a:	46bd      	mov	sp, r7
 800206c:	bd90      	pop	{r4, r7, pc}
 800206e:	bf00      	nop
 8002070:	08013bc0 	.word	0x08013bc0

08002074 <mg_sendnsreq>:

static void mg_sendnsreq(struct mg_connection *c, struct mg_str *name, int ms,
                         struct mg_dns *dnsc, bool ipv6) {
 8002074:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002078:	b0a3      	sub	sp, #140	; 0x8c
 800207a:	af02      	add	r7, sp, #8
 800207c:	60f8      	str	r0, [r7, #12]
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	607a      	str	r2, [r7, #4]
 8002082:	603b      	str	r3, [r7, #0]
  struct dns_data *d = NULL;
 8002084:	2300      	movs	r3, #0
 8002086:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (dnsc->url == NULL) {
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d104      	bne.n	800209a <mg_sendnsreq+0x26>
    mg_error(c, "DNS server URL is NULL. Call mg_mgr_init()");
 8002090:	4951      	ldr	r1, [pc, #324]	; (80021d8 <mg_sendnsreq+0x164>)
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f000 f916 	bl	80022c4 <mg_error>
 8002098:	e016      	b.n	80020c8 <mg_sendnsreq+0x54>
  } else if (dnsc->c == NULL) {
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d112      	bne.n	80020c8 <mg_sendnsreq+0x54>
    dnsc->c = mg_connect(c->mgr, dnsc->url, NULL, NULL);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6858      	ldr	r0, [r3, #4]
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	6819      	ldr	r1, [r3, #0]
 80020aa:	2300      	movs	r3, #0
 80020ac:	2200      	movs	r2, #0
 80020ae:	f006 f99b 	bl	80083e8 <mg_connect>
 80020b2:	4602      	mov	r2, r0
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	605a      	str	r2, [r3, #4]
    if (dnsc->c != NULL) {
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <mg_sendnsreq+0x54>
      dnsc->c->pfn = dns_cb;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	4a45      	ldr	r2, [pc, #276]	; (80021dc <mg_sendnsreq+0x168>)
 80020c6:	671a      	str	r2, [r3, #112]	; 0x70
      // dnsc->c->is_hexdumping = 1;
    }
  }
  if (dnsc->c == NULL) {
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d104      	bne.n	80020da <mg_sendnsreq+0x66>
    mg_error(c, "resolver");
 80020d0:	4943      	ldr	r1, [pc, #268]	; (80021e0 <mg_sendnsreq+0x16c>)
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f000 f8f6 	bl	80022c4 <mg_error>
                name->ptr, mg_ntoa(&dnsc->c->rem, buf, sizeof(buf)), d->txnid));
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
      mg_error(dnsc->c, "DNS send");
    }
  }
}
 80020d8:	e078      	b.n	80021cc <mg_sendnsreq+0x158>
  } else if ((d = (struct dns_data *) calloc(1, sizeof(*d))) == NULL) {
 80020da:	2118      	movs	r1, #24
 80020dc:	2001      	movs	r0, #1
 80020de:	f010 fad9 	bl	8012694 <calloc>
 80020e2:	4603      	mov	r3, r0
 80020e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80020e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d104      	bne.n	80020f6 <mg_sendnsreq+0x82>
    mg_error(c, "resolve OOM");
 80020ec:	493d      	ldr	r1, [pc, #244]	; (80021e4 <mg_sendnsreq+0x170>)
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f000 f8e8 	bl	80022c4 <mg_error>
}
 80020f4:	e06a      	b.n	80021cc <mg_sendnsreq+0x158>
    struct dns_data *reqs = (struct dns_data *) c->mgr->active_dns_requests;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fc:	67bb      	str	r3, [r7, #120]	; 0x78
    d->txnid = reqs ? (uint16_t) (reqs->txnid + 1) : 1;
 80020fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002100:	2b00      	cmp	r3, #0
 8002102:	d004      	beq.n	800210e <mg_sendnsreq+0x9a>
 8002104:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002106:	8a1b      	ldrh	r3, [r3, #16]
 8002108:	3301      	adds	r3, #1
 800210a:	b29a      	uxth	r2, r3
 800210c:	e000      	b.n	8002110 <mg_sendnsreq+0x9c>
 800210e:	2201      	movs	r2, #1
 8002110:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002112:	821a      	strh	r2, [r3, #16]
    d->next = (struct dns_data *) c->mgr->active_dns_requests;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800211a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800211c:	601a      	str	r2, [r3, #0]
    c->mgr->active_dns_requests = d;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002124:	62da      	str	r2, [r3, #44]	; 0x2c
    d->expire = mg_millis() + (uint64_t) ms;
 8002126:	f7fe ff7b 	bl	8001020 <mg_millis>
 800212a:	4602      	mov	r2, r0
 800212c:	460b      	mov	r3, r1
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	17c8      	asrs	r0, r1, #31
 8002132:	460c      	mov	r4, r1
 8002134:	4605      	mov	r5, r0
 8002136:	eb12 0804 	adds.w	r8, r2, r4
 800213a:	eb43 0905 	adc.w	r9, r3, r5
 800213e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002140:	e9c3 8902 	strd	r8, r9, [r3, #8]
    d->c = c;
 8002144:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	605a      	str	r2, [r3, #4]
    c->is_resolving = 1;
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	f892 30b0 	ldrb.w	r3, [r2, #176]	; 0xb0
 8002150:	f043 0308 	orr.w	r3, r3, #8
 8002154:	f882 30b0 	strb.w	r3, [r2, #176]	; 0xb0
    MG_VERBOSE(("%lu resolving %.*s @ %s, txnid %hu", c->id, (int) name->len,
 8002158:	4b23      	ldr	r3, [pc, #140]	; (80021e8 <mg_sendnsreq+0x174>)
 800215a:	f240 1269 	movw	r2, #361	; 0x169
 800215e:	4923      	ldr	r1, [pc, #140]	; (80021ec <mg_sendnsreq+0x178>)
 8002160:	2004      	movs	r0, #4
 8002162:	f004 ff9f 	bl	80070a4 <mg_log_prefix>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d01a      	beq.n	80021a2 <mg_sendnsreq+0x12e>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	461e      	mov	r6, r3
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	681d      	ldr	r5, [r3, #0]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	3324      	adds	r3, #36	; 0x24
 8002180:	f107 0114 	add.w	r1, r7, #20
 8002184:	2264      	movs	r2, #100	; 0x64
 8002186:	4618      	mov	r0, r3
 8002188:	f005 fde6 	bl	8007d58 <mg_ntoa>
 800218c:	4602      	mov	r2, r0
 800218e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002190:	8a1b      	ldrh	r3, [r3, #16]
 8002192:	9301      	str	r3, [sp, #4]
 8002194:	9200      	str	r2, [sp, #0]
 8002196:	462b      	mov	r3, r5
 8002198:	4632      	mov	r2, r6
 800219a:	4621      	mov	r1, r4
 800219c:	4814      	ldr	r0, [pc, #80]	; (80021f0 <mg_sendnsreq+0x17c>)
 800219e:	f004 ffdb 	bl	8007158 <mg_log>
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	6858      	ldr	r0, [r3, #4]
 80021a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021a8:	8a1a      	ldrh	r2, [r3, #16]
 80021aa:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 80021ae:	68b9      	ldr	r1, [r7, #8]
 80021b0:	f7ff fe80 	bl	8001eb4 <mg_dns_send>
 80021b4:	4603      	mov	r3, r0
 80021b6:	f083 0301 	eor.w	r3, r3, #1
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d005      	beq.n	80021cc <mg_sendnsreq+0x158>
      mg_error(dnsc->c, "DNS send");
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	490b      	ldr	r1, [pc, #44]	; (80021f4 <mg_sendnsreq+0x180>)
 80021c6:	4618      	mov	r0, r3
 80021c8:	f000 f87c 	bl	80022c4 <mg_error>
}
 80021cc:	bf00      	nop
 80021ce:	3784      	adds	r7, #132	; 0x84
 80021d0:	46bd      	mov	sp, r7
 80021d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80021d6:	bf00      	nop
 80021d8:	08013bc8 	.word	0x08013bc8
 80021dc:	08001b99 	.word	0x08001b99
 80021e0:	08013bf4 	.word	0x08013bf4
 80021e4:	08013c00 	.word	0x08013c00
 80021e8:	08015680 	.word	0x08015680
 80021ec:	08013b30 	.word	0x08013b30
 80021f0:	08013c0c 	.word	0x08013c0c
 80021f4:	08013c30 	.word	0x08013c30

080021f8 <mg_resolve>:

void mg_resolve(struct mg_connection *c, const char *url) {
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b088      	sub	sp, #32
 80021fc:	af02      	add	r7, sp, #8
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  struct mg_str host = mg_url_host(url);
 8002202:	f107 030c 	add.w	r3, r7, #12
 8002206:	6839      	ldr	r1, [r7, #0]
 8002208:	4618      	mov	r0, r3
 800220a:	f008 fefe 	bl	800b00a <mg_url_host>
  c->rem.port = mg_htons(mg_url_port(url));
 800220e:	6838      	ldr	r0, [r7, #0]
 8002210:	f008 ff2e 	bl	800b070 <mg_url_port>
 8002214:	4603      	mov	r3, r0
 8002216:	4618      	mov	r0, r3
 8002218:	f008 ffc8 	bl	800b1ac <mg_ntohs>
 800221c:	4603      	mov	r3, r0
 800221e:	461a      	mov	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	849a      	strh	r2, [r3, #36]	; 0x24
  if (mg_aton(host, &c->rem)) {
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3324      	adds	r3, #36	; 0x24
 8002228:	461a      	mov	r2, r3
 800222a:	f107 030c 	add.w	r3, r7, #12
 800222e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002232:	f006 f814 	bl	800825e <mg_aton>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d003      	beq.n	8002244 <mg_resolve+0x4c>
    // host is an IP address, do not fire name resolution
    mg_connect_resolved(c);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f00c f8a7 	bl	800e390 <mg_connect_resolved>
  } else {
    // host is not an IP, send DNS resolution request
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
  }
}
 8002242:	e019      	b.n	8002278 <mg_resolve+0x80>
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	7e1b      	ldrb	r3, [r3, #24]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <mg_resolve+0x5e>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	330c      	adds	r3, #12
 8002254:	e002      	b.n	800225c <mg_resolve+0x64>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	3304      	adds	r3, #4
 800225c:	617b      	str	r3, [r7, #20]
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	695a      	ldr	r2, [r3, #20]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	7e1b      	ldrb	r3, [r3, #24]
 800226a:	f107 010c 	add.w	r1, r7, #12
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7ff fefe 	bl	8002074 <mg_sendnsreq>
}
 8002278:	bf00      	nop
 800227a:	3718      	adds	r7, #24
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <mg_call>:





void mg_call(struct mg_connection *c, int ev, void *ev_data) {
 8002280:	b590      	push	{r4, r7, lr}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
  // Run user-defined handler first, in order to give it an ability
  // to intercept processing (e.g. clean input buffer) before the
  // protocol handler kicks in
  if (c->fn != NULL) c->fn(c, ev, ev_data, c->fn_data);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002290:	2b00      	cmp	r3, #0
 8002292:	d007      	beq.n	80022a4 <mg_call+0x24>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	68b9      	ldr	r1, [r7, #8]
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	47a0      	blx	r4
  if (c->pfn != NULL) c->pfn(c, ev, ev_data, c->pfn_data);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d007      	beq.n	80022bc <mg_call+0x3c>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6f1c      	ldr	r4, [r3, #112]	; 0x70
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	68b9      	ldr	r1, [r7, #8]
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	47a0      	blx	r4
}
 80022bc:	bf00      	nop
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd90      	pop	{r4, r7, pc}

080022c4 <mg_error>:

void mg_error(struct mg_connection *c, const char *fmt, ...) {
 80022c4:	b40e      	push	{r1, r2, r3}
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b095      	sub	sp, #84	; 0x54
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  char buf[64];
  va_list ap;
  va_start(ap, fmt);
 80022ce:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80022d2:	60fb      	str	r3, [r7, #12]
  mg_vsnprintf(buf, sizeof(buf), fmt, &ap);
 80022d4:	f107 030c 	add.w	r3, r7, #12
 80022d8:	f107 0010 	add.w	r0, r7, #16
 80022dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80022de:	2140      	movs	r1, #64	; 0x40
 80022e0:	f000 f896 	bl	8002410 <mg_vsnprintf>
  va_end(ap);
  MG_ERROR(("%lu %p %s", c->id, c->fd, buf));
 80022e4:	4b13      	ldr	r3, [pc, #76]	; (8002334 <mg_error+0x70>)
 80022e6:	f44f 72ca 	mov.w	r2, #404	; 0x194
 80022ea:	4913      	ldr	r1, [pc, #76]	; (8002338 <mg_error+0x74>)
 80022ec:	2001      	movs	r0, #1
 80022ee:	f004 fed9 	bl	80070a4 <mg_log_prefix>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d008      	beq.n	800230a <mg_error+0x46>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002300:	f107 0310 	add.w	r3, r7, #16
 8002304:	480d      	ldr	r0, [pc, #52]	; (800233c <mg_error+0x78>)
 8002306:	f004 ff27 	bl	8007158 <mg_log>
  c->is_closing = 1;             // Set is_closing before sending MG_EV_CALL
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	f892 30b1 	ldrb.w	r3, [r2, #177]	; 0xb1
 8002310:	f043 0310 	orr.w	r3, r3, #16
 8002314:	f882 30b1 	strb.w	r3, [r2, #177]	; 0xb1
  mg_call(c, MG_EV_ERROR, buf);  // Let user handler to override it
 8002318:	f107 0310 	add.w	r3, r7, #16
 800231c:	461a      	mov	r2, r3
 800231e:	2100      	movs	r1, #0
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f7ff ffad 	bl	8002280 <mg_call>
}
 8002326:	bf00      	nop
 8002328:	3754      	adds	r7, #84	; 0x54
 800232a:	46bd      	mov	sp, r7
 800232c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002330:	b003      	add	sp, #12
 8002332:	4770      	bx	lr
 8002334:	08015690 	.word	0x08015690
 8002338:	08013b30 	.word	0x08013b30
 800233c:	08013c3c 	.word	0x08013c3c

08002340 <mg_pfn_iobuf_private>:
#line 1 "src/fmt.c"
#endif



static void mg_pfn_iobuf_private(char ch, void *param, bool expand) {
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	6039      	str	r1, [r7, #0]
 800234a:	71fb      	strb	r3, [r7, #7]
 800234c:	4613      	mov	r3, r2
 800234e:	71bb      	strb	r3, [r7, #6]
  struct mg_iobuf *io = (struct mg_iobuf *) param;
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	60fb      	str	r3, [r7, #12]
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 8002354:	79bb      	ldrb	r3, [r7, #6]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00d      	beq.n	8002376 <mg_pfn_iobuf_private+0x36>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	1c9a      	adds	r2, r3, #2
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	429a      	cmp	r2, r3
 8002366:	d906      	bls.n	8002376 <mg_pfn_iobuf_private+0x36>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	3302      	adds	r3, #2
 800236e:	4619      	mov	r1, r3
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f003 ff9f 	bl	80062b4 <mg_iobuf_resize>
  if (io->len + 2 <= io->size) {
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	1c9a      	adds	r2, r3, #2
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	429a      	cmp	r2, r3
 8002382:	d811      	bhi.n	80023a8 <mg_pfn_iobuf_private+0x68>
    io->buf[io->len++] = (uint8_t) ch;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	1c58      	adds	r0, r3, #1
 800238e:	68f9      	ldr	r1, [r7, #12]
 8002390:	6088      	str	r0, [r1, #8]
 8002392:	4413      	add	r3, r2
 8002394:	79fa      	ldrb	r2, [r7, #7]
 8002396:	701a      	strb	r2, [r3, #0]
    io->buf[io->len] = 0;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	4413      	add	r3, r2
 80023a2:	2200      	movs	r2, #0
 80023a4:	701a      	strb	r2, [r3, #0]
  } else if (io->len < io->size) {
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
  }
}
 80023a6:	e00f      	b.n	80023c8 <mg_pfn_iobuf_private+0x88>
  } else if (io->len < io->size) {
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d209      	bcs.n	80023c8 <mg_pfn_iobuf_private+0x88>
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	1c58      	adds	r0, r3, #1
 80023be:	68f9      	ldr	r1, [r7, #12]
 80023c0:	6088      	str	r0, [r1, #8]
 80023c2:	4413      	add	r3, r2
 80023c4:	2200      	movs	r2, #0
 80023c6:	701a      	strb	r2, [r3, #0]
}
 80023c8:	bf00      	nop
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <mg_putchar_iobuf_static>:

static void mg_putchar_iobuf_static(char ch, void *param) {
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	6039      	str	r1, [r7, #0]
 80023da:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, false);
 80023dc:	79fb      	ldrb	r3, [r7, #7]
 80023de:	2200      	movs	r2, #0
 80023e0:	6839      	ldr	r1, [r7, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff ffac 	bl	8002340 <mg_pfn_iobuf_private>
}
 80023e8:	bf00      	nop
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <mg_pfn_iobuf>:

void mg_pfn_iobuf(char ch, void *param) {
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	6039      	str	r1, [r7, #0]
 80023fa:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, true);
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	2201      	movs	r2, #1
 8002400:	6839      	ldr	r1, [r7, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff ff9c 	bl	8002340 <mg_pfn_iobuf_private>
}
 8002408:	bf00      	nop
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <mg_vsnprintf>:

size_t mg_vsnprintf(char *buf, size_t len, const char *fmt, va_list *ap) {
 8002410:	b580      	push	{r7, lr}
 8002412:	b08a      	sub	sp, #40	; 0x28
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
 800241c:	603b      	str	r3, [r7, #0]
  struct mg_iobuf io = {(uint8_t *) buf, len, 0, 0};
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	617b      	str	r3, [r7, #20]
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	61bb      	str	r3, [r7, #24]
 8002426:	2300      	movs	r3, #0
 8002428:	61fb      	str	r3, [r7, #28]
 800242a:	2300      	movs	r3, #0
 800242c:	623b      	str	r3, [r7, #32]
  size_t n = mg_vxprintf(mg_putchar_iobuf_static, &io, fmt, ap);
 800242e:	f107 0114 	add.w	r1, r7, #20
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	4809      	ldr	r0, [pc, #36]	; (800245c <mg_vsnprintf+0x4c>)
 8002438:	f000 fe2a 	bl	8003090 <mg_vxprintf>
 800243c:	6278      	str	r0, [r7, #36]	; 0x24
  if (n < len) buf[n] = '\0';
 800243e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	429a      	cmp	r2, r3
 8002444:	d204      	bcs.n	8002450 <mg_vsnprintf+0x40>
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	4413      	add	r3, r2
 800244c:	2200      	movs	r2, #0
 800244e:	701a      	strb	r2, [r3, #0]
  return n;
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002452:	4618      	mov	r0, r3
 8002454:	3728      	adds	r7, #40	; 0x28
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	080023d1 	.word	0x080023d1

08002460 <mg_snprintf>:

size_t mg_snprintf(char *buf, size_t len, const char *fmt, ...) {
 8002460:	b40c      	push	{r2, r3}
 8002462:	b580      	push	{r7, lr}
 8002464:	b084      	sub	sp, #16
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
 800246a:	6039      	str	r1, [r7, #0]
  va_list ap;
  size_t n;
  va_start(ap, fmt);
 800246c:	f107 031c 	add.w	r3, r7, #28
 8002470:	60bb      	str	r3, [r7, #8]
  n = mg_vsnprintf(buf, len, fmt, &ap);
 8002472:	f107 0308 	add.w	r3, r7, #8
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	6839      	ldr	r1, [r7, #0]
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7ff ffc8 	bl	8002410 <mg_vsnprintf>
 8002480:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return n;
 8002482:	68fb      	ldr	r3, [r7, #12]
}
 8002484:	4618      	mov	r0, r3
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800248e:	b002      	add	sp, #8
 8002490:	4770      	bx	lr

08002492 <mg_xprintf>:
  s = mg_vmprintf(fmt, &ap);
  va_end(ap);
  return s;
}

size_t mg_xprintf(void (*out)(char, void *), void *ptr, const char *fmt, ...) {
 8002492:	b40c      	push	{r2, r3}
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 800249e:	2300      	movs	r3, #0
 80024a0:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 80024a2:	f107 031c 	add.w	r3, r7, #28
 80024a6:	60bb      	str	r3, [r7, #8]
  len = mg_vxprintf(out, ptr, fmt, &ap);
 80024a8:	f107 0308 	add.w	r3, r7, #8
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	6839      	ldr	r1, [r7, #0]
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 fded 	bl	8003090 <mg_vxprintf>
 80024b6:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 80024b8:	68fb      	ldr	r3, [r7, #12]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80024c4:	b002      	add	sp, #8
 80024c6:	4770      	bx	lr

080024c8 <is_digit>:

static bool is_digit(int c) {
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  return c >= '0' && c <= '9';
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b2f      	cmp	r3, #47	; 0x2f
 80024d4:	dd04      	ble.n	80024e0 <is_digit+0x18>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b39      	cmp	r3, #57	; 0x39
 80024da:	dc01      	bgt.n	80024e0 <is_digit+0x18>
 80024dc:	2301      	movs	r3, #1
 80024de:	e000      	b.n	80024e2 <is_digit+0x1a>
 80024e0:	2300      	movs	r3, #0
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	b2db      	uxtb	r3, r3
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <addexp>:

static int addexp(char *buf, int e, int sign) {
 80024f4:	b480      	push	{r7}
 80024f6:	b087      	sub	sp, #28
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
  int n = 0;
 8002500:	2300      	movs	r3, #0
 8002502:	617b      	str	r3, [r7, #20]
  buf[n++] = 'e';
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	1c5a      	adds	r2, r3, #1
 8002508:	617a      	str	r2, [r7, #20]
 800250a:	461a      	mov	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4413      	add	r3, r2
 8002510:	2265      	movs	r2, #101	; 0x65
 8002512:	701a      	strb	r2, [r3, #0]
  buf[n++] = (char) sign;
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	1c5a      	adds	r2, r3, #1
 8002518:	617a      	str	r2, [r7, #20]
 800251a:	461a      	mov	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4413      	add	r3, r2
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	b2d2      	uxtb	r2, r2
 8002524:	701a      	strb	r2, [r3, #0]
  if (e > 400) return 0;
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800252c:	dd01      	ble.n	8002532 <addexp+0x3e>
 800252e:	2300      	movs	r3, #0
 8002530:	e057      	b.n	80025e2 <addexp+0xee>
  if (e < 10) buf[n++] = '0';
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	2b09      	cmp	r3, #9
 8002536:	dc07      	bgt.n	8002548 <addexp+0x54>
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	1c5a      	adds	r2, r3, #1
 800253c:	617a      	str	r2, [r7, #20]
 800253e:	461a      	mov	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	4413      	add	r3, r2
 8002544:	2230      	movs	r2, #48	; 0x30
 8002546:	701a      	strb	r2, [r3, #0]
  if (e >= 100) buf[n++] = (char) (e / 100 + '0'), e -= 100 * (e / 100);
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	2b63      	cmp	r3, #99	; 0x63
 800254c:	dd1c      	ble.n	8002588 <addexp+0x94>
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	4a27      	ldr	r2, [pc, #156]	; (80025f0 <addexp+0xfc>)
 8002552:	fb82 1203 	smull	r1, r2, r2, r3
 8002556:	1152      	asrs	r2, r2, #5
 8002558:	17db      	asrs	r3, r3, #31
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	b2da      	uxtb	r2, r3
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	1c59      	adds	r1, r3, #1
 8002562:	6179      	str	r1, [r7, #20]
 8002564:	4619      	mov	r1, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	440b      	add	r3, r1
 800256a:	3230      	adds	r2, #48	; 0x30
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	701a      	strb	r2, [r3, #0]
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	4a1f      	ldr	r2, [pc, #124]	; (80025f0 <addexp+0xfc>)
 8002574:	fb82 1203 	smull	r1, r2, r2, r3
 8002578:	1151      	asrs	r1, r2, #5
 800257a:	17da      	asrs	r2, r3, #31
 800257c:	1a8a      	subs	r2, r1, r2
 800257e:	2164      	movs	r1, #100	; 0x64
 8002580:	fb01 f202 	mul.w	r2, r1, r2
 8002584:	1a9b      	subs	r3, r3, r2
 8002586:	60bb      	str	r3, [r7, #8]
  if (e >= 10) buf[n++] = (char) (e / 10 + '0'), e -= 10 * (e / 10);
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	2b09      	cmp	r3, #9
 800258c:	dd1d      	ble.n	80025ca <addexp+0xd6>
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	4a18      	ldr	r2, [pc, #96]	; (80025f4 <addexp+0x100>)
 8002592:	fb82 1203 	smull	r1, r2, r2, r3
 8002596:	1092      	asrs	r2, r2, #2
 8002598:	17db      	asrs	r3, r3, #31
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	b2da      	uxtb	r2, r3
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	1c59      	adds	r1, r3, #1
 80025a2:	6179      	str	r1, [r7, #20]
 80025a4:	4619      	mov	r1, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	440b      	add	r3, r1
 80025aa:	3230      	adds	r2, #48	; 0x30
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	701a      	strb	r2, [r3, #0]
 80025b0:	68ba      	ldr	r2, [r7, #8]
 80025b2:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <addexp+0x100>)
 80025b4:	fb83 1302 	smull	r1, r3, r3, r2
 80025b8:	1099      	asrs	r1, r3, #2
 80025ba:	17d3      	asrs	r3, r2, #31
 80025bc:	1ac9      	subs	r1, r1, r3
 80025be:	460b      	mov	r3, r1
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	60bb      	str	r3, [r7, #8]
  buf[n++] = (char) (e + '0');
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	1c59      	adds	r1, r3, #1
 80025d2:	6179      	str	r1, [r7, #20]
 80025d4:	4619      	mov	r1, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	440b      	add	r3, r1
 80025da:	3230      	adds	r2, #48	; 0x30
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	701a      	strb	r2, [r3, #0]
  return n;
 80025e0:	697b      	ldr	r3, [r7, #20]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	371c      	adds	r7, #28
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	51eb851f 	.word	0x51eb851f
 80025f4:	66666667 	.word	0x66666667

080025f8 <xisinf>:

static int xisinf(double x) {
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 8002602:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002606:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 800260a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800260e:	f04f 0200 	mov.w	r2, #0
 8002612:	f04f 0300 	mov.w	r3, #0
 8002616:	000a      	movs	r2, r1
 8002618:	2300      	movs	r3, #0
 800261a:	4613      	mov	r3, r2
 800261c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002620:	4a08      	ldr	r2, [pc, #32]	; (8002644 <xisinf+0x4c>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d106      	bne.n	8002634 <xisinf+0x3c>
         ((unsigned) ieee754.u == 0);
 8002626:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800262a:	4613      	mov	r3, r2
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <xisinf+0x3c>
 8002630:	2301      	movs	r3, #1
 8002632:	e000      	b.n	8002636 <xisinf+0x3e>
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	7ff00000 	.word	0x7ff00000

08002648 <xisnan>:

static int xisnan(double x) {
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 8002652:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002656:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 800265a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	f04f 0300 	mov.w	r3, #0
 8002666:	000a      	movs	r2, r1
 8002668:	2300      	movs	r3, #0
 800266a:	4613      	mov	r3, r2
 800266c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
             ((unsigned) ieee754.u != 0) >
 8002670:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002674:	4613      	mov	r3, r2
 8002676:	2b00      	cmp	r3, #0
 8002678:	bf14      	ite	ne
 800267a:	2301      	movne	r3, #1
 800267c:	2300      	moveq	r3, #0
 800267e:	b2db      	uxtb	r3, r3
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 8002680:	440b      	add	r3, r1
             ((unsigned) ieee754.u != 0) >
 8002682:	4a06      	ldr	r2, [pc, #24]	; (800269c <xisnan+0x54>)
 8002684:	4293      	cmp	r3, r2
 8002686:	bf8c      	ite	hi
 8002688:	2301      	movhi	r3, #1
 800268a:	2300      	movls	r3, #0
 800268c:	b2db      	uxtb	r3, r3
         0x7ff00000;
}
 800268e:	4618      	mov	r0, r3
 8002690:	3714      	adds	r7, #20
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	7ff00000 	.word	0x7ff00000

080026a0 <mg_dtoa>:

static size_t mg_dtoa(char *dst, size_t dstlen, double d, int width) {
 80026a0:	b5b0      	push	{r4, r5, r7, lr}
 80026a2:	b09e      	sub	sp, #120	; 0x78
 80026a4:	af02      	add	r7, sp, #8
 80026a6:	6178      	str	r0, [r7, #20]
 80026a8:	6139      	str	r1, [r7, #16]
 80026aa:	ed87 0b02 	vstr	d0, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
  char buf[40];
  int i, s = 0, n = 0, e = 0;
 80026b0:	2300      	movs	r3, #0
 80026b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80026b4:	2300      	movs	r3, #0
 80026b6:	667b      	str	r3, [r7, #100]	; 0x64
 80026b8:	2300      	movs	r3, #0
 80026ba:	663b      	str	r3, [r7, #96]	; 0x60
  double t, mul, saved;
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 80026bc:	f04f 0200 	mov.w	r2, #0
 80026c0:	f04f 0300 	mov.w	r3, #0
 80026c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026c8:	f7fe fa28 	bl	8000b1c <__aeabi_dcmpeq>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d007      	beq.n	80026e2 <mg_dtoa+0x42>
 80026d2:	4b80      	ldr	r3, [pc, #512]	; (80028d4 <mg_dtoa+0x234>)
 80026d4:	4a80      	ldr	r2, [pc, #512]	; (80028d8 <mg_dtoa+0x238>)
 80026d6:	6939      	ldr	r1, [r7, #16]
 80026d8:	6978      	ldr	r0, [r7, #20]
 80026da:	f7ff fec1 	bl	8002460 <mg_snprintf>
 80026de:	4603      	mov	r3, r0
 80026e0:	e2bf      	b.n	8002c62 <mg_dtoa+0x5c2>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 80026e2:	ed97 0b02 	vldr	d0, [r7, #8]
 80026e6:	f7ff ff87 	bl	80025f8 <xisinf>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d014      	beq.n	800271a <mg_dtoa+0x7a>
 80026f0:	f04f 0200 	mov.w	r2, #0
 80026f4:	f04f 0300 	mov.w	r3, #0
 80026f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026fc:	f7fe fa36 	bl	8000b6c <__aeabi_dcmpgt>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <mg_dtoa+0x6a>
 8002706:	4b75      	ldr	r3, [pc, #468]	; (80028dc <mg_dtoa+0x23c>)
 8002708:	e000      	b.n	800270c <mg_dtoa+0x6c>
 800270a:	4b75      	ldr	r3, [pc, #468]	; (80028e0 <mg_dtoa+0x240>)
 800270c:	4a72      	ldr	r2, [pc, #456]	; (80028d8 <mg_dtoa+0x238>)
 800270e:	6939      	ldr	r1, [r7, #16]
 8002710:	6978      	ldr	r0, [r7, #20]
 8002712:	f7ff fea5 	bl	8002460 <mg_snprintf>
 8002716:	4603      	mov	r3, r0
 8002718:	e2a3      	b.n	8002c62 <mg_dtoa+0x5c2>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 800271a:	ed97 0b02 	vldr	d0, [r7, #8]
 800271e:	f7ff ff93 	bl	8002648 <xisnan>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d007      	beq.n	8002738 <mg_dtoa+0x98>
 8002728:	4b6e      	ldr	r3, [pc, #440]	; (80028e4 <mg_dtoa+0x244>)
 800272a:	4a6b      	ldr	r2, [pc, #428]	; (80028d8 <mg_dtoa+0x238>)
 800272c:	6939      	ldr	r1, [r7, #16]
 800272e:	6978      	ldr	r0, [r7, #20]
 8002730:	f7ff fe96 	bl	8002460 <mg_snprintf>
 8002734:	4603      	mov	r3, r0
 8002736:	e294      	b.n	8002c62 <mg_dtoa+0x5c2>
  if (d < 0.0) d = -d, buf[s++] = '-';
 8002738:	f04f 0200 	mov.w	r2, #0
 800273c:	f04f 0300 	mov.w	r3, #0
 8002740:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002744:	f7fe f9f4 	bl	8000b30 <__aeabi_dcmplt>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00d      	beq.n	800276a <mg_dtoa+0xca>
 800274e:	68bc      	ldr	r4, [r7, #8]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002756:	e9c7 4502 	strd	r4, r5, [r7, #8]
 800275a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800275c:	1c5a      	adds	r2, r3, #1
 800275e:	66ba      	str	r2, [r7, #104]	; 0x68
 8002760:	3370      	adds	r3, #112	; 0x70
 8002762:	443b      	add	r3, r7
 8002764:	222d      	movs	r2, #45	; 0x2d
 8002766:	f803 2c58 	strb.w	r2, [r3, #-88]

  // Round
  saved = d;
 800276a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800276e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  mul = 1.0;
 8002772:	f04f 0200 	mov.w	r2, #0
 8002776:	4b5c      	ldr	r3, [pc, #368]	; (80028e8 <mg_dtoa+0x248>)
 8002778:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 800277c:	e00a      	b.n	8002794 <mg_dtoa+0xf4>
 800277e:	f04f 0200 	mov.w	r2, #0
 8002782:	4b5a      	ldr	r3, [pc, #360]	; (80028ec <mg_dtoa+0x24c>)
 8002784:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002788:	f7fd ff60 	bl	800064c <__aeabi_dmul>
 800278c:	4602      	mov	r2, r0
 800278e:	460b      	mov	r3, r1
 8002790:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	4b54      	ldr	r3, [pc, #336]	; (80028ec <mg_dtoa+0x24c>)
 800279a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800279e:	f7fe f9db 	bl	8000b58 <__aeabi_dcmpge>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d011      	beq.n	80027cc <mg_dtoa+0x12c>
 80027a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80027ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027b0:	f7fe f876 	bl	80008a0 <__aeabi_ddiv>
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	4610      	mov	r0, r2
 80027ba:	4619      	mov	r1, r3
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	4b4a      	ldr	r3, [pc, #296]	; (80028ec <mg_dtoa+0x24c>)
 80027c2:	f7fe f9c9 	bl	8000b58 <__aeabi_dcmpge>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1d8      	bne.n	800277e <mg_dtoa+0xde>
  while (d <= 1.0 && d / mul <= 1.0) mul /= 10.0;
 80027cc:	e00a      	b.n	80027e4 <mg_dtoa+0x144>
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	4b46      	ldr	r3, [pc, #280]	; (80028ec <mg_dtoa+0x24c>)
 80027d4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80027d8:	f7fe f862 	bl	80008a0 <__aeabi_ddiv>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 80027e4:	f04f 0200 	mov.w	r2, #0
 80027e8:	4b3f      	ldr	r3, [pc, #252]	; (80028e8 <mg_dtoa+0x248>)
 80027ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027ee:	f7fe f9a9 	bl	8000b44 <__aeabi_dcmple>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d011      	beq.n	800281c <mg_dtoa+0x17c>
 80027f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80027fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002800:	f7fe f84e 	bl	80008a0 <__aeabi_ddiv>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4610      	mov	r0, r2
 800280a:	4619      	mov	r1, r3
 800280c:	f04f 0200 	mov.w	r2, #0
 8002810:	4b35      	ldr	r3, [pc, #212]	; (80028e8 <mg_dtoa+0x248>)
 8002812:	f7fe f997 	bl	8000b44 <__aeabi_dcmple>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1d8      	bne.n	80027ce <mg_dtoa+0x12e>
  for (i = 0, t = mul * 5; i < width; i++) t /= 10.0;
 800281c:	2300      	movs	r3, #0
 800281e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002820:	f04f 0200 	mov.w	r2, #0
 8002824:	4b32      	ldr	r3, [pc, #200]	; (80028f0 <mg_dtoa+0x250>)
 8002826:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800282a:	f7fd ff0f 	bl	800064c <__aeabi_dmul>
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8002836:	e00d      	b.n	8002854 <mg_dtoa+0x1b4>
 8002838:	f04f 0200 	mov.w	r2, #0
 800283c:	4b2b      	ldr	r3, [pc, #172]	; (80028ec <mg_dtoa+0x24c>)
 800283e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002842:	f7fe f82d 	bl	80008a0 <__aeabi_ddiv>
 8002846:	4602      	mov	r2, r0
 8002848:	460b      	mov	r3, r1
 800284a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 800284e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002850:	3301      	adds	r3, #1
 8002852:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002854:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	429a      	cmp	r2, r3
 800285a:	dbed      	blt.n	8002838 <mg_dtoa+0x198>
  d += t;
 800285c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002860:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002864:	f7fd fd3c 	bl	80002e0 <__adddf3>
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	e9c7 2302 	strd	r2, r3, [r7, #8]
  // Calculate exponent, and 'mul' for scientific representation
  mul = 1.0;
 8002870:	f04f 0200 	mov.w	r2, #0
 8002874:	4b1c      	ldr	r3, [pc, #112]	; (80028e8 <mg_dtoa+0x248>)
 8002876:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0, e++;
 800287a:	e00d      	b.n	8002898 <mg_dtoa+0x1f8>
 800287c:	f04f 0200 	mov.w	r2, #0
 8002880:	4b1a      	ldr	r3, [pc, #104]	; (80028ec <mg_dtoa+0x24c>)
 8002882:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002886:	f7fd fee1 	bl	800064c <__aeabi_dmul>
 800288a:	4602      	mov	r2, r0
 800288c:	460b      	mov	r3, r1
 800288e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8002892:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002894:	3301      	adds	r3, #1
 8002896:	663b      	str	r3, [r7, #96]	; 0x60
 8002898:	f04f 0200 	mov.w	r2, #0
 800289c:	4b13      	ldr	r3, [pc, #76]	; (80028ec <mg_dtoa+0x24c>)
 800289e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028a2:	f7fe f959 	bl	8000b58 <__aeabi_dcmpge>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d011      	beq.n	80028d0 <mg_dtoa+0x230>
 80028ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80028b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028b4:	f7fd fff4 	bl	80008a0 <__aeabi_ddiv>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	4610      	mov	r0, r2
 80028be:	4619      	mov	r1, r3
 80028c0:	f04f 0200 	mov.w	r2, #0
 80028c4:	4b09      	ldr	r3, [pc, #36]	; (80028ec <mg_dtoa+0x24c>)
 80028c6:	f7fe f947 	bl	8000b58 <__aeabi_dcmpge>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1d5      	bne.n	800287c <mg_dtoa+0x1dc>
  while (d < 1.0 && d / mul < 1.0) mul /= 10.0, e--;
 80028d0:	e01e      	b.n	8002910 <mg_dtoa+0x270>
 80028d2:	bf00      	nop
 80028d4:	08013c48 	.word	0x08013c48
 80028d8:	08013c4c 	.word	0x08013c4c
 80028dc:	08013c50 	.word	0x08013c50
 80028e0:	08013c54 	.word	0x08013c54
 80028e4:	08013c5c 	.word	0x08013c5c
 80028e8:	3ff00000 	.word	0x3ff00000
 80028ec:	40240000 	.word	0x40240000
 80028f0:	40140000 	.word	0x40140000
 80028f4:	f04f 0200 	mov.w	r2, #0
 80028f8:	4b99      	ldr	r3, [pc, #612]	; (8002b60 <mg_dtoa+0x4c0>)
 80028fa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80028fe:	f7fd ffcf 	bl	80008a0 <__aeabi_ddiv>
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 800290a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800290c:	3b01      	subs	r3, #1
 800290e:	663b      	str	r3, [r7, #96]	; 0x60
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	4b93      	ldr	r3, [pc, #588]	; (8002b64 <mg_dtoa+0x4c4>)
 8002916:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800291a:	f7fe f909 	bl	8000b30 <__aeabi_dcmplt>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d011      	beq.n	8002948 <mg_dtoa+0x2a8>
 8002924:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002928:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800292c:	f7fd ffb8 	bl	80008a0 <__aeabi_ddiv>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4610      	mov	r0, r2
 8002936:	4619      	mov	r1, r3
 8002938:	f04f 0200 	mov.w	r2, #0
 800293c:	4b89      	ldr	r3, [pc, #548]	; (8002b64 <mg_dtoa+0x4c4>)
 800293e:	f7fe f8f7 	bl	8000b30 <__aeabi_dcmplt>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1d5      	bne.n	80028f4 <mg_dtoa+0x254>
  // printf(" --> %g %d %g %g\n", saved, e, t, mul);

  if (e >= width) {
 8002948:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	429a      	cmp	r2, r3
 800294e:	db30      	blt.n	80029b2 <mg_dtoa+0x312>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width);
 8002950:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002954:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002958:	f7fd ffa2 	bl	80008a0 <__aeabi_ddiv>
 800295c:	4602      	mov	r2, r0
 800295e:	460b      	mov	r3, r1
 8002960:	ec43 2b17 	vmov	d7, r2, r3
 8002964:	f107 0318 	add.w	r3, r7, #24
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	eeb0 0a47 	vmov.f32	s0, s14
 800296e:	eef0 0a67 	vmov.f32	s1, s15
 8002972:	2128      	movs	r1, #40	; 0x28
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff fe93 	bl	80026a0 <mg_dtoa>
 800297a:	4603      	mov	r3, r0
 800297c:	667b      	str	r3, [r7, #100]	; 0x64
    // printf(" --> %.*g %d [%.*s]\n", 10, d / t, e, n, buf);
    n += addexp(buf + s + n, e, '+');
 800297e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002980:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002982:	4413      	add	r3, r2
 8002984:	f107 0218 	add.w	r2, r7, #24
 8002988:	4413      	add	r3, r2
 800298a:	222b      	movs	r2, #43	; 0x2b
 800298c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff fdb0 	bl	80024f4 <addexp>
 8002994:	4602      	mov	r2, r0
 8002996:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002998:	4413      	add	r3, r2
 800299a:	667b      	str	r3, [r7, #100]	; 0x64
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 800299c:	f107 0318 	add.w	r3, r7, #24
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029a4:	4a70      	ldr	r2, [pc, #448]	; (8002b68 <mg_dtoa+0x4c8>)
 80029a6:	6939      	ldr	r1, [r7, #16]
 80029a8:	6978      	ldr	r0, [r7, #20]
 80029aa:	f7ff fd59 	bl	8002460 <mg_snprintf>
 80029ae:	4603      	mov	r3, r0
 80029b0:	e157      	b.n	8002c62 <mg_dtoa+0x5c2>
  } else if (e <= -width) {
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	425b      	negs	r3, r3
 80029b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80029b8:	429a      	cmp	r2, r3
 80029ba:	dc31      	bgt.n	8002a20 <mg_dtoa+0x380>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width);
 80029bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80029c0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80029c4:	f7fd ff6c 	bl	80008a0 <__aeabi_ddiv>
 80029c8:	4602      	mov	r2, r0
 80029ca:	460b      	mov	r3, r1
 80029cc:	ec43 2b17 	vmov	d7, r2, r3
 80029d0:	f107 0318 	add.w	r3, r7, #24
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	eeb0 0a47 	vmov.f32	s0, s14
 80029da:	eef0 0a67 	vmov.f32	s1, s15
 80029de:	2128      	movs	r1, #40	; 0x28
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff fe5d 	bl	80026a0 <mg_dtoa>
 80029e6:	4603      	mov	r3, r0
 80029e8:	667b      	str	r3, [r7, #100]	; 0x64
    // printf(" --> %.*g %d [%.*s]\n", 10, d / mul, e, n, buf);
    n += addexp(buf + s + n, -e, '-');
 80029ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80029ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029ee:	4413      	add	r3, r2
 80029f0:	f107 0218 	add.w	r2, r7, #24
 80029f4:	18d0      	adds	r0, r2, r3
 80029f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029f8:	425b      	negs	r3, r3
 80029fa:	222d      	movs	r2, #45	; 0x2d
 80029fc:	4619      	mov	r1, r3
 80029fe:	f7ff fd79 	bl	80024f4 <addexp>
 8002a02:	4602      	mov	r2, r0
 8002a04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a06:	4413      	add	r3, r2
 8002a08:	667b      	str	r3, [r7, #100]	; 0x64
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8002a0a:	f107 0318 	add.w	r3, r7, #24
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a12:	4a55      	ldr	r2, [pc, #340]	; (8002b68 <mg_dtoa+0x4c8>)
 8002a14:	6939      	ldr	r1, [r7, #16]
 8002a16:	6978      	ldr	r0, [r7, #20]
 8002a18:	f7ff fd22 	bl	8002460 <mg_snprintf>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	e120      	b.n	8002c62 <mg_dtoa+0x5c2>
  } else {
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8002a20:	2300      	movs	r3, #0
 8002a22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002a28:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8002a2c:	e03f      	b.n	8002aae <mg_dtoa+0x40e>
      int ch = (int) (d / t);
 8002a2e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a32:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a36:	f7fd ff33 	bl	80008a0 <__aeabi_ddiv>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	4610      	mov	r0, r2
 8002a40:	4619      	mov	r1, r3
 8002a42:	f7fe f89d 	bl	8000b80 <__aeabi_d2iz>
 8002a46:	4603      	mov	r3, r0
 8002a48:	647b      	str	r3, [r7, #68]	; 0x44
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 8002a4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	dc02      	bgt.n	8002a56 <mg_dtoa+0x3b6>
 8002a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	dd0c      	ble.n	8002a70 <mg_dtoa+0x3d0>
 8002a56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a5c:	1c59      	adds	r1, r3, #1
 8002a5e:	6679      	str	r1, [r7, #100]	; 0x64
 8002a60:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002a62:	440b      	add	r3, r1
 8002a64:	3230      	adds	r2, #48	; 0x30
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	3370      	adds	r3, #112	; 0x70
 8002a6a:	443b      	add	r3, r7
 8002a6c:	f803 2c58 	strb.w	r2, [r3, #-88]
      d -= ch * t;
 8002a70:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002a72:	f7fd fd81 	bl	8000578 <__aeabi_i2d>
 8002a76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a7a:	f7fd fde7 	bl	800064c <__aeabi_dmul>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	460b      	mov	r3, r1
 8002a82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a86:	f7fd fc29 	bl	80002dc <__aeabi_dsub>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	e9c7 2302 	strd	r2, r3, [r7, #8]
      t /= 10.0;
 8002a92:	f04f 0200 	mov.w	r2, #0
 8002a96:	4b32      	ldr	r3, [pc, #200]	; (8002b60 <mg_dtoa+0x4c0>)
 8002a98:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002a9c:	f7fd ff00 	bl	80008a0 <__aeabi_ddiv>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8002aa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aaa:	3301      	adds	r3, #1
 8002aac:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002aae:	f04f 0200 	mov.w	r2, #0
 8002ab2:	4b2c      	ldr	r3, [pc, #176]	; (8002b64 <mg_dtoa+0x4c4>)
 8002ab4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002ab8:	f7fe f84e 	bl	8000b58 <__aeabi_dcmpge>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d004      	beq.n	8002acc <mg_dtoa+0x42c>
 8002ac2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002ac4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ac6:	4413      	add	r3, r2
 8002ac8:	2b27      	cmp	r3, #39	; 0x27
 8002aca:	ddb0      	ble.n	8002a2e <mg_dtoa+0x38e>
    }
    // printf(" --> [%g] -> %g %g (%d) [%.*s]\n", saved, d, t, n, s + n, buf);
    if (n == 0) buf[s++] = '0';
 8002acc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d11b      	bne.n	8002b0a <mg_dtoa+0x46a>
 8002ad2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ad4:	1c5a      	adds	r2, r3, #1
 8002ad6:	66ba      	str	r2, [r7, #104]	; 0x68
 8002ad8:	3370      	adds	r3, #112	; 0x70
 8002ada:	443b      	add	r3, r7
 8002adc:	2230      	movs	r2, #48	; 0x30
 8002ade:	f803 2c58 	strb.w	r2, [r3, #-88]
    while (t >= 1.0 && n + s < (int) sizeof(buf)) buf[n++] = '0', t /= 10.0;
 8002ae2:	e012      	b.n	8002b0a <mg_dtoa+0x46a>
 8002ae4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ae6:	1c5a      	adds	r2, r3, #1
 8002ae8:	667a      	str	r2, [r7, #100]	; 0x64
 8002aea:	3370      	adds	r3, #112	; 0x70
 8002aec:	443b      	add	r3, r7
 8002aee:	2230      	movs	r2, #48	; 0x30
 8002af0:	f803 2c58 	strb.w	r2, [r3, #-88]
 8002af4:	f04f 0200 	mov.w	r2, #0
 8002af8:	4b19      	ldr	r3, [pc, #100]	; (8002b60 <mg_dtoa+0x4c0>)
 8002afa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002afe:	f7fd fecf 	bl	80008a0 <__aeabi_ddiv>
 8002b02:	4602      	mov	r2, r0
 8002b04:	460b      	mov	r3, r1
 8002b06:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8002b0a:	f04f 0200 	mov.w	r2, #0
 8002b0e:	4b15      	ldr	r3, [pc, #84]	; (8002b64 <mg_dtoa+0x4c4>)
 8002b10:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002b14:	f7fe f820 	bl	8000b58 <__aeabi_dcmpge>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d004      	beq.n	8002b28 <mg_dtoa+0x488>
 8002b1e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002b20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b22:	4413      	add	r3, r2
 8002b24:	2b27      	cmp	r3, #39	; 0x27
 8002b26:	dddd      	ble.n	8002ae4 <mg_dtoa+0x444>
    if (s + n < (int) sizeof(buf)) buf[n + s++] = '.';
 8002b28:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002b2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b2c:	4413      	add	r3, r2
 8002b2e:	2b27      	cmp	r3, #39	; 0x27
 8002b30:	dc09      	bgt.n	8002b46 <mg_dtoa+0x4a6>
 8002b32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b34:	1c5a      	adds	r2, r3, #1
 8002b36:	66ba      	str	r2, [r7, #104]	; 0x68
 8002b38:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002b3a:	4413      	add	r3, r2
 8002b3c:	3370      	adds	r3, #112	; 0x70
 8002b3e:	443b      	add	r3, r7
 8002b40:	222e      	movs	r2, #46	; 0x2e
 8002b42:	f803 2c58 	strb.w	r2, [r3, #-88]
    // printf(" 1--> [%g] -> [%.*s]\n", saved, s + n, buf);
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 8002b46:	2300      	movs	r3, #0
 8002b48:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b4a:	a303      	add	r3, pc, #12	; (adr r3, 8002b58 <mg_dtoa+0x4b8>)
 8002b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b50:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8002b54:	e044      	b.n	8002be0 <mg_dtoa+0x540>
 8002b56:	bf00      	nop
 8002b58:	9999999a 	.word	0x9999999a
 8002b5c:	3fb99999 	.word	0x3fb99999
 8002b60:	40240000 	.word	0x40240000
 8002b64:	3ff00000 	.word	0x3ff00000
 8002b68:	08013c60 	.word	0x08013c60
      int ch = (int) (d / t);
 8002b6c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002b70:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b74:	f7fd fe94 	bl	80008a0 <__aeabi_ddiv>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	4610      	mov	r0, r2
 8002b7e:	4619      	mov	r1, r3
 8002b80:	f7fd fffe 	bl	8000b80 <__aeabi_d2iz>
 8002b84:	4603      	mov	r3, r0
 8002b86:	643b      	str	r3, [r7, #64]	; 0x40
      buf[s + n++] = (char) (ch + '0');
 8002b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b8e:	1c59      	adds	r1, r3, #1
 8002b90:	6679      	str	r1, [r7, #100]	; 0x64
 8002b92:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002b94:	440b      	add	r3, r1
 8002b96:	3230      	adds	r2, #48	; 0x30
 8002b98:	b2d2      	uxtb	r2, r2
 8002b9a:	3370      	adds	r3, #112	; 0x70
 8002b9c:	443b      	add	r3, r7
 8002b9e:	f803 2c58 	strb.w	r2, [r3, #-88]
      d -= ch * t;
 8002ba2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002ba4:	f7fd fce8 	bl	8000578 <__aeabi_i2d>
 8002ba8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002bac:	f7fd fd4e 	bl	800064c <__aeabi_dmul>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002bb8:	f7fd fb90 	bl	80002dc <__aeabi_dsub>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	e9c7 2302 	strd	r2, r3, [r7, #8]
      t /= 10.0;
 8002bc4:	f04f 0200 	mov.w	r2, #0
 8002bc8:	4b28      	ldr	r3, [pc, #160]	; (8002c6c <mg_dtoa+0x5cc>)
 8002bca:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002bce:	f7fd fe67 	bl	80008a0 <__aeabi_ddiv>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 8002bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bdc:	3301      	adds	r3, #1
 8002bde:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002be0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002be2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002be4:	4413      	add	r3, r2
 8002be6:	2b27      	cmp	r3, #39	; 0x27
 8002be8:	dc07      	bgt.n	8002bfa <mg_dtoa+0x55a>
 8002bea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	dbbc      	blt.n	8002b6c <mg_dtoa+0x4cc>
    }
  }
  while (n > 0 && buf[s + n - 1] == '0') n--;  // Trim trailing zeros
 8002bf2:	e002      	b.n	8002bfa <mg_dtoa+0x55a>
 8002bf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	667b      	str	r3, [r7, #100]	; 0x64
 8002bfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	dd09      	ble.n	8002c14 <mg_dtoa+0x574>
 8002c00:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002c02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c04:	4413      	add	r3, r2
 8002c06:	3b01      	subs	r3, #1
 8002c08:	3370      	adds	r3, #112	; 0x70
 8002c0a:	443b      	add	r3, r7
 8002c0c:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8002c10:	2b30      	cmp	r3, #48	; 0x30
 8002c12:	d0ef      	beq.n	8002bf4 <mg_dtoa+0x554>
  if (n > 0 && buf[s + n - 1] == '.') n--;     // Trim trailing dot
 8002c14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	dd0c      	ble.n	8002c34 <mg_dtoa+0x594>
 8002c1a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002c1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c1e:	4413      	add	r3, r2
 8002c20:	3b01      	subs	r3, #1
 8002c22:	3370      	adds	r3, #112	; 0x70
 8002c24:	443b      	add	r3, r7
 8002c26:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8002c2a:	2b2e      	cmp	r3, #46	; 0x2e
 8002c2c:	d102      	bne.n	8002c34 <mg_dtoa+0x594>
 8002c2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c30:	3b01      	subs	r3, #1
 8002c32:	667b      	str	r3, [r7, #100]	; 0x64
  n += s;
 8002c34:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002c36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c38:	4413      	add	r3, r2
 8002c3a:	667b      	str	r3, [r7, #100]	; 0x64
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
 8002c3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c3e:	2b27      	cmp	r3, #39	; 0x27
 8002c40:	dd01      	ble.n	8002c46 <mg_dtoa+0x5a6>
 8002c42:	2327      	movs	r3, #39	; 0x27
 8002c44:	667b      	str	r3, [r7, #100]	; 0x64
  buf[n] = '\0';
 8002c46:	f107 0218 	add.w	r2, r7, #24
 8002c4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c4c:	4413      	add	r3, r2
 8002c4e:	2200      	movs	r2, #0
 8002c50:	701a      	strb	r2, [r3, #0]
  return mg_snprintf(dst, dstlen, "%s", buf);
 8002c52:	f107 0318 	add.w	r3, r7, #24
 8002c56:	4a06      	ldr	r2, [pc, #24]	; (8002c70 <mg_dtoa+0x5d0>)
 8002c58:	6939      	ldr	r1, [r7, #16]
 8002c5a:	6978      	ldr	r0, [r7, #20]
 8002c5c:	f7ff fc00 	bl	8002460 <mg_snprintf>
 8002c60:	4603      	mov	r3, r0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3770      	adds	r7, #112	; 0x70
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bdb0      	pop	{r4, r5, r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	40240000 	.word	0x40240000
 8002c70:	08013c4c 	.word	0x08013c4c

08002c74 <mg_lld>:

static size_t mg_lld(char *buf, int64_t val, bool is_signed, bool is_hex) {
 8002c74:	b5b0      	push	{r4, r5, r7, lr}
 8002c76:	b08c      	sub	sp, #48	; 0x30
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	e9c7 2300 	strd	r2, r3, [r7]
  const char *letters = "0123456789abcdef";
 8002c80:	4b53      	ldr	r3, [pc, #332]	; (8002dd0 <mg_lld+0x15c>)
 8002c82:	61bb      	str	r3, [r7, #24]
  uint64_t v = (uint64_t) val;
 8002c84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c88:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  size_t s = 0, n, i;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 8002c90:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d012      	beq.n	8002cbe <mg_lld+0x4a>
 8002c98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	da0e      	bge.n	8002cbe <mg_lld+0x4a>
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	1c5a      	adds	r2, r3, #1
 8002ca4:	627a      	str	r2, [r7, #36]	; 0x24
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	4413      	add	r3, r2
 8002caa:	222d      	movs	r2, #45	; 0x2d
 8002cac:	701a      	strb	r2, [r3, #0]
 8002cae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	4254      	negs	r4, r2
 8002cb6:	eb61 0503 	sbc.w	r5, r1, r3
 8002cba:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // This loop prints a number in reverse order. I guess this is because we
  // write numbers from right to left: least significant digit comes last.
  // Maybe because we use Arabic numbers, and Arabs write RTL?
  if (is_hex) {
 8002cbe:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d021      	beq.n	8002d0a <mg_lld+0x96>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	623b      	str	r3, [r7, #32]
 8002cca:	e019      	b.n	8002d00 <mg_lld+0x8c>
 8002ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cce:	f003 030f 	and.w	r3, r3, #15
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	441a      	add	r2, r3
 8002cd6:	6a3b      	ldr	r3, [r7, #32]
 8002cd8:	1c59      	adds	r1, r3, #1
 8002cda:	6239      	str	r1, [r7, #32]
 8002cdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cde:	440b      	add	r3, r1
 8002ce0:	68f9      	ldr	r1, [r7, #12]
 8002ce2:	440b      	add	r3, r1
 8002ce4:	7812      	ldrb	r2, [r2, #0]
 8002ce6:	701a      	strb	r2, [r3, #0]
 8002ce8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002cec:	f04f 0200 	mov.w	r2, #0
 8002cf0:	f04f 0300 	mov.w	r3, #0
 8002cf4:	0902      	lsrs	r2, r0, #4
 8002cf6:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8002cfa:	090b      	lsrs	r3, r1, #4
 8002cfc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002d00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d04:	4313      	orrs	r3, r2
 8002d06:	d1e1      	bne.n	8002ccc <mg_lld+0x58>
 8002d08:	e025      	b.n	8002d56 <mg_lld+0xe2>
  } else {
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	623b      	str	r3, [r7, #32]
 8002d0e:	e01e      	b.n	8002d4e <mg_lld+0xda>
 8002d10:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d14:	f04f 020a 	mov.w	r2, #10
 8002d18:	f04f 0300 	mov.w	r3, #0
 8002d1c:	f7fd ffc8 	bl	8000cb0 <__aeabi_uldivmod>
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	441a      	add	r2, r3
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	1c59      	adds	r1, r3, #1
 8002d28:	6239      	str	r1, [r7, #32]
 8002d2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d2c:	440b      	add	r3, r1
 8002d2e:	68f9      	ldr	r1, [r7, #12]
 8002d30:	440b      	add	r3, r1
 8002d32:	7812      	ldrb	r2, [r2, #0]
 8002d34:	701a      	strb	r2, [r3, #0]
 8002d36:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d3a:	f04f 020a 	mov.w	r2, #10
 8002d3e:	f04f 0300 	mov.w	r3, #0
 8002d42:	f7fd ffb5 	bl	8000cb0 <__aeabi_uldivmod>
 8002d46:	4602      	mov	r2, r0
 8002d48:	460b      	mov	r3, r1
 8002d4a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002d4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d52:	4313      	orrs	r3, r2
 8002d54:	d1dc      	bne.n	8002d10 <mg_lld+0x9c>
  }
  // Reverse a string
  for (i = 0; i < n / 2; i++) {
 8002d56:	2300      	movs	r3, #0
 8002d58:	61fb      	str	r3, [r7, #28]
 8002d5a:	e022      	b.n	8002da2 <mg_lld+0x12e>
    char t = buf[s + i];
 8002d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	4413      	add	r3, r2
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	4413      	add	r3, r2
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	75fb      	strb	r3, [r7, #23]
    buf[s + i] = buf[s + n - i - 1], buf[s + n - i - 1] = t;
 8002d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	441a      	add	r2, r3
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	3b01      	subs	r3, #1
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	441a      	add	r2, r3
 8002d7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	440b      	add	r3, r1
 8002d80:	68f9      	ldr	r1, [r7, #12]
 8002d82:	440b      	add	r3, r1
 8002d84:	7812      	ldrb	r2, [r2, #0]
 8002d86:	701a      	strb	r2, [r3, #0]
 8002d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	441a      	add	r2, r3
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	3b01      	subs	r3, #1
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	4413      	add	r3, r2
 8002d98:	7dfa      	ldrb	r2, [r7, #23]
 8002d9a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < n / 2; i++) {
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	61fb      	str	r3, [r7, #28]
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	085b      	lsrs	r3, r3, #1
 8002da6:	69fa      	ldr	r2, [r7, #28]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d3d7      	bcc.n	8002d5c <mg_lld+0xe8>
  }
  if (val == 0) buf[n++] = '0';  // Handle special case
 8002dac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	d106      	bne.n	8002dc2 <mg_lld+0x14e>
 8002db4:	6a3b      	ldr	r3, [r7, #32]
 8002db6:	1c5a      	adds	r2, r3, #1
 8002db8:	623a      	str	r2, [r7, #32]
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	2230      	movs	r2, #48	; 0x30
 8002dc0:	701a      	strb	r2, [r3, #0]
  return n + s;
 8002dc2:	6a3a      	ldr	r2, [r7, #32]
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc6:	4413      	add	r3, r2
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3730      	adds	r7, #48	; 0x30
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bdb0      	pop	{r4, r5, r7, pc}
 8002dd0:	08013c68 	.word	0x08013c68

08002dd4 <scpy>:

static size_t scpy(void (*out)(char, void *), void *ptr, char *buf,
                   size_t len) {
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
 8002de0:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 8002de2:	2300      	movs	r3, #0
 8002de4:	617b      	str	r3, [r7, #20]
  while (i < len && buf[i] != '\0') out(buf[i++], ptr);
 8002de6:	e009      	b.n	8002dfc <scpy+0x28>
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	1c5a      	adds	r2, r3, #1
 8002dec:	617a      	str	r2, [r7, #20]
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	4413      	add	r3, r2
 8002df2:	781a      	ldrb	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	68b9      	ldr	r1, [r7, #8]
 8002df8:	4610      	mov	r0, r2
 8002dfa:	4798      	blx	r3
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d205      	bcs.n	8002e10 <scpy+0x3c>
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	4413      	add	r3, r2
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1eb      	bne.n	8002de8 <scpy+0x14>
  return i;
 8002e10:	697b      	ldr	r3, [r7, #20]
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3718      	adds	r7, #24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
	...

08002e1c <mg_esc>:

static char mg_esc(int c, bool esc) {
 8002e1c:	b480      	push	{r7}
 8002e1e:	b087      	sub	sp, #28
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	460b      	mov	r3, r1
 8002e26:	70fb      	strb	r3, [r7, #3]
  const char *p, *esc1 = "\b\f\n\r\t\\\"", *esc2 = "bfnrt\\\"";
 8002e28:	4b19      	ldr	r3, [pc, #100]	; (8002e90 <mg_esc+0x74>)
 8002e2a:	613b      	str	r3, [r7, #16]
 8002e2c:	4b19      	ldr	r3, [pc, #100]	; (8002e94 <mg_esc+0x78>)
 8002e2e:	60fb      	str	r3, [r7, #12]
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 8002e30:	78fb      	ldrb	r3, [r7, #3]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <mg_esc+0x1e>
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	e000      	b.n	8002e3c <mg_esc+0x20>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	617b      	str	r3, [r7, #20]
 8002e3e:	e01b      	b.n	8002e78 <mg_esc+0x5c>
    if (*p == c) return esc ? esc2[p - esc1] : esc1[p - esc2];
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	461a      	mov	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d112      	bne.n	8002e72 <mg_esc+0x56>
 8002e4c:	78fb      	ldrb	r3, [r7, #3]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d007      	beq.n	8002e62 <mg_esc+0x46>
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	461a      	mov	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	e00f      	b.n	8002e82 <mg_esc+0x66>
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	461a      	mov	r2, r3
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	e007      	b.n	8002e82 <mg_esc+0x66>
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	3301      	adds	r3, #1
 8002e76:	617b      	str	r3, [r7, #20]
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1df      	bne.n	8002e40 <mg_esc+0x24>
  }
  return 0;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	371c      	adds	r7, #28
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	08013c7c 	.word	0x08013c7c
 8002e94:	08013c84 	.word	0x08013c84

08002e98 <mg_escape>:

static char mg_escape(int c) {
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  return mg_esc(c, true);
 8002ea0:	2101      	movs	r1, #1
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7ff ffba 	bl	8002e1c <mg_esc>
 8002ea8:	4603      	mov	r3, r0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <qcpy>:

static size_t qcpy(void (*out)(char, void *), void *ptr, char *buf,
                   size_t len) {
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b088      	sub	sp, #32
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	60f8      	str	r0, [r7, #12]
 8002eba:	60b9      	str	r1, [r7, #8]
 8002ebc:	607a      	str	r2, [r7, #4]
 8002ebe:	603b      	str	r3, [r7, #0]
  size_t i = 0, extra = 0;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	61fb      	str	r3, [r7, #28]
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 8002ec8:	2300      	movs	r3, #0
 8002eca:	61fb      	str	r3, [r7, #28]
 8002ecc:	e023      	b.n	8002f16 <qcpy+0x64>
    char c = mg_escape(buf[i]);
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff ffde 	bl	8002e98 <mg_escape>
 8002edc:	4603      	mov	r3, r0
 8002ede:	75fb      	strb	r3, [r7, #23]
    if (c) {
 8002ee0:	7dfb      	ldrb	r3, [r7, #23]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00c      	beq.n	8002f00 <qcpy+0x4e>
      out('\\', ptr), out(c, ptr), extra++;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	68b9      	ldr	r1, [r7, #8]
 8002eea:	205c      	movs	r0, #92	; 0x5c
 8002eec:	4798      	blx	r3
 8002eee:	7dfa      	ldrb	r2, [r7, #23]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	68b9      	ldr	r1, [r7, #8]
 8002ef4:	4610      	mov	r0, r2
 8002ef6:	4798      	blx	r3
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	3301      	adds	r3, #1
 8002efc:	61bb      	str	r3, [r7, #24]
 8002efe:	e007      	b.n	8002f10 <qcpy+0x5e>
    } else {
      out(buf[i], ptr);
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	4413      	add	r3, r2
 8002f06:	781a      	ldrb	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	68b9      	ldr	r1, [r7, #8]
 8002f0c:	4610      	mov	r0, r2
 8002f0e:	4798      	blx	r3
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	3301      	adds	r3, #1
 8002f14:	61fb      	str	r3, [r7, #28]
 8002f16:	69fa      	ldr	r2, [r7, #28]
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d205      	bcs.n	8002f2a <qcpy+0x78>
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	4413      	add	r3, r2
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1d1      	bne.n	8002ece <qcpy+0x1c>
    }
  }
  return i + extra;
 8002f2a:	69fa      	ldr	r2, [r7, #28]
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	4413      	add	r3, r2
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3720      	adds	r7, #32
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <Qcpy>:

static size_t Qcpy(void (*out)(char, void *), void *ptr, char *buf,
                   size_t len) {
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
 8002f44:	603b      	str	r3, [r7, #0]
  size_t n = 2;
 8002f46:	2302      	movs	r3, #2
 8002f48:	617b      	str	r3, [r7, #20]
  out('"', ptr);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	68b9      	ldr	r1, [r7, #8]
 8002f4e:	2022      	movs	r0, #34	; 0x22
 8002f50:	4798      	blx	r3
  n += qcpy(out, ptr, buf, len);
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	68b9      	ldr	r1, [r7, #8]
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f7ff ffaa 	bl	8002eb2 <qcpy>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	4413      	add	r3, r2
 8002f64:	617b      	str	r3, [r7, #20]
  out('"', ptr);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	68b9      	ldr	r1, [r7, #8]
 8002f6a:	2022      	movs	r0, #34	; 0x22
 8002f6c:	4798      	blx	r3
  return n;
 8002f6e:	697b      	ldr	r3, [r7, #20]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3718      	adds	r7, #24
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <bcpy>:

static size_t bcpy(void (*out)(char, void *), void *ptr, uint8_t *buf,
                   size_t len) {
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b08a      	sub	sp, #40	; 0x28
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
 8002f84:	603b      	str	r3, [r7, #0]
  size_t i, n = 0;
 8002f86:	2300      	movs	r3, #0
 8002f88:	623b      	str	r3, [r7, #32]
  const char *t =
 8002f8a:	4b40      	ldr	r3, [pc, #256]	; (800308c <bcpy+0x114>)
 8002f8c:	61fb      	str	r3, [r7, #28]
      "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  out('"', ptr), n++;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	68b9      	ldr	r1, [r7, #8]
 8002f92:	2022      	movs	r0, #34	; 0x22
 8002f94:	4798      	blx	r3
 8002f96:	6a3b      	ldr	r3, [r7, #32]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	623b      	str	r3, [r7, #32]
  for (i = 0; i < len; i += 3) {
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8002fa0:	e063      	b.n	800306a <bcpy+0xf2>
    uint8_t c1 = buf[i], c2 = i + 1 < len ? buf[i + 1] : 0,
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa6:	4413      	add	r3, r2
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	76fb      	strb	r3, [r7, #27]
 8002fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fae:	3301      	adds	r3, #1
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d905      	bls.n	8002fc2 <bcpy+0x4a>
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	3301      	adds	r3, #1
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	e000      	b.n	8002fc4 <bcpy+0x4c>
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	76bb      	strb	r3, [r7, #26]
            c3 = i + 2 < len ? buf[i + 2] : 0;
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	3302      	adds	r3, #2
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d905      	bls.n	8002fdc <bcpy+0x64>
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	3302      	adds	r3, #2
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	e000      	b.n	8002fde <bcpy+0x66>
 8002fdc:	2300      	movs	r3, #0
 8002fde:	767b      	strb	r3, [r7, #25]
    char tmp[4] = {t[c1 >> 2], t[(c1 & 3) << 4 | (c2 >> 4)], '=', '='};
 8002fe0:	7efb      	ldrb	r3, [r7, #27]
 8002fe2:	089b      	lsrs	r3, r3, #2
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	4413      	add	r3, r2
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	753b      	strb	r3, [r7, #20]
 8002ff0:	7efb      	ldrb	r3, [r7, #27]
 8002ff2:	011b      	lsls	r3, r3, #4
 8002ff4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002ff8:	7eba      	ldrb	r2, [r7, #26]
 8002ffa:	0912      	lsrs	r2, r2, #4
 8002ffc:	b2d2      	uxtb	r2, r2
 8002ffe:	4313      	orrs	r3, r2
 8003000:	461a      	mov	r2, r3
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	4413      	add	r3, r2
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	757b      	strb	r3, [r7, #21]
 800300a:	233d      	movs	r3, #61	; 0x3d
 800300c:	75bb      	strb	r3, [r7, #22]
 800300e:	233d      	movs	r3, #61	; 0x3d
 8003010:	75fb      	strb	r3, [r7, #23]
    if (i + 1 < len) tmp[2] = t[(c2 & 15) << 2 | (c3 >> 6)];
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	3301      	adds	r3, #1
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	429a      	cmp	r2, r3
 800301a:	d90c      	bls.n	8003036 <bcpy+0xbe>
 800301c:	7ebb      	ldrb	r3, [r7, #26]
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003024:	7e7a      	ldrb	r2, [r7, #25]
 8003026:	0992      	lsrs	r2, r2, #6
 8003028:	b2d2      	uxtb	r2, r2
 800302a:	4313      	orrs	r3, r2
 800302c:	461a      	mov	r2, r3
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	4413      	add	r3, r2
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	75bb      	strb	r3, [r7, #22]
    if (i + 2 < len) tmp[3] = t[c3 & 63];
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	3302      	adds	r3, #2
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	429a      	cmp	r2, r3
 800303e:	d906      	bls.n	800304e <bcpy+0xd6>
 8003040:	7e7b      	ldrb	r3, [r7, #25]
 8003042:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003046:	69fa      	ldr	r2, [r7, #28]
 8003048:	4413      	add	r3, r2
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	75fb      	strb	r3, [r7, #23]
    n += scpy(out, ptr, tmp, sizeof(tmp));
 800304e:	f107 0214 	add.w	r2, r7, #20
 8003052:	2304      	movs	r3, #4
 8003054:	68b9      	ldr	r1, [r7, #8]
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f7ff febc 	bl	8002dd4 <scpy>
 800305c:	4602      	mov	r2, r0
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	4413      	add	r3, r2
 8003062:	623b      	str	r3, [r7, #32]
  for (i = 0; i < len; i += 3) {
 8003064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003066:	3303      	adds	r3, #3
 8003068:	627b      	str	r3, [r7, #36]	; 0x24
 800306a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	429a      	cmp	r2, r3
 8003070:	d397      	bcc.n	8002fa2 <bcpy+0x2a>
  }
  out('"', ptr), n++;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	68b9      	ldr	r1, [r7, #8]
 8003076:	2022      	movs	r0, #34	; 0x22
 8003078:	4798      	blx	r3
 800307a:	6a3b      	ldr	r3, [r7, #32]
 800307c:	3301      	adds	r3, #1
 800307e:	623b      	str	r3, [r7, #32]
  return n;
 8003080:	6a3b      	ldr	r3, [r7, #32]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3728      	adds	r7, #40	; 0x28
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	08013c8c 	.word	0x08013c8c

08003090 <mg_vxprintf>:

size_t mg_vxprintf(void (*out)(char, void *), void *param, const char *fmt,
                   va_list *ap) {
 8003090:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003094:	b0ad      	sub	sp, #180	; 0xb4
 8003096:	af02      	add	r7, sp, #8
 8003098:	60f8      	str	r0, [r7, #12]
 800309a:	60b9      	str	r1, [r7, #8]
 800309c:	607a      	str	r2, [r7, #4]
 800309e:	603b      	str	r3, [r7, #0]
  size_t i = 0, n = 0;
 80030a0:	2300      	movs	r3, #0
 80030a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80030a6:	2300      	movs	r3, #0
 80030a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  while (fmt[i] != '\0') {
 80030ac:	f000 bc45 	b.w	800393a <mg_vxprintf+0x8aa>
    if (fmt[i] == '%') {
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80030b6:	4413      	add	r3, r2
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	2b25      	cmp	r3, #37	; 0x25
 80030bc:	f040 842a 	bne.w	8003914 <mg_vxprintf+0x884>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 80030c0:	2300      	movs	r3, #0
 80030c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80030c6:	2300      	movs	r3, #0
 80030c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80030cc:	2300      	movs	r3, #0
 80030ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80030d2:	f04f 33ff 	mov.w	r3, #4294967295
 80030d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      char pad = ' ', minus = 0, c = fmt[++i];
 80030da:	2320      	movs	r3, #32
 80030dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80030e0:	2300      	movs	r3, #0
 80030e2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80030e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80030ea:	3301      	adds	r3, #1
 80030ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80030f6:	4413      	add	r3, r2
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
      if (c == '#') x++, c = fmt[++i];
 80030fe:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8003102:	2b23      	cmp	r3, #35	; 0x23
 8003104:	d110      	bne.n	8003128 <mg_vxprintf+0x98>
 8003106:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800310a:	3301      	adds	r3, #1
 800310c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003110:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003114:	3301      	adds	r3, #1
 8003116:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003120:	4413      	add	r3, r2
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
      if (c == '-') minus++, c = fmt[++i];
 8003128:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800312c:	2b2d      	cmp	r3, #45	; 0x2d
 800312e:	d110      	bne.n	8003152 <mg_vxprintf+0xc2>
 8003130:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8003134:	3301      	adds	r3, #1
 8003136:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800313a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800313e:	3301      	adds	r3, #1
 8003140:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800314a:	4413      	add	r3, r2
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
      if (c == '0') pad = '0', c = fmt[++i];
 8003152:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8003156:	2b30      	cmp	r3, #48	; 0x30
 8003158:	d12b      	bne.n	80031b2 <mg_vxprintf+0x122>
 800315a:	2330      	movs	r3, #48	; 0x30
 800315c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003160:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003164:	3301      	adds	r3, #1
 8003166:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003170:	4413      	add	r3, r2
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
      while (is_digit(c)) w *= 10, w += (size_t) (c - '0'), c = fmt[++i];
 8003178:	e01b      	b.n	80031b2 <mg_vxprintf+0x122>
 800317a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800317e:	4613      	mov	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800318a:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 800318e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003192:	4413      	add	r3, r2
 8003194:	3b30      	subs	r3, #48	; 0x30
 8003196:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800319a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800319e:	3301      	adds	r3, #1
 80031a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80031aa:	4413      	add	r3, r2
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80031b2:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7ff f986 	bl	80024c8 <is_digit>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1db      	bne.n	800317a <mg_vxprintf+0xea>
      if (c == '.') {
 80031c2:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80031c6:	2b2e      	cmp	r3, #46	; 0x2e
 80031c8:	d159      	bne.n	800327e <mg_vxprintf+0x1ee>
        c = fmt[++i];
 80031ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80031ce:	3301      	adds	r3, #1
 80031d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80031da:	4413      	add	r3, r2
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
        if (c == '*') {
 80031e2:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80031e6:	2b2a      	cmp	r3, #42	; 0x2a
 80031e8:	d114      	bne.n	8003214 <mg_vxprintf+0x184>
          pr = (size_t) va_arg(*ap, int);
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	1d19      	adds	r1, r3, #4
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	6011      	str	r1, [r2, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          c = fmt[++i];
 80031fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80031fe:	3301      	adds	r3, #1
 8003200:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800320a:	4413      	add	r3, r2
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8003212:	e034      	b.n	800327e <mg_vxprintf+0x1ee>
        } else {
          pr = 0;
 8003214:	2300      	movs	r3, #0
 8003216:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          while (is_digit(c)) pr *= 10, pr += (size_t) (c - '0'), c = fmt[++i];
 800321a:	e01b      	b.n	8003254 <mg_vxprintf+0x1c4>
 800321c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003220:	4613      	mov	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800322c:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 8003230:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003234:	4413      	add	r3, r2
 8003236:	3b30      	subs	r3, #48	; 0x30
 8003238:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800323c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003240:	3301      	adds	r3, #1
 8003242:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800324c:	4413      	add	r3, r2
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8003254:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff f935 	bl	80024c8 <is_digit>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1db      	bne.n	800321c <mg_vxprintf+0x18c>
        }
      }
      while (c == 'h') c = fmt[++i];  // Treat h and hh as int
 8003264:	e00b      	b.n	800327e <mg_vxprintf+0x1ee>
 8003266:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800326a:	3301      	adds	r3, #1
 800326c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003276:	4413      	add	r3, r2
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800327e:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8003282:	2b68      	cmp	r3, #104	; 0x68
 8003284:	d0ef      	beq.n	8003266 <mg_vxprintf+0x1d6>
      if (c == 'l') {
 8003286:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800328a:	2b6c      	cmp	r3, #108	; 0x6c
 800328c:	d125      	bne.n	80032da <mg_vxprintf+0x24a>
        is_long++, c = fmt[++i];
 800328e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003292:	3301      	adds	r3, #1
 8003294:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003298:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800329c:	3301      	adds	r3, #1
 800329e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80032a8:	4413      	add	r3, r2
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
        if (c == 'l') is_long++, c = fmt[++i];
 80032b0:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80032b4:	2b6c      	cmp	r3, #108	; 0x6c
 80032b6:	d110      	bne.n	80032da <mg_vxprintf+0x24a>
 80032b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032bc:	3301      	adds	r3, #1
 80032be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80032c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80032c6:	3301      	adds	r3, #1
 80032c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80032d2:	4413      	add	r3, r2
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
      }
      if (c == 'p') x = 1, is_long = 1;
 80032da:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80032de:	2b70      	cmp	r3, #112	; 0x70
 80032e0:	d105      	bne.n	80032ee <mg_vxprintf+0x25e>
 80032e2:	2301      	movs	r3, #1
 80032e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80032e8:	2301      	movs	r3, #1
 80032ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 80032ee:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80032f2:	2b64      	cmp	r3, #100	; 0x64
 80032f4:	d018      	beq.n	8003328 <mg_vxprintf+0x298>
 80032f6:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80032fa:	2b75      	cmp	r3, #117	; 0x75
 80032fc:	d014      	beq.n	8003328 <mg_vxprintf+0x298>
 80032fe:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8003302:	2b78      	cmp	r3, #120	; 0x78
 8003304:	d010      	beq.n	8003328 <mg_vxprintf+0x298>
 8003306:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800330a:	2b58      	cmp	r3, #88	; 0x58
 800330c:	d00c      	beq.n	8003328 <mg_vxprintf+0x298>
 800330e:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8003312:	2b70      	cmp	r3, #112	; 0x70
 8003314:	d008      	beq.n	8003328 <mg_vxprintf+0x298>
 8003316:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800331a:	2b67      	cmp	r3, #103	; 0x67
 800331c:	d004      	beq.n	8003328 <mg_vxprintf+0x298>
          c == 'g' || c == 'f') {
 800331e:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8003322:	2b66      	cmp	r3, #102	; 0x66
 8003324:	f040 8175 	bne.w	8003612 <mg_vxprintf+0x582>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 8003328:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800332c:	2b64      	cmp	r3, #100	; 0x64
 800332e:	bf0c      	ite	eq
 8003330:	2301      	moveq	r3, #1
 8003332:	2300      	movne	r3, #0
 8003334:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003338:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800333c:	2b78      	cmp	r3, #120	; 0x78
 800333e:	d007      	beq.n	8003350 <mg_vxprintf+0x2c0>
 8003340:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8003344:	2b58      	cmp	r3, #88	; 0x58
 8003346:	d003      	beq.n	8003350 <mg_vxprintf+0x2c0>
 8003348:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800334c:	2b70      	cmp	r3, #112	; 0x70
 800334e:	d101      	bne.n	8003354 <mg_vxprintf+0x2c4>
 8003350:	2301      	movs	r3, #1
 8003352:	e000      	b.n	8003356 <mg_vxprintf+0x2c6>
 8003354:	2300      	movs	r3, #0
 8003356:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 800335a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        char tmp[40];
        size_t xl = x ? 2 : 0;
 8003366:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <mg_vxprintf+0x2e2>
 800336e:	2302      	movs	r3, #2
 8003370:	e000      	b.n	8003374 <mg_vxprintf+0x2e4>
 8003372:	2300      	movs	r3, #0
 8003374:	65bb      	str	r3, [r7, #88]	; 0x58
        if (c == 'g' || c == 'f') {
 8003376:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800337a:	2b67      	cmp	r3, #103	; 0x67
 800337c:	d003      	beq.n	8003386 <mg_vxprintf+0x2f6>
 800337e:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8003382:	2b66      	cmp	r3, #102	; 0x66
 8003384:	d121      	bne.n	80033ca <mg_vxprintf+0x33a>
          double v = va_arg(*ap, double);
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	3307      	adds	r3, #7
 800338c:	f023 0307 	bic.w	r3, r3, #7
 8003390:	f103 0108 	add.w	r1, r3, #8
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	6011      	str	r1, [r2, #0]
 8003398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          if (pr == ~0U) pr = 6;
 80033a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a8:	d102      	bne.n	80033b0 <mg_vxprintf+0x320>
 80033aa:	2306      	movs	r3, #6
 80033ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          k = mg_dtoa(tmp, sizeof(tmp), v, (int) pr);
 80033b0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80033b4:	f107 0314 	add.w	r3, r7, #20
 80033b8:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80033bc:	2128      	movs	r1, #40	; 0x28
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff f96e 	bl	80026a0 <mg_dtoa>
 80033c4:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
        if (c == 'g' || c == 'f') {
 80033c8:	e06b      	b.n	80034a2 <mg_vxprintf+0x412>
        } else if (is_long == 2) {
 80033ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d11c      	bne.n	800340c <mg_vxprintf+0x37c>
          int64_t v = va_arg(*ap, int64_t);
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	3307      	adds	r3, #7
 80033d8:	f023 0307 	bic.w	r3, r3, #7
 80033dc:	f103 0108 	add.w	r1, r3, #8
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	6011      	str	r1, [r2, #0]
 80033e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
          k = mg_lld(tmp, v, s, h);
 80033ec:	f107 0114 	add.w	r1, r7, #20
 80033f0:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80033f4:	9301      	str	r3, [sp, #4]
 80033f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003400:	4608      	mov	r0, r1
 8003402:	f7ff fc37 	bl	8002c74 <mg_lld>
 8003406:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
 800340a:	e04a      	b.n	80034a2 <mg_vxprintf+0x412>
        } else if (is_long == 1) {
 800340c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003410:	2b01      	cmp	r3, #1
 8003412:	d123      	bne.n	800345c <mg_vxprintf+0x3cc>
          long v = va_arg(*ap, long);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	1d19      	adds	r1, r3, #4
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	6011      	str	r1, [r2, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	653b      	str	r3, [r7, #80]	; 0x50
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned long) v, s, h);
 8003422:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003426:	2b00      	cmp	r3, #0
 8003428:	d004      	beq.n	8003434 <mg_vxprintf+0x3a4>
 800342a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800342c:	17da      	asrs	r2, r3, #31
 800342e:	461c      	mov	r4, r3
 8003430:	4615      	mov	r5, r2
 8003432:	e003      	b.n	800343c <mg_vxprintf+0x3ac>
 8003434:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003436:	2200      	movs	r2, #0
 8003438:	461c      	mov	r4, r3
 800343a:	4615      	mov	r5, r2
 800343c:	f107 0114 	add.w	r1, r7, #20
 8003440:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8003444:	9301      	str	r3, [sp, #4]
 8003446:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	4622      	mov	r2, r4
 800344e:	462b      	mov	r3, r5
 8003450:	4608      	mov	r0, r1
 8003452:	f7ff fc0f 	bl	8002c74 <mg_lld>
 8003456:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
 800345a:	e022      	b.n	80034a2 <mg_vxprintf+0x412>
        } else {
          int v = va_arg(*ap, int);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	1d19      	adds	r1, r3, #4
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	6011      	str	r1, [r2, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	657b      	str	r3, [r7, #84]	; 0x54
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 800346a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800346e:	2b00      	cmp	r3, #0
 8003470:	d004      	beq.n	800347c <mg_vxprintf+0x3ec>
 8003472:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003474:	17da      	asrs	r2, r3, #31
 8003476:	4698      	mov	r8, r3
 8003478:	4691      	mov	r9, r2
 800347a:	e003      	b.n	8003484 <mg_vxprintf+0x3f4>
 800347c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800347e:	2200      	movs	r2, #0
 8003480:	4698      	mov	r8, r3
 8003482:	4691      	mov	r9, r2
 8003484:	f107 0114 	add.w	r1, r7, #20
 8003488:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800348c:	9301      	str	r3, [sp, #4]
 800348e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	4642      	mov	r2, r8
 8003496:	464b      	mov	r3, r9
 8003498:	4608      	mov	r0, r1
 800349a:	f7ff fbeb 	bl	8002c74 <mg_lld>
 800349e:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
        }
        for (j = 0; j < xl && w > 0; j++) w--;
 80034a2:	2300      	movs	r3, #0
 80034a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80034a8:	e009      	b.n	80034be <mg_vxprintf+0x42e>
 80034aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034ae:	3b01      	subs	r3, #1
 80034b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80034b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80034b8:	3301      	adds	r3, #1
 80034ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80034be:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80034c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d203      	bcs.n	80034d0 <mg_vxprintf+0x440>
 80034c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1ec      	bne.n	80034aa <mg_vxprintf+0x41a>
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 80034d0:	2300      	movs	r3, #0
 80034d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80034d6:	e011      	b.n	80034fc <mg_vxprintf+0x46c>
          n += scpy(out, param, &pad, 1);
 80034d8:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 80034dc:	2301      	movs	r3, #1
 80034de:	68b9      	ldr	r1, [r7, #8]
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f7ff fc77 	bl	8002dd4 <scpy>
 80034e6:	4602      	mov	r2, r0
 80034e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80034ec:	4413      	add	r3, r2
 80034ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 80034f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80034f6:	3301      	adds	r3, #1
 80034f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80034fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003500:	2b20      	cmp	r3, #32
 8003502:	d112      	bne.n	800352a <mg_vxprintf+0x49a>
 8003504:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10e      	bne.n	800352a <mg_vxprintf+0x49a>
 800350c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003510:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003514:	429a      	cmp	r2, r3
 8003516:	d208      	bcs.n	800352a <mg_vxprintf+0x49a>
 8003518:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800351c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003520:	4413      	add	r3, r2
 8003522:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003526:	429a      	cmp	r2, r3
 8003528:	d8d6      	bhi.n	80034d8 <mg_vxprintf+0x448>
        n += scpy(out, param, (char *) "0x", xl);
 800352a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800352c:	4ab1      	ldr	r2, [pc, #708]	; (80037f4 <mg_vxprintf+0x764>)
 800352e:	68b9      	ldr	r1, [r7, #8]
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f7ff fc4f 	bl	8002dd4 <scpy>
 8003536:	4602      	mov	r2, r0
 8003538:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800353c:	4413      	add	r3, r2
 800353e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8003542:	2300      	movs	r3, #0
 8003544:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003548:	e011      	b.n	800356e <mg_vxprintf+0x4de>
          n += scpy(out, param, &pad, 1);
 800354a:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 800354e:	2301      	movs	r3, #1
 8003550:	68b9      	ldr	r1, [r7, #8]
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f7ff fc3e 	bl	8002dd4 <scpy>
 8003558:	4602      	mov	r2, r0
 800355a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800355e:	4413      	add	r3, r2
 8003560:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8003564:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003568:	3301      	adds	r3, #1
 800356a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800356e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003572:	2b30      	cmp	r3, #48	; 0x30
 8003574:	d10e      	bne.n	8003594 <mg_vxprintf+0x504>
 8003576:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800357a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800357e:	429a      	cmp	r2, r3
 8003580:	d208      	bcs.n	8003594 <mg_vxprintf+0x504>
 8003582:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003586:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800358a:	4413      	add	r3, r2
 800358c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003590:	429a      	cmp	r2, r3
 8003592:	d8da      	bhi.n	800354a <mg_vxprintf+0x4ba>
        n += scpy(out, param, tmp, k);
 8003594:	f107 0214 	add.w	r2, r7, #20
 8003598:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800359c:	68b9      	ldr	r1, [r7, #8]
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f7ff fc18 	bl	8002dd4 <scpy>
 80035a4:	4602      	mov	r2, r0
 80035a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80035aa:	4413      	add	r3, r2
 80035ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 80035b0:	2300      	movs	r3, #0
 80035b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80035b6:	e011      	b.n	80035dc <mg_vxprintf+0x54c>
          n += scpy(out, param, &pad, 1);
 80035b8:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 80035bc:	2301      	movs	r3, #1
 80035be:	68b9      	ldr	r1, [r7, #8]
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f7ff fc07 	bl	8002dd4 <scpy>
 80035c6:	4602      	mov	r2, r0
 80035c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80035cc:	4413      	add	r3, r2
 80035ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 80035d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80035d6:	3301      	adds	r3, #1
 80035d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80035dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80035e0:	2b20      	cmp	r3, #32
 80035e2:	f040 818e 	bne.w	8003902 <mg_vxprintf+0x872>
 80035e6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f000 8189 	beq.w	8003902 <mg_vxprintf+0x872>
 80035f0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80035f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035f8:	429a      	cmp	r2, r3
 80035fa:	f080 8182 	bcs.w	8003902 <mg_vxprintf+0x872>
 80035fe:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003602:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003606:	4413      	add	r3, r2
 8003608:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800360c:	429a      	cmp	r2, r3
 800360e:	d8d3      	bhi.n	80035b8 <mg_vxprintf+0x528>
          c == 'g' || c == 'f') {
 8003610:	e177      	b.n	8003902 <mg_vxprintf+0x872>
      } else if (c == 'M') {
 8003612:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8003616:	2b4d      	cmp	r3, #77	; 0x4d
 8003618:	d112      	bne.n	8003640 <mg_vxprintf+0x5b0>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	1d19      	adds	r1, r3, #4
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	6011      	str	r1, [r2, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	663b      	str	r3, [r7, #96]	; 0x60
        n += f(out, param, ap);
 8003628:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	68b9      	ldr	r1, [r7, #8]
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	4798      	blx	r3
 8003632:	4602      	mov	r2, r0
 8003634:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003638:	4413      	add	r3, r2
 800363a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800363e:	e163      	b.n	8003908 <mg_vxprintf+0x878>
      } else if (c == 'c') {
 8003640:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8003644:	2b63      	cmp	r3, #99	; 0x63
 8003646:	d112      	bne.n	800366e <mg_vxprintf+0x5de>
        int ch = va_arg(*ap, int);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	1d19      	adds	r1, r3, #4
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	6011      	str	r1, [r2, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	667b      	str	r3, [r7, #100]	; 0x64
        out((char) ch, param);
 8003656:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003658:	b2da      	uxtb	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	68b9      	ldr	r1, [r7, #8]
 800365e:	4610      	mov	r0, r2
 8003660:	4798      	blx	r3
        n++;
 8003662:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003666:	3301      	adds	r3, #1
 8003668:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800366c:	e14c      	b.n	8003908 <mg_vxprintf+0x878>
      } else if (c == 'H') {
 800366e:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8003672:	2b48      	cmp	r3, #72	; 0x48
 8003674:	d165      	bne.n	8003742 <mg_vxprintf+0x6b2>
        // Print hex-encoded double-quoted string
        size_t bl = (size_t) va_arg(*ap, int);
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	1d19      	adds	r1, r3, #4
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	6011      	str	r1, [r2, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	673b      	str	r3, [r7, #112]	; 0x70
        uint8_t *p = va_arg(*ap, uint8_t *), dquote = '"';
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	1d19      	adds	r1, r3, #4
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	6011      	str	r1, [r2, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003692:	2322      	movs	r3, #34	; 0x22
 8003694:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        const char *hex = "0123456789abcdef";
 8003698:	4b57      	ldr	r3, [pc, #348]	; (80037f8 <mg_vxprintf+0x768>)
 800369a:	66bb      	str	r3, [r7, #104]	; 0x68
        n += scpy(out, param, (char *) &dquote, 1);
 800369c:	f107 023e 	add.w	r2, r7, #62	; 0x3e
 80036a0:	2301      	movs	r3, #1
 80036a2:	68b9      	ldr	r1, [r7, #8]
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f7ff fb95 	bl	8002dd4 <scpy>
 80036aa:	4602      	mov	r2, r0
 80036ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80036b0:	4413      	add	r3, r2
 80036b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        for (j = 0; j < bl; j++) {
 80036b6:	2300      	movs	r3, #0
 80036b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80036bc:	e02e      	b.n	800371c <mg_vxprintf+0x68c>
          n += scpy(out, param, (char *) &hex[(p[j] >> 4) & 15], 1);
 80036be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80036c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80036c4:	4413      	add	r3, r2
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	091b      	lsrs	r3, r3, #4
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	f003 030f 	and.w	r3, r3, #15
 80036d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80036d2:	441a      	add	r2, r3
 80036d4:	2301      	movs	r3, #1
 80036d6:	68b9      	ldr	r1, [r7, #8]
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f7ff fb7b 	bl	8002dd4 <scpy>
 80036de:	4602      	mov	r2, r0
 80036e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80036e4:	4413      	add	r3, r2
 80036e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
          n += scpy(out, param, (char *) &hex[p[j] & 15], 1);
 80036ea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80036ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80036f0:	4413      	add	r3, r2
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	f003 030f 	and.w	r3, r3, #15
 80036f8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80036fa:	441a      	add	r2, r3
 80036fc:	2301      	movs	r3, #1
 80036fe:	68b9      	ldr	r1, [r7, #8]
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f7ff fb67 	bl	8002dd4 <scpy>
 8003706:	4602      	mov	r2, r0
 8003708:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800370c:	4413      	add	r3, r2
 800370e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        for (j = 0; j < bl; j++) {
 8003712:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003716:	3301      	adds	r3, #1
 8003718:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800371c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003720:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003722:	429a      	cmp	r2, r3
 8003724:	d3cb      	bcc.n	80036be <mg_vxprintf+0x62e>
        }
        n += scpy(out, param, (char *) &dquote, 1);
 8003726:	f107 023e 	add.w	r2, r7, #62	; 0x3e
 800372a:	2301      	movs	r3, #1
 800372c:	68b9      	ldr	r1, [r7, #8]
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f7ff fb50 	bl	8002dd4 <scpy>
 8003734:	4602      	mov	r2, r0
 8003736:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800373a:	4413      	add	r3, r2
 800373c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003740:	e0e2      	b.n	8003908 <mg_vxprintf+0x878>
      } else if (c == 'V') {
 8003742:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8003746:	2b56      	cmp	r3, #86	; 0x56
 8003748:	d11a      	bne.n	8003780 <mg_vxprintf+0x6f0>
        // Print base64-encoded double-quoted string
        size_t len = (size_t) va_arg(*ap, int);
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	1d19      	adds	r1, r3, #4
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	6011      	str	r1, [r2, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	67bb      	str	r3, [r7, #120]	; 0x78
        uint8_t *buf = va_arg(*ap, uint8_t *);
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	1d19      	adds	r1, r3, #4
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	6011      	str	r1, [r2, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	677b      	str	r3, [r7, #116]	; 0x74
        n += bcpy(out, param, buf, len);
 8003766:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003768:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800376a:	68b9      	ldr	r1, [r7, #8]
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f7ff fc03 	bl	8002f78 <bcpy>
 8003772:	4602      	mov	r2, r0
 8003774:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003778:	4413      	add	r3, r2
 800377a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800377e:	e0c3      	b.n	8003908 <mg_vxprintf+0x878>
      } else if (c == 's' || c == 'Q' || c == 'q') {
 8003780:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8003784:	2b73      	cmp	r3, #115	; 0x73
 8003786:	d008      	beq.n	800379a <mg_vxprintf+0x70a>
 8003788:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800378c:	2b51      	cmp	r3, #81	; 0x51
 800378e:	d004      	beq.n	800379a <mg_vxprintf+0x70a>
 8003790:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8003794:	2b71      	cmp	r3, #113	; 0x71
 8003796:	f040 8096 	bne.w	80038c6 <mg_vxprintf+0x836>
        char *p = va_arg(*ap, char *);
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	1d19      	adds	r1, r3, #4
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	6011      	str	r1, [r2, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	67fb      	str	r3, [r7, #124]	; 0x7c
        size_t (*f)(void (*)(char, void *), void *, char *, size_t) = scpy;
 80037a8:	4b14      	ldr	r3, [pc, #80]	; (80037fc <mg_vxprintf+0x76c>)
 80037aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        if (c == 'Q') f = Qcpy;
 80037ae:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80037b2:	2b51      	cmp	r3, #81	; 0x51
 80037b4:	d102      	bne.n	80037bc <mg_vxprintf+0x72c>
 80037b6:	4b12      	ldr	r3, [pc, #72]	; (8003800 <mg_vxprintf+0x770>)
 80037b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        if (c == 'q') f = qcpy;
 80037bc:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80037c0:	2b71      	cmp	r3, #113	; 0x71
 80037c2:	d102      	bne.n	80037ca <mg_vxprintf+0x73a>
 80037c4:	4b0f      	ldr	r3, [pc, #60]	; (8003804 <mg_vxprintf+0x774>)
 80037c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 80037ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d2:	d10a      	bne.n	80037ea <mg_vxprintf+0x75a>
 80037d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d004      	beq.n	80037e4 <mg_vxprintf+0x754>
 80037da:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80037dc:	f7fc fd72 	bl	80002c4 <strlen>
 80037e0:	4603      	mov	r3, r0
 80037e2:	e000      	b.n	80037e6 <mg_vxprintf+0x756>
 80037e4:	2300      	movs	r3, #0
 80037e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 80037ea:	2300      	movs	r3, #0
 80037ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80037f0:	e01d      	b.n	800382e <mg_vxprintf+0x79e>
 80037f2:	bf00      	nop
 80037f4:	08013cd0 	.word	0x08013cd0
 80037f8:	08013c68 	.word	0x08013c68
 80037fc:	08002dd5 	.word	0x08002dd5
 8003800:	08002f39 	.word	0x08002f39
 8003804:	08002eb3 	.word	0x08002eb3
          n += f(out, param, &pad, 1);
 8003808:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 800380c:	f8d7 6080 	ldr.w	r6, [r7, #128]	; 0x80
 8003810:	2301      	movs	r3, #1
 8003812:	68b9      	ldr	r1, [r7, #8]
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	47b0      	blx	r6
 8003818:	4602      	mov	r2, r0
 800381a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800381e:	4413      	add	r3, r2
 8003820:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8003824:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003828:	3301      	adds	r3, #1
 800382a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800382e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10e      	bne.n	8003854 <mg_vxprintf+0x7c4>
 8003836:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800383a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800383e:	429a      	cmp	r2, r3
 8003840:	d208      	bcs.n	8003854 <mg_vxprintf+0x7c4>
 8003842:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003846:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800384a:	4413      	add	r3, r2
 800384c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003850:	429a      	cmp	r2, r3
 8003852:	d8d9      	bhi.n	8003808 <mg_vxprintf+0x778>
        n += f(out, param, p, pr);
 8003854:	f8d7 6080 	ldr.w	r6, [r7, #128]	; 0x80
 8003858:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800385c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800385e:	68b9      	ldr	r1, [r7, #8]
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	47b0      	blx	r6
 8003864:	4602      	mov	r2, r0
 8003866:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800386a:	4413      	add	r3, r2
 800386c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8003870:	2300      	movs	r3, #0
 8003872:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003876:	e012      	b.n	800389e <mg_vxprintf+0x80e>
          n += f(out, param, &pad, 1);
 8003878:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 800387c:	f8d7 6080 	ldr.w	r6, [r7, #128]	; 0x80
 8003880:	2301      	movs	r3, #1
 8003882:	68b9      	ldr	r1, [r7, #8]
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	47b0      	blx	r6
 8003888:	4602      	mov	r2, r0
 800388a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800388e:	4413      	add	r3, r2
 8003890:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8003894:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003898:	3301      	adds	r3, #1
 800389a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800389e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d02f      	beq.n	8003906 <mg_vxprintf+0x876>
 80038a6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80038aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d229      	bcs.n	8003906 <mg_vxprintf+0x876>
 80038b2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80038b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038ba:	4413      	add	r3, r2
 80038bc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d8d9      	bhi.n	8003878 <mg_vxprintf+0x7e8>
      } else if (c == 's' || c == 'Q' || c == 'q') {
 80038c4:	e01f      	b.n	8003906 <mg_vxprintf+0x876>
      } else if (c == '%') {
 80038c6:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80038ca:	2b25      	cmp	r3, #37	; 0x25
 80038cc:	d109      	bne.n	80038e2 <mg_vxprintf+0x852>
        out('%', param);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	68b9      	ldr	r1, [r7, #8]
 80038d2:	2025      	movs	r0, #37	; 0x25
 80038d4:	4798      	blx	r3
        n++;
 80038d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80038da:	3301      	adds	r3, #1
 80038dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80038e0:	e012      	b.n	8003908 <mg_vxprintf+0x878>
      } else {
        out('%', param);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	68b9      	ldr	r1, [r7, #8]
 80038e6:	2025      	movs	r0, #37	; 0x25
 80038e8:	4798      	blx	r3
        out(c, param);
 80038ea:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	68b9      	ldr	r1, [r7, #8]
 80038f2:	4610      	mov	r0, r2
 80038f4:	4798      	blx	r3
        n += 2;
 80038f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80038fa:	3302      	adds	r3, #2
 80038fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003900:	e002      	b.n	8003908 <mg_vxprintf+0x878>
          c == 'g' || c == 'f') {
 8003902:	bf00      	nop
 8003904:	e000      	b.n	8003908 <mg_vxprintf+0x878>
      } else if (c == 's' || c == 'Q' || c == 'q') {
 8003906:	bf00      	nop
      }
      i++;
 8003908:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800390c:	3301      	adds	r3, #1
 800390e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003912:	e012      	b.n	800393a <mg_vxprintf+0x8aa>
    } else {
      out(fmt[i], param), n++, i++;
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800391a:	4413      	add	r3, r2
 800391c:	781a      	ldrb	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	68b9      	ldr	r1, [r7, #8]
 8003922:	4610      	mov	r0, r2
 8003924:	4798      	blx	r3
 8003926:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800392a:	3301      	adds	r3, #1
 800392c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003930:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003934:	3301      	adds	r3, #1
 8003936:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  while (fmt[i] != '\0') {
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003940:	4413      	add	r3, r2
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	f47f abb3 	bne.w	80030b0 <mg_vxprintf+0x20>
    }
  }
  return n;
 800394a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
}
 800394e:	4618      	mov	r0, r3
 8003950:	37ac      	adds	r7, #172	; 0xac
 8003952:	46bd      	mov	sp, r7
 8003954:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003958 <mg_fs_open>:
#line 1 "src/fs.c"
#endif



struct mg_fd *mg_fs_open(struct mg_fs *fs, const char *path, int flags) {
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
  struct mg_fd *fd = (struct mg_fd *) calloc(1, sizeof(*fd));
 8003964:	2108      	movs	r1, #8
 8003966:	2001      	movs	r0, #1
 8003968:	f00e fe94 	bl	8012694 <calloc>
 800396c:	4603      	mov	r3, r0
 800396e:	617b      	str	r3, [r7, #20]
  if (fd != NULL) {
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d013      	beq.n	800399e <mg_fs_open+0x46>
    fd->fd = fs->op(path, flags);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	68b8      	ldr	r0, [r7, #8]
 800397e:	4798      	blx	r3
 8003980:	4602      	mov	r2, r0
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	601a      	str	r2, [r3, #0]
    fd->fs = fs;
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	605a      	str	r2, [r3, #4]
    if (fd->fd == NULL) {
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d104      	bne.n	800399e <mg_fs_open+0x46>
      free(fd);
 8003994:	6978      	ldr	r0, [r7, #20]
 8003996:	f00e feb7 	bl	8012708 <free>
      fd = NULL;
 800399a:	2300      	movs	r3, #0
 800399c:	617b      	str	r3, [r7, #20]
    }
  }
  return fd;
 800399e:	697b      	ldr	r3, [r7, #20]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3718      	adds	r7, #24
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <mg_fs_close>:

void mg_fs_close(struct mg_fd *fd) {
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  if (fd != NULL) {
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d009      	beq.n	80039ca <mg_fs_close+0x22>
    fd->fs->cl(fd->fd);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6812      	ldr	r2, [r2, #0]
 80039c0:	4610      	mov	r0, r2
 80039c2:	4798      	blx	r3
    free(fd);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f00e fe9f 	bl	8012708 <free>
  }
}
 80039ca:	bf00      	nop
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <is_dir_prefix>:
  (void) no;
  return NULL;
}
#endif

static int is_dir_prefix(const char *prefix, size_t n, const char *path) {
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b084      	sub	sp, #16
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	60f8      	str	r0, [r7, #12]
 80039da:	60b9      	str	r1, [r7, #8]
 80039dc:	607a      	str	r2, [r7, #4]
  // MG_INFO(("[%.*s] [%s] %c", (int) n, prefix, path, path[n]));
  return n < strlen(path) && strncmp(prefix, path, n) == 0 &&
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7fc fc70 	bl	80002c4 <strlen>
 80039e4:	4602      	mov	r2, r0
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d219      	bcs.n	8003a20 <is_dir_prefix+0x4e>
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f00f f8b8 	bl	8012b66 <strncmp>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d111      	bne.n	8003a20 <is_dir_prefix+0x4e>
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00c      	beq.n	8003a1c <is_dir_prefix+0x4a>
         (n == 0 || path[n] == '/' || path[n - 1] == '/');
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	4413      	add	r3, r2
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	2b2f      	cmp	r3, #47	; 0x2f
 8003a0c:	d006      	beq.n	8003a1c <is_dir_prefix+0x4a>
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	3b01      	subs	r3, #1
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	4413      	add	r3, r2
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	2b2f      	cmp	r3, #47	; 0x2f
 8003a1a:	d101      	bne.n	8003a20 <is_dir_prefix+0x4e>
  return n < strlen(path) && strncmp(prefix, path, n) == 0 &&
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e000      	b.n	8003a22 <is_dir_prefix+0x50>
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <packed_stat>:

static int packed_stat(const char *path, size_t *size, time_t *mtime) {
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b088      	sub	sp, #32
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	60f8      	str	r0, [r7, #12]
 8003a32:	60b9      	str	r1, [r7, #8]
 8003a34:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t i, n = strlen(path);
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f7fc fc44 	bl	80002c4 <strlen>
 8003a3c:	61b8      	str	r0, [r7, #24]
  if (mg_unpack(path, size, mtime)) return MG_FS_READ;  // Regular file
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	68b9      	ldr	r1, [r7, #8]
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f00b fc2a 	bl	800f29c <mg_unpack>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <packed_stat+0x28>
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e017      	b.n	8003a82 <packed_stat+0x58>
  // Scan all files. If `path` is a dir prefix for any of them, it's a dir
  for (i = 0; (p = mg_unlist(i)) != NULL; i++) {
 8003a52:	2300      	movs	r3, #0
 8003a54:	61fb      	str	r3, [r7, #28]
 8003a56:	e00c      	b.n	8003a72 <packed_stat+0x48>
    if (is_dir_prefix(path, n, p)) return MG_FS_DIR;
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	69b9      	ldr	r1, [r7, #24]
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f7ff ffb8 	bl	80039d2 <is_dir_prefix>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <packed_stat+0x42>
 8003a68:	2304      	movs	r3, #4
 8003a6a:	e00a      	b.n	8003a82 <packed_stat+0x58>
  for (i = 0; (p = mg_unlist(i)) != NULL; i++) {
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	61fb      	str	r3, [r7, #28]
 8003a72:	69f8      	ldr	r0, [r7, #28]
 8003a74:	f00b fbfe 	bl	800f274 <mg_unlist>
 8003a78:	6178      	str	r0, [r7, #20]
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1eb      	bne.n	8003a58 <packed_stat+0x2e>
  }
  return 0;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3720      	adds	r7, #32
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
	...

08003a8c <packed_list>:

static void packed_list(const char *dir, void (*fn)(const char *, void *),
                        void *userdata) {
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b0be      	sub	sp, #248	; 0xf8
 8003a90:	af02      	add	r7, sp, #8
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
  char buf[MG_PATH_MAX], tmp[sizeof(buf)];
  const char *path, *begin, *end;
  size_t i, n = strlen(dir);
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f7fc fc13 	bl	80002c4 <strlen>
 8003a9e:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  tmp[0] = '\0';  // Previously listed entry
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	753b      	strb	r3, [r7, #20]
  for (i = 0; (path = mg_unlist(i)) != NULL; i++) {
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003aac:	e05a      	b.n	8003b64 <packed_list+0xd8>
    if (!is_dir_prefix(dir, n, path)) continue;
 8003aae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003ab2:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f7ff ff8b 	bl	80039d2 <is_dir_prefix>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d048      	beq.n	8003b54 <packed_list+0xc8>
    begin = &path[n + 1];
 8003ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003acc:	4413      	add	r3, r2
 8003ace:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    end = strchr(begin, '/');
 8003ad2:	212f      	movs	r1, #47	; 0x2f
 8003ad4:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8003ad8:	f00f f813 	bl	8012b02 <strchr>
 8003adc:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
    if (end == NULL) end = begin + strlen(begin);
 8003ae0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d109      	bne.n	8003afc <packed_list+0x70>
 8003ae8:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8003aec:	f7fc fbea 	bl	80002c4 <strlen>
 8003af0:	4602      	mov	r2, r0
 8003af2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003af6:	4413      	add	r3, r2
 8003af8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    mg_snprintf(buf, sizeof(buf), "%.*s", (int) (end - begin), begin);
 8003afc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003b00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b04:	1ad2      	subs	r2, r2, r3
 8003b06:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8003b0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	4613      	mov	r3, r2
 8003b12:	4a1c      	ldr	r2, [pc, #112]	; (8003b84 <packed_list+0xf8>)
 8003b14:	2164      	movs	r1, #100	; 0x64
 8003b16:	f7fe fca3 	bl	8002460 <mg_snprintf>
    buf[sizeof(buf) - 1] = '\0';
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
    // If this entry has been already listed, skip
    // NOTE: we're assuming that file list is sorted alphabetically
    if (strcmp(buf, tmp) == 0) continue;
 8003b20:	f107 0214 	add.w	r2, r7, #20
 8003b24:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003b28:	4611      	mov	r1, r2
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7fc fbc0 	bl	80002b0 <strcmp>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d010      	beq.n	8003b58 <packed_list+0xcc>
    fn(buf, userdata);  // Not yet listed, call user function
 8003b36:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	6879      	ldr	r1, [r7, #4]
 8003b3e:	4610      	mov	r0, r2
 8003b40:	4798      	blx	r3
    strcpy(tmp, buf);   // And save this entry as listed
 8003b42:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003b46:	f107 0314 	add.w	r3, r7, #20
 8003b4a:	4611      	mov	r1, r2
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f00e ffe5 	bl	8012b1c <strcpy>
 8003b52:	e002      	b.n	8003b5a <packed_list+0xce>
    if (!is_dir_prefix(dir, n, path)) continue;
 8003b54:	bf00      	nop
 8003b56:	e000      	b.n	8003b5a <packed_list+0xce>
    if (strcmp(buf, tmp) == 0) continue;
 8003b58:	bf00      	nop
  for (i = 0; (path = mg_unlist(i)) != NULL; i++) {
 8003b5a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003b5e:	3301      	adds	r3, #1
 8003b60:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b64:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8003b68:	f00b fb84 	bl	800f274 <mg_unlist>
 8003b6c:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
 8003b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d19a      	bne.n	8003aae <packed_list+0x22>
  }
}
 8003b78:	bf00      	nop
 8003b7a:	bf00      	nop
 8003b7c:	37f0      	adds	r7, #240	; 0xf0
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	08013c60 	.word	0x08013c60

08003b88 <packed_open>:

static void *packed_open(const char *path, int flags) {
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  size_t size = 0;
 8003b92:	2300      	movs	r3, #0
 8003b94:	60fb      	str	r3, [r7, #12]
  const char *data = mg_unpack(path, &size, NULL);
 8003b96:	f107 030c 	add.w	r3, r7, #12
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f00b fb7c 	bl	800f29c <mg_unpack>
 8003ba4:	6178      	str	r0, [r7, #20]
  struct packed_file *fp = NULL;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	613b      	str	r3, [r7, #16]
  if (data == NULL) return NULL;
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d101      	bne.n	8003bb4 <packed_open+0x2c>
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	e013      	b.n	8003bdc <packed_open+0x54>
  if (flags & MG_FS_WRITE) return NULL;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <packed_open+0x3a>
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	e00c      	b.n	8003bdc <packed_open+0x54>
  fp = (struct packed_file *) calloc(1, sizeof(*fp));
 8003bc2:	210c      	movs	r1, #12
 8003bc4:	2001      	movs	r0, #1
 8003bc6:	f00e fd65 	bl	8012694 <calloc>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	613b      	str	r3, [r7, #16]
  fp->size = size;
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	605a      	str	r2, [r3, #4]
  fp->data = data;
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	601a      	str	r2, [r3, #0]
  return (void *) fp;
 8003bda:	693b      	ldr	r3, [r7, #16]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3718      	adds	r7, #24
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <packed_close>:

static void packed_close(void *fp) {
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  if (fp != NULL) free(fp);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d002      	beq.n	8003bf8 <packed_close+0x14>
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f00e fd88 	bl	8012708 <free>
}
 8003bf8:	bf00      	nop
 8003bfa:	3708      	adds	r7, #8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <packed_read>:

static size_t packed_read(void *fd, void *buf, size_t len) {
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b086      	sub	sp, #24
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
  struct packed_file *fp = (struct packed_file *) fd;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	617b      	str	r3, [r7, #20]
  if (fp->pos + len > fp->size) len = fp->size - fp->pos;
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	689a      	ldr	r2, [r3, #8]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	441a      	add	r2, r3
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d905      	bls.n	8003c2c <packed_read+0x2c>
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	607b      	str	r3, [r7, #4]
  memcpy(buf, &fp->data[fp->pos], len);
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	4413      	add	r3, r2
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	4619      	mov	r1, r3
 8003c3a:	68b8      	ldr	r0, [r7, #8]
 8003c3c:	f00e fd7c 	bl	8012738 <memcpy>
  fp->pos += len;
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	441a      	add	r2, r3
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	609a      	str	r2, [r3, #8]
  return len;
 8003c4c:	687b      	ldr	r3, [r7, #4]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <packed_write>:

static size_t packed_write(void *fd, const void *buf, size_t len) {
 8003c56:	b480      	push	{r7}
 8003c58:	b085      	sub	sp, #20
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	60f8      	str	r0, [r7, #12]
 8003c5e:	60b9      	str	r1, [r7, #8]
 8003c60:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3714      	adds	r7, #20
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <packed_seek>:

static size_t packed_seek(void *fd, size_t offset) {
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  struct packed_file *fp = (struct packed_file *) fd;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	60fb      	str	r3, [r7, #12]
  fp->pos = offset;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	609a      	str	r2, [r3, #8]
  if (fp->pos > fp->size) fp->pos = fp->size;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d903      	bls.n	8003c98 <packed_seek+0x28>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	609a      	str	r2, [r3, #8]
  return fp->pos;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	689b      	ldr	r3, [r3, #8]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3714      	adds	r7, #20
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <packed_rename>:

static bool packed_rename(const char *from, const char *to) {
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <packed_remove>:

static bool packed_remove(const char *path) {
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <packed_mkdir>:

static bool packed_mkdir(const char *path) {
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <p_stat>:
  return mkdir(path, 0775) == 0;
}

#else

static int p_stat(const char *path, size_t *size, time_t *mtime) {
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
  (void) path, (void) size, (void) mtime;
  return 0;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3714      	adds	r7, #20
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <p_list>:
static void p_list(const char *path, void (*fn)(const char *, void *),
                   void *userdata) {
 8003d06:	b480      	push	{r7}
 8003d08:	b085      	sub	sp, #20
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	60f8      	str	r0, [r7, #12]
 8003d0e:	60b9      	str	r1, [r7, #8]
 8003d10:	607a      	str	r2, [r7, #4]
  (void) path, (void) fn, (void) userdata;
}
 8003d12:	bf00      	nop
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <p_open>:
static void *p_open(const char *path, int flags) {
 8003d1e:	b480      	push	{r7}
 8003d20:	b083      	sub	sp, #12
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
 8003d26:	6039      	str	r1, [r7, #0]
  (void) path, (void) flags;
  return NULL;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <p_close>:
static void p_close(void *fp) {
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  (void) fp;
}
 8003d3e:	bf00      	nop
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <p_read>:
static size_t p_read(void *fd, void *buf, size_t len) {
 8003d4a:	b480      	push	{r7}
 8003d4c:	b085      	sub	sp, #20
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	60f8      	str	r0, [r7, #12]
 8003d52:	60b9      	str	r1, [r7, #8]
 8003d54:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3714      	adds	r7, #20
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <p_write>:
static size_t p_write(void *fd, const void *buf, size_t len) {
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr

08003d7e <p_seek>:
static size_t p_seek(void *fd, size_t offset) {
 8003d7e:	b480      	push	{r7}
 8003d80:	b083      	sub	sp, #12
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
 8003d86:	6039      	str	r1, [r7, #0]
  (void) fd, (void) offset;
  return (size_t) ~0;
 8003d88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <p_rename>:
static bool p_rename(const char *from, const char *to) {
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <p_remove>:
static bool p_remove(const char *path) {
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <p_mkdir>:
static bool p_mkdir(const char *path) {
 8003dc6:	b480      	push	{r7}
 8003dc8:	b083      	sub	sp, #12
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <mg_http_var>:
    MG_ERROR(("%lu %s cannot resize iobuf %d->%d ", c->id, c->label,
              (int) c->send.size, (int) need));
  }
}

struct mg_str mg_http_var(struct mg_str buf, struct mg_str name) {
 8003ddc:	b082      	sub	sp, #8
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b08a      	sub	sp, #40	; 0x28
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	60f8      	str	r0, [r7, #12]
 8003de6:	1d38      	adds	r0, r7, #4
 8003de8:	e880 0006 	stmia.w	r0, {r1, r2}
 8003dec:	637b      	str	r3, [r7, #52]	; 0x34
  struct mg_str k, v, result = mg_str_n(NULL, 0);
 8003dee:	f107 0310 	add.w	r3, r7, #16
 8003df2:	2200      	movs	r2, #0
 8003df4:	2100      	movs	r1, #0
 8003df6:	4618      	mov	r0, r3
 8003df8:	f006 fa6d 	bl	800a2d6 <mg_str_n>
  while (mg_split(&buf, &k, &v, '&')) {
 8003dfc:	e015      	b.n	8003e2a <mg_http_var+0x4e>
    if (name.len == k.len && mg_ncasecmp(name.ptr, k.ptr, k.len) == 0) {
 8003dfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d111      	bne.n	8003e2a <mg_http_var+0x4e>
 8003e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e08:	6a39      	ldr	r1, [r7, #32]
 8003e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f006 fa91 	bl	800a334 <mg_ncasecmp>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d108      	bne.n	8003e2a <mg_http_var+0x4e>
      result = v;
 8003e18:	f107 0310 	add.w	r3, r7, #16
 8003e1c:	f107 0218 	add.w	r2, r7, #24
 8003e20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e24:	e883 0003 	stmia.w	r3, {r0, r1}
      break;
 8003e28:	e00a      	b.n	8003e40 <mg_http_var+0x64>
  while (mg_split(&buf, &k, &v, '&')) {
 8003e2a:	f107 0218 	add.w	r2, r7, #24
 8003e2e:	f107 0120 	add.w	r1, r7, #32
 8003e32:	1d38      	adds	r0, r7, #4
 8003e34:	2326      	movs	r3, #38	; 0x26
 8003e36:	f006 fca9 	bl	800a78c <mg_split>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1de      	bne.n	8003dfe <mg_http_var+0x22>
    }
  }
  return result;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	461a      	mov	r2, r3
 8003e44:	f107 0310 	add.w	r3, r7, #16
 8003e48:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003e4c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8003e50:	68f8      	ldr	r0, [r7, #12]
 8003e52:	3728      	adds	r7, #40	; 0x28
 8003e54:	46bd      	mov	sp, r7
 8003e56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e5a:	b002      	add	sp, #8
 8003e5c:	4770      	bx	lr

08003e5e <mg_http_get_var>:

int mg_http_get_var(const struct mg_str *buf, const char *name, char *dst,
                    size_t dst_len) {
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b08c      	sub	sp, #48	; 0x30
 8003e62:	af02      	add	r7, sp, #8
 8003e64:	60f8      	str	r0, [r7, #12]
 8003e66:	60b9      	str	r1, [r7, #8]
 8003e68:	607a      	str	r2, [r7, #4]
 8003e6a:	603b      	str	r3, [r7, #0]
  int len;
  if (dst == NULL || dst_len == 0) {
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d002      	beq.n	8003e78 <mg_http_get_var+0x1a>
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d103      	bne.n	8003e80 <mg_http_get_var+0x22>
    len = -2;  // Bad destination
 8003e78:	f06f 0301 	mvn.w	r3, #1
 8003e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e7e:	e036      	b.n	8003eee <mg_http_get_var+0x90>
  } else if (buf->ptr == NULL || name == NULL || buf->len == 0) {
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d006      	beq.n	8003e96 <mg_http_get_var+0x38>
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <mg_http_get_var+0x38>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d106      	bne.n	8003ea4 <mg_http_get_var+0x46>
    len = -1;  // Bad source
 8003e96:	f04f 33ff 	mov.w	r3, #4294967295
 8003e9a:	627b      	str	r3, [r7, #36]	; 0x24
    dst[0] = '\0';
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	701a      	strb	r2, [r3, #0]
 8003ea2:	e024      	b.n	8003eee <mg_http_get_var+0x90>
  } else {
    struct mg_str v = mg_http_var(*buf, mg_str(name));
 8003ea4:	f107 031c 	add.w	r3, r7, #28
 8003ea8:	68b9      	ldr	r1, [r7, #8]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f006 f9f6 	bl	800a29c <mg_str_s>
 8003eb0:	f107 0014 	add.w	r0, r7, #20
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
 8003eb8:	9300      	str	r3, [sp, #0]
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	ca06      	ldmia	r2, {r1, r2}
 8003ebe:	f7ff ff8d 	bl	8003ddc <mg_http_var>
    if (v.ptr == NULL) {
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d103      	bne.n	8003ed0 <mg_http_get_var+0x72>
      len = -4;  // Name does not exist
 8003ec8:	f06f 0303 	mvn.w	r3, #3
 8003ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8003ece:	e00e      	b.n	8003eee <mg_http_get_var+0x90>
    } else {
      len = mg_url_decode(v.ptr, v.len, dst, dst_len, 1);
 8003ed0:	6978      	ldr	r0, [r7, #20]
 8003ed2:	69b9      	ldr	r1, [r7, #24]
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	f000 f82e 	bl	8003f3c <mg_url_decode>
 8003ee0:	6278      	str	r0, [r7, #36]	; 0x24
      if (len < 0) len = -3;  // Failed to decode
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	da02      	bge.n	8003eee <mg_http_get_var+0x90>
 8003ee8:	f06f 0302 	mvn.w	r3, #2
 8003eec:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  return len;
 8003eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3728      	adds	r7, #40	; 0x28
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <isx>:

static bool isx(int c) {
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b2f      	cmp	r3, #47	; 0x2f
 8003f04:	dd02      	ble.n	8003f0c <isx+0x14>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b39      	cmp	r3, #57	; 0x39
 8003f0a:	dd0b      	ble.n	8003f24 <isx+0x2c>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b60      	cmp	r3, #96	; 0x60
 8003f10:	dd02      	ble.n	8003f18 <isx+0x20>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2b66      	cmp	r3, #102	; 0x66
 8003f16:	dd05      	ble.n	8003f24 <isx+0x2c>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b40      	cmp	r3, #64	; 0x40
 8003f1c:	dd04      	ble.n	8003f28 <isx+0x30>
         (c >= 'A' && c <= 'F');
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2b46      	cmp	r3, #70	; 0x46
 8003f22:	dc01      	bgt.n	8003f28 <isx+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8003f24:	2301      	movs	r3, #1
 8003f26:	e000      	b.n	8003f2a <isx+0x32>
 8003f28:	2300      	movs	r3, #0
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	b2db      	uxtb	r3, r3
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <mg_url_decode>:

int mg_url_decode(const char *src, size_t src_len, char *dst, size_t dst_len,
                  int is_form_url_encoded) {
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
 8003f48:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	613b      	str	r3, [r7, #16]
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	617b      	str	r3, [r7, #20]
 8003f52:	e04f      	b.n	8003ff4 <mg_url_decode+0xb8>
    if (src[i] == '%') {
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	4413      	add	r3, r2
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	2b25      	cmp	r3, #37	; 0x25
 8003f5e:	d12c      	bne.n	8003fba <mg_url_decode+0x7e>
      // Use `i + 2 < src_len`, not `i < src_len - 2`, note small src_len
      if (i + 2 < src_len && isx(src[i + 1]) && isx(src[i + 2])) {
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	3302      	adds	r3, #2
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d924      	bls.n	8003fb4 <mg_url_decode+0x78>
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	4413      	add	r3, r2
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff ffbf 	bl	8003ef8 <isx>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d019      	beq.n	8003fb4 <mg_url_decode+0x78>
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	3302      	adds	r3, #2
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	4413      	add	r3, r2
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7ff ffb4 	bl	8003ef8 <isx>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00e      	beq.n	8003fb4 <mg_url_decode+0x78>
        mg_unhex(src + i + 1, 2, (uint8_t *) &dst[j]);
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	18d0      	adds	r0, r2, r3
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	2102      	movs	r1, #2
 8003fa8:	f006 fcfd 	bl	800a9a6 <mg_unhex>
        i += 2;
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	3302      	adds	r3, #2
 8003fb0:	617b      	str	r3, [r7, #20]
 8003fb2:	e019      	b.n	8003fe8 <mg_url_decode+0xac>
      } else {
        return -1;
 8003fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8003fb8:	e03a      	b.n	8004030 <mg_url_decode+0xf4>
      }
    } else if (is_form_url_encoded && src[i] == '+') {
 8003fba:	6a3b      	ldr	r3, [r7, #32]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00b      	beq.n	8003fd8 <mg_url_decode+0x9c>
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	2b2b      	cmp	r3, #43	; 0x2b
 8003fca:	d105      	bne.n	8003fd8 <mg_url_decode+0x9c>
      dst[j] = ' ';
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	701a      	strb	r2, [r3, #0]
 8003fd6:	e007      	b.n	8003fe8 <mg_url_decode+0xac>
    } else {
      dst[j] = src[i];
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	441a      	add	r2, r3
 8003fde:	6879      	ldr	r1, [r7, #4]
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	440b      	add	r3, r1
 8003fe4:	7812      	ldrb	r2, [r2, #0]
 8003fe6:	701a      	strb	r2, [r3, #0]
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	3301      	adds	r3, #1
 8003fec:	617b      	str	r3, [r7, #20]
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	613b      	str	r3, [r7, #16]
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d204      	bcs.n	8004006 <mg_url_decode+0xca>
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	3301      	adds	r3, #1
 8004000:	683a      	ldr	r2, [r7, #0]
 8004002:	429a      	cmp	r2, r3
 8004004:	d8a6      	bhi.n	8003f54 <mg_url_decode+0x18>
    }
  }
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	429a      	cmp	r2, r3
 800400c:	d204      	bcs.n	8004018 <mg_url_decode+0xdc>
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	4413      	add	r3, r2
 8004014:	2200      	movs	r2, #0
 8004016:	701a      	strb	r2, [r3, #0]
  return i >= src_len && j < dst_len ? (int) j : -1;
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	429a      	cmp	r2, r3
 800401e:	d305      	bcc.n	800402c <mg_url_decode+0xf0>
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	429a      	cmp	r2, r3
 8004026:	d201      	bcs.n	800402c <mg_url_decode+0xf0>
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	e001      	b.n	8004030 <mg_url_decode+0xf4>
 800402c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004030:	4618      	mov	r0, r3
 8004032:	3718      	adds	r7, #24
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <isok>:

static bool isok(uint8_t c) {
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	4603      	mov	r3, r0
 8004040:	71fb      	strb	r3, [r7, #7]
  return c == '\n' || c == '\r' || c >= ' ';
 8004042:	79fb      	ldrb	r3, [r7, #7]
 8004044:	2b0a      	cmp	r3, #10
 8004046:	d005      	beq.n	8004054 <isok+0x1c>
 8004048:	79fb      	ldrb	r3, [r7, #7]
 800404a:	2b0d      	cmp	r3, #13
 800404c:	d002      	beq.n	8004054 <isok+0x1c>
 800404e:	79fb      	ldrb	r3, [r7, #7]
 8004050:	2b1f      	cmp	r3, #31
 8004052:	d901      	bls.n	8004058 <isok+0x20>
 8004054:	2301      	movs	r3, #1
 8004056:	e000      	b.n	800405a <isok+0x22>
 8004058:	2300      	movs	r3, #0
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	b2db      	uxtb	r3, r3
}
 8004060:	4618      	mov	r0, r3
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <mg_http_get_request_len>:

int mg_http_get_request_len(const unsigned char *buf, size_t buf_len) {
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < buf_len; i++) {
 8004076:	2300      	movs	r3, #0
 8004078:	60fb      	str	r3, [r7, #12]
 800407a:	e03c      	b.n	80040f6 <mg_http_get_request_len+0x8a>
    if (!isok(buf[i])) return -1;
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	4413      	add	r3, r2
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	4618      	mov	r0, r3
 8004086:	f7ff ffd7 	bl	8004038 <isok>
 800408a:	4603      	mov	r3, r0
 800408c:	f083 0301 	eor.w	r3, r3, #1
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d002      	beq.n	800409c <mg_http_get_request_len+0x30>
 8004096:	f04f 33ff 	mov.w	r3, #4294967295
 800409a:	e031      	b.n	8004100 <mg_http_get_request_len+0x94>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00c      	beq.n	80040bc <mg_http_get_request_len+0x50>
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	4413      	add	r3, r2
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	2b0a      	cmp	r3, #10
 80040ac:	d106      	bne.n	80040bc <mg_http_get_request_len+0x50>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	3b01      	subs	r3, #1
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	4413      	add	r3, r2
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	2b0a      	cmp	r3, #10
 80040ba:	d016      	beq.n	80040ea <mg_http_get_request_len+0x7e>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2b03      	cmp	r3, #3
 80040c0:	d916      	bls.n	80040f0 <mg_http_get_request_len+0x84>
        (i > 3 && buf[i] == '\n' && buf[i - 1] == '\r' && buf[i - 2] == '\n'))
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	4413      	add	r3, r2
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	2b0a      	cmp	r3, #10
 80040cc:	d110      	bne.n	80040f0 <mg_http_get_request_len+0x84>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	3b01      	subs	r3, #1
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	4413      	add	r3, r2
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	2b0d      	cmp	r3, #13
 80040da:	d109      	bne.n	80040f0 <mg_http_get_request_len+0x84>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	3b02      	subs	r3, #2
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	4413      	add	r3, r2
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	2b0a      	cmp	r3, #10
 80040e8:	d102      	bne.n	80040f0 <mg_http_get_request_len+0x84>
      return (int) i + 1;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	3301      	adds	r3, #1
 80040ee:	e007      	b.n	8004100 <mg_http_get_request_len+0x94>
  for (i = 0; i < buf_len; i++) {
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	3301      	adds	r3, #1
 80040f4:	60fb      	str	r3, [r7, #12]
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d3be      	bcc.n	800407c <mg_http_get_request_len+0x10>
  }
  return 0;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <skip>:

static const char *skip(const char *s, const char *e, const char *d,
                        struct mg_str *v) {
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
 8004114:	603b      	str	r3, [r7, #0]
  v->ptr = s;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	601a      	str	r2, [r3, #0]
  while (s < e && *s != '\n' && strchr(d, *s) == NULL) s++;
 800411c:	e002      	b.n	8004124 <skip+0x1c>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	3301      	adds	r3, #1
 8004122:	60fb      	str	r3, [r7, #12]
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	429a      	cmp	r2, r3
 800412a:	d20c      	bcs.n	8004146 <skip+0x3e>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	2b0a      	cmp	r3, #10
 8004132:	d008      	beq.n	8004146 <skip+0x3e>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	4619      	mov	r1, r3
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f00e fce1 	bl	8012b02 <strchr>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d0eb      	beq.n	800411e <skip+0x16>
  v->len = (size_t) (s - v->ptr);
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	461a      	mov	r2, r3
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	605a      	str	r2, [r3, #4]
  while (s < e && strchr(d, *s) != NULL) s++;
 8004154:	e002      	b.n	800415c <skip+0x54>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	3301      	adds	r3, #1
 800415a:	60fb      	str	r3, [r7, #12]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	429a      	cmp	r2, r3
 8004162:	d208      	bcs.n	8004176 <skip+0x6e>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	4619      	mov	r1, r3
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f00e fcc9 	bl	8012b02 <strchr>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1ef      	bne.n	8004156 <skip+0x4e>
  return s;
 8004176:	68fb      	ldr	r3, [r7, #12]
}
 8004178:	4618      	mov	r0, r3
 800417a:	3710      	adds	r7, #16
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <mg_http_get_header>:

struct mg_str *mg_http_get_header(struct mg_http_message *h, const char *name) {
 8004180:	b580      	push	{r7, lr}
 8004182:	b088      	sub	sp, #32
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  size_t i, n = strlen(name), max = sizeof(h->headers) / sizeof(h->headers[0]);
 800418a:	6838      	ldr	r0, [r7, #0]
 800418c:	f7fc f89a 	bl	80002c4 <strlen>
 8004190:	61b8      	str	r0, [r7, #24]
 8004192:	231e      	movs	r3, #30
 8004194:	617b      	str	r3, [r7, #20]
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 8004196:	2300      	movs	r3, #0
 8004198:	61fb      	str	r3, [r7, #28]
 800419a:	e01f      	b.n	80041dc <mg_http_get_header+0x5c>
    struct mg_str *k = &h->headers[i].name, *v = &h->headers[i].value;
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	3302      	adds	r3, #2
 80041a0:	011b      	lsls	r3, r3, #4
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	4413      	add	r3, r2
 80041a6:	613b      	str	r3, [r7, #16]
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	3328      	adds	r3, #40	; 0x28
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	4413      	add	r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]
    if (n == k->len && mg_ncasecmp(k->ptr, name, n) == 0) return v;
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d10b      	bne.n	80041d6 <mg_http_get_header+0x56>
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	69ba      	ldr	r2, [r7, #24]
 80041c4:	6839      	ldr	r1, [r7, #0]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f006 f8b4 	bl	800a334 <mg_ncasecmp>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <mg_http_get_header+0x56>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	e010      	b.n	80041f8 <mg_http_get_header+0x78>
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	3301      	adds	r3, #1
 80041da:	61fb      	str	r3, [r7, #28]
 80041dc:	69fa      	ldr	r2, [r7, #28]
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d208      	bcs.n	80041f6 <mg_http_get_header+0x76>
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	3302      	adds	r3, #2
 80041ea:	011b      	lsls	r3, r3, #4
 80041ec:	4413      	add	r3, r2
 80041ee:	3304      	adds	r3, #4
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1d2      	bne.n	800419c <mg_http_get_header+0x1c>
  }
  return NULL;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3720      	adds	r7, #32
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <mg_http_parse_headers>:

static void mg_http_parse_headers(const char *s, const char *end,
                                  struct mg_http_header *h, int max_headers) {
 8004200:	b580      	push	{r7, lr}
 8004202:	b08c      	sub	sp, #48	; 0x30
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
 800420c:	603b      	str	r3, [r7, #0]
  int i;
  for (i = 0; i < max_headers; i++) {
 800420e:	2300      	movs	r3, #0
 8004210:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004212:	e049      	b.n	80042a8 <mg_http_parse_headers+0xa8>
    struct mg_str k, v, tmp;
    const char *he = skip(s, end, "\n", &tmp);
 8004214:	f107 0310 	add.w	r3, r7, #16
 8004218:	4a27      	ldr	r2, [pc, #156]	; (80042b8 <mg_http_parse_headers+0xb8>)
 800421a:	68b9      	ldr	r1, [r7, #8]
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f7ff ff73 	bl	8004108 <skip>
 8004222:	62b8      	str	r0, [r7, #40]	; 0x28
    s = skip(s, he, ": \r\n", &k);
 8004224:	f107 0320 	add.w	r3, r7, #32
 8004228:	4a24      	ldr	r2, [pc, #144]	; (80042bc <mg_http_parse_headers+0xbc>)
 800422a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f7ff ff6b 	bl	8004108 <skip>
 8004232:	60f8      	str	r0, [r7, #12]
    s = skip(s, he, "\r\n", &v);
 8004234:	f107 0318 	add.w	r3, r7, #24
 8004238:	4a21      	ldr	r2, [pc, #132]	; (80042c0 <mg_http_parse_headers+0xc0>)
 800423a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f7ff ff63 	bl	8004108 <skip>
 8004242:	60f8      	str	r0, [r7, #12]
    if (k.len == tmp.len) continue;
 8004244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	429a      	cmp	r2, r3
 800424a:	d029      	beq.n	80042a0 <mg_http_parse_headers+0xa0>
    while (v.len > 0 && v.ptr[v.len - 1] == ' ') v.len--;  // Trim spaces
 800424c:	e002      	b.n	8004254 <mg_http_parse_headers+0x54>
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	3b01      	subs	r3, #1
 8004252:	61fb      	str	r3, [r7, #28]
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d006      	beq.n	8004268 <mg_http_parse_headers+0x68>
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	3b01      	subs	r3, #1
 8004260:	4413      	add	r3, r2
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	2b20      	cmp	r3, #32
 8004266:	d0f2      	beq.n	800424e <mg_http_parse_headers+0x4e>
    if (k.len == 0) break;
 8004268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <mg_http_parse_headers+0x72>
 800426e:	bf00      	nop
    // MG_INFO(("--HH [%.*s] [%.*s] [%.*s]", (int) tmp.len - 1, tmp.ptr,
    //(int) k.len, k.ptr, (int) v.len, v.ptr));
    h[i].name = k;
    h[i].value = v;
  }
}
 8004270:	e01e      	b.n	80042b0 <mg_http_parse_headers+0xb0>
    h[i].name = k;
 8004272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004274:	011b      	lsls	r3, r3, #4
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	4413      	add	r3, r2
 800427a:	461a      	mov	r2, r3
 800427c:	f107 0320 	add.w	r3, r7, #32
 8004280:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004284:	e882 0003 	stmia.w	r2, {r0, r1}
    h[i].value = v;
 8004288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800428a:	011b      	lsls	r3, r3, #4
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	4413      	add	r3, r2
 8004290:	3308      	adds	r3, #8
 8004292:	f107 0218 	add.w	r2, r7, #24
 8004296:	e892 0003 	ldmia.w	r2, {r0, r1}
 800429a:	e883 0003 	stmia.w	r3, {r0, r1}
 800429e:	e000      	b.n	80042a2 <mg_http_parse_headers+0xa2>
    if (k.len == tmp.len) continue;
 80042a0:	bf00      	nop
  for (i = 0; i < max_headers; i++) {
 80042a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a4:	3301      	adds	r3, #1
 80042a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	dbb1      	blt.n	8004214 <mg_http_parse_headers+0x14>
}
 80042b0:	bf00      	nop
 80042b2:	3730      	adds	r7, #48	; 0x30
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	08013d44 	.word	0x08013d44
 80042bc:	08013d48 	.word	0x08013d48
 80042c0:	08013d1c 	.word	0x08013d1c

080042c4 <mg_http_parse>:

int mg_http_parse(const char *s, size_t len, struct mg_http_message *hm) {
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b08a      	sub	sp, #40	; 0x28
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
  int is_response, req_len = mg_http_get_request_len((unsigned char *) s, len);
 80042d0:	68b9      	ldr	r1, [r7, #8]
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f7ff feca 	bl	800406c <mg_http_get_request_len>
 80042d8:	6278      	str	r0, [r7, #36]	; 0x24
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d003      	beq.n	80042e8 <mg_http_parse+0x24>
 80042e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	4413      	add	r3, r2
 80042e6:	e000      	b.n	80042ea <mg_http_parse+0x26>
 80042e8:	2300      	movs	r3, #0
 80042ea:	623b      	str	r3, [r7, #32]
  struct mg_str *cl;

  memset(hm, 0, sizeof(*hm));
 80042ec:	f44f 7208 	mov.w	r2, #544	; 0x220
 80042f0:	2100      	movs	r1, #0
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f00e fa48 	bl	8012788 <memset>
  if (req_len <= 0) return req_len;
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	dc01      	bgt.n	8004302 <mg_http_parse+0x3e>
 80042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004300:	e0d0      	b.n	80044a4 <mg_http_parse+0x1e0>

  hm->message.ptr = hm->head.ptr = s;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  hm->body.ptr = end;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a3a      	ldr	r2, [r7, #32]
 800431a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  hm->head.len = (size_t) req_len;
 800431e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  hm->chunk.ptr = end;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a3a      	ldr	r2, [r7, #32]
 800432a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  hm->message.len = hm->body.len = (size_t) ~0;  // Set body length to infinite
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f04f 32ff 	mov.w	r2, #4294967295
 8004334:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

  // Parse request line
  s = skip(s, end, " ", &hm->method);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a59      	ldr	r2, [pc, #356]	; (80044ac <mg_http_parse+0x1e8>)
 8004348:	6a39      	ldr	r1, [r7, #32]
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f7ff fedc 	bl	8004108 <skip>
 8004350:	60f8      	str	r0, [r7, #12]
  s = skip(s, end, " ", &hm->uri);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	3308      	adds	r3, #8
 8004356:	4a55      	ldr	r2, [pc, #340]	; (80044ac <mg_http_parse+0x1e8>)
 8004358:	6a39      	ldr	r1, [r7, #32]
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f7ff fed4 	bl	8004108 <skip>
 8004360:	60f8      	str	r0, [r7, #12]
  s = skip(s, end, "\r\n", &hm->proto);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	3318      	adds	r3, #24
 8004366:	4a52      	ldr	r2, [pc, #328]	; (80044b0 <mg_http_parse+0x1ec>)
 8004368:	6a39      	ldr	r1, [r7, #32]
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f7ff fecc 	bl	8004108 <skip>
 8004370:	60f8      	str	r0, [r7, #12]

  // Sanity check. Allow protocol/reason to be empty
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <mg_http_parse+0xbe>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d102      	bne.n	8004388 <mg_http_parse+0xc4>
 8004382:	f04f 33ff 	mov.w	r3, #4294967295
 8004386:	e08d      	b.n	80044a4 <mg_http_parse+0x1e0>

  // If URI contains '?' character, setup query string
  if ((qs = (const char *) memchr(hm->uri.ptr, '?', hm->uri.len)) != NULL) {
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6898      	ldr	r0, [r3, #8]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	461a      	mov	r2, r3
 8004392:	213f      	movs	r1, #63	; 0x3f
 8004394:	f7fb ff3c 	bl	8000210 <memchr>
 8004398:	61f8      	str	r0, [r7, #28]
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d015      	beq.n	80043cc <mg_http_parse+0x108>
    hm->query.ptr = qs + 1;
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	1c5a      	adds	r2, r3, #1
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	611a      	str	r2, [r3, #16]
    hm->query.len = (size_t) (&hm->uri.ptr[hm->uri.len] - (qs + 1));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689a      	ldr	r2, [r3, #8]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	441a      	add	r2, r3
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	3301      	adds	r3, #1
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	461a      	mov	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	615a      	str	r2, [r3, #20]
    hm->uri.len = (size_t) (qs - hm->uri.ptr);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	69fa      	ldr	r2, [r7, #28]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	461a      	mov	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	60da      	str	r2, [r3, #12]
  }

  mg_http_parse_headers(s, end, hm->headers,
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f103 0220 	add.w	r2, r3, #32
 80043d2:	231e      	movs	r3, #30
 80043d4:	6a39      	ldr	r1, [r7, #32]
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f7ff ff12 	bl	8004200 <mg_http_parse_headers>
                        sizeof(hm->headers) / sizeof(hm->headers[0]));
  if ((cl = mg_http_get_header(hm, "Content-Length")) != NULL) {
 80043dc:	4935      	ldr	r1, [pc, #212]	; (80044b4 <mg_http_parse+0x1f0>)
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f7ff fece 	bl	8004180 <mg_http_get_header>
 80043e4:	61b8      	str	r0, [r7, #24]
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d011      	beq.n	8004410 <mg_http_parse+0x14c>
    hm->body.len = (size_t) mg_to64(*cl);
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80043f2:	f006 fafd 	bl	800a9f0 <mg_to64>
 80043f6:	4602      	mov	r2, r0
 80043f8:	460b      	mov	r3, r1
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    hm->message.len = (size_t) req_len + hm->body.len;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004408:	441a      	add	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  // Therefore, if Content-Length is not specified and methods are
  // not one of PUT or POST, set body length to 0.
  //
  // So, if it is HTTP request, and Content-Length is not set,
  // and method is not (PUT or POST) then reset body length to zero.
  is_response = mg_ncasecmp(hm->method.ptr, "HTTP/", 5) == 0;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2205      	movs	r2, #5
 8004416:	4928      	ldr	r1, [pc, #160]	; (80044b8 <mg_http_parse+0x1f4>)
 8004418:	4618      	mov	r0, r3
 800441a:	f005 ff8b 	bl	800a334 <mg_ncasecmp>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	bf0c      	ite	eq
 8004424:	2301      	moveq	r3, #1
 8004426:	2300      	movne	r3, #0
 8004428:	b2db      	uxtb	r3, r3
 800442a:	617b      	str	r3, [r7, #20]
  if (hm->body.len == (size_t) ~0 && !is_response &&
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004436:	d11a      	bne.n	800446e <mg_http_parse+0x1aa>
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d117      	bne.n	800446e <mg_http_parse+0x1aa>
      mg_vcasecmp(&hm->method, "PUT") != 0 &&
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	491e      	ldr	r1, [pc, #120]	; (80044bc <mg_http_parse+0x1f8>)
 8004442:	4618      	mov	r0, r3
 8004444:	f005 ffc8 	bl	800a3d8 <mg_vcasecmp>
 8004448:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && !is_response &&
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00f      	beq.n	800446e <mg_http_parse+0x1aa>
      mg_vcasecmp(&hm->method, "POST") != 0) {
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	491b      	ldr	r1, [pc, #108]	; (80044c0 <mg_http_parse+0x1fc>)
 8004452:	4618      	mov	r0, r3
 8004454:	f005 ffc0 	bl	800a3d8 <mg_vcasecmp>
 8004458:	4603      	mov	r3, r0
      mg_vcasecmp(&hm->method, "PUT") != 0 &&
 800445a:	2b00      	cmp	r3, #0
 800445c:	d007      	beq.n	800446e <mg_http_parse+0x1aa>
    hm->body.len = 0;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    hm->message.len = (size_t) req_len;
 8004466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  }

  // The 204 (No content) responses also have 0 body length
  if (hm->body.len == (size_t) ~0 && is_response &&
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004478:	d113      	bne.n	80044a2 <mg_http_parse+0x1de>
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d010      	beq.n	80044a2 <mg_http_parse+0x1de>
      mg_vcasecmp(&hm->uri, "204") == 0) {
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3308      	adds	r3, #8
 8004484:	490f      	ldr	r1, [pc, #60]	; (80044c4 <mg_http_parse+0x200>)
 8004486:	4618      	mov	r0, r3
 8004488:	f005 ffa6 	bl	800a3d8 <mg_vcasecmp>
 800448c:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && is_response &&
 800448e:	2b00      	cmp	r3, #0
 8004490:	d107      	bne.n	80044a2 <mg_http_parse+0x1de>
    hm->body.len = 0;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    hm->message.len = (size_t) req_len;
 800449a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  }

  return req_len;
 80044a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3728      	adds	r7, #40	; 0x28
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	08013d50 	.word	0x08013d50
 80044b0:	08013d1c 	.word	0x08013d1c
 80044b4:	08013d54 	.word	0x08013d54
 80044b8:	08013d64 	.word	0x08013d64
 80044bc:	08013d6c 	.word	0x08013d6c
 80044c0:	08013d70 	.word	0x08013d70
 80044c4:	08013d78 	.word	0x08013d78

080044c8 <mg_http_status_code_str>:
  mg_send(c, "\r\n", 2);
  if (len == 0) c->is_resp = 0;
}

// clang-format off
static const char *mg_http_status_code_str(int status_code) {
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  switch (status_code) {
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f240 12f5 	movw	r2, #501	; 0x1f5
 80044d6:	4293      	cmp	r3, r2
 80044d8:	f000 809c 	beq.w	8004614 <mg_http_status_code_str+0x14c>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 80044e2:	f280 8099 	bge.w	8004618 <mg_http_status_code_str+0x150>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80044ec:	f000 8090 	beq.w	8004610 <mg_http_status_code_str+0x148>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80044f6:	f300 808f 	bgt.w	8004618 <mg_http_status_code_str+0x150>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f5b3 7fd1 	cmp.w	r3, #418	; 0x1a2
 8004500:	f300 808a 	bgt.w	8004618 <mg_http_status_code_str+0x150>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800450a:	da25      	bge.n	8004558 <mg_http_status_code_str+0x90>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8004512:	d071      	beq.n	80045f8 <mg_http_status_code_str+0x130>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 800451a:	dc7d      	bgt.n	8004618 <mg_http_status_code_str+0x150>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 8004522:	d067      	beq.n	80045f4 <mg_http_status_code_str+0x12c>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800452a:	dc75      	bgt.n	8004618 <mg_http_status_code_str+0x150>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f240 122d 	movw	r2, #301	; 0x12d
 8004532:	4293      	cmp	r3, r2
 8004534:	d05c      	beq.n	80045f0 <mg_http_status_code_str+0x128>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800453c:	da6c      	bge.n	8004618 <mg_http_status_code_str+0x150>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2b64      	cmp	r3, #100	; 0x64
 8004542:	d04b      	beq.n	80045dc <mg_http_status_code_str+0x114>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b64      	cmp	r3, #100	; 0x64
 8004548:	db66      	blt.n	8004618 <mg_http_status_code_str+0x150>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2bce      	cmp	r3, #206	; 0xce
 800454e:	dc63      	bgt.n	8004618 <mg_http_status_code_str+0x150>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2bc9      	cmp	r3, #201	; 0xc9
 8004554:	da2e      	bge.n	80045b4 <mg_http_status_code_str+0xec>
 8004556:	e05f      	b.n	8004618 <mg_http_status_code_str+0x150>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800455e:	2b12      	cmp	r3, #18
 8004560:	d85a      	bhi.n	8004618 <mg_http_status_code_str+0x150>
 8004562:	a201      	add	r2, pc, #4	; (adr r2, 8004568 <mg_http_status_code_str+0xa0>)
 8004564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004568:	080045fd 	.word	0x080045fd
 800456c:	08004601 	.word	0x08004601
 8004570:	08004619 	.word	0x08004619
 8004574:	08004605 	.word	0x08004605
 8004578:	08004609 	.word	0x08004609
 800457c:	08004619 	.word	0x08004619
 8004580:	08004619 	.word	0x08004619
 8004584:	08004619 	.word	0x08004619
 8004588:	08004619 	.word	0x08004619
 800458c:	08004619 	.word	0x08004619
 8004590:	08004619 	.word	0x08004619
 8004594:	08004619 	.word	0x08004619
 8004598:	08004619 	.word	0x08004619
 800459c:	08004619 	.word	0x08004619
 80045a0:	08004619 	.word	0x08004619
 80045a4:	08004619 	.word	0x08004619
 80045a8:	08004619 	.word	0x08004619
 80045ac:	08004619 	.word	0x08004619
 80045b0:	0800460d 	.word	0x0800460d
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3bc9      	subs	r3, #201	; 0xc9
 80045b8:	2b05      	cmp	r3, #5
 80045ba:	d82d      	bhi.n	8004618 <mg_http_status_code_str+0x150>
 80045bc:	a201      	add	r2, pc, #4	; (adr r2, 80045c4 <mg_http_status_code_str+0xfc>)
 80045be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c2:	bf00      	nop
 80045c4:	080045e1 	.word	0x080045e1
 80045c8:	080045e5 	.word	0x080045e5
 80045cc:	08004619 	.word	0x08004619
 80045d0:	080045e9 	.word	0x080045e9
 80045d4:	08004619 	.word	0x08004619
 80045d8:	080045ed 	.word	0x080045ed
    case 100: return "Continue";
 80045dc:	4b12      	ldr	r3, [pc, #72]	; (8004628 <mg_http_status_code_str+0x160>)
 80045de:	e01c      	b.n	800461a <mg_http_status_code_str+0x152>
    case 201: return "Created";
 80045e0:	4b12      	ldr	r3, [pc, #72]	; (800462c <mg_http_status_code_str+0x164>)
 80045e2:	e01a      	b.n	800461a <mg_http_status_code_str+0x152>
    case 202: return "Accepted";
 80045e4:	4b12      	ldr	r3, [pc, #72]	; (8004630 <mg_http_status_code_str+0x168>)
 80045e6:	e018      	b.n	800461a <mg_http_status_code_str+0x152>
    case 204: return "No Content";
 80045e8:	4b12      	ldr	r3, [pc, #72]	; (8004634 <mg_http_status_code_str+0x16c>)
 80045ea:	e016      	b.n	800461a <mg_http_status_code_str+0x152>
    case 206: return "Partial Content";
 80045ec:	4b12      	ldr	r3, [pc, #72]	; (8004638 <mg_http_status_code_str+0x170>)
 80045ee:	e014      	b.n	800461a <mg_http_status_code_str+0x152>
    case 301: return "Moved Permanently";
 80045f0:	4b12      	ldr	r3, [pc, #72]	; (800463c <mg_http_status_code_str+0x174>)
 80045f2:	e012      	b.n	800461a <mg_http_status_code_str+0x152>
    case 302: return "Found";
 80045f4:	4b12      	ldr	r3, [pc, #72]	; (8004640 <mg_http_status_code_str+0x178>)
 80045f6:	e010      	b.n	800461a <mg_http_status_code_str+0x152>
    case 304: return "Not Modified";
 80045f8:	4b12      	ldr	r3, [pc, #72]	; (8004644 <mg_http_status_code_str+0x17c>)
 80045fa:	e00e      	b.n	800461a <mg_http_status_code_str+0x152>
    case 400: return "Bad Request";
 80045fc:	4b12      	ldr	r3, [pc, #72]	; (8004648 <mg_http_status_code_str+0x180>)
 80045fe:	e00c      	b.n	800461a <mg_http_status_code_str+0x152>
    case 401: return "Unauthorized";
 8004600:	4b12      	ldr	r3, [pc, #72]	; (800464c <mg_http_status_code_str+0x184>)
 8004602:	e00a      	b.n	800461a <mg_http_status_code_str+0x152>
    case 403: return "Forbidden";
 8004604:	4b12      	ldr	r3, [pc, #72]	; (8004650 <mg_http_status_code_str+0x188>)
 8004606:	e008      	b.n	800461a <mg_http_status_code_str+0x152>
    case 404: return "Not Found";
 8004608:	4b12      	ldr	r3, [pc, #72]	; (8004654 <mg_http_status_code_str+0x18c>)
 800460a:	e006      	b.n	800461a <mg_http_status_code_str+0x152>
    case 418: return "I'm a teapot";
 800460c:	4b12      	ldr	r3, [pc, #72]	; (8004658 <mg_http_status_code_str+0x190>)
 800460e:	e004      	b.n	800461a <mg_http_status_code_str+0x152>
    case 500: return "Internal Server Error";
 8004610:	4b12      	ldr	r3, [pc, #72]	; (800465c <mg_http_status_code_str+0x194>)
 8004612:	e002      	b.n	800461a <mg_http_status_code_str+0x152>
    case 501: return "Not Implemented";
 8004614:	4b12      	ldr	r3, [pc, #72]	; (8004660 <mg_http_status_code_str+0x198>)
 8004616:	e000      	b.n	800461a <mg_http_status_code_str+0x152>
    default: return "OK";
 8004618:	4b12      	ldr	r3, [pc, #72]	; (8004664 <mg_http_status_code_str+0x19c>)
  }
}
 800461a:	4618      	mov	r0, r3
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	08013d98 	.word	0x08013d98
 800462c:	08013da4 	.word	0x08013da4
 8004630:	08013dac 	.word	0x08013dac
 8004634:	08013db8 	.word	0x08013db8
 8004638:	08013dc4 	.word	0x08013dc4
 800463c:	08013dd4 	.word	0x08013dd4
 8004640:	08013de8 	.word	0x08013de8
 8004644:	08013df0 	.word	0x08013df0
 8004648:	08013e00 	.word	0x08013e00
 800464c:	08013e0c 	.word	0x08013e0c
 8004650:	08013e1c 	.word	0x08013e1c
 8004654:	08013e28 	.word	0x08013e28
 8004658:	08013e34 	.word	0x08013e34
 800465c:	08013e44 	.word	0x08013e44
 8004660:	08013e5c 	.word	0x08013e5c
 8004664:	08013e6c 	.word	0x08013e6c

08004668 <mg_http_reply>:
// clang-format on

void mg_http_reply(struct mg_connection *c, int code, const char *headers,
                   const char *fmt, ...) {
 8004668:	b408      	push	{r3}
 800466a:	b580      	push	{r7, lr}
 800466c:	b089      	sub	sp, #36	; 0x24
 800466e:	af02      	add	r7, sp, #8
 8004670:	60f8      	str	r0, [r7, #12]
 8004672:	60b9      	str	r1, [r7, #8]
 8004674:	607a      	str	r2, [r7, #4]
  va_list ap;
  size_t len;
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:           \r\n\r\n", code,
 8004676:	68b8      	ldr	r0, [r7, #8]
 8004678:	f7ff ff26 	bl	80044c8 <mg_http_status_code_str>
 800467c:	4602      	mov	r2, r0
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d001      	beq.n	8004688 <mg_http_reply+0x20>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	e000      	b.n	800468a <mg_http_reply+0x22>
 8004688:	4b21      	ldr	r3, [pc, #132]	; (8004710 <mg_http_reply+0xa8>)
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	4613      	mov	r3, r2
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	4920      	ldr	r1, [pc, #128]	; (8004714 <mg_http_reply+0xac>)
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f003 fb46 	bl	8007d24 <mg_printf>
            mg_http_status_code_str(code), headers == NULL ? "" : headers);
  len = c->send.len;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800469c:	617b      	str	r3, [r7, #20]
  va_start(ap, fmt);
 800469e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046a2:	613b      	str	r3, [r7, #16]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, &ap);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f103 0158 	add.w	r1, r3, #88	; 0x58
 80046aa:	f107 0310 	add.w	r3, r7, #16
 80046ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046b0:	4819      	ldr	r0, [pc, #100]	; (8004718 <mg_http_reply+0xb0>)
 80046b2:	f7fe fced 	bl	8003090 <mg_vxprintf>
  va_end(ap);
  if (c->send.len > 15) {
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ba:	2b0f      	cmp	r3, #15
 80046bc:	d91a      	bls.n	80046f4 <mg_http_reply+0x8c>
    mg_snprintf((char *) &c->send.buf[len - 14], 11, "%010lu",
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	3b0e      	subs	r3, #14
 80046c6:	18d0      	adds	r0, r2, r3
                (unsigned long) (c->send.len - len));
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	1ad3      	subs	r3, r2, r3
    mg_snprintf((char *) &c->send.buf[len - 14], 11, "%010lu",
 80046d0:	4a12      	ldr	r2, [pc, #72]	; (800471c <mg_http_reply+0xb4>)
 80046d2:	210b      	movs	r1, #11
 80046d4:	f7fd fec4 	bl	8002460 <mg_snprintf>
    c->is_resp = 0;
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	f892 30b1 	ldrb.w	r3, [r2, #177]	; 0xb1
 80046de:	f36f 1386 	bfc	r3, #6, #1
 80046e2:	f882 30b1 	strb.w	r3, [r2, #177]	; 0xb1
    c->send.buf[len - 4] = '\r';  // Change ending 0 to space
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	3b04      	subs	r3, #4
 80046ee:	4413      	add	r3, r2
 80046f0:	220d      	movs	r2, #13
 80046f2:	701a      	strb	r2, [r3, #0]
  }
  c->is_resp = 0;
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	f892 30b1 	ldrb.w	r3, [r2, #177]	; 0xb1
 80046fa:	f36f 1386 	bfc	r3, #6, #1
 80046fe:	f882 30b1 	strb.w	r3, [r2, #177]	; 0xb1
}
 8004702:	bf00      	nop
 8004704:	371c      	adds	r7, #28
 8004706:	46bd      	mov	sp, r7
 8004708:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800470c:	b001      	add	sp, #4
 800470e:	4770      	bx	lr
 8004710:	08013e70 	.word	0x08013e70
 8004714:	08013e74 	.word	0x08013e74
 8004718:	080023f1 	.word	0x080023f1
 800471c:	08013ea8 	.word	0x08013ea8

08004720 <restore_http_cb>:

static void http_cb(struct mg_connection *, int, void *, void *);
static void restore_http_cb(struct mg_connection *c) {
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  mg_fs_close((struct mg_fd *) c->pfn_data);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800472c:	4618      	mov	r0, r3
 800472e:	f7ff f93b 	bl	80039a8 <mg_fs_close>
  c->pfn_data = NULL;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	675a      	str	r2, [r3, #116]	; 0x74
  c->pfn = http_cb;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a06      	ldr	r2, [pc, #24]	; (8004754 <restore_http_cb+0x34>)
 800473c:	671a      	str	r2, [r3, #112]	; 0x70
  c->is_resp = 0;
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	f892 30b1 	ldrb.w	r3, [r2, #177]	; 0xb1
 8004744:	f36f 1386 	bfc	r3, #6, #1
 8004748:	f882 30b1 	strb.w	r3, [r2, #177]	; 0xb1
}
 800474c:	bf00      	nop
 800474e:	3708      	adds	r7, #8
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	08005fd1 	.word	0x08005fd1

08004758 <mg_http_etag>:

char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime);
char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime) {
 8004758:	b5b0      	push	{r4, r5, r7, lr}
 800475a:	b088      	sub	sp, #32
 800475c:	af04      	add	r7, sp, #16
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
  mg_snprintf(buf, len, "\"%lld.%lld\"", (int64_t) mtime, (int64_t) size);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	461c      	mov	r4, r3
 800476a:	4615      	mov	r5, r2
 800476c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004770:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004774:	e9cd 2300 	strd	r2, r3, [sp]
 8004778:	4a04      	ldr	r2, [pc, #16]	; (800478c <mg_http_etag+0x34>)
 800477a:	68b9      	ldr	r1, [r7, #8]
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f7fd fe6f 	bl	8002460 <mg_snprintf>
  return buf;
 8004782:	68fb      	ldr	r3, [r7, #12]
}
 8004784:	4618      	mov	r0, r3
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bdb0      	pop	{r4, r5, r7, pc}
 800478c:	08013eb0 	.word	0x08013eb0

08004790 <static_cb>:

static void static_cb(struct mg_connection *c, int ev, void *ev_data,
                      void *fn_data) {
 8004790:	b580      	push	{r7, lr}
 8004792:	b08a      	sub	sp, #40	; 0x28
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
 800479c:	603b      	str	r3, [r7, #0]
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	2b08      	cmp	r3, #8
 80047a2:	d002      	beq.n	80047aa <static_cb+0x1a>
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d146      	bne.n	8004838 <static_cb+0xa8>
    struct mg_fd *fd = (struct mg_fd *) fn_data;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	623b      	str	r3, [r7, #32]
    // Read to send IO buffer directly, avoid extra on-stack buffer
    size_t n, max = MG_IO_SIZE, space;
 80047ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80047b2:	61fb      	str	r3, [r7, #28]
    size_t *cl = (size_t *) &c->label[(sizeof(c->label) - sizeof(size_t)) /
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	33a4      	adds	r3, #164	; 0xa4
 80047b8:	61bb      	str	r3, [r7, #24]
                                      sizeof(size_t) * sizeof(size_t)];
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047be:	69fa      	ldr	r2, [r7, #28]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d905      	bls.n	80047d0 <static_cb+0x40>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	3358      	adds	r3, #88	; 0x58
 80047c8:	69f9      	ldr	r1, [r7, #28]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f001 fd72 	bl	80062b4 <mg_iobuf_resize>
    if (c->send.len >= c->send.size) return;  // Rate limit
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047d8:	429a      	cmp	r2, r3
 80047da:	d234      	bcs.n	8004846 <static_cb+0xb6>
    if ((space = c->send.size - c->send.len) > *cl) space = *cl;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	627b      	str	r3, [r7, #36]	; 0x24
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d902      	bls.n	80047f8 <static_cb+0x68>
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	627b      	str	r3, [r7, #36]	; 0x24
    n = fd->fs->rd(fd->fd, c->send.buf + c->send.len, space);
 80047f8:	6a3b      	ldr	r3, [r7, #32]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	6a3a      	ldr	r2, [r7, #32]
 8004800:	6810      	ldr	r0, [r2, #0]
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	6e12      	ldr	r2, [r2, #96]	; 0x60
 800480a:	4411      	add	r1, r2
 800480c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800480e:	4798      	blx	r3
 8004810:	6178      	str	r0, [r7, #20]
    c->send.len += n;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	441a      	add	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	661a      	str	r2, [r3, #96]	; 0x60
    *cl -= n;
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	1ad2      	subs	r2, r2, r3
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	601a      	str	r2, [r3, #0]
    if (n == 0) restore_http_cb(c);
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d10c      	bne.n	800484a <static_cb+0xba>
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	f7ff ff75 	bl	8004720 <restore_http_cb>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 8004836:	e008      	b.n	800484a <static_cb+0xba>
  } else if (ev == MG_EV_CLOSE) {
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	2b09      	cmp	r3, #9
 800483c:	d106      	bne.n	800484c <static_cb+0xbc>
    restore_http_cb(c);
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f7ff ff6e 	bl	8004720 <restore_http_cb>
 8004844:	e002      	b.n	800484c <static_cb+0xbc>
    if (c->send.len >= c->send.size) return;  // Rate limit
 8004846:	bf00      	nop
 8004848:	e000      	b.n	800484c <static_cb+0xbc>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 800484a:	bf00      	nop
  }
  (void) ev_data;
}
 800484c:	3728      	adds	r7, #40	; 0x28
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
	...

08004854 <guess_content_type>:
    MG_C_STR("3gp"), MG_C_STR("video/3gpp"),
    {0, 0},
};
// clang-format on

static struct mg_str guess_content_type(struct mg_str path, const char *extra) {
 8004854:	b590      	push	{r4, r7, lr}
 8004856:	b08d      	sub	sp, #52	; 0x34
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	1d38      	adds	r0, r7, #4
 800485e:	e880 0006 	stmia.w	r0, {r1, r2}
 8004862:	603b      	str	r3, [r7, #0]
  struct mg_str k, v, s = mg_str(extra);
 8004864:	f107 0314 	add.w	r3, r7, #20
 8004868:	6839      	ldr	r1, [r7, #0]
 800486a:	4618      	mov	r0, r3
 800486c:	f005 fd16 	bl	800a29c <mg_str_s>
  size_t i = 0;
 8004870:	2300      	movs	r3, #0
 8004872:	62fb      	str	r3, [r7, #44]	; 0x2c

  // Shrink path to its extension only
  while (i < path.len && path.ptr[path.len - i - 1] != '.') i++;
 8004874:	e002      	b.n	800487c <guess_content_type+0x28>
 8004876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004878:	3301      	adds	r3, #1
 800487a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004880:	429a      	cmp	r2, r3
 8004882:	d208      	bcs.n	8004896 <guess_content_type+0x42>
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	68b9      	ldr	r1, [r7, #8]
 8004888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800488a:	1acb      	subs	r3, r1, r3
 800488c:	3b01      	subs	r3, #1
 800488e:	4413      	add	r3, r2
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	2b2e      	cmp	r3, #46	; 0x2e
 8004894:	d1ef      	bne.n	8004876 <guess_content_type+0x22>
  path.ptr += path.len - i;
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	68b9      	ldr	r1, [r7, #8]
 800489a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489c:	1acb      	subs	r3, r1, r3
 800489e:	4413      	add	r3, r2
 80048a0:	607b      	str	r3, [r7, #4]
  path.len = i;
 80048a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a4:	60bb      	str	r3, [r7, #8]

  // Process user-provided mime type overrides, if any
  while (mg_commalist(&s, &k, &v)) {
 80048a6:	e012      	b.n	80048ce <guess_content_type+0x7a>
    if (mg_strcmp(path, k) == 0) return v;
 80048a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048ac:	cb0c      	ldmia	r3, {r2, r3}
 80048ae:	1d39      	adds	r1, r7, #4
 80048b0:	c903      	ldmia	r1, {r0, r1}
 80048b2:	f005 fdb5 	bl	800a420 <mg_strcmp>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d108      	bne.n	80048ce <guess_content_type+0x7a>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	461a      	mov	r2, r3
 80048c0:	f107 031c 	add.w	r3, r7, #28
 80048c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80048c8:	e882 0003 	stmia.w	r2, {r0, r1}
 80048cc:	e034      	b.n	8004938 <guess_content_type+0xe4>
  while (mg_commalist(&s, &k, &v)) {
 80048ce:	f107 021c 	add.w	r2, r7, #28
 80048d2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80048d6:	f107 0314 	add.w	r3, r7, #20
 80048da:	4618      	mov	r0, r3
 80048dc:	f005 ffca 	bl	800a874 <mg_commalist>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1e0      	bne.n	80048a8 <guess_content_type+0x54>
  }

  // Process built-in mime types
  for (i = 0; s_known_types[i].ptr != NULL; i += 2) {
 80048e6:	2300      	movs	r3, #0
 80048e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048ea:	e01a      	b.n	8004922 <guess_content_type+0xce>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 80048ec:	4a14      	ldr	r2, [pc, #80]	; (8004940 <guess_content_type+0xec>)
 80048ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f0:	00db      	lsls	r3, r3, #3
 80048f2:	4413      	add	r3, r2
 80048f4:	cb0c      	ldmia	r3, {r2, r3}
 80048f6:	1d39      	adds	r1, r7, #4
 80048f8:	c903      	ldmia	r1, {r0, r1}
 80048fa:	f005 fd91 	bl	800a420 <mg_strcmp>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10b      	bne.n	800491c <guess_content_type+0xc8>
 8004904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004906:	3301      	adds	r3, #1
 8004908:	68f9      	ldr	r1, [r7, #12]
 800490a:	4a0d      	ldr	r2, [pc, #52]	; (8004940 <guess_content_type+0xec>)
 800490c:	460c      	mov	r4, r1
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	4413      	add	r3, r2
 8004912:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004916:	e884 0003 	stmia.w	r4, {r0, r1}
 800491a:	e00d      	b.n	8004938 <guess_content_type+0xe4>
  for (i = 0; s_known_types[i].ptr != NULL; i += 2) {
 800491c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800491e:	3302      	adds	r3, #2
 8004920:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004922:	4a07      	ldr	r2, [pc, #28]	; (8004940 <guess_content_type+0xec>)
 8004924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004926:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1de      	bne.n	80048ec <guess_content_type+0x98>
  }

  return mg_str("text/plain; charset=utf-8");
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	4904      	ldr	r1, [pc, #16]	; (8004944 <guess_content_type+0xf0>)
 8004932:	4618      	mov	r0, r3
 8004934:	f005 fcb2 	bl	800a29c <mg_str_s>
}
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	3734      	adds	r7, #52	; 0x34
 800493c:	46bd      	mov	sp, r7
 800493e:	bd90      	pop	{r4, r7, pc}
 8004940:	20000050 	.word	0x20000050
 8004944:	08013f98 	.word	0x08013f98

08004948 <getrange>:

static int getrange(struct mg_str *s, int64_t *a, int64_t *b) {
 8004948:	b580      	push	{r7, lr}
 800494a:	b088      	sub	sp, #32
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
  size_t i, numparsed = 0;
 8004954:	2300      	movs	r3, #0
 8004956:	61bb      	str	r3, [r7, #24]
  // MG_INFO(("%.*s", (int) s->len, s->ptr));
  for (i = 0; i + 6 < s->len; i++) {
 8004958:	2300      	movs	r3, #0
 800495a:	61fb      	str	r3, [r7, #28]
 800495c:	e06f      	b.n	8004a3e <getrange+0xf6>
    if (memcmp(&s->ptr[i], "bytes=", 6) == 0) {
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	4413      	add	r3, r2
 8004966:	2206      	movs	r2, #6
 8004968:	493b      	ldr	r1, [pc, #236]	; (8004a58 <getrange+0x110>)
 800496a:	4618      	mov	r0, r3
 800496c:	f00d fed4 	bl	8012718 <memcmp>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d160      	bne.n	8004a38 <getrange+0xf0>
      struct mg_str p = mg_str_n(s->ptr + i + 6, s->len - i - 6);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	3306      	adds	r3, #6
 800497e:	18d1      	adds	r1, r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	685a      	ldr	r2, [r3, #4]
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	1f9a      	subs	r2, r3, #6
 800498a:	f107 0310 	add.w	r3, r7, #16
 800498e:	4618      	mov	r0, r3
 8004990:	f005 fca1 	bl	800a2d6 <mg_str_n>
      if (p.len > 0 && p.ptr[0] >= '0' && p.ptr[0] <= '9') numparsed++;
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00a      	beq.n	80049b0 <getrange+0x68>
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	2b2f      	cmp	r3, #47	; 0x2f
 80049a0:	d906      	bls.n	80049b0 <getrange+0x68>
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	2b39      	cmp	r3, #57	; 0x39
 80049a8:	d802      	bhi.n	80049b0 <getrange+0x68>
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	3301      	adds	r3, #1
 80049ae:	61bb      	str	r3, [r7, #24]
      *a = mg_to64(p);
 80049b0:	f107 0310 	add.w	r3, r7, #16
 80049b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80049b8:	f006 f81a 	bl	800a9f0 <mg_to64>
 80049bc:	4602      	mov	r2, r0
 80049be:	460b      	mov	r3, r1
 80049c0:	68b9      	ldr	r1, [r7, #8]
 80049c2:	e9c1 2300 	strd	r2, r3, [r1]
      // MG_INFO(("PPP [%.*s] %d", (int) p.len, p.ptr, numparsed));
      while (p.len && p.ptr[0] >= '0' && p.ptr[0] <= '9') p.ptr++, p.len--;
 80049c6:	e005      	b.n	80049d4 <getrange+0x8c>
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	3301      	adds	r3, #1
 80049cc:	613b      	str	r3, [r7, #16]
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	3b01      	subs	r3, #1
 80049d2:	617b      	str	r3, [r7, #20]
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d007      	beq.n	80049ea <getrange+0xa2>
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	2b2f      	cmp	r3, #47	; 0x2f
 80049e0:	d903      	bls.n	80049ea <getrange+0xa2>
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	2b39      	cmp	r3, #57	; 0x39
 80049e8:	d9ee      	bls.n	80049c8 <getrange+0x80>
      if (p.len && p.ptr[0] == '-') p.ptr++, p.len--;
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d009      	beq.n	8004a04 <getrange+0xbc>
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	2b2d      	cmp	r3, #45	; 0x2d
 80049f6:	d105      	bne.n	8004a04 <getrange+0xbc>
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	3301      	adds	r3, #1
 80049fc:	613b      	str	r3, [r7, #16]
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	3b01      	subs	r3, #1
 8004a02:	617b      	str	r3, [r7, #20]
      *b = mg_to64(p);
 8004a04:	f107 0310 	add.w	r3, r7, #16
 8004a08:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004a0c:	f005 fff0 	bl	800a9f0 <mg_to64>
 8004a10:	4602      	mov	r2, r0
 8004a12:	460b      	mov	r3, r1
 8004a14:	6879      	ldr	r1, [r7, #4]
 8004a16:	e9c1 2300 	strd	r2, r3, [r1]
      if (p.len > 0 && p.ptr[0] >= '0' && p.ptr[0] <= '9') numparsed++;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d015      	beq.n	8004a4c <getrange+0x104>
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	2b2f      	cmp	r3, #47	; 0x2f
 8004a26:	d911      	bls.n	8004a4c <getrange+0x104>
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	2b39      	cmp	r3, #57	; 0x39
 8004a2e:	d80d      	bhi.n	8004a4c <getrange+0x104>
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	3301      	adds	r3, #1
 8004a34:	61bb      	str	r3, [r7, #24]
      // MG_INFO(("PPP [%.*s] %d", (int) p.len, p.ptr, numparsed));
      break;
 8004a36:	e009      	b.n	8004a4c <getrange+0x104>
  for (i = 0; i + 6 < s->len; i++) {
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	61fb      	str	r3, [r7, #28]
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	1d9a      	adds	r2, r3, #6
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d389      	bcc.n	800495e <getrange+0x16>
 8004a4a:	e000      	b.n	8004a4e <getrange+0x106>
      break;
 8004a4c:	bf00      	nop
    }
  }
  return (int) numparsed;
 8004a4e:	69bb      	ldr	r3, [r7, #24]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3720      	adds	r7, #32
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	0801411c 	.word	0x0801411c

08004a5c <mg_http_serve_file>:

void mg_http_serve_file(struct mg_connection *c, struct mg_http_message *hm,
                        const char *path,
                        const struct mg_http_serve_opts *opts) {
 8004a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a60:	b0f7      	sub	sp, #476	; 0x1dc
 8004a62:	af0a      	add	r7, sp, #40	; 0x28
 8004a64:	f507 74d8 	add.w	r4, r7, #432	; 0x1b0
 8004a68:	f5a4 74ba 	sub.w	r4, r4, #372	; 0x174
 8004a6c:	6020      	str	r0, [r4, #0]
 8004a6e:	f507 70d8 	add.w	r0, r7, #432	; 0x1b0
 8004a72:	f5a0 70bc 	sub.w	r0, r0, #376	; 0x178
 8004a76:	6001      	str	r1, [r0, #0]
 8004a78:	f507 71d8 	add.w	r1, r7, #432	; 0x1b0
 8004a7c:	f5a1 71be 	sub.w	r1, r1, #380	; 0x17c
 8004a80:	600a      	str	r2, [r1, #0]
 8004a82:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8004a86:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8004a8a:	6013      	str	r3, [r2, #0]
  char etag[64], tmp[MG_PATH_MAX];
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8004a8c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004a90:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d006      	beq.n	8004aaa <mg_http_serve_file+0x4e>
 8004a9c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004aa0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	695b      	ldr	r3, [r3, #20]
 8004aa8:	e000      	b.n	8004aac <mg_http_serve_file+0x50>
 8004aaa:	4bce      	ldr	r3, [pc, #824]	; (8004de4 <mg_http_serve_file+0x388>)
 8004aac:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
  struct mg_fd *fd = path == NULL ? NULL : mg_fs_open(fs, path, MG_FS_READ);
 8004ab0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004ab4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00b      	beq.n	8004ad6 <mg_http_serve_file+0x7a>
 8004abe:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004ac2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	6819      	ldr	r1, [r3, #0]
 8004aca:	f8d7 0194 	ldr.w	r0, [r7, #404]	; 0x194
 8004ace:	f7fe ff43 	bl	8003958 <mg_fs_open>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	e000      	b.n	8004ad8 <mg_http_serve_file+0x7c>
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  size_t size = 0;
 8004adc:	2300      	movs	r3, #0
 8004ade:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  time_t mtime = 0;
 8004ae2:	f04f 0200 	mov.w	r2, #0
 8004ae6:	f04f 0300 	mov.w	r3, #0
 8004aea:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  struct mg_str *inm = NULL;
 8004aee:	2300      	movs	r3, #0
 8004af0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  struct mg_str mime = guess_content_type(mg_str(path), opts->mime_types);
 8004af4:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8004af8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004afc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004b00:	6819      	ldr	r1, [r3, #0]
 8004b02:	4610      	mov	r0, r2
 8004b04:	f005 fbca 	bl	800a29c <mg_str_s>
 8004b08:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004b0c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8004b18:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8004b1c:	ca06      	ldmia	r2, {r1, r2}
 8004b1e:	f7ff fe99 	bl	8004854 <guess_content_type>
  bool gzip = false;
 8004b22:	2300      	movs	r3, #0
 8004b24:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab

  // If file does not exist, we try to open file PATH.gz - and if such
  // pre-compressed .gz file exists, serve it with the Content-Encoding: gzip
  // Note - we ignore Accept-Encoding, cause we don't have a choice
  if (fd == NULL) {
 8004b28:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d177      	bne.n	8004c20 <mg_http_serve_file+0x1c4>
    MG_DEBUG(("NULL [%s]", path));
 8004b30:	4bad      	ldr	r3, [pc, #692]	; (8004de8 <mg_http_serve_file+0x38c>)
 8004b32:	f240 7212 	movw	r2, #1810	; 0x712
 8004b36:	49ad      	ldr	r1, [pc, #692]	; (8004dec <mg_http_serve_file+0x390>)
 8004b38:	2003      	movs	r0, #3
 8004b3a:	f002 fab3 	bl	80070a4 <mg_log_prefix>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d007      	beq.n	8004b54 <mg_http_serve_file+0xf8>
 8004b44:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004b48:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004b4c:	6819      	ldr	r1, [r3, #0]
 8004b4e:	48a8      	ldr	r0, [pc, #672]	; (8004df0 <mg_http_serve_file+0x394>)
 8004b50:	f002 fb02 	bl	8007158 <mg_log>
    mg_snprintf(tmp, sizeof(tmp), "%s.gz", path);
 8004b54:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004b58:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004b5c:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4aa4      	ldr	r2, [pc, #656]	; (8004df4 <mg_http_serve_file+0x398>)
 8004b64:	2164      	movs	r1, #100	; 0x64
 8004b66:	f7fd fc7b 	bl	8002460 <mg_snprintf>
    if ((fd = mg_fs_open(fs, tmp, MG_FS_READ)) != NULL) {
 8004b6a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004b6e:	2201      	movs	r2, #1
 8004b70:	4619      	mov	r1, r3
 8004b72:	f8d7 0194 	ldr.w	r0, [r7, #404]	; 0x194
 8004b76:	f7fe feef 	bl	8003958 <mg_fs_open>
 8004b7a:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
 8004b7e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00a      	beq.n	8004b9c <mg_http_serve_file+0x140>
      gzip = true;
 8004b86:	2301      	movs	r3, #1
 8004b88:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
      path = tmp;
 8004b8c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004b90:	f5a3 72be 	sub.w	r2, r3, #380	; 0x17c
 8004b94:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004b98:	6013      	str	r3, [r2, #0]
 8004b9a:	e041      	b.n	8004c20 <mg_http_serve_file+0x1c4>
    } else if (opts->page404 != NULL) {
 8004b9c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004ba0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d039      	beq.n	8004c20 <mg_http_serve_file+0x1c4>
      // No precompressed file, serve 404
      fd = mg_fs_open(fs, opts->page404, MG_FS_READ);
 8004bac:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004bb0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	4619      	mov	r1, r3
 8004bbc:	f8d7 0194 	ldr.w	r0, [r7, #404]	; 0x194
 8004bc0:	f7fe feca 	bl	8003958 <mg_fs_open>
 8004bc4:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
      mime = guess_content_type(mg_str(path), opts->mime_types);
 8004bc8:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 8004bcc:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004bd0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004bd4:	6819      	ldr	r1, [r3, #0]
 8004bd6:	4610      	mov	r0, r2
 8004bd8:	f005 fb60 	bl	800a29c <mg_str_s>
 8004bdc:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004be0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8004bec:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 8004bf0:	ca06      	ldmia	r2, {r1, r2}
 8004bf2:	f7ff fe2f 	bl	8004854 <guess_content_type>
 8004bf6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004bfa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004bfe:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8004c02:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004c06:	e882 0003 	stmia.w	r2, {r0, r1}
      path = opts->page404;
 8004c0a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004c0e:	f5a3 72be 	sub.w	r2, r3, #380	; 0x17c
 8004c12:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004c16:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	6013      	str	r3, [r2, #0]
    }
  }

  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 8004c20:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00f      	beq.n	8004c48 <mg_http_serve_file+0x1ec>
 8004c28:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004c2c:	681c      	ldr	r4, [r3, #0]
 8004c2e:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8004c32:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8004c36:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004c3a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004c3e:	6818      	ldr	r0, [r3, #0]
 8004c40:	47a0      	blx	r4
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d114      	bne.n	8004c72 <mg_http_serve_file+0x216>
    mg_http_reply(c, 404, opts->extra_headers, "Not found\n");
 8004c48:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004c4c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	689a      	ldr	r2, [r3, #8]
 8004c54:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004c58:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 8004c5c:	4b66      	ldr	r3, [pc, #408]	; (8004df8 <mg_http_serve_file+0x39c>)
 8004c5e:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8004c62:	6800      	ldr	r0, [r0, #0]
 8004c64:	f7ff fd00 	bl	8004668 <mg_http_reply>
    mg_fs_close(fd);
 8004c68:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 8004c6c:	f7fe fe9c 	bl	80039a8 <mg_fs_close>
 8004c70:	e190      	b.n	8004f94 <mg_http_serve_file+0x538>
    // NOTE: mg_http_etag() call should go first!
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8004c72:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8004c76:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8004c7a:	f507 709a 	add.w	r0, r7, #308	; 0x134
 8004c7e:	e9cd 2300 	strd	r2, r3, [sp]
 8004c82:	460a      	mov	r2, r1
 8004c84:	2140      	movs	r1, #64	; 0x40
 8004c86:	f7ff fd67 	bl	8004758 <mg_http_etag>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d02c      	beq.n	8004cea <mg_http_serve_file+0x28e>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8004c90:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004c94:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004c98:	4958      	ldr	r1, [pc, #352]	; (8004dfc <mg_http_serve_file+0x3a0>)
 8004c9a:	6818      	ldr	r0, [r3, #0]
 8004c9c:	f7ff fa70 	bl	8004180 <mg_http_get_header>
 8004ca0:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8004ca4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d01e      	beq.n	8004cea <mg_http_serve_file+0x28e>
             mg_vcasecmp(inm, etag) == 0) {
 8004cac:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 8004cb6:	f005 fb8f 	bl	800a3d8 <mg_vcasecmp>
 8004cba:	4603      	mov	r3, r0
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d114      	bne.n	8004cea <mg_http_serve_file+0x28e>
    mg_fs_close(fd);
 8004cc0:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 8004cc4:	f7fe fe70 	bl	80039a8 <mg_fs_close>
    mg_http_reply(c, 304, opts->extra_headers, "");
 8004cc8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004ccc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	689a      	ldr	r2, [r3, #8]
 8004cd4:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004cd8:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 8004cdc:	4b48      	ldr	r3, [pc, #288]	; (8004e00 <mg_http_serve_file+0x3a4>)
 8004cde:	f44f 7198 	mov.w	r1, #304	; 0x130
 8004ce2:	6800      	ldr	r0, [r0, #0]
 8004ce4:	f7ff fcc0 	bl	8004668 <mg_http_reply>
 8004ce8:	e154      	b.n	8004f94 <mg_http_serve_file+0x538>
  } else {
    int n, status = 200;
 8004cea:	23c8      	movs	r3, #200	; 0xc8
 8004cec:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
    char range[100];
    int64_t r1 = 0, r2 = 0, cl = (int64_t) size;
 8004cf0:	f04f 0200 	mov.w	r2, #0
 8004cf4:	f04f 0300 	mov.w	r3, #0
 8004cf8:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
 8004cfc:	f04f 0200 	mov.w	r2, #0
 8004d00:	f04f 0300 	mov.w	r3, #0
 8004d04:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
 8004d08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	60bb      	str	r3, [r7, #8]
 8004d10:	60fa      	str	r2, [r7, #12]
 8004d12:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004d16:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198

    // Handle Range header
    struct mg_str *rh = mg_http_get_header(hm, "Range");
 8004d1a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004d1e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004d22:	4938      	ldr	r1, [pc, #224]	; (8004e04 <mg_http_serve_file+0x3a8>)
 8004d24:	6818      	ldr	r0, [r3, #0]
 8004d26:	f7ff fa2b 	bl	8004180 <mg_http_get_header>
 8004d2a:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
    range[0] = '\0';
 8004d2e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004d32:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 8004d36:	2300      	movs	r3, #0
 8004d38:	7013      	strb	r3, [r2, #0]
    if (rh != NULL && (n = getrange(rh, &r1, &r2)) > 0 && r1 >= 0 && r2 >= 0) {
 8004d3a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f000 80aa 	beq.w	8004e98 <mg_http_serve_file+0x43c>
 8004d44:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004d48:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	f8d7 018c 	ldr.w	r0, [r7, #396]	; 0x18c
 8004d52:	f7ff fdf9 	bl	8004948 <getrange>
 8004d56:	f8c7 0188 	str.w	r0, [r7, #392]	; 0x188
 8004d5a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f340 809a 	ble.w	8004e98 <mg_http_serve_file+0x43c>
 8004d64:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f2c0 8095 	blt.w	8004e98 <mg_http_serve_file+0x43c>
 8004d6e:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	f2c0 8090 	blt.w	8004e98 <mg_http_serve_file+0x43c>
      // If range is specified like "400-", set second limit to content len
      if (n == 1) r2 = cl - 1;
 8004d78:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d106      	bne.n	8004d8e <mg_http_serve_file+0x332>
 8004d80:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 8004d84:	1e55      	subs	r5, r2, #1
 8004d86:	f143 36ff 	adc.w	r6, r3, #4294967295
 8004d8a:	e9c7 562a 	strd	r5, r6, [r7, #168]	; 0xa8
      if (r1 > r2 || r2 >= cl) {
 8004d8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004d92:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8004d96:	4282      	cmp	r2, r0
 8004d98:	418b      	sbcs	r3, r1
 8004d9a:	db07      	blt.n	8004dac <mg_http_serve_file+0x350>
 8004d9c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8004da0:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 8004da4:	4290      	cmp	r0, r2
 8004da6:	eb71 0303 	sbcs.w	r3, r1, r3
 8004daa:	db2f      	blt.n	8004e0c <mg_http_serve_file+0x3b0>
        status = 416;
 8004dac:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8004db0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
        cl = 0;
 8004db4:	f04f 0200 	mov.w	r2, #0
 8004db8:	f04f 0300 	mov.w	r3, #0
 8004dbc:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 8004dc0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	623b      	str	r3, [r7, #32]
 8004dc8:	627a      	str	r2, [r7, #36]	; 0x24
 8004dca:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004dce:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004dd2:	e9cd 1200 	strd	r1, r2, [sp]
 8004dd6:	4a0c      	ldr	r2, [pc, #48]	; (8004e08 <mg_http_serve_file+0x3ac>)
 8004dd8:	2164      	movs	r1, #100	; 0x64
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7fd fb40 	bl	8002460 <mg_snprintf>
 8004de0:	e05a      	b.n	8004e98 <mg_http_serve_file+0x43c>
 8004de2:	bf00      	nop
 8004de4:	20000028 	.word	0x20000028
 8004de8:	0801569c 	.word	0x0801569c
 8004dec:	08013b30 	.word	0x08013b30
 8004df0:	08014124 	.word	0x08014124
 8004df4:	08014130 	.word	0x08014130
 8004df8:	08014138 	.word	0x08014138
 8004dfc:	08014144 	.word	0x08014144
 8004e00:	08013e70 	.word	0x08013e70
 8004e04:	08014154 	.word	0x08014154
 8004e08:	0801415c 	.word	0x0801415c
                    (int64_t) size);
      } else {
        status = 206;
 8004e0c:	23ce      	movs	r3, #206	; 0xce
 8004e0e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
        cl = r2 - r1 + 1;
 8004e12:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8004e16:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8004e1a:	ebb0 0a02 	subs.w	sl, r0, r2
 8004e1e:	eb61 0b03 	sbc.w	fp, r1, r3
 8004e22:	f11a 0301 	adds.w	r3, sl, #1
 8004e26:	603b      	str	r3, [r7, #0]
 8004e28:	f14b 0300 	adc.w	r3, fp, #0
 8004e2c:	607b      	str	r3, [r7, #4]
 8004e2e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004e32:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
        mg_snprintf(range, sizeof(range),
 8004e36:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
                    "Content-Range: bytes %lld-%lld/%lld\r\n", r1, r1 + cl - 1,
 8004e3a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004e3e:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 8004e42:	eb10 0802 	adds.w	r8, r0, r2
 8004e46:	eb41 0903 	adc.w	r9, r1, r3
        mg_snprintf(range, sizeof(range),
 8004e4a:	f118 33ff 	adds.w	r3, r8, #4294967295
 8004e4e:	61bb      	str	r3, [r7, #24]
 8004e50:	f149 33ff 	adc.w	r3, r9, #4294967295
 8004e54:	61fb      	str	r3, [r7, #28]
 8004e56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	613b      	str	r3, [r7, #16]
 8004e5e:	617a      	str	r2, [r7, #20]
 8004e60:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004e64:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004e68:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8004e6c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004e70:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8004e74:	e9cd 4500 	strd	r4, r5, [sp]
 8004e78:	4a49      	ldr	r2, [pc, #292]	; (8004fa0 <mg_http_serve_file+0x544>)
 8004e7a:	2164      	movs	r1, #100	; 0x64
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7fd faef 	bl	8002460 <mg_snprintf>
                    (int64_t) size);
        fs->sk(fd->fd, (size_t) r1);
 8004e82:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004e86:	699c      	ldr	r4, [r3, #24]
 8004e88:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8004e8c:	6818      	ldr	r0, [r3, #0]
 8004e8e:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8004e92:	4613      	mov	r3, r2
 8004e94:	4619      	mov	r1, r3
 8004e96:	47a0      	blx	r4
      }
    }
    mg_printf(c,
 8004e98:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 8004e9c:	f7ff fb14 	bl	80044c8 <mg_http_status_code_str>
 8004ea0:	4604      	mov	r4, r0
              "HTTP/1.1 %d %s\r\n"
              "Content-Type: %.*s\r\n"
              "Etag: %s\r\n"
              "Content-Length: %llu\r\n"
              "%s%s%s\r\n",
              status, mg_http_status_code_str(status), (int) mime.len, mime.ptr,
 8004ea2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
    mg_printf(c,
 8004ea6:	461d      	mov	r5, r3
 8004ea8:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8004eac:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d001      	beq.n	8004eb8 <mg_http_serve_file+0x45c>
 8004eb4:	4a3b      	ldr	r2, [pc, #236]	; (8004fa4 <mg_http_serve_file+0x548>)
 8004eb6:	e000      	b.n	8004eba <mg_http_serve_file+0x45e>
 8004eb8:	4a3b      	ldr	r2, [pc, #236]	; (8004fa8 <mg_http_serve_file+0x54c>)
              etag, cl, gzip ? "Content-Encoding: gzip\r\n" : "", range,
              opts->extra_headers ? opts->extra_headers : "");
 8004eba:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004ebe:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
    mg_printf(c,
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d006      	beq.n	8004ed8 <mg_http_serve_file+0x47c>
 8004eca:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004ece:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	e000      	b.n	8004eda <mg_http_serve_file+0x47e>
 8004ed8:	4b33      	ldr	r3, [pc, #204]	; (8004fa8 <mg_http_serve_file+0x54c>)
 8004eda:	f507 70d8 	add.w	r0, r7, #432	; 0x1b0
 8004ede:	f5a0 70ba 	sub.w	r0, r0, #372	; 0x174
 8004ee2:	9308      	str	r3, [sp, #32]
 8004ee4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004ee8:	9307      	str	r3, [sp, #28]
 8004eea:	9206      	str	r2, [sp, #24]
 8004eec:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 8004ef0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004ef4:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8004ef8:	9302      	str	r3, [sp, #8]
 8004efa:	9101      	str	r1, [sp, #4]
 8004efc:	9500      	str	r5, [sp, #0]
 8004efe:	4623      	mov	r3, r4
 8004f00:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8004f04:	4929      	ldr	r1, [pc, #164]	; (8004fac <mg_http_serve_file+0x550>)
 8004f06:	6800      	ldr	r0, [r0, #0]
 8004f08:	f002 ff0c 	bl	8007d24 <mg_printf>
    if (mg_vcasecmp(&hm->method, "HEAD") == 0) {
 8004f0c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004f10:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4926      	ldr	r1, [pc, #152]	; (8004fb0 <mg_http_serve_file+0x554>)
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f005 fa5d 	bl	800a3d8 <mg_vcasecmp>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d11a      	bne.n	8004f5a <mg_http_serve_file+0x4fe>
      c->is_draining = 1;
 8004f24:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004f28:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	f892 30b1 	ldrb.w	r3, [r2, #177]	; 0xb1
 8004f32:	f043 0308 	orr.w	r3, r3, #8
 8004f36:	f882 30b1 	strb.w	r3, [r2, #177]	; 0xb1
      c->is_resp = 0;
 8004f3a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004f3e:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	f892 30b1 	ldrb.w	r3, [r2, #177]	; 0xb1
 8004f48:	f36f 1386 	bfc	r3, #6, #1
 8004f4c:	f882 30b1 	strb.w	r3, [r2, #177]	; 0xb1
      mg_fs_close(fd);
 8004f50:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 8004f54:	f7fe fd28 	bl	80039a8 <mg_fs_close>
      c->pfn = static_cb;
      c->pfn_data = fd;
      *clp = (size_t) cl;
    }
  }
}
 8004f58:	e01c      	b.n	8004f94 <mg_http_serve_file+0x538>
      size_t *clp = (size_t *) &c->label[(sizeof(c->label) - sizeof(size_t)) /
 8004f5a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004f5e:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	33a4      	adds	r3, #164	; 0xa4
 8004f66:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
      c->pfn = static_cb;
 8004f6a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004f6e:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a0f      	ldr	r2, [pc, #60]	; (8004fb4 <mg_http_serve_file+0x558>)
 8004f76:	671a      	str	r2, [r3, #112]	; 0x70
      c->pfn_data = fd;
 8004f78:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004f7c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8004f86:	675a      	str	r2, [r3, #116]	; 0x74
      *clp = (size_t) cl;
 8004f88:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004f8c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004f90:	601a      	str	r2, [r3, #0]
}
 8004f92:	e7ff      	b.n	8004f94 <mg_http_serve_file+0x538>
 8004f94:	bf00      	nop
 8004f96:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fa0:	0801417c 	.word	0x0801417c
 8004fa4:	080141a4 	.word	0x080141a4
 8004fa8:	08013e70 	.word	0x08013e70
 8004fac:	080141c0 	.word	0x080141c0
 8004fb0:	08014210 	.word	0x08014210
 8004fb4:	08004791 	.word	0x08004791

08004fb8 <printdirentry>:
  struct mg_http_message *hm;
  const struct mg_http_serve_opts *opts;
  const char *dir;
};

static void printdirentry(const char *name, void *userdata) {
 8004fb8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004fbc:	b0c2      	sub	sp, #264	; 0x108
 8004fbe:	af0a      	add	r7, sp, #40	; 0x28
 8004fc0:	6078      	str	r0, [r7, #4]
 8004fc2:	6039      	str	r1, [r7, #0]
  struct printdirentrydata *d = (struct printdirentrydata *) userdata;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  struct mg_fs *fs = d->opts->fs == NULL ? &mg_fs_posix : d->opts->fs;
 8004fca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d004      	beq.n	8004fe0 <printdirentry+0x28>
 8004fd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	e000      	b.n	8004fe2 <printdirentry+0x2a>
 8004fe0:	4b64      	ldr	r3, [pc, #400]	; (8005174 <printdirentry+0x1bc>)
 8004fe2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  size_t size = 0;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  time_t t = 0;
 8004fec:	f04f 0200 	mov.w	r2, #0
 8004ff0:	f04f 0300 	mov.w	r3, #0
 8004ff4:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  char path[MG_PATH_MAX], sz[40], mod[40];
  int flags, n = 0;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  // MG_DEBUG(("[%s] [%s]", d->dir, name));
  if (mg_snprintf(path, sizeof(path), "%s%c%s", d->dir, '/', name) >
 8004ffe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005002:	68da      	ldr	r2, [r3, #12]
 8005004:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	9301      	str	r3, [sp, #4]
 800500c:	232f      	movs	r3, #47	; 0x2f
 800500e:	9300      	str	r3, [sp, #0]
 8005010:	4613      	mov	r3, r2
 8005012:	4a59      	ldr	r2, [pc, #356]	; (8005178 <printdirentry+0x1c0>)
 8005014:	2164      	movs	r1, #100	; 0x64
 8005016:	f7fd fa23 	bl	8002460 <mg_snprintf>
 800501a:	4603      	mov	r3, r0
 800501c:	2b64      	cmp	r3, #100	; 0x64
 800501e:	d90f      	bls.n	8005040 <printdirentry+0x88>
      sizeof(path)) {
    MG_ERROR(("%s truncated", name));
 8005020:	4b56      	ldr	r3, [pc, #344]	; (800517c <printdirentry+0x1c4>)
 8005022:	f240 726b 	movw	r2, #1899	; 0x76b
 8005026:	4956      	ldr	r1, [pc, #344]	; (8005180 <printdirentry+0x1c8>)
 8005028:	2001      	movs	r0, #1
 800502a:	f002 f83b 	bl	80070a4 <mg_log_prefix>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	f000 809a 	beq.w	800516a <printdirentry+0x1b2>
 8005036:	6879      	ldr	r1, [r7, #4]
 8005038:	4852      	ldr	r0, [pc, #328]	; (8005184 <printdirentry+0x1cc>)
 800503a:	f002 f88d 	bl	8007158 <mg_log>
              "  <tr><td><a href=\"%.*s%s\">%s%s</a></td>"
              "<td name=%lu>%s</td><td name=%lld>%s</td></tr>\n",
              n, path, slash, name, slash, (unsigned long) t, mod,
              flags & MG_FS_DIR ? (int64_t) -1 : (int64_t) size, sz);
  }
}
 800503e:	e094      	b.n	800516a <printdirentry+0x1b2>
  } else if ((flags = fs->st(path, &size, &t)) == 0) {
 8005040:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800504a:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 800504e:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8005052:	4798      	blx	r3
 8005054:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 8005058:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d118      	bne.n	8005092 <printdirentry+0xda>
    MG_ERROR(("%lu stat(%s): %d", d->c->id, path, errno));
 8005060:	4b46      	ldr	r3, [pc, #280]	; (800517c <printdirentry+0x1c4>)
 8005062:	f240 726d 	movw	r2, #1901	; 0x76d
 8005066:	4946      	ldr	r1, [pc, #280]	; (8005180 <printdirentry+0x1c8>)
 8005068:	2001      	movs	r0, #1
 800506a:	f002 f81b 	bl	80070a4 <mg_log_prefix>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d07a      	beq.n	800516a <printdirentry+0x1b2>
 8005074:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800507c:	f00d fb12 	bl	80126a4 <__errno>
 8005080:	4603      	mov	r3, r0
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005088:	4621      	mov	r1, r4
 800508a:	483f      	ldr	r0, [pc, #252]	; (8005188 <printdirentry+0x1d0>)
 800508c:	f002 f864 	bl	8007158 <mg_log>
}
 8005090:	e06b      	b.n	800516a <printdirentry+0x1b2>
    const char *slash = flags & MG_FS_DIR ? "/" : "";
 8005092:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005096:	f003 0304 	and.w	r3, r3, #4
 800509a:	2b00      	cmp	r3, #0
 800509c:	d001      	beq.n	80050a2 <printdirentry+0xea>
 800509e:	4b3b      	ldr	r3, [pc, #236]	; (800518c <printdirentry+0x1d4>)
 80050a0:	e000      	b.n	80050a4 <printdirentry+0xec>
 80050a2:	4b3b      	ldr	r3, [pc, #236]	; (8005190 <printdirentry+0x1d8>)
 80050a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    if (flags & MG_FS_DIR) {
 80050a8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80050ac:	f003 0304 	and.w	r3, r3, #4
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d007      	beq.n	80050c4 <printdirentry+0x10c>
      mg_snprintf(sz, sizeof(sz), "%s", "[DIR]");
 80050b4:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80050b8:	4b36      	ldr	r3, [pc, #216]	; (8005194 <printdirentry+0x1dc>)
 80050ba:	4a37      	ldr	r2, [pc, #220]	; (8005198 <printdirentry+0x1e0>)
 80050bc:	2128      	movs	r1, #40	; 0x28
 80050be:	f7fd f9cf 	bl	8002460 <mg_snprintf>
 80050c2:	e00d      	b.n	80050e0 <printdirentry+0x128>
      mg_snprintf(sz, sizeof(sz), "%lld", (uint64_t) size);
 80050c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80050c8:	2200      	movs	r2, #0
 80050ca:	4698      	mov	r8, r3
 80050cc:	4691      	mov	r9, r2
 80050ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80050d2:	e9cd 8900 	strd	r8, r9, [sp]
 80050d6:	4a31      	ldr	r2, [pc, #196]	; (800519c <printdirentry+0x1e4>)
 80050d8:	2128      	movs	r1, #40	; 0x28
 80050da:	4618      	mov	r0, r3
 80050dc:	f7fd f9c0 	bl	8002460 <mg_snprintf>
    mg_snprintf(mod, sizeof(mod), "%ld", (unsigned long) t);
 80050e0:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80050e4:	4613      	mov	r3, r2
 80050e6:	f107 000c 	add.w	r0, r7, #12
 80050ea:	4a2d      	ldr	r2, [pc, #180]	; (80051a0 <printdirentry+0x1e8>)
 80050ec:	2128      	movs	r1, #40	; 0x28
 80050ee:	f7fd f9b7 	bl	8002460 <mg_snprintf>
    n = (int) mg_url_encode(name, strlen(name), path, sizeof(path));
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7fb f8e6 	bl	80002c4 <strlen>
 80050f8:	4601      	mov	r1, r0
 80050fa:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80050fe:	2364      	movs	r3, #100	; 0x64
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 fb43 	bl	800578c <mg_url_encode>
 8005106:	4603      	mov	r3, r0
 8005108:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    mg_printf(d->c,
 800510c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005110:	6818      	ldr	r0, [r3, #0]
 8005112:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8005116:	4611      	mov	r1, r2
              flags & MG_FS_DIR ? (int64_t) -1 : (int64_t) size, sz);
 8005118:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800511c:	f003 0304 	and.w	r3, r3, #4
    mg_printf(d->c,
 8005120:	2b00      	cmp	r3, #0
 8005122:	d105      	bne.n	8005130 <printdirentry+0x178>
              flags & MG_FS_DIR ? (int64_t) -1 : (int64_t) size, sz);
 8005124:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
    mg_printf(d->c,
 8005128:	2200      	movs	r2, #0
 800512a:	461c      	mov	r4, r3
 800512c:	4615      	mov	r5, r2
 800512e:	e003      	b.n	8005138 <printdirentry+0x180>
 8005130:	f04f 34ff 	mov.w	r4, #4294967295
 8005134:	f04f 35ff 	mov.w	r5, #4294967295
 8005138:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800513c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005140:	9308      	str	r3, [sp, #32]
 8005142:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005146:	f107 030c 	add.w	r3, r7, #12
 800514a:	9304      	str	r3, [sp, #16]
 800514c:	9103      	str	r1, [sp, #12]
 800514e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005152:	9302      	str	r3, [sp, #8]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	9301      	str	r3, [sp, #4]
 8005158:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800515c:	9300      	str	r3, [sp, #0]
 800515e:	4613      	mov	r3, r2
 8005160:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8005164:	490f      	ldr	r1, [pc, #60]	; (80051a4 <printdirentry+0x1ec>)
 8005166:	f002 fddd 	bl	8007d24 <mg_printf>
}
 800516a:	bf00      	nop
 800516c:	37e0      	adds	r7, #224	; 0xe0
 800516e:	46bd      	mov	sp, r7
 8005170:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005174:	20000028 	.word	0x20000028
 8005178:	08014218 	.word	0x08014218
 800517c:	080156b0 	.word	0x080156b0
 8005180:	08013b30 	.word	0x08013b30
 8005184:	08014220 	.word	0x08014220
 8005188:	08014230 	.word	0x08014230
 800518c:	08014244 	.word	0x08014244
 8005190:	08013e70 	.word	0x08013e70
 8005194:	08014248 	.word	0x08014248
 8005198:	08013c4c 	.word	0x08013c4c
 800519c:	08014250 	.word	0x08014250
 80051a0:	08014258 	.word	0x08014258
 80051a4:	0801425c 	.word	0x0801425c

080051a8 <listdir>:

static void listdir(struct mg_connection *c, struct mg_http_message *hm,
                    const struct mg_http_serve_opts *opts, char *dir) {
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b0b0      	sub	sp, #192	; 0xc0
 80051ac:	af04      	add	r7, sp, #16
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]
 80051b4:	603b      	str	r3, [r7, #0]
  const char *sort_js_code =
 80051b6:	4b51      	ldr	r3, [pc, #324]	; (80052fc <listdir+0x154>)
 80051b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
      "t1 = a.cells[2].getAttribute('name'), "
      "t2 = b.cells[2].getAttribute('name'); "
      "return so * (t1 < 0 && t2 >= 0 ? -1 : t2 < 0 && t1 >= 0 ? 1 : "
      "n1 ? parseInt(n2) - parseInt(n1) : "
      "c1.textContent.trim().localeCompare(c2.textContent.trim())); });";
  const char *sort_js_code2 =
 80051bc:	4b50      	ldr	r3, [pc, #320]	; (8005300 <listdir+0x158>)
 80051be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      "var c = ev.target.rel; if (c) {if (c == sc) so *= -1; srt(tb, c, so); "
      "sc = c; ev.preventDefault();}};"
      "srt(tb, sc, so, true);"
      "}"
      "</script>";
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d002      	beq.n	80051d0 <listdir+0x28>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	e000      	b.n	80051d2 <listdir+0x2a>
 80051d0:	4b4c      	ldr	r3, [pc, #304]	; (8005304 <listdir+0x15c>)
 80051d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  struct printdirentrydata d = {c, hm, opts, dir};
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  char tmp[10], buf[MG_PATH_MAX];
  size_t off, n;
  int len = mg_url_decode(hm->uri.ptr, hm->uri.len, buf, sizeof(buf), 0);
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	6898      	ldr	r0, [r3, #8]
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	68d9      	ldr	r1, [r3, #12]
 80051f6:	f107 0218 	add.w	r2, r7, #24
 80051fa:	2300      	movs	r3, #0
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	2364      	movs	r3, #100	; 0x64
 8005200:	f7fe fe9c 	bl	8003f3c <mg_url_decode>
 8005204:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
  struct mg_str uri = len > 0 ? mg_str_n(buf, (size_t) len) : hm->uri;
 8005208:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800520c:	2b00      	cmp	r3, #0
 800520e:	dd09      	ble.n	8005224 <listdir+0x7c>
 8005210:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8005214:	f107 0310 	add.w	r3, r7, #16
 8005218:	f107 0118 	add.w	r1, r7, #24
 800521c:	4618      	mov	r0, r3
 800521e:	f005 f85a 	bl	800a2d6 <mg_str_n>
 8005222:	e007      	b.n	8005234 <listdir+0x8c>
 8005224:	68ba      	ldr	r2, [r7, #8]
 8005226:	f107 0310 	add.w	r3, r7, #16
 800522a:	3208      	adds	r2, #8
 800522c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005230:	e883 0003 	stmia.w	r3, {r0, r1}
  mg_printf(c,
            "HTTP/1.1 200 OK\r\n"
            "Content-Type: text/html; charset=utf-8\r\n"
            "%s"
            "Content-Length:         \r\n\r\n",
            opts->extra_headers == NULL ? "" : opts->extra_headers);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689b      	ldr	r3, [r3, #8]
  mg_printf(c,
 8005238:	2b00      	cmp	r3, #0
 800523a:	d002      	beq.n	8005242 <listdir+0x9a>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	e000      	b.n	8005244 <listdir+0x9c>
 8005242:	4b31      	ldr	r3, [pc, #196]	; (8005308 <listdir+0x160>)
 8005244:	461a      	mov	r2, r3
 8005246:	4931      	ldr	r1, [pc, #196]	; (800530c <listdir+0x164>)
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	f002 fd6b 	bl	8007d24 <mg_printf>
  off = c->send.len;  // Start of body
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005252:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
            "<a href=\"#\" rel=\"1\">Modified</a></th>"
            "<th><a href=\"#\" rel=\"2\">Size</a></th></tr>"
            "<tr><td colspan=\"3\"><hr></td></tr>"
            "</thead>"
            "<tbody id=\"tb\">\n",
            (int) uri.len, uri.ptr, sort_js_code, sort_js_code2, (int) uri.len,
 8005256:	697b      	ldr	r3, [r7, #20]
  mg_printf(c,
 8005258:	4618      	mov	r0, r3
 800525a:	693a      	ldr	r2, [r7, #16]
            (int) uri.len, uri.ptr, sort_js_code, sort_js_code2, (int) uri.len,
 800525c:	697b      	ldr	r3, [r7, #20]
  mg_printf(c,
 800525e:	4619      	mov	r1, r3
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	9303      	str	r3, [sp, #12]
 8005264:	9102      	str	r1, [sp, #8]
 8005266:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800526a:	9301      	str	r3, [sp, #4]
 800526c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005270:	9300      	str	r3, [sp, #0]
 8005272:	4613      	mov	r3, r2
 8005274:	4602      	mov	r2, r0
 8005276:	4926      	ldr	r1, [pc, #152]	; (8005310 <listdir+0x168>)
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f002 fd53 	bl	8007d24 <mg_printf>
            uri.ptr);
  mg_printf(c, "%s",
 800527e:	4a25      	ldr	r2, [pc, #148]	; (8005314 <listdir+0x16c>)
 8005280:	4925      	ldr	r1, [pc, #148]	; (8005318 <listdir+0x170>)
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f002 fd4e 	bl	8007d24 <mg_printf>
            "  <tr><td><a href=\"..\">..</a></td>"
            "<td name=-1></td><td name=-1>[DIR]</td></tr>\n");

  fs->ls(dir, printdirentry, &d);
 8005288:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005292:	4922      	ldr	r1, [pc, #136]	; (800531c <listdir+0x174>)
 8005294:	6838      	ldr	r0, [r7, #0]
 8005296:	4798      	blx	r3
  mg_printf(c,
 8005298:	4a21      	ldr	r2, [pc, #132]	; (8005320 <listdir+0x178>)
 800529a:	4922      	ldr	r1, [pc, #136]	; (8005324 <listdir+0x17c>)
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	f002 fd41 	bl	8007d24 <mg_printf>
            "</tbody><tfoot><tr><td colspan=\"3\"><hr></td></tr></tfoot>"
            "</table><address>Mongoose v.%s</address></body></html>\n",
            MG_VERSION);
  n = mg_snprintf(tmp, sizeof(tmp), "%lu", (unsigned long) (c->send.len - off));
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80052a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 80052b0:	4a1d      	ldr	r2, [pc, #116]	; (8005328 <listdir+0x180>)
 80052b2:	210a      	movs	r1, #10
 80052b4:	f7fd f8d4 	bl	8002460 <mg_snprintf>
 80052b8:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
  if (n > sizeof(tmp)) n = 0;
 80052bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80052c0:	2b0a      	cmp	r3, #10
 80052c2:	d902      	bls.n	80052ca <listdir+0x122>
 80052c4:	2300      	movs	r3, #0
 80052c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  memcpy(c->send.buf + off - 12, tmp, n);  // Set content length
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80052ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052d2:	3b0c      	subs	r3, #12
 80052d4:	4413      	add	r3, r2
 80052d6:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 80052da:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80052de:	4618      	mov	r0, r3
 80052e0:	f00d fa2a 	bl	8012738 <memcpy>
  c->is_resp = 0;                          // Mark response end
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	f892 30b1 	ldrb.w	r3, [r2, #177]	; 0xb1
 80052ea:	f36f 1386 	bfc	r3, #6, #1
 80052ee:	f882 30b1 	strb.w	r3, [r2, #177]	; 0xb1
}
 80052f2:	bf00      	nop
 80052f4:	37b0      	adds	r7, #176	; 0xb0
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	080142b4 	.word	0x080142b4
 8005300:	0801447c 	.word	0x0801447c
 8005304:	20000028 	.word	0x20000028
 8005308:	08013e70 	.word	0x08013e70
 800530c:	08014640 	.word	0x08014640
 8005310:	08014698 	.word	0x08014698
 8005314:	08014820 	.word	0x08014820
 8005318:	08013c4c 	.word	0x08013c4c
 800531c:	08004fb9 	.word	0x08004fb9
 8005320:	08014870 	.word	0x08014870
 8005324:	08014874 	.word	0x08014874
 8005328:	080148e8 	.word	0x080148e8

0800532c <uri_to_path2>:

// Resolve requested file into `path` and return its fs->st() result
static int uri_to_path2(struct mg_connection *c, struct mg_http_message *hm,
                        struct mg_fs *fs, struct mg_str url, struct mg_str dir,
                        char *path, size_t path_size) {
 800532c:	b082      	sub	sp, #8
 800532e:	b590      	push	{r4, r7, lr}
 8005330:	b08b      	sub	sp, #44	; 0x2c
 8005332:	af02      	add	r7, sp, #8
 8005334:	60f8      	str	r0, [r7, #12]
 8005336:	60b9      	str	r1, [r7, #8]
 8005338:	607a      	str	r2, [r7, #4]
 800533a:	637b      	str	r3, [r7, #52]	; 0x34
  int flags, tmp;
  // Append URI to the root_dir, and sanitize it
  size_t n = mg_snprintf(path, path_size, "%.*s", (int) dir.len, dir.ptr);
 800533c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800533e:	461a      	mov	r2, r3
 8005340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005342:	9300      	str	r3, [sp, #0]
 8005344:	4613      	mov	r3, r2
 8005346:	4a84      	ldr	r2, [pc, #528]	; (8005558 <uri_to_path2+0x22c>)
 8005348:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800534a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800534c:	f7fd f888 	bl	8002460 <mg_snprintf>
 8005350:	6178      	str	r0, [r7, #20]
  if (n > path_size) n = path_size;
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005356:	429a      	cmp	r2, r3
 8005358:	d901      	bls.n	800535e <uri_to_path2+0x32>
 800535a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800535c:	617b      	str	r3, [r7, #20]
  path[path_size - 1] = '\0';
 800535e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005360:	3b01      	subs	r3, #1
 8005362:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005364:	4413      	add	r3, r2
 8005366:	2200      	movs	r2, #0
 8005368:	701a      	strb	r2, [r3, #0]
  if (n + 2 < path_size) path[n++] = '/', path[n] = '\0';
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	3302      	adds	r3, #2
 800536e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005370:	429a      	cmp	r2, r3
 8005372:	d90b      	bls.n	800538c <uri_to_path2+0x60>
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	1c5a      	adds	r2, r3, #1
 8005378:	617a      	str	r2, [r7, #20]
 800537a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800537c:	4413      	add	r3, r2
 800537e:	222f      	movs	r2, #47	; 0x2f
 8005380:	701a      	strb	r2, [r3, #0]
 8005382:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	4413      	add	r3, r2
 8005388:	2200      	movs	r2, #0
 800538a:	701a      	strb	r2, [r3, #0]
  mg_url_decode(hm->uri.ptr + url.len, hm->uri.len - url.len, path + n,
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	689a      	ldr	r2, [r3, #8]
 8005390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005392:	18d0      	adds	r0, r2, r3
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	68da      	ldr	r2, [r3, #12]
 8005398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800539a:	1ad1      	subs	r1, r2, r3
 800539c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	18d4      	adds	r4, r2, r3
 80053a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	2200      	movs	r2, #0
 80053aa:	9200      	str	r2, [sp, #0]
 80053ac:	4622      	mov	r2, r4
 80053ae:	f7fe fdc5 	bl	8003f3c <mg_url_decode>
                path_size - n, 0);
  path[path_size - 1] = '\0';  // Double-check
 80053b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053b4:	3b01      	subs	r3, #1
 80053b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053b8:	4413      	add	r3, r2
 80053ba:	2200      	movs	r2, #0
 80053bc:	701a      	strb	r2, [r3, #0]
  mg_remove_double_dots(path);
 80053be:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80053c0:	f005 fbc6 	bl	800ab50 <mg_remove_double_dots>
  n = strlen(path);
 80053c4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80053c6:	f7fa ff7d 	bl	80002c4 <strlen>
 80053ca:	6178      	str	r0, [r7, #20]
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 80053cc:	e007      	b.n	80053de <uri_to_path2+0xb2>
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	3b01      	subs	r3, #1
 80053d2:	617b      	str	r3, [r7, #20]
 80053d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	4413      	add	r3, r2
 80053da:	2200      	movs	r2, #0
 80053dc:	701a      	strb	r2, [r3, #0]
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d906      	bls.n	80053f2 <uri_to_path2+0xc6>
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	3b01      	subs	r3, #1
 80053e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053ea:	4413      	add	r3, r2
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	2b2f      	cmp	r3, #47	; 0x2f
 80053f0:	d0ed      	beq.n	80053ce <uri_to_path2+0xa2>
  flags = mg_vcmp(&hm->uri, "/") == 0 ? MG_FS_DIR : fs->st(path, NULL, NULL);
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	3308      	adds	r3, #8
 80053f6:	4959      	ldr	r1, [pc, #356]	; (800555c <uri_to_path2+0x230>)
 80053f8:	4618      	mov	r0, r3
 80053fa:	f004 ffc9 	bl	800a390 <mg_vcmp>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d007      	beq.n	8005414 <uri_to_path2+0xe8>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2200      	movs	r2, #0
 800540a:	2100      	movs	r1, #0
 800540c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800540e:	4798      	blx	r3
 8005410:	4603      	mov	r3, r0
 8005412:	e000      	b.n	8005416 <uri_to_path2+0xea>
 8005414:	2304      	movs	r3, #4
 8005416:	61fb      	str	r3, [r7, #28]
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.ptr, path,
 8005418:	4b51      	ldr	r3, [pc, #324]	; (8005560 <uri_to_path2+0x234>)
 800541a:	f240 72df 	movw	r2, #2015	; 0x7df
 800541e:	4951      	ldr	r1, [pc, #324]	; (8005564 <uri_to_path2+0x238>)
 8005420:	2004      	movs	r0, #4
 8005422:	f001 fe3f 	bl	80070a4 <mg_log_prefix>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00f      	beq.n	800544c <uri_to_path2+0x120>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	4618      	mov	r0, r3
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	689a      	ldr	r2, [r3, #8]
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	9301      	str	r3, [sp, #4]
 800543e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005440:	9300      	str	r3, [sp, #0]
 8005442:	4613      	mov	r3, r2
 8005444:	4602      	mov	r2, r0
 8005446:	4848      	ldr	r0, [pc, #288]	; (8005568 <uri_to_path2+0x23c>)
 8005448:	f001 fe86 	bl	8007158 <mg_log>
              flags));
  if (flags == 0) {
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d079      	beq.n	8005546 <uri_to_path2+0x21a>
    // Do nothing - let's caller decide
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	f003 0304 	and.w	r3, r3, #4
 8005458:	2b00      	cmp	r3, #0
 800545a:	d019      	beq.n	8005490 <uri_to_path2+0x164>
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d015      	beq.n	8005490 <uri_to_path2+0x164>
             hm->uri.ptr[hm->uri.len - 1] != '/') {
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	689a      	ldr	r2, [r3, #8]
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	3b01      	subs	r3, #1
 800546e:	4413      	add	r3, r2
 8005470:	781b      	ldrb	r3, [r3, #0]
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 8005472:	2b2f      	cmp	r3, #47	; 0x2f
 8005474:	d00c      	beq.n	8005490 <uri_to_path2+0x164>
    mg_printf(c,
              "HTTP/1.1 301 Moved\r\n"
              "Location: %.*s/\r\n"
              "Content-Length: 0\r\n"
              "\r\n",
              (int) hm->uri.len, hm->uri.ptr);
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	68db      	ldr	r3, [r3, #12]
    mg_printf(c,
 800547a:	461a      	mov	r2, r3
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	493a      	ldr	r1, [pc, #232]	; (800556c <uri_to_path2+0x240>)
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f002 fc4e 	bl	8007d24 <mg_printf>
    flags = -1;
 8005488:	f04f 33ff 	mov.w	r3, #4294967295
 800548c:	61fb      	str	r3, [r7, #28]
 800548e:	e05a      	b.n	8005546 <uri_to_path2+0x21a>
  } else if (flags & MG_FS_DIR) {
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	f003 0304 	and.w	r3, r3, #4
 8005496:	2b00      	cmp	r3, #0
 8005498:	d055      	beq.n	8005546 <uri_to_path2+0x21a>
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 800549a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	18d0      	adds	r0, r2, r3
 80054a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	4a32      	ldr	r2, [pc, #200]	; (8005570 <uri_to_path2+0x244>)
 80054a8:	4619      	mov	r1, r3
 80054aa:	f7fc ffd9 	bl	8002460 <mg_snprintf>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d009      	beq.n	80054c8 <uri_to_path2+0x19c>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2200      	movs	r2, #0
 80054ba:	2100      	movs	r1, #0
 80054bc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80054be:	4798      	blx	r3
 80054c0:	61b8      	str	r0, [r7, #24]
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d116      	bne.n	80054f6 <uri_to_path2+0x1ca>
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 80054c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	18d0      	adds	r0, r2, r3
 80054ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	4a27      	ldr	r2, [pc, #156]	; (8005574 <uri_to_path2+0x248>)
 80054d6:	4619      	mov	r1, r3
 80054d8:	f7fc ffc2 	bl	8002460 <mg_snprintf>
 80054dc:	4603      	mov	r3, r0
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00c      	beq.n	80054fc <uri_to_path2+0x1d0>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2200      	movs	r2, #0
 80054e8:	2100      	movs	r1, #0
 80054ea:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80054ec:	4798      	blx	r3
 80054ee:	61b8      	str	r0, [r7, #24]
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d002      	beq.n	80054fc <uri_to_path2+0x1d0>
      flags = tmp;
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	61fb      	str	r3, [r7, #28]
 80054fa:	e024      	b.n	8005546 <uri_to_path2+0x21a>
    } else if ((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX ".gz") >
 80054fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	18d0      	adds	r0, r2, r3
 8005502:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	4a1b      	ldr	r2, [pc, #108]	; (8005578 <uri_to_path2+0x24c>)
 800550a:	4619      	mov	r1, r3
 800550c:	f7fc ffa8 	bl	8002460 <mg_snprintf>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d012      	beq.n	800553c <uri_to_path2+0x210>
                    0 &&
                (tmp = fs->st(path, NULL, NULL)) !=
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2200      	movs	r2, #0
 800551c:	2100      	movs	r1, #0
 800551e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005520:	4798      	blx	r3
 8005522:	61b8      	str	r0, [r7, #24]
                    0 &&
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d008      	beq.n	800553c <uri_to_path2+0x210>
                    0)) {  // check for gzipped index
      flags = tmp;
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	61fb      	str	r3, [r7, #28]
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	330b      	adds	r3, #11
 8005532:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005534:	4413      	add	r3, r2
 8005536:	2200      	movs	r2, #0
 8005538:	701a      	strb	r2, [r3, #0]
 800553a:	e004      	b.n	8005546 <uri_to_path2+0x21a>
          '\0';  // Remove appended .gz in index file name
    } else {
      path[n] = '\0';  // Remove appended index file name
 800553c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	4413      	add	r3, r2
 8005542:	2200      	movs	r2, #0
 8005544:	701a      	strb	r2, [r3, #0]
    }
  }
  return flags;
 8005546:	69fb      	ldr	r3, [r7, #28]
}
 8005548:	4618      	mov	r0, r3
 800554a:	3724      	adds	r7, #36	; 0x24
 800554c:	46bd      	mov	sp, r7
 800554e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005552:	b002      	add	sp, #8
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	08013c60 	.word	0x08013c60
 800555c:	08014244 	.word	0x08014244
 8005560:	080156c0 	.word	0x080156c0
 8005564:	08013b30 	.word	0x08013b30
 8005568:	080148ec 	.word	0x080148ec
 800556c:	08014900 	.word	0x08014900
 8005570:	0801493c 	.word	0x0801493c
 8005574:	08014948 	.word	0x08014948
 8005578:	08014958 	.word	0x08014958

0800557c <uri_to_path>:

static int uri_to_path(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts, char *path,
                       size_t path_size) {
 800557c:	b580      	push	{r7, lr}
 800557e:	b09a      	sub	sp, #104	; 0x68
 8005580:	af06      	add	r7, sp, #24
 8005582:	6178      	str	r0, [r7, #20]
 8005584:	6139      	str	r1, [r7, #16]
 8005586:	60fa      	str	r2, [r7, #12]
 8005588:	60bb      	str	r3, [r7, #8]
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d002      	beq.n	8005598 <uri_to_path+0x1c>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	e000      	b.n	800559a <uri_to_path+0x1e>
 8005598:	4b3b      	ldr	r3, [pc, #236]	; (8005688 <uri_to_path+0x10c>)
 800559a:	64fb      	str	r3, [r7, #76]	; 0x4c
  struct mg_str k, v, s = mg_str(opts->root_dir), u = {0, 0}, p = {0, 0};
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80055a4:	4611      	mov	r1, r2
 80055a6:	4618      	mov	r0, r3
 80055a8:	f004 fe78 	bl	800a29c <mg_str_s>
 80055ac:	2300      	movs	r3, #0
 80055ae:	627b      	str	r3, [r7, #36]	; 0x24
 80055b0:	2300      	movs	r3, #0
 80055b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80055b4:	2300      	movs	r3, #0
 80055b6:	61fb      	str	r3, [r7, #28]
 80055b8:	2300      	movs	r3, #0
 80055ba:	623b      	str	r3, [r7, #32]
  while (mg_commalist(&s, &k, &v)) {
 80055bc:	e040      	b.n	8005640 <uri_to_path+0xc4>
    if (v.len == 0) v = k, k = mg_str("/");
 80055be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d113      	bne.n	80055ec <uri_to_path+0x70>
 80055c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80055c8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80055cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80055d0:	e883 0003 	stmia.w	r3, {r0, r1}
 80055d4:	463b      	mov	r3, r7
 80055d6:	492d      	ldr	r1, [pc, #180]	; (800568c <uri_to_path+0x110>)
 80055d8:	4618      	mov	r0, r3
 80055da:	f004 fe5f 	bl	800a29c <mg_str_s>
 80055de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80055e2:	463a      	mov	r2, r7
 80055e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80055e8:	e883 0003 	stmia.w	r3, {r0, r1}
    if (hm->uri.len < k.len) continue;
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	68da      	ldr	r2, [r3, #12]
 80055f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d200      	bcs.n	80055f8 <uri_to_path+0x7c>
 80055f6:	e023      	b.n	8005640 <uri_to_path+0xc4>
    if (mg_strcmp(k, mg_str_n(hm->uri.ptr, k.len)) != 0) continue;
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	6899      	ldr	r1, [r3, #8]
 80055fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005602:	4618      	mov	r0, r3
 8005604:	f004 fe67 	bl	800a2d6 <mg_str_n>
 8005608:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800560c:	cb0c      	ldmia	r3, {r2, r3}
 800560e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8005612:	c903      	ldmia	r1, {r0, r1}
 8005614:	f004 ff04 	bl	800a420 <mg_strcmp>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d000      	beq.n	8005620 <uri_to_path+0xa4>
 800561e:	e00f      	b.n	8005640 <uri_to_path+0xc4>
    u = k, p = v;
 8005620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005624:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8005628:	e892 0003 	ldmia.w	r2, {r0, r1}
 800562c:	e883 0003 	stmia.w	r3, {r0, r1}
 8005630:	f107 031c 	add.w	r3, r7, #28
 8005634:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005638:	e892 0003 	ldmia.w	r2, {r0, r1}
 800563c:	e883 0003 	stmia.w	r3, {r0, r1}
  while (mg_commalist(&s, &k, &v)) {
 8005640:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005644:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8005648:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800564c:	4618      	mov	r0, r3
 800564e:	f005 f911 	bl	800a874 <mg_commalist>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1b2      	bne.n	80055be <uri_to_path+0x42>
  }
  return uri_to_path2(c, hm, fs, u, p, path, path_size);
 8005658:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800565a:	9304      	str	r3, [sp, #16]
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	9303      	str	r3, [sp, #12]
 8005660:	aa01      	add	r2, sp, #4
 8005662:	f107 031c 	add.w	r3, r7, #28
 8005666:	e893 0003 	ldmia.w	r3, {r0, r1}
 800566a:	e882 0003 	stmia.w	r2, {r0, r1}
 800566e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005670:	9300      	str	r3, [sp, #0]
 8005672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005674:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005676:	6939      	ldr	r1, [r7, #16]
 8005678:	6978      	ldr	r0, [r7, #20]
 800567a:	f7ff fe57 	bl	800532c <uri_to_path2>
 800567e:	4603      	mov	r3, r0
}
 8005680:	4618      	mov	r0, r3
 8005682:	3750      	adds	r7, #80	; 0x50
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	20000028 	.word	0x20000028
 800568c:	08014244 	.word	0x08014244

08005690 <mg_http_serve_dir>:

void mg_http_serve_dir(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts) {
 8005690:	b590      	push	{r4, r7, lr}
 8005692:	b0a3      	sub	sp, #140	; 0x8c
 8005694:	af02      	add	r7, sp, #8
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
  char path[MG_PATH_MAX];
  const char *sp = opts->ssi_pattern;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	67fb      	str	r3, [r7, #124]	; 0x7c
  int flags = uri_to_path(c, hm, opts, path, sizeof(path));
 80056a2:	f107 0314 	add.w	r3, r7, #20
 80056a6:	2264      	movs	r2, #100	; 0x64
 80056a8:	9200      	str	r2, [sp, #0]
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	68b9      	ldr	r1, [r7, #8]
 80056ae:	68f8      	ldr	r0, [r7, #12]
 80056b0:	f7ff ff64 	bl	800557c <uri_to_path>
 80056b4:	67b8      	str	r0, [r7, #120]	; 0x78
  if (flags < 0) {
 80056b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	db35      	blt.n	8005728 <mg_http_serve_dir+0x98>
    // Do nothing: the response has already been sent by uri_to_path()
  } else if (flags & MG_FS_DIR) {
 80056bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056be:	f003 0304 	and.w	r3, r3, #4
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d007      	beq.n	80056d6 <mg_http_serve_dir+0x46>
    listdir(c, hm, opts, path);
 80056c6:	f107 0314 	add.w	r3, r7, #20
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	68b9      	ldr	r1, [r7, #8]
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f7ff fd6a 	bl	80051a8 <listdir>
             mg_globmatch(sp, strlen(sp), path, strlen(path))) {
    mg_http_serve_ssi(c, opts->root_dir, path);
  } else {
    mg_http_serve_file(c, hm, path, opts);
  }
}
 80056d4:	e028      	b.n	8005728 <mg_http_serve_dir+0x98>
  } else if (flags && sp != NULL &&
 80056d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d01e      	beq.n	800571a <mg_http_serve_dir+0x8a>
 80056dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d01b      	beq.n	800571a <mg_http_serve_dir+0x8a>
             mg_globmatch(sp, strlen(sp), path, strlen(path))) {
 80056e2:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80056e4:	f7fa fdee 	bl	80002c4 <strlen>
 80056e8:	4604      	mov	r4, r0
 80056ea:	f107 0314 	add.w	r3, r7, #20
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7fa fde8 	bl	80002c4 <strlen>
 80056f4:	4603      	mov	r3, r0
 80056f6:	f107 0214 	add.w	r2, r7, #20
 80056fa:	4621      	mov	r1, r4
 80056fc:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80056fe:	f004 ffb8 	bl	800a672 <mg_globmatch>
 8005702:	4603      	mov	r3, r0
  } else if (flags && sp != NULL &&
 8005704:	2b00      	cmp	r3, #0
 8005706:	d008      	beq.n	800571a <mg_http_serve_dir+0x8a>
    mg_http_serve_ssi(c, opts->root_dir, path);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f107 0214 	add.w	r2, r7, #20
 8005710:	4619      	mov	r1, r3
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f004 fdae 	bl	800a274 <mg_http_serve_ssi>
}
 8005718:	e006      	b.n	8005728 <mg_http_serve_dir+0x98>
    mg_http_serve_file(c, hm, path, opts);
 800571a:	f107 0214 	add.w	r2, r7, #20
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	68b9      	ldr	r1, [r7, #8]
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f7ff f99a 	bl	8004a5c <mg_http_serve_file>
}
 8005728:	bf00      	nop
 800572a:	3784      	adds	r7, #132	; 0x84
 800572c:	46bd      	mov	sp, r7
 800572e:	bd90      	pop	{r4, r7, pc}

08005730 <mg_is_url_safe>:

static bool mg_is_url_safe(int c) {
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') ||
         (c >= 'A' && c <= 'Z') || c == '.' || c == '_' || c == '-' || c == '~';
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2b2f      	cmp	r3, #47	; 0x2f
 800573c:	dd02      	ble.n	8005744 <mg_is_url_safe+0x14>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') ||
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2b39      	cmp	r3, #57	; 0x39
 8005742:	dd17      	ble.n	8005774 <mg_is_url_safe+0x44>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b60      	cmp	r3, #96	; 0x60
 8005748:	dd02      	ble.n	8005750 <mg_is_url_safe+0x20>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2b7a      	cmp	r3, #122	; 0x7a
 800574e:	dd11      	ble.n	8005774 <mg_is_url_safe+0x44>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b40      	cmp	r3, #64	; 0x40
 8005754:	dd02      	ble.n	800575c <mg_is_url_safe+0x2c>
         (c >= 'A' && c <= 'Z') || c == '.' || c == '_' || c == '-' || c == '~';
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b5a      	cmp	r3, #90	; 0x5a
 800575a:	dd0b      	ble.n	8005774 <mg_is_url_safe+0x44>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b2e      	cmp	r3, #46	; 0x2e
 8005760:	d008      	beq.n	8005774 <mg_is_url_safe+0x44>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2b5f      	cmp	r3, #95	; 0x5f
 8005766:	d005      	beq.n	8005774 <mg_is_url_safe+0x44>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2b2d      	cmp	r3, #45	; 0x2d
 800576c:	d002      	beq.n	8005774 <mg_is_url_safe+0x44>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2b7e      	cmp	r3, #126	; 0x7e
 8005772:	d101      	bne.n	8005778 <mg_is_url_safe+0x48>
 8005774:	2301      	movs	r3, #1
 8005776:	e000      	b.n	800577a <mg_is_url_safe+0x4a>
 8005778:	2300      	movs	r3, #0
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	b2db      	uxtb	r3, r3
}
 8005780:	4618      	mov	r0, r3
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <mg_url_encode>:

size_t mg_url_encode(const char *s, size_t sl, char *buf, size_t len) {
 800578c:	b580      	push	{r7, lr}
 800578e:	b088      	sub	sp, #32
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]
 8005798:	603b      	str	r3, [r7, #0]
  size_t i, n = 0;
 800579a:	2300      	movs	r3, #0
 800579c:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < sl; i++) {
 800579e:	2300      	movs	r3, #0
 80057a0:	61fb      	str	r3, [r7, #28]
 80057a2:	e033      	b.n	800580c <mg_url_encode+0x80>
    int c = *(unsigned char *) &s[i];
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	4413      	add	r3, r2
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	617b      	str	r3, [r7, #20]
    if (n + 4 >= len) return 0;
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	3304      	adds	r3, #4
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d801      	bhi.n	80057bc <mg_url_encode+0x30>
 80057b8:	2300      	movs	r3, #0
 80057ba:	e02c      	b.n	8005816 <mg_url_encode+0x8a>
    if (mg_is_url_safe(c)) {
 80057bc:	6978      	ldr	r0, [r7, #20]
 80057be:	f7ff ffb7 	bl	8005730 <mg_is_url_safe>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d00a      	beq.n	80057de <mg_url_encode+0x52>
      buf[n++] = s[i];
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	441a      	add	r2, r3
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	1c59      	adds	r1, r3, #1
 80057d2:	61b9      	str	r1, [r7, #24]
 80057d4:	6879      	ldr	r1, [r7, #4]
 80057d6:	440b      	add	r3, r1
 80057d8:	7812      	ldrb	r2, [r2, #0]
 80057da:	701a      	strb	r2, [r3, #0]
 80057dc:	e013      	b.n	8005806 <mg_url_encode+0x7a>
    } else {
      buf[n++] = '%';
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	1c5a      	adds	r2, r3, #1
 80057e2:	61ba      	str	r2, [r7, #24]
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	4413      	add	r3, r2
 80057e8:	2225      	movs	r2, #37	; 0x25
 80057ea:	701a      	strb	r2, [r3, #0]
      mg_hex(&s[i], 1, &buf[n]);
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	18d0      	adds	r0, r2, r3
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	4413      	add	r3, r2
 80057f8:	461a      	mov	r2, r3
 80057fa:	2101      	movs	r1, #1
 80057fc:	f005 f84c 	bl	800a898 <mg_hex>
      n += 2;
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	3302      	adds	r3, #2
 8005804:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < sl; i++) {
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	3301      	adds	r3, #1
 800580a:	61fb      	str	r3, [r7, #28]
 800580c:	69fa      	ldr	r2, [r7, #28]
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	429a      	cmp	r2, r3
 8005812:	d3c7      	bcc.n	80057a4 <mg_url_encode+0x18>
    }
  }
  return n;
 8005814:	69bb      	ldr	r3, [r7, #24]
}
 8005816:	4618      	mov	r0, r3
 8005818:	3720      	adds	r7, #32
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
	...

08005820 <mg_http_creds>:

void mg_http_creds(struct mg_http_message *hm, char *user, size_t userlen,
                   char *pass, size_t passlen) {
 8005820:	b590      	push	{r4, r7, lr}
 8005822:	b0cf      	sub	sp, #316	; 0x13c
 8005824:	af02      	add	r7, sp, #8
 8005826:	f507 7498 	add.w	r4, r7, #304	; 0x130
 800582a:	f5a4 7492 	sub.w	r4, r4, #292	; 0x124
 800582e:	6020      	str	r0, [r4, #0]
 8005830:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005834:	f5a0 7094 	sub.w	r0, r0, #296	; 0x128
 8005838:	6001      	str	r1, [r0, #0]
 800583a:	f507 7198 	add.w	r1, r7, #304	; 0x130
 800583e:	f5a1 7196 	sub.w	r1, r1, #300	; 0x12c
 8005842:	600a      	str	r2, [r1, #0]
 8005844:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005848:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800584c:	6013      	str	r3, [r2, #0]
  struct mg_str *v = mg_http_get_header(hm, "Authorization");
 800584e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005852:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005856:	497a      	ldr	r1, [pc, #488]	; (8005a40 <mg_http_creds+0x220>)
 8005858:	6818      	ldr	r0, [r3, #0]
 800585a:	f7fe fc91 	bl	8004180 <mg_http_get_header>
 800585e:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
  user[0] = pass[0] = '\0';
 8005862:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005866:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2200      	movs	r2, #0
 800586e:	701a      	strb	r2, [r3, #0]
 8005870:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005874:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	781a      	ldrb	r2, [r3, #0]
 800587c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005880:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	701a      	strb	r2, [r3, #0]
  if (v != NULL && v->len > 6 && memcmp(v->ptr, "Basic ", 6) == 0) {
 8005888:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800588c:	2b00      	cmp	r3, #0
 800588e:	d05f      	beq.n	8005950 <mg_http_creds+0x130>
 8005890:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	2b06      	cmp	r3, #6
 8005898:	d95a      	bls.n	8005950 <mg_http_creds+0x130>
 800589a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2206      	movs	r2, #6
 80058a2:	4968      	ldr	r1, [pc, #416]	; (8005a44 <mg_http_creds+0x224>)
 80058a4:	4618      	mov	r0, r3
 80058a6:	f00c ff37 	bl	8012718 <memcmp>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d14f      	bne.n	8005950 <mg_http_creds+0x130>
    char buf[256];
    int n = mg_base64_decode(v->ptr + 6, (int) v->len - 6, buf);
 80058b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	1d98      	adds	r0, r3, #6
 80058b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	3b06      	subs	r3, #6
 80058c0:	f107 0214 	add.w	r2, r7, #20
 80058c4:	4619      	mov	r1, r3
 80058c6:	f7fb fe87 	bl	80015d8 <mg_base64_decode>
 80058ca:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
    const char *p = (const char *) memchr(buf, ':', n > 0 ? (size_t) n : 0);
 80058ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80058d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80058d6:	461a      	mov	r2, r3
 80058d8:	f107 0314 	add.w	r3, r7, #20
 80058dc:	213a      	movs	r1, #58	; 0x3a
 80058de:	4618      	mov	r0, r3
 80058e0:	f7fa fc96 	bl	8000210 <memchr>
 80058e4:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
    if (p != NULL) {
 80058e8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f000 80a1 	beq.w	8005a34 <mg_http_creds+0x214>
      mg_snprintf(user, userlen, "%.*s", (int) (p - buf), buf);
 80058f2:	f107 0314 	add.w	r3, r7, #20
 80058f6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80058fa:	1ad2      	subs	r2, r2, r3
 80058fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005900:	f5a3 7196 	sub.w	r1, r3, #300	; 0x12c
 8005904:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005908:	f5a3 7094 	sub.w	r0, r3, #296	; 0x128
 800590c:	f107 0314 	add.w	r3, r7, #20
 8005910:	9300      	str	r3, [sp, #0]
 8005912:	4613      	mov	r3, r2
 8005914:	4a4c      	ldr	r2, [pc, #304]	; (8005a48 <mg_http_creds+0x228>)
 8005916:	6809      	ldr	r1, [r1, #0]
 8005918:	6800      	ldr	r0, [r0, #0]
 800591a:	f7fc fda1 	bl	8002460 <mg_snprintf>
      mg_snprintf(pass, passlen, "%.*s", n - (int) (p - buf) - 1, p + 1);
 800591e:	f107 0314 	add.w	r3, r7, #20
 8005922:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	1e5a      	subs	r2, r3, #1
 8005930:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005934:	3301      	adds	r3, #1
 8005936:	f507 7198 	add.w	r1, r7, #304	; 0x130
 800593a:	f5a1 7098 	sub.w	r0, r1, #304	; 0x130
 800593e:	9300      	str	r3, [sp, #0]
 8005940:	4613      	mov	r3, r2
 8005942:	4a41      	ldr	r2, [pc, #260]	; (8005a48 <mg_http_creds+0x228>)
 8005944:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005948:	6800      	ldr	r0, [r0, #0]
 800594a:	f7fc fd89 	bl	8002460 <mg_snprintf>
  if (v != NULL && v->len > 6 && memcmp(v->ptr, "Basic ", 6) == 0) {
 800594e:	e071      	b.n	8005a34 <mg_http_creds+0x214>
    }
  } else if (v != NULL && v->len > 7 && memcmp(v->ptr, "Bearer ", 7) == 0) {
 8005950:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005954:	2b00      	cmp	r3, #0
 8005956:	d024      	beq.n	80059a2 <mg_http_creds+0x182>
 8005958:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	2b07      	cmp	r3, #7
 8005960:	d91f      	bls.n	80059a2 <mg_http_creds+0x182>
 8005962:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2207      	movs	r2, #7
 800596a:	4938      	ldr	r1, [pc, #224]	; (8005a4c <mg_http_creds+0x22c>)
 800596c:	4618      	mov	r0, r3
 800596e:	f00c fed3 	bl	8012718 <memcmp>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d114      	bne.n	80059a2 <mg_http_creds+0x182>
    mg_snprintf(pass, passlen, "%.*s", (int) v->len - 7, v->ptr + 7);
 8005978:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	1fda      	subs	r2, r3, #7
 8005980:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	3307      	adds	r3, #7
 8005988:	f507 7198 	add.w	r1, r7, #304	; 0x130
 800598c:	f5a1 7098 	sub.w	r0, r1, #304	; 0x130
 8005990:	9300      	str	r3, [sp, #0]
 8005992:	4613      	mov	r3, r2
 8005994:	4a2c      	ldr	r2, [pc, #176]	; (8005a48 <mg_http_creds+0x228>)
 8005996:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800599a:	6800      	ldr	r0, [r0, #0]
 800599c:	f7fc fd60 	bl	8002460 <mg_snprintf>
 80059a0:	e049      	b.n	8005a36 <mg_http_creds+0x216>
  } else if ((v = mg_http_get_header(hm, "Cookie")) != NULL) {
 80059a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059a6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80059aa:	4929      	ldr	r1, [pc, #164]	; (8005a50 <mg_http_creds+0x230>)
 80059ac:	6818      	ldr	r0, [r3, #0]
 80059ae:	f7fe fbe7 	bl	8004180 <mg_http_get_header>
 80059b2:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
 80059b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d028      	beq.n	8005a10 <mg_http_creds+0x1f0>
    struct mg_str t = mg_http_get_header_var(*v, mg_str_n("access_token", 12));
 80059be:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80059c2:	220c      	movs	r2, #12
 80059c4:	4923      	ldr	r1, [pc, #140]	; (8005a54 <mg_http_creds+0x234>)
 80059c6:	4618      	mov	r0, r3
 80059c8:	f004 fc85 	bl	800a2d6 <mg_str_n>
 80059cc:	f507 708a 	add.w	r0, r7, #276	; 0x114
 80059d0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80059d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80059de:	ca06      	ldmia	r2, {r1, r2}
 80059e0:	f000 f863 	bl	8005aaa <mg_http_get_header_var>
    if (t.len > 0) mg_snprintf(pass, passlen, "%.*s", (int) t.len, t.ptr);
 80059e4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d024      	beq.n	8005a36 <mg_http_creds+0x216>
 80059ec:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80059f0:	4619      	mov	r1, r3
 80059f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059f6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80059fa:	f5a2 7098 	sub.w	r0, r2, #304	; 0x130
 80059fe:	9300      	str	r3, [sp, #0]
 8005a00:	460b      	mov	r3, r1
 8005a02:	4a11      	ldr	r2, [pc, #68]	; (8005a48 <mg_http_creds+0x228>)
 8005a04:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005a08:	6800      	ldr	r0, [r0, #0]
 8005a0a:	f7fc fd29 	bl	8002460 <mg_snprintf>
  } else {
    mg_http_get_var(&hm->query, "access_token", pass, passlen);
  }
}
 8005a0e:	e012      	b.n	8005a36 <mg_http_creds+0x216>
    mg_http_get_var(&hm->query, "access_token", pass, passlen);
 8005a10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a14:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f103 0010 	add.w	r0, r3, #16
 8005a1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a22:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 8005a26:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005a2a:	6812      	ldr	r2, [r2, #0]
 8005a2c:	4909      	ldr	r1, [pc, #36]	; (8005a54 <mg_http_creds+0x234>)
 8005a2e:	f7fe fa16 	bl	8003e5e <mg_http_get_var>
}
 8005a32:	e000      	b.n	8005a36 <mg_http_creds+0x216>
  if (v != NULL && v->len > 6 && memcmp(v->ptr, "Basic ", 6) == 0) {
 8005a34:	bf00      	nop
}
 8005a36:	bf00      	nop
 8005a38:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd90      	pop	{r4, r7, pc}
 8005a40:	08014968 	.word	0x08014968
 8005a44:	08014978 	.word	0x08014978
 8005a48:	08013c60 	.word	0x08013c60
 8005a4c:	08014980 	.word	0x08014980
 8005a50:	08014988 	.word	0x08014988
 8005a54:	08014990 	.word	0x08014990

08005a58 <stripquotes>:

static struct mg_str stripquotes(struct mg_str s) {
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	1d3b      	adds	r3, r7, #4
 8005a62:	e883 0006 	stmia.w	r3, {r1, r2}
  return s.len > 1 && s.ptr[0] == '"' && s.ptr[s.len - 1] == '"'
 8005a66:	68bb      	ldr	r3, [r7, #8]
             ? mg_str_n(s.ptr + 1, s.len - 2)
             : s;
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d913      	bls.n	8005a94 <stripquotes+0x3c>
  return s.len > 1 && s.ptr[0] == '"' && s.ptr[s.len - 1] == '"'
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	2b22      	cmp	r3, #34	; 0x22
 8005a72:	d10f      	bne.n	8005a94 <stripquotes+0x3c>
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	4413      	add	r3, r2
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	2b22      	cmp	r3, #34	; 0x22
 8005a80:	d108      	bne.n	8005a94 <stripquotes+0x3c>
             ? mg_str_n(s.ptr + 1, s.len - 2)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	1c59      	adds	r1, r3, #1
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	1e9a      	subs	r2, r3, #2
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f004 fc22 	bl	800a2d6 <mg_str_n>
             : s;
 8005a92:	e006      	b.n	8005aa2 <stripquotes+0x4a>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	461a      	mov	r2, r3
 8005a98:	1d3b      	adds	r3, r7, #4
 8005a9a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005a9e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	3710      	adds	r7, #16
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}

08005aaa <mg_http_get_header_var>:

struct mg_str mg_http_get_header_var(struct mg_str s, struct mg_str v) {
 8005aaa:	b082      	sub	sp, #8
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b08c      	sub	sp, #48	; 0x30
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	1d38      	adds	r0, r7, #4
 8005ab6:	e880 0006 	stmia.w	r0, {r1, r2}
 8005aba:	63fb      	str	r3, [r7, #60]	; 0x3c
  size_t i;
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 8005abc:	2300      	movs	r3, #0
 8005abe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ac0:	e072      	b.n	8005ba8 <mg_http_get_header_var+0xfe>
    if (s.ptr[i + v.len] == '=' && memcmp(&s.ptr[i], v.ptr, v.len) == 0) {
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac8:	440b      	add	r3, r1
 8005aca:	4413      	add	r3, r2
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	2b3d      	cmp	r3, #61	; 0x3d
 8005ad0:	d167      	bne.n	8005ba2 <mg_http_get_header_var+0xf8>
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad6:	4413      	add	r3, r2
 8005ad8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ada:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005adc:	4618      	mov	r0, r3
 8005ade:	f00c fe1b 	bl	8012718 <memcmp>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d15c      	bne.n	8005ba2 <mg_http_get_header_var+0xf8>
      const char *p = &s.ptr[i + v.len + 1], *b = p, *x = &s.ptr[s.len];
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aee:	440b      	add	r3, r1
 8005af0:	3301      	adds	r3, #1
 8005af2:	4413      	add	r3, r2
 8005af4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af8:	627b      	str	r3, [r7, #36]	; 0x24
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	4413      	add	r3, r2
 8005b00:	623b      	str	r3, [r7, #32]
      int q = p < x && *p == '"' ? 1 : 0;
 8005b02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b04:	6a3b      	ldr	r3, [r7, #32]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d205      	bcs.n	8005b16 <mg_http_get_header_var+0x6c>
 8005b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	2b22      	cmp	r3, #34	; 0x22
 8005b10:	d101      	bne.n	8005b16 <mg_http_get_header_var+0x6c>
 8005b12:	2301      	movs	r3, #1
 8005b14:	e000      	b.n	8005b18 <mg_http_get_header_var+0x6e>
 8005b16:	2300      	movs	r3, #0
 8005b18:	61fb      	str	r3, [r7, #28]
      while (p < x &&
 8005b1a:	e002      	b.n	8005b22 <mg_http_get_header_var+0x78>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
        p++;
 8005b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1e:	3301      	adds	r3, #1
 8005b20:	62bb      	str	r3, [r7, #40]	; 0x28
      while (p < x &&
 8005b22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b24:	6a3b      	ldr	r3, [r7, #32]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d227      	bcs.n	8005b7a <mg_http_get_header_var+0xd0>
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d010      	beq.n	8005b52 <mg_http_get_header_var+0xa8>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 8005b30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d003      	beq.n	8005b40 <mg_http_get_header_var+0x96>
 8005b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	2b22      	cmp	r3, #34	; 0x22
 8005b3e:	d001      	beq.n	8005b44 <mg_http_get_header_var+0x9a>
 8005b40:	2301      	movs	r3, #1
 8005b42:	e000      	b.n	8005b46 <mg_http_get_header_var+0x9c>
 8005b44:	2300      	movs	r3, #0
      while (p < x &&
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1e5      	bne.n	8005b1c <mg_http_get_header_var+0x72>
 8005b50:	e013      	b.n	8005b7a <mg_http_get_header_var+0xd0>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 8005b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	2b3b      	cmp	r3, #59	; 0x3b
 8005b58:	d009      	beq.n	8005b6e <mg_http_get_header_var+0xc4>
 8005b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	2b20      	cmp	r3, #32
 8005b60:	d005      	beq.n	8005b6e <mg_http_get_header_var+0xc4>
 8005b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	2b2c      	cmp	r3, #44	; 0x2c
 8005b68:	d001      	beq.n	8005b6e <mg_http_get_header_var+0xc4>
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e000      	b.n	8005b70 <mg_http_get_header_var+0xc6>
 8005b6e:	2300      	movs	r3, #0
      while (p < x &&
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1d0      	bne.n	8005b1c <mg_http_get_header_var+0x72>
      // MG_INFO(("[%.*s] [%.*s] [%.*s]", (int) s.len, s.ptr, (int) v.len,
      // v.ptr, (int) (p - b), b));
      return stripquotes(mg_str_n(b, (size_t) (p - b + q)));
 8005b7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7e:	1ad2      	subs	r2, r2, r3
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	4413      	add	r3, r2
 8005b84:	461a      	mov	r2, r3
 8005b86:	f107 0314 	add.w	r3, r7, #20
 8005b8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f004 fba2 	bl	800a2d6 <mg_str_n>
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f107 0314 	add.w	r3, r7, #20
 8005b98:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005b9c:	f7ff ff5c 	bl	8005a58 <stripquotes>
 8005ba0:	e012      	b.n	8005bc8 <mg_http_get_header_var+0x11e>
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 8005ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d006      	beq.n	8005bbc <mg_http_get_header_var+0x112>
 8005bae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb2:	4413      	add	r3, r2
 8005bb4:	1c9a      	adds	r2, r3, #2
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d382      	bcc.n	8005ac2 <mg_http_get_header_var+0x18>
    }
  }
  return mg_str_n(NULL, 0);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	2100      	movs	r1, #0
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f004 fb87 	bl	800a2d6 <mg_str_n>
}
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	3730      	adds	r7, #48	; 0x30
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bd2:	b002      	add	sp, #8
 8005bd4:	4770      	bx	lr

08005bd6 <mg_http_match_uri>:

bool mg_http_match_uri(const struct mg_http_message *hm, const char *glob) {
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b086      	sub	sp, #24
 8005bda:	af02      	add	r7, sp, #8
 8005bdc:	6078      	str	r0, [r7, #4]
 8005bde:	6039      	str	r1, [r7, #0]
  return mg_match(hm->uri, mg_str(glob), NULL);
 8005be0:	f107 0308 	add.w	r3, r7, #8
 8005be4:	6839      	ldr	r1, [r7, #0]
 8005be6:	4618      	mov	r0, r3
 8005be8:	f004 fb58 	bl	800a29c <mg_str_s>
 8005bec:	6879      	ldr	r1, [r7, #4]
 8005bee:	2300      	movs	r3, #0
 8005bf0:	9300      	str	r3, [sp, #0]
 8005bf2:	f107 0308 	add.w	r3, r7, #8
 8005bf6:	cb0c      	ldmia	r3, {r2, r3}
 8005bf8:	3108      	adds	r1, #8
 8005bfa:	c903      	ldmia	r1, {r0, r1}
 8005bfc:	f004 fc52 	bl	800a4a4 <mg_match>
 8005c00:	4603      	mov	r3, r0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}

08005c0a <getchunk>:
// MG_EV_HTTP_CHUNK events for every received piece of data, and then we fire
// MG_EV_HTTP_MSG event in the end.
//
// We track total processed length in the c->pfn_data, which is a void *
// pointer: we store a size_t value there.
static bool getchunk(struct mg_str s, size_t *prefixlen, size_t *datalen) {
 8005c0a:	b590      	push	{r4, r7, lr}
 8005c0c:	b087      	sub	sp, #28
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	f107 0408 	add.w	r4, r7, #8
 8005c14:	e884 0003 	stmia.w	r4, {r0, r1}
 8005c18:	607a      	str	r2, [r7, #4]
 8005c1a:	603b      	str	r3, [r7, #0]
  size_t i = 0, n;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	617b      	str	r3, [r7, #20]
  while (i < s.len && s.ptr[i] != '\r' && s.ptr[i] != '\n') i++;
 8005c20:	e002      	b.n	8005c28 <getchunk+0x1e>
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	3301      	adds	r3, #1
 8005c26:	617b      	str	r3, [r7, #20]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	697a      	ldr	r2, [r7, #20]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d20b      	bcs.n	8005c48 <getchunk+0x3e>
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	4413      	add	r3, r2
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	2b0d      	cmp	r3, #13
 8005c3a:	d005      	beq.n	8005c48 <getchunk+0x3e>
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	4413      	add	r3, r2
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	2b0a      	cmp	r3, #10
 8005c46:	d1ec      	bne.n	8005c22 <getchunk+0x18>
  n = mg_unhexn(s.ptr, i);
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	6979      	ldr	r1, [r7, #20]
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f004 fe83 	bl	800a958 <mg_unhexn>
 8005c52:	6138      	str	r0, [r7, #16]
  // MG_INFO(("%d %d", (int) (i + n + 4), (int) s.len));
  if (s.len < i + n + 4) return false;  // Chunk not yet fully buffered
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	6979      	ldr	r1, [r7, #20]
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	440b      	add	r3, r1
 8005c5c:	3304      	adds	r3, #4
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d201      	bcs.n	8005c66 <getchunk+0x5c>
 8005c62:	2300      	movs	r3, #0
 8005c64:	e02a      	b.n	8005cbc <getchunk+0xb2>
  if (s.ptr[i] != '\r' || s.ptr[i + 1] != '\n') return false;
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	2b0d      	cmp	r3, #13
 8005c70:	d106      	bne.n	8005c80 <getchunk+0x76>
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	3301      	adds	r3, #1
 8005c78:	4413      	add	r3, r2
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	2b0a      	cmp	r3, #10
 8005c7e:	d001      	beq.n	8005c84 <getchunk+0x7a>
 8005c80:	2300      	movs	r3, #0
 8005c82:	e01b      	b.n	8005cbc <getchunk+0xb2>
  if (s.ptr[i + n + 2] != '\r' || s.ptr[i + n + 3] != '\n') return false;
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	6979      	ldr	r1, [r7, #20]
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	440b      	add	r3, r1
 8005c8c:	3302      	adds	r3, #2
 8005c8e:	4413      	add	r3, r2
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	2b0d      	cmp	r3, #13
 8005c94:	d108      	bne.n	8005ca8 <getchunk+0x9e>
 8005c96:	68ba      	ldr	r2, [r7, #8]
 8005c98:	6979      	ldr	r1, [r7, #20]
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	440b      	add	r3, r1
 8005c9e:	3303      	adds	r3, #3
 8005ca0:	4413      	add	r3, r2
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	2b0a      	cmp	r3, #10
 8005ca6:	d001      	beq.n	8005cac <getchunk+0xa2>
 8005ca8:	2300      	movs	r3, #0
 8005caa:	e007      	b.n	8005cbc <getchunk+0xb2>
  *prefixlen = i + 2;
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	1c9a      	adds	r2, r3, #2
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	601a      	str	r2, [r3, #0]
  *datalen = n;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	601a      	str	r2, [r3, #0]
  return true;
 8005cba:	2301      	movs	r3, #1
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	371c      	adds	r7, #28
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd90      	pop	{r4, r7, pc}

08005cc4 <mg_is_chunked>:

static bool mg_is_chunked(struct mg_http_message *hm) {
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  const char *needle = "chunked";
 8005ccc:	4b0d      	ldr	r3, [pc, #52]	; (8005d04 <mg_is_chunked+0x40>)
 8005cce:	60fb      	str	r3, [r7, #12]
  struct mg_str *te = mg_http_get_header(hm, "Transfer-Encoding");
 8005cd0:	490d      	ldr	r1, [pc, #52]	; (8005d08 <mg_is_chunked+0x44>)
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f7fe fa54 	bl	8004180 <mg_http_get_header>
 8005cd8:	60b8      	str	r0, [r7, #8]
  return te != NULL && mg_vcasecmp(te, needle) == 0;
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d008      	beq.n	8005cf2 <mg_is_chunked+0x2e>
 8005ce0:	68f9      	ldr	r1, [r7, #12]
 8005ce2:	68b8      	ldr	r0, [r7, #8]
 8005ce4:	f004 fb78 	bl	800a3d8 <mg_vcasecmp>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d101      	bne.n	8005cf2 <mg_is_chunked+0x2e>
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e000      	b.n	8005cf4 <mg_is_chunked+0x30>
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	f003 0301 	and.w	r3, r3, #1
 8005cf8:	b2db      	uxtb	r3, r3
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	08014a10 	.word	0x08014a10
 8005d08:	08014a18 	.word	0x08014a18

08005d0c <deliver_chunked_chunks>:
  mg_iobuf_del(&c->recv, ofs, hm->chunk.len);
  c->pfn_data = (void *) ((size_t) c->pfn_data | MG_DMARK);
}

static void deliver_chunked_chunks(struct mg_connection *c, size_t hlen,
                                   struct mg_http_message *hm, bool *next) {
 8005d0c:	b590      	push	{r4, r7, lr}
 8005d0e:	b095      	sub	sp, #84	; 0x54
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6178      	str	r0, [r7, #20]
 8005d14:	6139      	str	r1, [r7, #16]
 8005d16:	60fa      	str	r2, [r7, #12]
 8005d18:	60bb      	str	r3, [r7, #8]
  //  |  ... headers ... | HEXNUM\r\n ..data.. \r\n | ......
  //  +------------------+--------------------------+----
  //  |      hlen        |           chunk1         | ......
  char *buf = (char *) &c->recv.buf[hlen], *p = buf;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	4413      	add	r3, r2
 8005d22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d26:	637b      	str	r3, [r7, #52]	; 0x34
  size_t len = c->recv.len - hlen;
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	64bb      	str	r3, [r7, #72]	; 0x48
  size_t processed = ((size_t) c->pfn_data) & ~MG_DMARK;
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d3a:	647b      	str	r3, [r7, #68]	; 0x44
  size_t mark, pl, dl, del = 0, ofs = 0;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	643b      	str	r3, [r7, #64]	; 0x40
 8005d40:	2300      	movs	r3, #0
 8005d42:	63fb      	str	r3, [r7, #60]	; 0x3c
  bool last = false;
 8005d44:	2300      	movs	r3, #0
 8005d46:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  if (processed <= len) len -= processed, buf += processed;
 8005d4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d851      	bhi.n	8005df6 <deliver_chunked_chunks+0xea>
 8005d52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d5e:	4413      	add	r3, r2
 8005d60:	64fb      	str	r3, [r7, #76]	; 0x4c
  while (!last && getchunk(mg_str_n(buf + ofs, len - ofs), &pl, &dl)) {
 8005d62:	e048      	b.n	8005df6 <deliver_chunked_chunks+0xea>
    size_t saved = c->recv.len;
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d68:	633b      	str	r3, [r7, #48]	; 0x30
    memmove(p + processed, buf + ofs + pl, dl);
 8005d6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d6e:	18d0      	adds	r0, r2, r3
 8005d70:	6a3a      	ldr	r2, [r7, #32]
 8005d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d74:	4413      	add	r3, r2
 8005d76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d78:	4413      	add	r3, r2
 8005d7a:	69fa      	ldr	r2, [r7, #28]
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	f00c fce9 	bl	8012754 <memmove>
    // MG_INFO(("P2 [%.*s]", (int) (processed + dl), p));
    hm->chunk = mg_str_n(p + processed, dl);
 8005d82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d86:	18d1      	adds	r1, r2, r3
 8005d88:	69fa      	ldr	r2, [r7, #28]
 8005d8a:	68fc      	ldr	r4, [r7, #12]
 8005d8c:	463b      	mov	r3, r7
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f004 faa1 	bl	800a2d6 <mg_str_n>
 8005d94:	f504 7304 	add.w	r3, r4, #528	; 0x210
 8005d98:	463a      	mov	r2, r7
 8005d9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005d9e:	e883 0003 	stmia.w	r3, {r0, r1}
    mg_call(c, MG_EV_HTTP_CHUNK, hm);
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	210b      	movs	r1, #11
 8005da6:	6978      	ldr	r0, [r7, #20]
 8005da8:	f7fc fa6a 	bl	8002280 <mg_call>
    ofs += pl + dl + 2, del += pl + 2;  // 2 is for \r\n suffix
 8005dac:	6a3a      	ldr	r2, [r7, #32]
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	441a      	add	r2, r3
 8005db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005db4:	4413      	add	r3, r2
 8005db6:	3302      	adds	r3, #2
 8005db8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dba:	6a3a      	ldr	r2, [r7, #32]
 8005dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dbe:	4413      	add	r3, r2
 8005dc0:	3302      	adds	r3, #2
 8005dc2:	643b      	str	r3, [r7, #64]	; 0x40
    processed += dl;
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dc8:	4413      	add	r3, r2
 8005dca:	647b      	str	r3, [r7, #68]	; 0x44
    if (c->recv.len != saved) processed -= dl, buf -= dl;
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d008      	beq.n	8005de8 <deliver_chunked_chunks+0xdc>
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	647b      	str	r3, [r7, #68]	; 0x44
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	425b      	negs	r3, r3
 8005de2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005de4:	4413      	add	r3, r2
 8005de6:	64fb      	str	r3, [r7, #76]	; 0x4c
    // mg_hexdump(c->recv.buf, hlen + processed);
    last = (dl == 0);
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	bf0c      	ite	eq
 8005dee:	2301      	moveq	r3, #1
 8005df0:	2300      	movne	r3, #0
 8005df2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  while (!last && getchunk(mg_str_n(buf + ofs, len - ofs), &pl, &dl)) {
 8005df6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005dfa:	f083 0301 	eor.w	r3, r3, #1
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d016      	beq.n	8005e32 <deliver_chunked_chunks+0x126>
 8005e04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e08:	18d1      	adds	r1, r2, r3
 8005e0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e0e:	1ad2      	subs	r2, r2, r3
 8005e10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e14:	4618      	mov	r0, r3
 8005e16:	f004 fa5e 	bl	800a2d6 <mg_str_n>
 8005e1a:	f107 031c 	add.w	r3, r7, #28
 8005e1e:	f107 0220 	add.w	r2, r7, #32
 8005e22:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8005e26:	c903      	ldmia	r1, {r0, r1}
 8005e28:	f7ff feef 	bl	8005c0a <getchunk>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d198      	bne.n	8005d64 <deliver_chunked_chunks+0x58>
  }
  mg_iobuf_del(&c->recv, hlen + processed, del);
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f103 0048 	add.w	r0, r3, #72	; 0x48
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e3c:	4413      	add	r3, r2
 8005e3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e40:	4619      	mov	r1, r3
 8005e42:	f000 fb13 	bl	800646c <mg_iobuf_del>
  mark = ((size_t) c->pfn_data) & MG_DMARK;
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  c->pfn_data = (void *) (processed | mark);
 8005e50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e54:	4313      	orrs	r3, r2
 8005e56:	461a      	mov	r2, r3
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	675a      	str	r2, [r3, #116]	; 0x74
  if (last) {
 8005e5c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d019      	beq.n	8005e98 <deliver_chunked_chunks+0x18c>
    hm->body.len = processed;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e68:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    hm->message.len = hlen + processed;
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e70:	441a      	add	r2, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    c->pfn_data = NULL;
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	675a      	str	r2, [r3, #116]	; 0x74
    if (mark) mg_iobuf_del(&c->recv, 0, hlen), *next = true;
 8005e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d009      	beq.n	8005e98 <deliver_chunked_chunks+0x18c>
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	3348      	adds	r3, #72	; 0x48
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	2100      	movs	r1, #0
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f000 faed 	bl	800646c <mg_iobuf_del>
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	2201      	movs	r2, #1
 8005e96:	701a      	strb	r2, [r3, #0]
    // MG_INFO(("LAST, mark: %lx", mark));
    // mg_hexdump(c->recv.buf, c->recv.len);
  }
}
 8005e98:	bf00      	nop
 8005e9a:	3754      	adds	r7, #84	; 0x54
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd90      	pop	{r4, r7, pc}

08005ea0 <deliver_normal_chunks>:

static void deliver_normal_chunks(struct mg_connection *c, size_t hlen,
                                  struct mg_http_message *hm, bool *next) {
 8005ea0:	b590      	push	{r4, r7, lr}
 8005ea2:	b08b      	sub	sp, #44	; 0x2c
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6178      	str	r0, [r7, #20]
 8005ea8:	6139      	str	r1, [r7, #16]
 8005eaa:	60fa      	str	r2, [r7, #12]
 8005eac:	60bb      	str	r3, [r7, #8]
  size_t left, processed = ((size_t) c->pfn_data) & ~MG_DMARK;
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eb2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005eb6:	627b      	str	r3, [r7, #36]	; 0x24
  size_t deleted = ((size_t) c->pfn_data) & MG_DMARK;
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ebc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ec0:	623b      	str	r3, [r7, #32]
  hm->chunk = mg_str_n((char *) &c->recv.buf[hlen], c->recv.len - hlen);
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	18d1      	adds	r1, r2, r3
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	1ad2      	subs	r2, r2, r3
 8005ed2:	68fc      	ldr	r4, [r7, #12]
 8005ed4:	463b      	mov	r3, r7
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f004 f9fd 	bl	800a2d6 <mg_str_n>
 8005edc:	f504 7304 	add.w	r3, r4, #528	; 0x210
 8005ee0:	463a      	mov	r2, r7
 8005ee2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005ee6:	e883 0003 	stmia.w	r3, {r0, r1}
  if (processed <= hm->chunk.len && !deleted) {
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d812      	bhi.n	8005f1c <deliver_normal_chunks+0x7c>
 8005ef6:	6a3b      	ldr	r3, [r7, #32]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d10f      	bne.n	8005f1c <deliver_normal_chunks+0x7c>
    hm->chunk.len -= processed;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f04:	1ad2      	subs	r2, r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hm->chunk.ptr += processed;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f14:	441a      	add	r2, r3
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  left = hm->body.len < processed ? 0 : hm->body.len - processed;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d805      	bhi.n	8005f34 <deliver_normal_chunks+0x94>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	e000      	b.n	8005f36 <deliver_normal_chunks+0x96>
 8005f34:	2300      	movs	r3, #0
 8005f36:	61fb      	str	r3, [r7, #28]
  if (hm->chunk.len > left) hm->chunk.len = left;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005f3e:	69fa      	ldr	r2, [r7, #28]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d203      	bcs.n	8005f4c <deliver_normal_chunks+0xac>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	69fa      	ldr	r2, [r7, #28]
 8005f48:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  if (hm->chunk.len > 0) mg_call(c, MG_EV_HTTP_CHUNK, hm);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d004      	beq.n	8005f60 <deliver_normal_chunks+0xc0>
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	210b      	movs	r1, #11
 8005f5a:	6978      	ldr	r0, [r7, #20]
 8005f5c:	f7fc f990 	bl	8002280 <mg_call>
  processed += hm->chunk.len;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f68:	4413      	add	r3, r2
 8005f6a:	627b      	str	r3, [r7, #36]	; 0x24
  deleted = ((size_t) c->pfn_data) & MG_DMARK;  // Re-evaluate after user call
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f74:	623b      	str	r3, [r7, #32]
  if (processed >= hm->body.len) {              // Last, 0-len chunk
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d31c      	bcc.n	8005fbc <deliver_normal_chunks+0x11c>
    hm->chunk.len = 0;                          // Reset length
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    mg_call(c, MG_EV_HTTP_CHUNK, hm);           // Call user handler
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	210b      	movs	r1, #11
 8005f8e:	6978      	ldr	r0, [r7, #20]
 8005f90:	f7fc f976 	bl	8002280 <mg_call>
    c->pfn_data = NULL;                         // Reset processed counter
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	2200      	movs	r2, #0
 8005f98:	675a      	str	r2, [r3, #116]	; 0x74
    if (processed && deleted) mg_iobuf_del(&c->recv, 0, hlen), *next = true;
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d013      	beq.n	8005fc8 <deliver_normal_chunks+0x128>
 8005fa0:	6a3b      	ldr	r3, [r7, #32]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d010      	beq.n	8005fc8 <deliver_normal_chunks+0x128>
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	3348      	adds	r3, #72	; 0x48
 8005faa:	693a      	ldr	r2, [r7, #16]
 8005fac:	2100      	movs	r1, #0
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f000 fa5c 	bl	800646c <mg_iobuf_del>
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	701a      	strb	r2, [r3, #0]
  } else {
    c->pfn_data = (void *) (processed | deleted);  // if it is set
  }
}
 8005fba:	e005      	b.n	8005fc8 <deliver_normal_chunks+0x128>
    c->pfn_data = (void *) (processed | deleted);  // if it is set
 8005fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fbe:	6a3b      	ldr	r3, [r7, #32]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005fc8:	bf00      	nop
 8005fca:	372c      	adds	r7, #44	; 0x2c
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd90      	pop	{r4, r7, pc}

08005fd0 <http_cb>:

static void http_cb(struct mg_connection *c, int ev, void *evd, void *fnd) {
 8005fd0:	b590      	push	{r4, r7, lr}
 8005fd2:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	f507 740e 	add.w	r4, r7, #568	; 0x238
 8005fdc:	f5a4 740b 	sub.w	r4, r4, #556	; 0x22c
 8005fe0:	6020      	str	r0, [r4, #0]
 8005fe2:	f507 700e 	add.w	r0, r7, #568	; 0x238
 8005fe6:	f5a0 700c 	sub.w	r0, r0, #560	; 0x230
 8005fea:	6001      	str	r1, [r0, #0]
 8005fec:	f507 710e 	add.w	r1, r7, #568	; 0x238
 8005ff0:	f5a1 710d 	sub.w	r1, r1, #564	; 0x234
 8005ff4:	600a      	str	r2, [r1, #0]
 8005ff6:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8005ffa:	f5a2 720e 	sub.w	r2, r2, #568	; 0x238
 8005ffe:	6013      	str	r3, [r2, #0]
  if (ev == MG_EV_READ || ev == MG_EV_CLOSE) {
 8006000:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8006004:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2b07      	cmp	r3, #7
 800600c:	f000 80e9 	beq.w	80061e2 <http_cb+0x212>
 8006010:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8006014:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2b09      	cmp	r3, #9
 800601c:	f040 80f2 	bne.w	8006204 <http_cb+0x234>
    struct mg_http_message hm;
    // mg_hexdump(c->recv.buf, c->recv.len);
    while (c->recv.buf != NULL && c->recv.len > 0) {
 8006020:	e0df      	b.n	80061e2 <http_cb+0x212>
      bool next = false;
 8006022:	2300      	movs	r3, #0
 8006024:	f887 3233 	strb.w	r3, [r7, #563]	; 0x233
      int hlen = mg_http_parse((char *) c->recv.buf, c->recv.len, &hm);
 8006028:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800602c:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006034:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8006038:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006040:	f107 0210 	add.w	r2, r7, #16
 8006044:	4619      	mov	r1, r3
 8006046:	f7fe f93d 	bl	80042c4 <mg_http_parse>
 800604a:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234
      if (hlen < 0) {
 800604e:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8006052:	2b00      	cmp	r3, #0
 8006054:	da17      	bge.n	8006086 <http_cb+0xb6>
        mg_error(c, "HTTP parse:\n%.*s", (int) c->recv.len, c->recv.buf);
 8006056:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800605a:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006062:	4619      	mov	r1, r3
 8006064:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8006068:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006070:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8006074:	f5a2 700b 	sub.w	r0, r2, #556	; 0x22c
 8006078:	460a      	mov	r2, r1
 800607a:	4965      	ldr	r1, [pc, #404]	; (8006210 <http_cb+0x240>)
 800607c:	6800      	ldr	r0, [r0, #0]
 800607e:	f7fc f921 	bl	80022c4 <mg_error>
        break;
 8006082:	bf00      	nop
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
      mg_iobuf_del(&c->recv, 0, hm.message.len);
    }
  }
  (void) evd, (void) fnd;
}
 8006084:	e0be      	b.n	8006204 <http_cb+0x234>
      if (c->is_resp) break;           // Response is still generated
 8006086:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800608a:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b00      	cmp	r3, #0
 800609c:	f040 809b 	bne.w	80061d6 <http_cb+0x206>
      if (hlen == 0) break;            // Request is not buffered yet
 80060a0:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f000 8098 	beq.w	80061da <http_cb+0x20a>
      if (ev == MG_EV_CLOSE) {         // If client did not set Content-Length
 80060aa:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80060ae:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2b09      	cmp	r3, #9
 80060b6:	d125      	bne.n	8006104 <http_cb+0x134>
        hm.message.len = c->recv.len;  // and closes now, deliver a MSG
 80060b8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80060bc:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80060c4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80060c8:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80060cc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
        hm.body.len = hm.message.len - (size_t) (hm.body.ptr - hm.message.ptr);
 80060d0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80060d4:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80060d8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80060dc:	f507 720e 	add.w	r2, r7, #568	; 0x238
 80060e0:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 80060e4:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 80060e8:	f507 720e 	add.w	r2, r7, #568	; 0x238
 80060ec:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 80060f0:	f8d2 2218 	ldr.w	r2, [r2, #536]	; 0x218
 80060f4:	1a8a      	subs	r2, r1, r2
 80060f6:	1a9a      	subs	r2, r3, r2
 80060f8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80060fc:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8006100:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      if (mg_is_chunked(&hm)) {
 8006104:	f107 0310 	add.w	r3, r7, #16
 8006108:	4618      	mov	r0, r3
 800610a:	f7ff fddb 	bl	8005cc4 <mg_is_chunked>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00d      	beq.n	8006130 <http_cb+0x160>
        deliver_chunked_chunks(c, (size_t) hlen, &hm, &next);
 8006114:	f8d7 1234 	ldr.w	r1, [r7, #564]	; 0x234
 8006118:	f207 2333 	addw	r3, r7, #563	; 0x233
 800611c:	f107 0210 	add.w	r2, r7, #16
 8006120:	f507 700e 	add.w	r0, r7, #568	; 0x238
 8006124:	f5a0 700b 	sub.w	r0, r0, #556	; 0x22c
 8006128:	6800      	ldr	r0, [r0, #0]
 800612a:	f7ff fdef 	bl	8005d0c <deliver_chunked_chunks>
 800612e:	e00c      	b.n	800614a <http_cb+0x17a>
        deliver_normal_chunks(c, (size_t) hlen, &hm, &next);
 8006130:	f8d7 1234 	ldr.w	r1, [r7, #564]	; 0x234
 8006134:	f207 2333 	addw	r3, r7, #563	; 0x233
 8006138:	f107 0210 	add.w	r2, r7, #16
 800613c:	f507 700e 	add.w	r0, r7, #568	; 0x238
 8006140:	f5a0 700b 	sub.w	r0, r0, #556	; 0x22c
 8006144:	6800      	ldr	r0, [r0, #0]
 8006146:	f7ff feab 	bl	8005ea0 <deliver_normal_chunks>
      if (next) continue;  // Chunks & request were deleted
 800614a:	f897 3233 	ldrb.w	r3, [r7, #563]	; 0x233
 800614e:	2b00      	cmp	r3, #0
 8006150:	d000      	beq.n	8006154 <http_cb+0x184>
 8006152:	e046      	b.n	80061e2 <http_cb+0x212>
      if (c->recv.len < hm.message.len) break;
 8006154:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8006158:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006160:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8006164:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8006168:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800616c:	429a      	cmp	r2, r3
 800616e:	d336      	bcc.n	80061de <http_cb+0x20e>
      if (c->is_accepted) c->is_resp = 1;  // Start generating response
 8006170:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8006174:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800617e:	f003 0304 	and.w	r3, r3, #4
 8006182:	b2db      	uxtb	r3, r3
 8006184:	2b00      	cmp	r3, #0
 8006186:	d00a      	beq.n	800619e <http_cb+0x1ce>
 8006188:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800618c:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	f892 30b1 	ldrb.w	r3, [r2, #177]	; 0xb1
 8006196:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800619a:	f882 30b1 	strb.w	r3, [r2, #177]	; 0xb1
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
 800619e:	f107 0210 	add.w	r2, r7, #16
 80061a2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80061a6:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80061aa:	210a      	movs	r1, #10
 80061ac:	6818      	ldr	r0, [r3, #0]
 80061ae:	f7fc f867 	bl	8002280 <mg_call>
      mg_iobuf_del(&c->recv, 0, hm.message.len);
 80061b2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80061b6:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f103 0048 	add.w	r0, r3, #72	; 0x48
 80061c0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80061c4:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80061c8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80061cc:	461a      	mov	r2, r3
 80061ce:	2100      	movs	r1, #0
 80061d0:	f000 f94c 	bl	800646c <mg_iobuf_del>
 80061d4:	e005      	b.n	80061e2 <http_cb+0x212>
      if (c->is_resp) break;           // Response is still generated
 80061d6:	bf00      	nop
 80061d8:	e014      	b.n	8006204 <http_cb+0x234>
      if (hlen == 0) break;            // Request is not buffered yet
 80061da:	bf00      	nop
 80061dc:	e012      	b.n	8006204 <http_cb+0x234>
      if (c->recv.len < hm.message.len) break;
 80061de:	bf00      	nop
}
 80061e0:	e010      	b.n	8006204 <http_cb+0x234>
    while (c->recv.buf != NULL && c->recv.len > 0) {
 80061e2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80061e6:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d008      	beq.n	8006204 <http_cb+0x234>
 80061f2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80061f6:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f47f af0f 	bne.w	8006022 <http_cb+0x52>
}
 8006204:	bf00      	nop
 8006206:	f507 770f 	add.w	r7, r7, #572	; 0x23c
 800620a:	46bd      	mov	sp, r7
 800620c:	bd90      	pop	{r4, r7, pc}
 800620e:	bf00      	nop
 8006210:	08014a2c 	.word	0x08014a2c

08006214 <mg_http_listen>:
  if (c != NULL) c->pfn = http_cb;
  return c;
}

struct mg_connection *mg_http_listen(struct mg_mgr *mgr, const char *url,
                                     mg_event_handler_t fn, void *fn_data) {
 8006214:	b580      	push	{r7, lr}
 8006216:	b086      	sub	sp, #24
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
 8006220:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_listen(mgr, url, fn, fn_data);
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	68b9      	ldr	r1, [r7, #8]
 8006228:	68f8      	ldr	r0, [r7, #12]
 800622a:	f002 f967 	bl	80084fc <mg_listen>
 800622e:	6178      	str	r0, [r7, #20]
  if (c != NULL) c->pfn = http_cb;
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d002      	beq.n	800623c <mg_http_listen+0x28>
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	4a03      	ldr	r2, [pc, #12]	; (8006248 <mg_http_listen+0x34>)
 800623a:	671a      	str	r2, [r3, #112]	; 0x70
  return c;
 800623c:	697b      	ldr	r3, [r7, #20]
}
 800623e:	4618      	mov	r0, r3
 8006240:	3718      	adds	r7, #24
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	08005fd1 	.word	0x08005fd1

0800624c <zeromem>:



// Not using memset for zeroing memory, cause it can be dropped by compiler
// See https://github.com/cesanta/mongoose/pull/1265
static void zeromem(volatile unsigned char *buf, size_t len) {
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  if (buf != NULL) {
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00a      	beq.n	8006272 <zeromem+0x26>
    while (len--) *buf++ = 0;
 800625c:	e004      	b.n	8006268 <zeromem+0x1c>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	1c5a      	adds	r2, r3, #1
 8006262:	607a      	str	r2, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	701a      	strb	r2, [r3, #0]
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	1e5a      	subs	r2, r3, #1
 800626c:	603a      	str	r2, [r7, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d1f5      	bne.n	800625e <zeromem+0x12>
  }
}
 8006272:	bf00      	nop
 8006274:	370c      	adds	r7, #12
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr

0800627e <roundup>:

static size_t roundup(size_t size, size_t align) {
 800627e:	b480      	push	{r7}
 8006280:	b083      	sub	sp, #12
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
 8006286:	6039      	str	r1, [r7, #0]
  return align == 0 ? size : (size + align - 1) / align * align;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00a      	beq.n	80062a4 <roundup+0x26>
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	4413      	add	r3, r2
 8006294:	1e5a      	subs	r2, r3, #1
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	fbb2 f3f3 	udiv	r3, r2, r3
 800629c:	683a      	ldr	r2, [r7, #0]
 800629e:	fb02 f303 	mul.w	r3, r2, r3
 80062a2:	e000      	b.n	80062a6 <roundup+0x28>
 80062a4:	687b      	ldr	r3, [r7, #4]
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	370c      	adds	r7, #12
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
	...

080062b4 <mg_iobuf_resize>:

int mg_iobuf_resize(struct mg_iobuf *io, size_t new_size) {
 80062b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80062b8:	b088      	sub	sp, #32
 80062ba:	af02      	add	r7, sp, #8
 80062bc:	6078      	str	r0, [r7, #4]
 80062be:	6039      	str	r1, [r7, #0]
  int ok = 1;
 80062c0:	2301      	movs	r3, #1
 80062c2:	617b      	str	r3, [r7, #20]
  new_size = roundup(new_size, io->align);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	4619      	mov	r1, r3
 80062ca:	6838      	ldr	r0, [r7, #0]
 80062cc:	f7ff ffd7 	bl	800627e <roundup>
 80062d0:	6038      	str	r0, [r7, #0]
  if (new_size == 0) {
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d117      	bne.n	8006308 <mg_iobuf_resize+0x54>
    zeromem(io->buf, io->size);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	4619      	mov	r1, r3
 80062e2:	4610      	mov	r0, r2
 80062e4:	f7ff ffb2 	bl	800624c <zeromem>
    free(io->buf);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4618      	mov	r0, r3
 80062ee:	f00c fa0b 	bl	8012708 <free>
    io->buf = NULL;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	601a      	str	r2, [r3, #0]
    io->len = io->size = 0;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	605a      	str	r2, [r3, #4]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685a      	ldr	r2, [r3, #4]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	609a      	str	r2, [r3, #8]
 8006306:	e052      	b.n	80063ae <mg_iobuf_resize+0xfa>
  } else if (new_size != io->size) {
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	683a      	ldr	r2, [r7, #0]
 800630e:	429a      	cmp	r2, r3
 8006310:	d04d      	beq.n	80063ae <mg_iobuf_resize+0xfa>
    // NOTE(lsm): do not use realloc here. Use calloc/free only, to ease the
    // porting to some obscure platforms like FreeRTOS
    void *p = calloc(1, new_size);
 8006312:	6839      	ldr	r1, [r7, #0]
 8006314:	2001      	movs	r0, #1
 8006316:	f00c f9bd 	bl	8012694 <calloc>
 800631a:	4603      	mov	r3, r0
 800631c:	613b      	str	r3, [r7, #16]
    if (p != NULL) {
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d028      	beq.n	8006376 <mg_iobuf_resize+0xc2>
      size_t len = new_size < io->len ? new_size : io->len;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	683a      	ldr	r2, [r7, #0]
 800632a:	4293      	cmp	r3, r2
 800632c:	bf28      	it	cs
 800632e:	4613      	movcs	r3, r2
 8006330:	60fb      	str	r3, [r7, #12]
      if (len > 0 && io->buf != NULL) memmove(p, io->buf, len);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00a      	beq.n	800634e <mg_iobuf_resize+0x9a>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d006      	beq.n	800634e <mg_iobuf_resize+0x9a>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	4619      	mov	r1, r3
 8006348:	6938      	ldr	r0, [r7, #16]
 800634a:	f00c fa03 	bl	8012754 <memmove>
      zeromem(io->buf, io->size);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	4619      	mov	r1, r3
 8006358:	4610      	mov	r0, r2
 800635a:	f7ff ff77 	bl	800624c <zeromem>
      free(io->buf);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4618      	mov	r0, r3
 8006364:	f00c f9d0 	bl	8012708 <free>
      io->buf = (unsigned char *) p;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	693a      	ldr	r2, [r7, #16]
 800636c:	601a      	str	r2, [r3, #0]
      io->size = new_size;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	683a      	ldr	r2, [r7, #0]
 8006372:	605a      	str	r2, [r3, #4]
 8006374:	e01b      	b.n	80063ae <mg_iobuf_resize+0xfa>
    } else {
      ok = 0;
 8006376:	2300      	movs	r3, #0
 8006378:	617b      	str	r3, [r7, #20]
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 800637a:	4b10      	ldr	r3, [pc, #64]	; (80063bc <mg_iobuf_resize+0x108>)
 800637c:	f640 1261 	movw	r2, #2401	; 0x961
 8006380:	490f      	ldr	r1, [pc, #60]	; (80063c0 <mg_iobuf_resize+0x10c>)
 8006382:	2001      	movs	r0, #1
 8006384:	f000 fe8e 	bl	80070a4 <mg_log_prefix>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00f      	beq.n	80063ae <mg_iobuf_resize+0xfa>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	4698      	mov	r8, r3
 8006396:	4691      	mov	r9, r2
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	2200      	movs	r2, #0
 800639c:	461c      	mov	r4, r3
 800639e:	4615      	mov	r5, r2
 80063a0:	e9cd 4500 	strd	r4, r5, [sp]
 80063a4:	4642      	mov	r2, r8
 80063a6:	464b      	mov	r3, r9
 80063a8:	4806      	ldr	r0, [pc, #24]	; (80063c4 <mg_iobuf_resize+0x110>)
 80063aa:	f000 fed5 	bl	8007158 <mg_log>
    }
  }
  return ok;
 80063ae:	697b      	ldr	r3, [r7, #20]
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3718      	adds	r7, #24
 80063b4:	46bd      	mov	sp, r7
 80063b6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80063ba:	bf00      	nop
 80063bc:	080156d0 	.word	0x080156d0
 80063c0:	08013b30 	.word	0x08013b30
 80063c4:	08014a78 	.word	0x08014a78

080063c8 <mg_iobuf_add>:
  io->size = io->len = 0;
  return mg_iobuf_resize(io, size);
}

size_t mg_iobuf_add(struct mg_iobuf *io, size_t ofs, const void *buf,
                    size_t len) {
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b086      	sub	sp, #24
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]
 80063d4:	603b      	str	r3, [r7, #0]
  size_t new_size = roundup(io->len + len, io->align);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	689a      	ldr	r2, [r3, #8]
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	441a      	add	r2, r3
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	4619      	mov	r1, r3
 80063e4:	4610      	mov	r0, r2
 80063e6:	f7ff ff4a 	bl	800627e <roundup>
 80063ea:	6178      	str	r0, [r7, #20]
  mg_iobuf_resize(io, new_size);      // Attempt to resize
 80063ec:	6979      	ldr	r1, [r7, #20]
 80063ee:	68f8      	ldr	r0, [r7, #12]
 80063f0:	f7ff ff60 	bl	80062b4 <mg_iobuf_resize>
  if (new_size != io->size) len = 0;  // Resize failure, append nothing
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	697a      	ldr	r2, [r7, #20]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d001      	beq.n	8006402 <mg_iobuf_add+0x3a>
 80063fe:	2300      	movs	r3, #0
 8006400:	603b      	str	r3, [r7, #0]
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	68ba      	ldr	r2, [r7, #8]
 8006408:	429a      	cmp	r2, r3
 800640a:	d210      	bcs.n	800642e <mg_iobuf_add+0x66>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	68b9      	ldr	r1, [r7, #8]
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	440b      	add	r3, r1
 8006416:	18d0      	adds	r0, r2, r3
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	18d1      	adds	r1, r2, r3
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	689a      	ldr	r2, [r3, #8]
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	461a      	mov	r2, r3
 800642a:	f00c f993 	bl	8012754 <memmove>
  if (buf != NULL) memmove(io->buf + ofs, buf, len);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d008      	beq.n	8006446 <mg_iobuf_add+0x7e>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	4413      	add	r3, r2
 800643c:	683a      	ldr	r2, [r7, #0]
 800643e:	6879      	ldr	r1, [r7, #4]
 8006440:	4618      	mov	r0, r3
 8006442:	f00c f987 	bl	8012754 <memmove>
  if (ofs > io->len) io->len += ofs - io->len;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	68ba      	ldr	r2, [r7, #8]
 800644c:	429a      	cmp	r2, r3
 800644e:	d902      	bls.n	8006456 <mg_iobuf_add+0x8e>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	68ba      	ldr	r2, [r7, #8]
 8006454:	609a      	str	r2, [r3, #8]
  io->len += len;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	689a      	ldr	r2, [r3, #8]
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	441a      	add	r2, r3
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	609a      	str	r2, [r3, #8]
  return len;
 8006462:	683b      	ldr	r3, [r7, #0]
}
 8006464:	4618      	mov	r0, r3
 8006466:	3718      	adds	r7, #24
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <mg_iobuf_del>:

size_t mg_iobuf_del(struct mg_iobuf *io, size_t ofs, size_t len) {
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	607a      	str	r2, [r7, #4]
  if (ofs > io->len) ofs = io->len;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	68ba      	ldr	r2, [r7, #8]
 800647e:	429a      	cmp	r2, r3
 8006480:	d902      	bls.n	8006488 <mg_iobuf_del+0x1c>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	60bb      	str	r3, [r7, #8]
  if (ofs + len > io->len) len = io->len - ofs;
 8006488:	68ba      	ldr	r2, [r7, #8]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	441a      	add	r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	429a      	cmp	r2, r3
 8006494:	d904      	bls.n	80064a0 <mg_iobuf_del+0x34>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	689a      	ldr	r2, [r3, #8]
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	607b      	str	r3, [r7, #4]
  if (io->buf) memmove(io->buf + ofs, io->buf + ofs + len, io->len - ofs - len);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d012      	beq.n	80064ce <mg_iobuf_del+0x62>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	18d0      	adds	r0, r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	68b9      	ldr	r1, [r7, #8]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	440b      	add	r3, r1
 80064ba:	18d1      	adds	r1, r2, r3
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	689a      	ldr	r2, [r3, #8]
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	1ad2      	subs	r2, r2, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	461a      	mov	r2, r3
 80064ca:	f00c f943 	bl	8012754 <memmove>
  if (io->buf) zeromem(io->buf + io->len - len, len);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00a      	beq.n	80064ec <mg_iobuf_del+0x80>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6899      	ldr	r1, [r3, #8]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	1acb      	subs	r3, r1, r3
 80064e2:	4413      	add	r3, r2
 80064e4:	6879      	ldr	r1, [r7, #4]
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7ff feb0 	bl	800624c <zeromem>
  io->len -= len;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	689a      	ldr	r2, [r3, #8]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	1ad2      	subs	r2, r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	609a      	str	r2, [r3, #8]
  return len;
 80064f8:	687b      	ldr	r3, [r7, #4]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3710      	adds	r7, #16
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <mg_iobuf_free>:

void mg_iobuf_free(struct mg_iobuf *io) {
 8006502:	b580      	push	{r7, lr}
 8006504:	b082      	sub	sp, #8
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
  mg_iobuf_resize(io, 0);
 800650a:	2100      	movs	r1, #0
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f7ff fed1 	bl	80062b4 <mg_iobuf_resize>
}
 8006512:	bf00      	nop
 8006514:	3708      	adds	r7, #8
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
	...

0800651c <escapeseq>:
#endif




static const char *escapeseq(int esc) {
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  return esc ? "\b\f\n\r\t\\\"" : "bfnrt\\\"";
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d001      	beq.n	800652e <escapeseq+0x12>
 800652a:	4b04      	ldr	r3, [pc, #16]	; (800653c <escapeseq+0x20>)
 800652c:	e000      	b.n	8006530 <escapeseq+0x14>
 800652e:	4b04      	ldr	r3, [pc, #16]	; (8006540 <escapeseq+0x24>)
}
 8006530:	4618      	mov	r0, r3
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr
 800653c:	08013c7c 	.word	0x08013c7c
 8006540:	08013c84 	.word	0x08013c84

08006544 <json_esc>:

static char json_esc(int c, int esc) {
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  const char *p, *esc1 = escapeseq(esc), *esc2 = escapeseq(!esc);
 800654e:	6838      	ldr	r0, [r7, #0]
 8006550:	f7ff ffe4 	bl	800651c <escapeseq>
 8006554:	6138      	str	r0, [r7, #16]
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	bf0c      	ite	eq
 800655c:	2301      	moveq	r3, #1
 800655e:	2300      	movne	r3, #0
 8006560:	b2db      	uxtb	r3, r3
 8006562:	4618      	mov	r0, r3
 8006564:	f7ff ffda 	bl	800651c <escapeseq>
 8006568:	60f8      	str	r0, [r7, #12]
  for (p = esc1; *p != '\0'; p++) {
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	617b      	str	r3, [r7, #20]
 800656e:	e010      	b.n	8006592 <json_esc+0x4e>
    if (*p == c) return esc2[p - esc1];
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	461a      	mov	r2, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4293      	cmp	r3, r2
 800657a:	d107      	bne.n	800658c <json_esc+0x48>
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	461a      	mov	r2, r3
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	4413      	add	r3, r2
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	e007      	b.n	800659c <json_esc+0x58>
  for (p = esc1; *p != '\0'; p++) {
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	3301      	adds	r3, #1
 8006590:	617b      	str	r3, [r7, #20]
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1ea      	bne.n	8006570 <json_esc+0x2c>
  }
  return 0;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	3718      	adds	r7, #24
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <mg_pass_string>:

static int mg_pass_string(const char *s, int len) {
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  int i;
  for (i = 0; i < len; i++) {
 80065ae:	2300      	movs	r3, #0
 80065b0:	60fb      	str	r3, [r7, #12]
 80065b2:	e02e      	b.n	8006612 <mg_pass_string+0x6e>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	4413      	add	r3, r2
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	2b5c      	cmp	r3, #92	; 0x5c
 80065be:	d114      	bne.n	80065ea <mg_pass_string+0x46>
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	3301      	adds	r3, #1
 80065c4:	683a      	ldr	r2, [r7, #0]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	dd0f      	ble.n	80065ea <mg_pass_string+0x46>
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	3301      	adds	r3, #1
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	4413      	add	r3, r2
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	2101      	movs	r1, #1
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7ff ffb4 	bl	8006544 <json_esc>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d003      	beq.n	80065ea <mg_pass_string+0x46>
      i++;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	3301      	adds	r3, #1
 80065e6:	60fb      	str	r3, [r7, #12]
 80065e8:	e010      	b.n	800660c <mg_pass_string+0x68>
    } else if (s[i] == '\0') {
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	4413      	add	r3, r2
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d102      	bne.n	80065fc <mg_pass_string+0x58>
      return MG_JSON_INVALID;
 80065f6:	f06f 0301 	mvn.w	r3, #1
 80065fa:	e010      	b.n	800661e <mg_pass_string+0x7a>
    } else if (s[i] == '"') {
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	4413      	add	r3, r2
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	2b22      	cmp	r3, #34	; 0x22
 8006606:	d101      	bne.n	800660c <mg_pass_string+0x68>
      return i;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	e008      	b.n	800661e <mg_pass_string+0x7a>
  for (i = 0; i < len; i++) {
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	3301      	adds	r3, #1
 8006610:	60fb      	str	r3, [r7, #12]
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	429a      	cmp	r2, r3
 8006618:	dbcc      	blt.n	80065b4 <mg_pass_string+0x10>
    }
  }
  return MG_JSON_INVALID;
 800661a:	f06f 0301 	mvn.w	r3, #1
}
 800661e:	4618      	mov	r0, r3
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
	...

08006628 <mg_atod>:

static double mg_atod(const char *p, int len, int *numlen) {
 8006628:	b580      	push	{r7, lr}
 800662a:	b090      	sub	sp, #64	; 0x40
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
  double d = 0.0;
 8006634:	f04f 0200 	mov.w	r2, #0
 8006638:	f04f 0300 	mov.w	r3, #0
 800663c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  int i = 0, sign = 1;
 8006640:	2300      	movs	r3, #0
 8006642:	637b      	str	r3, [r7, #52]	; 0x34
 8006644:	2301      	movs	r3, #1
 8006646:	633b      	str	r3, [r7, #48]	; 0x30

  // Sign
  if (i < len && *p == '-') {
 8006648:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	429a      	cmp	r2, r3
 800664e:	da0a      	bge.n	8006666 <mg_atod+0x3e>
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	2b2d      	cmp	r3, #45	; 0x2d
 8006656:	d106      	bne.n	8006666 <mg_atod+0x3e>
    sign = -1, i++;
 8006658:	f04f 33ff 	mov.w	r3, #4294967295
 800665c:	633b      	str	r3, [r7, #48]	; 0x30
 800665e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006660:	3301      	adds	r3, #1
 8006662:	637b      	str	r3, [r7, #52]	; 0x34
 8006664:	e00a      	b.n	800667c <mg_atod+0x54>
  } else if (i < len && *p == '+') {
 8006666:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	429a      	cmp	r2, r3
 800666c:	da27      	bge.n	80066be <mg_atod+0x96>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	2b2b      	cmp	r3, #43	; 0x2b
 8006674:	d123      	bne.n	80066be <mg_atod+0x96>
    i++;
 8006676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006678:	3301      	adds	r3, #1
 800667a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  // Decimal
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 800667c:	e01f      	b.n	80066be <mg_atod+0x96>
    d *= 10.0;
 800667e:	f04f 0200 	mov.w	r2, #0
 8006682:	4b9d      	ldr	r3, [pc, #628]	; (80068f8 <mg_atod+0x2d0>)
 8006684:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006688:	f7f9 ffe0 	bl	800064c <__aeabi_dmul>
 800668c:	4602      	mov	r2, r0
 800668e:	460b      	mov	r3, r1
 8006690:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    d += p[i] - '0';
 8006694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	4413      	add	r3, r2
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	3b30      	subs	r3, #48	; 0x30
 800669e:	4618      	mov	r0, r3
 80066a0:	f7f9 ff6a 	bl	8000578 <__aeabi_i2d>
 80066a4:	4602      	mov	r2, r0
 80066a6:	460b      	mov	r3, r1
 80066a8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80066ac:	f7f9 fe18 	bl	80002e0 <__adddf3>
 80066b0:	4602      	mov	r2, r0
 80066b2:	460b      	mov	r3, r1
 80066b4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 80066b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ba:	3301      	adds	r3, #1
 80066bc:	637b      	str	r3, [r7, #52]	; 0x34
 80066be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	da0b      	bge.n	80066de <mg_atod+0xb6>
 80066c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	4413      	add	r3, r2
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	2b2f      	cmp	r3, #47	; 0x2f
 80066d0:	d905      	bls.n	80066de <mg_atod+0xb6>
 80066d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	4413      	add	r3, r2
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	2b39      	cmp	r3, #57	; 0x39
 80066dc:	d9cf      	bls.n	800667e <mg_atod+0x56>
  }
  d *= sign;
 80066de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066e0:	f7f9 ff4a 	bl	8000578 <__aeabi_i2d>
 80066e4:	4602      	mov	r2, r0
 80066e6:	460b      	mov	r3, r1
 80066e8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80066ec:	f7f9 ffae 	bl	800064c <__aeabi_dmul>
 80066f0:	4602      	mov	r2, r0
 80066f2:	460b      	mov	r3, r1
 80066f4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  // Fractional
  if (i < len && p[i] == '.') {
 80066f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	da59      	bge.n	80067b4 <mg_atod+0x18c>
 8006700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	4413      	add	r3, r2
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	2b2e      	cmp	r3, #46	; 0x2e
 800670a:	d153      	bne.n	80067b4 <mg_atod+0x18c>
    double frac = 0.0, base = 0.1;
 800670c:	f04f 0200 	mov.w	r2, #0
 8006710:	f04f 0300 	mov.w	r3, #0
 8006714:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8006718:	a375      	add	r3, pc, #468	; (adr r3, 80068f0 <mg_atod+0x2c8>)
 800671a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    i++;
 8006722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006724:	3301      	adds	r3, #1
 8006726:	637b      	str	r3, [r7, #52]	; 0x34
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8006728:	e023      	b.n	8006772 <mg_atod+0x14a>
      frac += base * (p[i] - '0');
 800672a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	4413      	add	r3, r2
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	3b30      	subs	r3, #48	; 0x30
 8006734:	4618      	mov	r0, r3
 8006736:	f7f9 ff1f 	bl	8000578 <__aeabi_i2d>
 800673a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800673e:	f7f9 ff85 	bl	800064c <__aeabi_dmul>
 8006742:	4602      	mov	r2, r0
 8006744:	460b      	mov	r3, r1
 8006746:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800674a:	f7f9 fdc9 	bl	80002e0 <__adddf3>
 800674e:	4602      	mov	r2, r0
 8006750:	460b      	mov	r3, r1
 8006752:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
      base /= 10.0;
 8006756:	f04f 0200 	mov.w	r2, #0
 800675a:	4b67      	ldr	r3, [pc, #412]	; (80068f8 <mg_atod+0x2d0>)
 800675c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006760:	f7fa f89e 	bl	80008a0 <__aeabi_ddiv>
 8006764:	4602      	mov	r2, r0
 8006766:	460b      	mov	r3, r1
 8006768:	e9c7 2308 	strd	r2, r3, [r7, #32]
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 800676c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800676e:	3301      	adds	r3, #1
 8006770:	637b      	str	r3, [r7, #52]	; 0x34
 8006772:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	429a      	cmp	r2, r3
 8006778:	da0b      	bge.n	8006792 <mg_atod+0x16a>
 800677a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	4413      	add	r3, r2
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	2b2f      	cmp	r3, #47	; 0x2f
 8006784:	d905      	bls.n	8006792 <mg_atod+0x16a>
 8006786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	4413      	add	r3, r2
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	2b39      	cmp	r3, #57	; 0x39
 8006790:	d9cb      	bls.n	800672a <mg_atod+0x102>
    }
    d += frac * sign;
 8006792:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006794:	f7f9 fef0 	bl	8000578 <__aeabi_i2d>
 8006798:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800679c:	f7f9 ff56 	bl	800064c <__aeabi_dmul>
 80067a0:	4602      	mov	r2, r0
 80067a2:	460b      	mov	r3, r1
 80067a4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80067a8:	f7f9 fd9a 	bl	80002e0 <__adddf3>
 80067ac:	4602      	mov	r2, r0
 80067ae:	460b      	mov	r3, r1
 80067b0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  }

  // Exponential
  if (i < len && (p[i] == 'e' || p[i] == 'E')) {
 80067b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	f280 8085 	bge.w	80068c8 <mg_atod+0x2a0>
 80067be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	4413      	add	r3, r2
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	2b65      	cmp	r3, #101	; 0x65
 80067c8:	d005      	beq.n	80067d6 <mg_atod+0x1ae>
 80067ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	4413      	add	r3, r2
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	2b45      	cmp	r3, #69	; 0x45
 80067d4:	d178      	bne.n	80068c8 <mg_atod+0x2a0>
    int j, exp = 0, minus = 0;
 80067d6:	2300      	movs	r3, #0
 80067d8:	61bb      	str	r3, [r7, #24]
 80067da:	2300      	movs	r3, #0
 80067dc:	617b      	str	r3, [r7, #20]
    i++;
 80067de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067e0:	3301      	adds	r3, #1
 80067e2:	637b      	str	r3, [r7, #52]	; 0x34
    if (i < len && p[i] == '-') minus = 1, i++;
 80067e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	da0a      	bge.n	8006802 <mg_atod+0x1da>
 80067ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	4413      	add	r3, r2
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	2b2d      	cmp	r3, #45	; 0x2d
 80067f6:	d104      	bne.n	8006802 <mg_atod+0x1da>
 80067f8:	2301      	movs	r3, #1
 80067fa:	617b      	str	r3, [r7, #20]
 80067fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067fe:	3301      	adds	r3, #1
 8006800:	637b      	str	r3, [r7, #52]	; 0x34
    if (i < len && p[i] == '+') i++;
 8006802:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	429a      	cmp	r2, r3
 8006808:	da19      	bge.n	800683e <mg_atod+0x216>
 800680a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	4413      	add	r3, r2
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	2b2b      	cmp	r3, #43	; 0x2b
 8006814:	d113      	bne.n	800683e <mg_atod+0x216>
 8006816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006818:	3301      	adds	r3, #1
 800681a:	637b      	str	r3, [r7, #52]	; 0x34
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 800681c:	e00f      	b.n	800683e <mg_atod+0x216>
      exp = exp * 10 + (p[i++] - '0');
 800681e:	69ba      	ldr	r2, [r7, #24]
 8006820:	4613      	mov	r3, r2
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	4413      	add	r3, r2
 8006826:	005b      	lsls	r3, r3, #1
 8006828:	4619      	mov	r1, r3
 800682a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800682c:	1c5a      	adds	r2, r3, #1
 800682e:	637a      	str	r2, [r7, #52]	; 0x34
 8006830:	461a      	mov	r2, r3
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	4413      	add	r3, r2
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	3b30      	subs	r3, #48	; 0x30
 800683a:	440b      	add	r3, r1
 800683c:	61bb      	str	r3, [r7, #24]
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 800683e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	429a      	cmp	r2, r3
 8006844:	da0f      	bge.n	8006866 <mg_atod+0x23e>
 8006846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	4413      	add	r3, r2
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	2b2f      	cmp	r3, #47	; 0x2f
 8006850:	d909      	bls.n	8006866 <mg_atod+0x23e>
 8006852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	4413      	add	r3, r2
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	2b39      	cmp	r3, #57	; 0x39
 800685c:	d803      	bhi.n	8006866 <mg_atod+0x23e>
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8006864:	dbdb      	blt.n	800681e <mg_atod+0x1f6>
    if (minus) exp = -exp;
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d002      	beq.n	8006872 <mg_atod+0x24a>
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	425b      	negs	r3, r3
 8006870:	61bb      	str	r3, [r7, #24]
    for (j = 0; j < exp; j++) d *= 10.0;
 8006872:	2300      	movs	r3, #0
 8006874:	61fb      	str	r3, [r7, #28]
 8006876:	e00d      	b.n	8006894 <mg_atod+0x26c>
 8006878:	f04f 0200 	mov.w	r2, #0
 800687c:	4b1e      	ldr	r3, [pc, #120]	; (80068f8 <mg_atod+0x2d0>)
 800687e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006882:	f7f9 fee3 	bl	800064c <__aeabi_dmul>
 8006886:	4602      	mov	r2, r0
 8006888:	460b      	mov	r3, r1
 800688a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	3301      	adds	r3, #1
 8006892:	61fb      	str	r3, [r7, #28]
 8006894:	69fa      	ldr	r2, [r7, #28]
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	429a      	cmp	r2, r3
 800689a:	dbed      	blt.n	8006878 <mg_atod+0x250>
    for (j = 0; j < -exp; j++) d /= 10.0;
 800689c:	2300      	movs	r3, #0
 800689e:	61fb      	str	r3, [r7, #28]
 80068a0:	e00d      	b.n	80068be <mg_atod+0x296>
 80068a2:	f04f 0200 	mov.w	r2, #0
 80068a6:	4b14      	ldr	r3, [pc, #80]	; (80068f8 <mg_atod+0x2d0>)
 80068a8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80068ac:	f7f9 fff8 	bl	80008a0 <__aeabi_ddiv>
 80068b0:	4602      	mov	r2, r0
 80068b2:	460b      	mov	r3, r1
 80068b4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	3301      	adds	r3, #1
 80068bc:	61fb      	str	r3, [r7, #28]
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	425b      	negs	r3, r3
 80068c2:	69fa      	ldr	r2, [r7, #28]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	dbec      	blt.n	80068a2 <mg_atod+0x27a>
  }

  if (numlen != NULL) *numlen = i;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d002      	beq.n	80068d4 <mg_atod+0x2ac>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068d2:	601a      	str	r2, [r3, #0]
  return d;
 80068d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80068d8:	ec43 2b17 	vmov	d7, r2, r3
}
 80068dc:	eeb0 0a47 	vmov.f32	s0, s14
 80068e0:	eef0 0a67 	vmov.f32	s1, s15
 80068e4:	3740      	adds	r7, #64	; 0x40
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	f3af 8000 	nop.w
 80068f0:	9999999a 	.word	0x9999999a
 80068f4:	3fb99999 	.word	0x3fb99999
 80068f8:	40240000 	.word	0x40240000

080068fc <mg_json_get>:

int mg_json_get(struct mg_str json, const char *path, int *toklen) {
 80068fc:	b590      	push	{r4, r7, lr}
 80068fe:	b09b      	sub	sp, #108	; 0x6c
 8006900:	af00      	add	r7, sp, #0
 8006902:	f107 0408 	add.w	r4, r7, #8
 8006906:	e884 0003 	stmia.w	r4, {r0, r1}
 800690a:	607a      	str	r2, [r7, #4]
 800690c:	603b      	str	r3, [r7, #0]
  const char *s = json.ptr;
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	647b      	str	r3, [r7, #68]	; 0x44
  int len = (int) json.len;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	643b      	str	r3, [r7, #64]	; 0x40
  enum { S_VALUE, S_KEY, S_COLON, S_COMMA_OR_EOO } expecting = S_VALUE;
 8006916:	2300      	movs	r3, #0
 8006918:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  unsigned char nesting[MG_JSON_MAX_DEPTH];
  int i = 0;             // Current offset in `s`
 800691c:	2300      	movs	r3, #0
 800691e:	663b      	str	r3, [r7, #96]	; 0x60
  int j = 0;             // Offset in `s` we're looking for (return value)
 8006920:	2300      	movs	r3, #0
 8006922:	65fb      	str	r3, [r7, #92]	; 0x5c
  int depth = 0;         // Current depth (nesting level)
 8006924:	2300      	movs	r3, #0
 8006926:	65bb      	str	r3, [r7, #88]	; 0x58
  int ed = 0;            // Expected depth
 8006928:	2300      	movs	r3, #0
 800692a:	657b      	str	r3, [r7, #84]	; 0x54
  int pos = 1;           // Current position in `path`
 800692c:	2301      	movs	r3, #1
 800692e:	653b      	str	r3, [r7, #80]	; 0x50
  int ci = -1, ei = -1;  // Current and expected index in array
 8006930:	f04f 33ff 	mov.w	r3, #4294967295
 8006934:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006936:	f04f 33ff 	mov.w	r3, #4294967295
 800693a:	64bb      	str	r3, [r7, #72]	; 0x48

  if (toklen) *toklen = 0;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d002      	beq.n	8006948 <mg_json_get+0x4c>
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	2200      	movs	r2, #0
 8006946:	601a      	str	r2, [r3, #0]
  if (path[0] != '$') return MG_JSON_INVALID;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	2b24      	cmp	r3, #36	; 0x24
 800694e:	d002      	beq.n	8006956 <mg_json_get+0x5a>
 8006950:	f06f 0301 	mvn.w	r3, #1
 8006954:	e2d8      	b.n	8006f08 <mg_json_get+0x60c>
    if (c != nesting[depth - 1] + 2) return MG_JSON_INVALID; \
    depth--;                                                 \
    MG_CHECKRET(x);                                          \
  } while (0)

  for (i = 0; i < len; i++) {
 8006956:	2300      	movs	r3, #0
 8006958:	663b      	str	r3, [r7, #96]	; 0x60
 800695a:	e2ce      	b.n	8006efa <mg_json_get+0x5fe>
    unsigned char c = ((unsigned char *) s)[i];
 800695c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800695e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006960:	4413      	add	r3, r2
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 8006968:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800696c:	2b20      	cmp	r3, #32
 800696e:	f000 82c0 	beq.w	8006ef2 <mg_json_get+0x5f6>
 8006972:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006976:	2b09      	cmp	r3, #9
 8006978:	f000 82bb 	beq.w	8006ef2 <mg_json_get+0x5f6>
 800697c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006980:	2b0a      	cmp	r3, #10
 8006982:	f000 82b6 	beq.w	8006ef2 <mg_json_get+0x5f6>
 8006986:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800698a:	2b0d      	cmp	r3, #13
 800698c:	f000 82b1 	beq.w	8006ef2 <mg_json_get+0x5f6>
    switch (expecting) {
 8006990:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006994:	2b03      	cmp	r3, #3
 8006996:	f200 82ad 	bhi.w	8006ef4 <mg_json_get+0x5f8>
 800699a:	a201      	add	r2, pc, #4	; (adr r2, 80069a0 <mg_json_get+0xa4>)
 800699c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a0:	080069b1 	.word	0x080069b1
 80069a4:	08006c9b 	.word	0x08006c9b
 80069a8:	08006e13 	.word	0x08006e13
 80069ac:	08006e29 	.word	0x08006e29
      case S_VALUE:
        // p("V %s [%.*s] %d %d %d %d\n", path, pos, path, depth, ed, ci, ei);
        if (depth == ed) j = i;
 80069b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d101      	bne.n	80069bc <mg_json_get+0xc0>
 80069b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069ba:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (c == '{') {
 80069bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80069c0:	2b7b      	cmp	r3, #123	; 0x7b
 80069c2:	d12b      	bne.n	8006a1c <mg_json_get+0x120>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 80069c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069c6:	2b1d      	cmp	r3, #29
 80069c8:	dd02      	ble.n	80069d0 <mg_json_get+0xd4>
 80069ca:	f04f 33ff 	mov.w	r3, #4294967295
 80069ce:	e29b      	b.n	8006f08 <mg_json_get+0x60c>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 80069d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d114      	bne.n	8006a02 <mg_json_get+0x106>
 80069d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	4413      	add	r3, r2
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	2b2e      	cmp	r3, #46	; 0x2e
 80069e2:	d10e      	bne.n	8006a02 <mg_json_get+0x106>
 80069e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80069e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d10a      	bne.n	8006a02 <mg_json_get+0x106>
            // If we start the object, reset array indices
            ed++, pos++, ci = ei = -1;
 80069ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069ee:	3301      	adds	r3, #1
 80069f0:	657b      	str	r3, [r7, #84]	; 0x54
 80069f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069f4:	3301      	adds	r3, #1
 80069f6:	653b      	str	r3, [r7, #80]	; 0x50
 80069f8:	f04f 33ff 	mov.w	r3, #4294967295
 80069fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80069fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a00:	64fb      	str	r3, [r7, #76]	; 0x4c
          }
          nesting[depth++] = c;
 8006a02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a04:	1c5a      	adds	r2, r3, #1
 8006a06:	65ba      	str	r2, [r7, #88]	; 0x58
 8006a08:	3368      	adds	r3, #104	; 0x68
 8006a0a:	443b      	add	r3, r7
 8006a0c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006a10:	f803 2c54 	strb.w	r2, [r3, #-84]
          expecting = S_KEY;
 8006a14:	2301      	movs	r3, #1
 8006a16:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
          break;
 8006a1a:	e26b      	b.n	8006ef4 <mg_json_get+0x5f8>
        } else if (c == '[') {
 8006a1c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006a20:	2b5b      	cmp	r3, #91	; 0x5b
 8006a22:	d14e      	bne.n	8006ac2 <mg_json_get+0x1c6>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8006a24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a26:	2b1d      	cmp	r3, #29
 8006a28:	dd02      	ble.n	8006a30 <mg_json_get+0x134>
 8006a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a2e:	e26b      	b.n	8006f08 <mg_json_get+0x60c>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 8006a30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d13a      	bne.n	8006aae <mg_json_get+0x1b2>
 8006a38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	2b5b      	cmp	r3, #91	; 0x5b
 8006a42:	d134      	bne.n	8006aae <mg_json_get+0x1b2>
 8006a44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d130      	bne.n	8006aae <mg_json_get+0x1b2>
            ed++, pos++, ci = 0;
 8006a4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a4e:	3301      	adds	r3, #1
 8006a50:	657b      	str	r3, [r7, #84]	; 0x54
 8006a52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a54:	3301      	adds	r3, #1
 8006a56:	653b      	str	r3, [r7, #80]	; 0x50
 8006a58:	2300      	movs	r3, #0
 8006a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a60:	e010      	b.n	8006a84 <mg_json_get+0x188>
              ei *= 10;
 8006a62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a64:	4613      	mov	r3, r2
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	4413      	add	r3, r2
 8006a6a:	005b      	lsls	r3, r3, #1
 8006a6c:	64bb      	str	r3, [r7, #72]	; 0x48
              ei += path[pos] - '0';
 8006a6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	4413      	add	r3, r2
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	3b30      	subs	r3, #48	; 0x30
 8006a78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a7a:	4413      	add	r3, r2
 8006a7c:	64bb      	str	r3, [r7, #72]	; 0x48
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 8006a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a80:	3301      	adds	r3, #1
 8006a82:	653b      	str	r3, [r7, #80]	; 0x50
 8006a84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	4413      	add	r3, r2
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	2b5d      	cmp	r3, #93	; 0x5d
 8006a8e:	d005      	beq.n	8006a9c <mg_json_get+0x1a0>
 8006a90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	4413      	add	r3, r2
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d1e2      	bne.n	8006a62 <mg_json_get+0x166>
            }
            if (path[pos] != 0) pos++;
 8006a9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d002      	beq.n	8006aae <mg_json_get+0x1b2>
 8006aa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006aaa:	3301      	adds	r3, #1
 8006aac:	653b      	str	r3, [r7, #80]	; 0x50
          }
          nesting[depth++] = c;
 8006aae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ab0:	1c5a      	adds	r2, r3, #1
 8006ab2:	65ba      	str	r2, [r7, #88]	; 0x58
 8006ab4:	3368      	adds	r3, #104	; 0x68
 8006ab6:	443b      	add	r3, r7
 8006ab8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006abc:	f803 2c54 	strb.w	r2, [r3, #-84]
          break;
 8006ac0:	e218      	b.n	8006ef4 <mg_json_get+0x5f8>
        } else if (c == ']' && depth > 0) {  // Empty array
 8006ac2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006ac6:	2b5d      	cmp	r3, #93	; 0x5d
 8006ac8:	d13a      	bne.n	8006b40 <mg_json_get+0x244>
 8006aca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	dd37      	ble.n	8006b40 <mg_json_get+0x244>
          MG_EOO(']');
 8006ad0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ad2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d106      	bne.n	8006ae6 <mg_json_get+0x1ea>
 8006ad8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ada:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d002      	beq.n	8006ae6 <mg_json_get+0x1ea>
 8006ae0:	f06f 0302 	mvn.w	r3, #2
 8006ae4:	e210      	b.n	8006f08 <mg_json_get+0x60c>
 8006ae6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006aea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006aec:	3b01      	subs	r3, #1
 8006aee:	3368      	adds	r3, #104	; 0x68
 8006af0:	443b      	add	r3, r7
 8006af2:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8006af6:	3302      	adds	r3, #2
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d002      	beq.n	8006b02 <mg_json_get+0x206>
 8006afc:	f06f 0301 	mvn.w	r3, #1
 8006b00:	e202      	b.n	8006f08 <mg_json_get+0x60c>
 8006b02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b04:	3b01      	subs	r3, #1
 8006b06:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	f040 809c 	bne.w	8006c4a <mg_json_get+0x34e>
 8006b12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	4413      	add	r3, r2
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f040 8095 	bne.w	8006c4a <mg_json_get+0x34e>
 8006b20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b24:	429a      	cmp	r2, r3
 8006b26:	f040 8090 	bne.w	8006c4a <mg_json_get+0x34e>
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d005      	beq.n	8006b3c <mg_json_get+0x240>
 8006b30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006b32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	1c5a      	adds	r2, r3, #1
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	601a      	str	r2, [r3, #0]
 8006b3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b3e:	e1e3      	b.n	8006f08 <mg_json_get+0x60c>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 8006b40:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006b44:	2b74      	cmp	r3, #116	; 0x74
 8006b46:	d113      	bne.n	8006b70 <mg_json_get+0x274>
 8006b48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b4a:	3303      	adds	r3, #3
 8006b4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	dd0e      	ble.n	8006b70 <mg_json_get+0x274>
 8006b52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b56:	4413      	add	r3, r2
 8006b58:	2204      	movs	r2, #4
 8006b5a:	4999      	ldr	r1, [pc, #612]	; (8006dc0 <mg_json_get+0x4c4>)
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f00b fddb 	bl	8012718 <memcmp>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d103      	bne.n	8006b70 <mg_json_get+0x274>
          i += 3;
 8006b68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b6a:	3303      	adds	r3, #3
 8006b6c:	663b      	str	r3, [r7, #96]	; 0x60
 8006b6e:	e06d      	b.n	8006c4c <mg_json_get+0x350>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 8006b70:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006b74:	2b6e      	cmp	r3, #110	; 0x6e
 8006b76:	d113      	bne.n	8006ba0 <mg_json_get+0x2a4>
 8006b78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b7a:	3303      	adds	r3, #3
 8006b7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	dd0e      	ble.n	8006ba0 <mg_json_get+0x2a4>
 8006b82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b86:	4413      	add	r3, r2
 8006b88:	2204      	movs	r2, #4
 8006b8a:	498e      	ldr	r1, [pc, #568]	; (8006dc4 <mg_json_get+0x4c8>)
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f00b fdc3 	bl	8012718 <memcmp>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d103      	bne.n	8006ba0 <mg_json_get+0x2a4>
          i += 3;
 8006b98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b9a:	3303      	adds	r3, #3
 8006b9c:	663b      	str	r3, [r7, #96]	; 0x60
 8006b9e:	e055      	b.n	8006c4c <mg_json_get+0x350>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 8006ba0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006ba4:	2b66      	cmp	r3, #102	; 0x66
 8006ba6:	d113      	bne.n	8006bd0 <mg_json_get+0x2d4>
 8006ba8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006baa:	3304      	adds	r3, #4
 8006bac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	dd0e      	ble.n	8006bd0 <mg_json_get+0x2d4>
 8006bb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006bb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bb6:	4413      	add	r3, r2
 8006bb8:	2205      	movs	r2, #5
 8006bba:	4983      	ldr	r1, [pc, #524]	; (8006dc8 <mg_json_get+0x4cc>)
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f00b fdab 	bl	8012718 <memcmp>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d103      	bne.n	8006bd0 <mg_json_get+0x2d4>
          i += 4;
 8006bc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006bca:	3304      	adds	r3, #4
 8006bcc:	663b      	str	r3, [r7, #96]	; 0x60
 8006bce:	e03d      	b.n	8006c4c <mg_json_get+0x350>
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 8006bd0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006bd4:	2b2d      	cmp	r3, #45	; 0x2d
 8006bd6:	d007      	beq.n	8006be8 <mg_json_get+0x2ec>
 8006bd8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006bdc:	2b2f      	cmp	r3, #47	; 0x2f
 8006bde:	d916      	bls.n	8006c0e <mg_json_get+0x312>
 8006be0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006be4:	2b39      	cmp	r3, #57	; 0x39
 8006be6:	d812      	bhi.n	8006c0e <mg_json_get+0x312>
          int numlen = 0;
 8006be8:	2300      	movs	r3, #0
 8006bea:	613b      	str	r3, [r7, #16]
          mg_atod(&s[i], len - i, &numlen);
 8006bec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006bee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bf0:	18d0      	adds	r0, r2, r3
 8006bf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006bf4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	f107 0210 	add.w	r2, r7, #16
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	f7ff fd13 	bl	8006628 <mg_atod>
          i += numlen - 1;
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	3b01      	subs	r3, #1
 8006c06:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c08:	4413      	add	r3, r2
 8006c0a:	663b      	str	r3, [r7, #96]	; 0x60
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 8006c0c:	e01e      	b.n	8006c4c <mg_json_get+0x350>
        } else if (c == '"') {
 8006c0e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006c12:	2b22      	cmp	r3, #34	; 0x22
 8006c14:	d116      	bne.n	8006c44 <mg_json_get+0x348>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 8006c16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c18:	3301      	adds	r3, #1
 8006c1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c1c:	18d0      	adds	r0, r2, r3
 8006c1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c22:	1ad3      	subs	r3, r2, r3
 8006c24:	3b01      	subs	r3, #1
 8006c26:	4619      	mov	r1, r3
 8006c28:	f7ff fcbc 	bl	80065a4 <mg_pass_string>
 8006c2c:	6378      	str	r0, [r7, #52]	; 0x34
          if (n < 0) return n;
 8006c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	da01      	bge.n	8006c38 <mg_json_get+0x33c>
 8006c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c36:	e167      	b.n	8006f08 <mg_json_get+0x60c>
          i += n + 1;
 8006c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c3e:	4413      	add	r3, r2
 8006c40:	663b      	str	r3, [r7, #96]	; 0x60
 8006c42:	e003      	b.n	8006c4c <mg_json_get+0x350>
        } else {
          return MG_JSON_INVALID;
 8006c44:	f06f 0301 	mvn.w	r3, #1
 8006c48:	e15e      	b.n	8006f08 <mg_json_get+0x60c>
          MG_EOO(']');
 8006c4a:	bf00      	nop
        }
        MG_CHECKRET('V');
 8006c4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d114      	bne.n	8006c7e <mg_json_get+0x382>
 8006c54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	4413      	add	r3, r2
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d10e      	bne.n	8006c7e <mg_json_get+0x382>
 8006c60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d10a      	bne.n	8006c7e <mg_json_get+0x382>
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d005      	beq.n	8006c7a <mg_json_get+0x37e>
 8006c6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c72:	1ad3      	subs	r3, r2, r3
 8006c74:	1c5a      	adds	r2, r3, #1
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	601a      	str	r2, [r3, #0]
 8006c7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c7c:	e144      	b.n	8006f08 <mg_json_get+0x60c>
        if (depth == ed && ei >= 0) ci++;
 8006c7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d105      	bne.n	8006c92 <mg_json_get+0x396>
 8006c86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	db02      	blt.n	8006c92 <mg_json_get+0x396>
 8006c8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c8e:	3301      	adds	r3, #1
 8006c90:	64fb      	str	r3, [r7, #76]	; 0x4c
        expecting = S_COMMA_OR_EOO;
 8006c92:	2303      	movs	r3, #3
 8006c94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        break;
 8006c98:	e12c      	b.n	8006ef4 <mg_json_get+0x5f8>

      case S_KEY:
        if (c == '"') {
 8006c9a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006c9e:	2b22      	cmp	r3, #34	; 0x22
 8006ca0:	d170      	bne.n	8006d84 <mg_json_get+0x488>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 8006ca2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ca8:	18d0      	adds	r0, r2, r3
 8006caa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006cac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	f7ff fc76 	bl	80065a4 <mg_pass_string>
 8006cb8:	63b8      	str	r0, [r7, #56]	; 0x38
          if (n < 0) return n;
 8006cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	da01      	bge.n	8006cc4 <mg_json_get+0x3c8>
 8006cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc2:	e121      	b.n	8006f08 <mg_json_get+0x60c>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 8006cc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006cc6:	1c5a      	adds	r2, r3, #1
 8006cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cca:	4413      	add	r3, r2
 8006ccc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	dc02      	bgt.n	8006cd8 <mg_json_get+0x3dc>
 8006cd2:	f06f 0302 	mvn.w	r3, #2
 8006cd6:	e117      	b.n	8006f08 <mg_json_get+0x60c>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 8006cd8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006cda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	da02      	bge.n	8006ce6 <mg_json_get+0x3ea>
 8006ce0:	f06f 0302 	mvn.w	r3, #2
 8006ce4:	e110      	b.n	8006f08 <mg_json_get+0x60c>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 8006ce6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d109      	bne.n	8006d02 <mg_json_get+0x406>
 8006cee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	4413      	add	r3, r2
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	2b2e      	cmp	r3, #46	; 0x2e
 8006cfa:	d002      	beq.n	8006d02 <mg_json_get+0x406>
 8006cfc:	f06f 0302 	mvn.w	r3, #2
 8006d00:	e102      	b.n	8006f08 <mg_json_get+0x60c>
          // printf("K %s [%.*s] [%.*s] %d %d %d\n", path, pos, path, n,
          //  &s[i + 1], n, depth, ed);
          // NOTE(cpq): in the check sequence below is important.
          // strncmp() must go first: it fails fast if the remaining length of
          // the path is smaller than `n`.
          if (depth == ed && path[pos - 1] == '.' &&
 8006d02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d133      	bne.n	8006d72 <mg_json_get+0x476>
 8006d0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	4413      	add	r3, r2
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	2b2e      	cmp	r3, #46	; 0x2e
 8006d16:	d12c      	bne.n	8006d72 <mg_json_get+0x476>
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 8006d18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d1e:	18d0      	adds	r0, r2, r3
 8006d20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	4413      	add	r3, r2
 8006d26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d28:	4619      	mov	r1, r3
 8006d2a:	f00b ff1c 	bl	8012b66 <strncmp>
 8006d2e:	4603      	mov	r3, r0
          if (depth == ed && path[pos - 1] == '.' &&
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d11e      	bne.n	8006d72 <mg_json_get+0x476>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 8006d34:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d38:	4413      	add	r3, r2
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4413      	add	r3, r2
 8006d40:	781b      	ldrb	r3, [r3, #0]
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d011      	beq.n	8006d6a <mg_json_get+0x46e>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 8006d46:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4a:	4413      	add	r3, r2
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4413      	add	r3, r2
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	2b2e      	cmp	r3, #46	; 0x2e
 8006d56:	d008      	beq.n	8006d6a <mg_json_get+0x46e>
               path[pos + n] == '[')) {
 8006d58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d5c:	4413      	add	r3, r2
 8006d5e:	461a      	mov	r2, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4413      	add	r3, r2
 8006d64:	781b      	ldrb	r3, [r3, #0]
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 8006d66:	2b5b      	cmp	r3, #91	; 0x5b
 8006d68:	d103      	bne.n	8006d72 <mg_json_get+0x476>
            pos += n;
 8006d6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6e:	4413      	add	r3, r2
 8006d70:	653b      	str	r3, [r7, #80]	; 0x50
          }
          i += n + 1;
 8006d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d74:	3301      	adds	r3, #1
 8006d76:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006d78:	4413      	add	r3, r2
 8006d7a:	663b      	str	r3, [r7, #96]	; 0x60
          expecting = S_COLON;
 8006d7c:	2302      	movs	r3, #2
 8006d7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
          MG_EOO('}');
          expecting = S_COMMA_OR_EOO;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 8006d82:	e0b7      	b.n	8006ef4 <mg_json_get+0x5f8>
        } else if (c == '}') {  // Empty object
 8006d84:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006d88:	2b7d      	cmp	r3, #125	; 0x7d
 8006d8a:	d13f      	bne.n	8006e0c <mg_json_get+0x510>
          MG_EOO('}');
 8006d8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d106      	bne.n	8006da2 <mg_json_get+0x4a6>
 8006d94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006d96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d002      	beq.n	8006da2 <mg_json_get+0x4a6>
 8006d9c:	f06f 0302 	mvn.w	r3, #2
 8006da0:	e0b2      	b.n	8006f08 <mg_json_get+0x60c>
 8006da2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006da6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006da8:	3b01      	subs	r3, #1
 8006daa:	3368      	adds	r3, #104	; 0x68
 8006dac:	443b      	add	r3, r7
 8006dae:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8006db2:	3302      	adds	r3, #2
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d009      	beq.n	8006dcc <mg_json_get+0x4d0>
 8006db8:	f06f 0301 	mvn.w	r3, #1
 8006dbc:	e0a4      	b.n	8006f08 <mg_json_get+0x60c>
 8006dbe:	bf00      	nop
 8006dc0:	08014a84 	.word	0x08014a84
 8006dc4:	08014a8c 	.word	0x08014a8c
 8006dc8:	08014a94 	.word	0x08014a94
 8006dcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	65bb      	str	r3, [r7, #88]	; 0x58
 8006dd2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006dd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d114      	bne.n	8006e04 <mg_json_get+0x508>
 8006dda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	4413      	add	r3, r2
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d10e      	bne.n	8006e04 <mg_json_get+0x508>
 8006de6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006de8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d10a      	bne.n	8006e04 <mg_json_get+0x508>
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d005      	beq.n	8006e00 <mg_json_get+0x504>
 8006df4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006df6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006df8:	1ad3      	subs	r3, r2, r3
 8006dfa:	1c5a      	adds	r2, r3, #1
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	601a      	str	r2, [r3, #0]
 8006e00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e02:	e081      	b.n	8006f08 <mg_json_get+0x60c>
          expecting = S_COMMA_OR_EOO;
 8006e04:	2303      	movs	r3, #3
 8006e06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        break;
 8006e0a:	e073      	b.n	8006ef4 <mg_json_get+0x5f8>
          return MG_JSON_INVALID;
 8006e0c:	f06f 0301 	mvn.w	r3, #1
 8006e10:	e07a      	b.n	8006f08 <mg_json_get+0x60c>

      case S_COLON:
        if (c == ':') {
 8006e12:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006e16:	2b3a      	cmp	r3, #58	; 0x3a
 8006e18:	d103      	bne.n	8006e22 <mg_json_get+0x526>
          expecting = S_VALUE;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        } else {
          return MG_JSON_INVALID;
        }
        break;
 8006e20:	e068      	b.n	8006ef4 <mg_json_get+0x5f8>
          return MG_JSON_INVALID;
 8006e22:	f06f 0301 	mvn.w	r3, #1
 8006e26:	e06f      	b.n	8006f08 <mg_json_get+0x60c>

      case S_COMMA_OR_EOO:
        if (depth <= 0) {
 8006e28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	dc02      	bgt.n	8006e34 <mg_json_get+0x538>
          return MG_JSON_INVALID;
 8006e2e:	f06f 0301 	mvn.w	r3, #1
 8006e32:	e069      	b.n	8006f08 <mg_json_get+0x60c>
        } else if (c == ',') {
 8006e34:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006e38:	2b2c      	cmp	r3, #44	; 0x2c
 8006e3a:	d10d      	bne.n	8006e58 <mg_json_get+0x55c>
          expecting = (nesting[depth - 1] == '{') ? S_KEY : S_VALUE;
 8006e3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	3368      	adds	r3, #104	; 0x68
 8006e42:	443b      	add	r3, r7
 8006e44:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8006e48:	2b7b      	cmp	r3, #123	; 0x7b
 8006e4a:	bf0c      	ite	eq
 8006e4c:	2301      	moveq	r3, #1
 8006e4e:	2300      	movne	r3, #0
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
          MG_EOO('O');
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 8006e56:	e04d      	b.n	8006ef4 <mg_json_get+0x5f8>
        } else if (c == ']' || c == '}') {
 8006e58:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006e5c:	2b5d      	cmp	r3, #93	; 0x5d
 8006e5e:	d003      	beq.n	8006e68 <mg_json_get+0x56c>
 8006e60:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006e64:	2b7d      	cmp	r3, #125	; 0x7d
 8006e66:	d13f      	bne.n	8006ee8 <mg_json_get+0x5ec>
          MG_EOO('O');
 8006e68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d106      	bne.n	8006e7e <mg_json_get+0x582>
 8006e70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d002      	beq.n	8006e7e <mg_json_get+0x582>
 8006e78:	f06f 0302 	mvn.w	r3, #2
 8006e7c:	e044      	b.n	8006f08 <mg_json_get+0x60c>
 8006e7e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006e82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e84:	3b01      	subs	r3, #1
 8006e86:	3368      	adds	r3, #104	; 0x68
 8006e88:	443b      	add	r3, r7
 8006e8a:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8006e8e:	3302      	adds	r3, #2
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d002      	beq.n	8006e9a <mg_json_get+0x59e>
 8006e94:	f06f 0301 	mvn.w	r3, #1
 8006e98:	e036      	b.n	8006f08 <mg_json_get+0x60c>
 8006e9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ea0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d114      	bne.n	8006ed2 <mg_json_get+0x5d6>
 8006ea8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	4413      	add	r3, r2
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d10e      	bne.n	8006ed2 <mg_json_get+0x5d6>
 8006eb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006eb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d10a      	bne.n	8006ed2 <mg_json_get+0x5d6>
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d005      	beq.n	8006ece <mg_json_get+0x5d2>
 8006ec2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006ec4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ec6:	1ad3      	subs	r3, r2, r3
 8006ec8:	1c5a      	adds	r2, r3, #1
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	601a      	str	r2, [r3, #0]
 8006ece:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ed0:	e01a      	b.n	8006f08 <mg_json_get+0x60c>
          if (depth == ed && ei >= 0) ci++;
 8006ed2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ed4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d109      	bne.n	8006eee <mg_json_get+0x5f2>
 8006eda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	db06      	blt.n	8006eee <mg_json_get+0x5f2>
 8006ee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ee6:	e002      	b.n	8006eee <mg_json_get+0x5f2>
          return MG_JSON_INVALID;
 8006ee8:	f06f 0301 	mvn.w	r3, #1
 8006eec:	e00c      	b.n	8006f08 <mg_json_get+0x60c>
          if (depth == ed && ei >= 0) ci++;
 8006eee:	bf00      	nop
        break;
 8006ef0:	e000      	b.n	8006ef4 <mg_json_get+0x5f8>
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 8006ef2:	bf00      	nop
  for (i = 0; i < len; i++) {
 8006ef4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	663b      	str	r3, [r7, #96]	; 0x60
 8006efa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006efc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006efe:	429a      	cmp	r2, r3
 8006f00:	f6ff ad2c 	blt.w	800695c <mg_json_get+0x60>
    }
  }
  return MG_JSON_NOT_FOUND;
 8006f04:	f06f 0302 	mvn.w	r3, #2
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	376c      	adds	r7, #108	; 0x6c
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd90      	pop	{r4, r7, pc}

08006f10 <mg_json_get_num>:

bool mg_json_get_num(struct mg_str json, const char *path, double *v) {
 8006f10:	b590      	push	{r4, r7, lr}
 8006f12:	b089      	sub	sp, #36	; 0x24
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	f107 0408 	add.w	r4, r7, #8
 8006f1a:	e884 0003 	stmia.w	r4, {r0, r1}
 8006f1e:	607a      	str	r2, [r7, #4]
 8006f20:	603b      	str	r3, [r7, #0]
  int n, toklen, found = 0;
 8006f22:	2300      	movs	r3, #0
 8006f24:	61fb      	str	r3, [r7, #28]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 8006f26:	f107 0314 	add.w	r3, r7, #20
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	f107 0108 	add.w	r1, r7, #8
 8006f30:	c903      	ldmia	r1, {r0, r1}
 8006f32:	f7ff fce3 	bl	80068fc <mg_json_get>
 8006f36:	61b8      	str	r0, [r7, #24]
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	db25      	blt.n	8006f8a <mg_json_get_num+0x7a>
      (json.ptr[n] == '-' || (json.ptr[n] >= '0' && json.ptr[n] <= '9'))) {
 8006f3e:	68ba      	ldr	r2, [r7, #8]
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	4413      	add	r3, r2
 8006f44:	781b      	ldrb	r3, [r3, #0]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 8006f46:	2b2d      	cmp	r3, #45	; 0x2d
 8006f48:	d00b      	beq.n	8006f62 <mg_json_get_num+0x52>
      (json.ptr[n] == '-' || (json.ptr[n] >= '0' && json.ptr[n] <= '9'))) {
 8006f4a:	68ba      	ldr	r2, [r7, #8]
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	4413      	add	r3, r2
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	2b2f      	cmp	r3, #47	; 0x2f
 8006f54:	d919      	bls.n	8006f8a <mg_json_get_num+0x7a>
 8006f56:	68ba      	ldr	r2, [r7, #8]
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	2b39      	cmp	r3, #57	; 0x39
 8006f60:	d813      	bhi.n	8006f8a <mg_json_get_num+0x7a>
    if (v != NULL) *v = mg_atod(json.ptr + n, toklen, NULL);
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d00e      	beq.n	8006f86 <mg_json_get_num+0x76>
 8006f68:	68ba      	ldr	r2, [r7, #8]
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	6979      	ldr	r1, [r7, #20]
 8006f70:	2200      	movs	r2, #0
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7ff fb58 	bl	8006628 <mg_atod>
 8006f78:	eeb0 7a40 	vmov.f32	s14, s0
 8006f7c:	eef0 7a60 	vmov.f32	s15, s1
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	ed83 7b00 	vstr	d7, [r3]
    found = 1;
 8006f86:	2301      	movs	r3, #1
 8006f88:	61fb      	str	r3, [r7, #28]
  }
  return found;
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	bf14      	ite	ne
 8006f90:	2301      	movne	r3, #1
 8006f92:	2300      	moveq	r3, #0
 8006f94:	b2db      	uxtb	r3, r3
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3724      	adds	r7, #36	; 0x24
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd90      	pop	{r4, r7, pc}

08006f9e <mg_json_get_long>:
    if (slen != NULL) *slen = len / 2 - 1;
  }
  return result;
}

long mg_json_get_long(struct mg_str json, const char *path, long dflt) {
 8006f9e:	b590      	push	{r4, r7, lr}
 8006fa0:	b089      	sub	sp, #36	; 0x24
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	f107 0408 	add.w	r4, r7, #8
 8006fa8:	e884 0003 	stmia.w	r4, {r0, r1}
 8006fac:	607a      	str	r2, [r7, #4]
 8006fae:	603b      	str	r3, [r7, #0]
  double dv;
  long result = dflt;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	61fb      	str	r3, [r7, #28]
  if (mg_json_get_num(json, path, &dv)) result = (long) dv;
 8006fb4:	f107 0310 	add.w	r3, r7, #16
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	f107 0108 	add.w	r1, r7, #8
 8006fbe:	c903      	ldmia	r1, {r0, r1}
 8006fc0:	f7ff ffa6 	bl	8006f10 <mg_json_get_num>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d007      	beq.n	8006fda <mg_json_get_long+0x3c>
 8006fca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006fce:	4610      	mov	r0, r2
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	f7f9 fdd5 	bl	8000b80 <__aeabi_d2iz>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	61fb      	str	r3, [r7, #28]
  return result;
 8006fda:	69fb      	ldr	r3, [r7, #28]
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3724      	adds	r7, #36	; 0x24
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd90      	pop	{r4, r7, pc}

08006fe4 <default_logger>:





static void default_logger(char c, void *param) {
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	4603      	mov	r3, r0
 8006fec:	6039      	str	r1, [r7, #0]
 8006fee:	71fb      	strb	r3, [r7, #7]
  putchar(c);
 8006ff0:	79fb      	ldrb	r3, [r7, #7]
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f00b fcde 	bl	80129b4 <putchar>
  (void) c, (void) param;
}
 8006ff8:	bf00      	nop
 8006ffa:	3708      	adds	r7, #8
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <logc>:
void mg_log_set_fn(mg_pfn_t fn, void *param) {
  s_log_func = fn;
  s_log_func_param = param;
}

static void logc(unsigned char c) {
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
 8007006:	4603      	mov	r3, r0
 8007008:	71fb      	strb	r3, [r7, #7]
  s_log_func((char) c, s_log_func_param);
 800700a:	4b05      	ldr	r3, [pc, #20]	; (8007020 <logc+0x20>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a05      	ldr	r2, [pc, #20]	; (8007024 <logc+0x24>)
 8007010:	6811      	ldr	r1, [r2, #0]
 8007012:	79fa      	ldrb	r2, [r7, #7]
 8007014:	4610      	mov	r0, r2
 8007016:	4798      	blx	r3
}
 8007018:	bf00      	nop
 800701a:	3708      	adds	r7, #8
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}
 8007020:	2000023c 	.word	0x2000023c
 8007024:	200005cc 	.word	0x200005cc

08007028 <logs>:

static void logs(const char *buf, size_t len) {
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < len; i++) logc(((unsigned char *) buf)[i]);
 8007032:	2300      	movs	r3, #0
 8007034:	60fb      	str	r3, [r7, #12]
 8007036:	e009      	b.n	800704c <logs+0x24>
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	4413      	add	r3, r2
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	4618      	mov	r0, r3
 8007042:	f7ff ffdd 	bl	8007000 <logc>
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	3301      	adds	r3, #1
 800704a:	60fb      	str	r3, [r7, #12]
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	429a      	cmp	r2, r3
 8007052:	d3f1      	bcc.n	8007038 <logs+0x10>
}
 8007054:	bf00      	nop
 8007056:	bf00      	nop
 8007058:	3710      	adds	r7, #16
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
	...

08007060 <mg_log_set>:

void mg_log_set(int log_level) {
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  MG_DEBUG(("Setting log level to %d", log_level));
 8007068:	4b0a      	ldr	r3, [pc, #40]	; (8007094 <mg_log_set+0x34>)
 800706a:	f640 22d8 	movw	r2, #2776	; 0xad8
 800706e:	490a      	ldr	r1, [pc, #40]	; (8007098 <mg_log_set+0x38>)
 8007070:	2003      	movs	r0, #3
 8007072:	f000 f817 	bl	80070a4 <mg_log_prefix>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d003      	beq.n	8007084 <mg_log_set+0x24>
 800707c:	6879      	ldr	r1, [r7, #4]
 800707e:	4807      	ldr	r0, [pc, #28]	; (800709c <mg_log_set+0x3c>)
 8007080:	f000 f86a 	bl	8007158 <mg_log>
  s_level = log_level;
 8007084:	4a06      	ldr	r2, [pc, #24]	; (80070a0 <mg_log_set+0x40>)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6013      	str	r3, [r2, #0]
}
 800708a:	bf00      	nop
 800708c:	3708      	adds	r7, #8
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	080156e0 	.word	0x080156e0
 8007098:	08013b30 	.word	0x08013b30
 800709c:	08014a9c 	.word	0x08014a9c
 80070a0:	20000238 	.word	0x20000238

080070a4 <mg_log_prefix>:

bool mg_log_prefix(int level, const char *file, int line, const char *fname) {
 80070a4:	b590      	push	{r4, r7, lr}
 80070a6:	b099      	sub	sp, #100	; 0x64
 80070a8:	af06      	add	r7, sp, #24
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	60b9      	str	r1, [r7, #8]
 80070ae:	607a      	str	r2, [r7, #4]
 80070b0:	603b      	str	r3, [r7, #0]
  if (level <= s_level) {
 80070b2:	4b27      	ldr	r3, [pc, #156]	; (8007150 <mg_log_prefix+0xac>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	68fa      	ldr	r2, [r7, #12]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	dc43      	bgt.n	8007144 <mg_log_prefix+0xa0>
    const char *p = strrchr(file, '/');
 80070bc:	212f      	movs	r1, #47	; 0x2f
 80070be:	68b8      	ldr	r0, [r7, #8]
 80070c0:	f00b fd65 	bl	8012b8e <strrchr>
 80070c4:	6478      	str	r0, [r7, #68]	; 0x44
    char buf[41];
    size_t n;
    if (p == NULL) p = strrchr(file, '\\');
 80070c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d104      	bne.n	80070d6 <mg_log_prefix+0x32>
 80070cc:	215c      	movs	r1, #92	; 0x5c
 80070ce:	68b8      	ldr	r0, [r7, #8]
 80070d0:	f00b fd5d 	bl	8012b8e <strrchr>
 80070d4:	6478      	str	r0, [r7, #68]	; 0x44
    n = mg_snprintf(buf, sizeof(buf), "%llx %d %s:%d:%s", mg_millis(), level,
 80070d6:	f7f9 ffa3 	bl	8001020 <mg_millis>
 80070da:	4602      	mov	r2, r0
 80070dc:	460b      	mov	r3, r1
 80070de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80070e0:	2900      	cmp	r1, #0
 80070e2:	d002      	beq.n	80070ea <mg_log_prefix+0x46>
 80070e4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80070e6:	3101      	adds	r1, #1
 80070e8:	e000      	b.n	80070ec <mg_log_prefix+0x48>
 80070ea:	68b9      	ldr	r1, [r7, #8]
 80070ec:	f107 0414 	add.w	r4, r7, #20
 80070f0:	6838      	ldr	r0, [r7, #0]
 80070f2:	9005      	str	r0, [sp, #20]
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	9004      	str	r0, [sp, #16]
 80070f8:	9103      	str	r1, [sp, #12]
 80070fa:	68f9      	ldr	r1, [r7, #12]
 80070fc:	9102      	str	r1, [sp, #8]
 80070fe:	e9cd 2300 	strd	r2, r3, [sp]
 8007102:	4a14      	ldr	r2, [pc, #80]	; (8007154 <mg_log_prefix+0xb0>)
 8007104:	2129      	movs	r1, #41	; 0x29
 8007106:	4620      	mov	r0, r4
 8007108:	f7fb f9aa 	bl	8002460 <mg_snprintf>
 800710c:	6438      	str	r0, [r7, #64]	; 0x40
                    p == NULL ? file : p + 1, line, fname);
    if (n > sizeof(buf) - 2) n = sizeof(buf) - 2;
 800710e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007110:	2b27      	cmp	r3, #39	; 0x27
 8007112:	d90a      	bls.n	800712a <mg_log_prefix+0x86>
 8007114:	2327      	movs	r3, #39	; 0x27
 8007116:	643b      	str	r3, [r7, #64]	; 0x40
    while (n < sizeof(buf)) buf[n++] = ' ';
 8007118:	e007      	b.n	800712a <mg_log_prefix+0x86>
 800711a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800711c:	1c5a      	adds	r2, r3, #1
 800711e:	643a      	str	r2, [r7, #64]	; 0x40
 8007120:	3348      	adds	r3, #72	; 0x48
 8007122:	443b      	add	r3, r7
 8007124:	2220      	movs	r2, #32
 8007126:	f803 2c34 	strb.w	r2, [r3, #-52]
 800712a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800712c:	2b28      	cmp	r3, #40	; 0x28
 800712e:	d9f4      	bls.n	800711a <mg_log_prefix+0x76>
    logs(buf, n - 1);
 8007130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007132:	1e5a      	subs	r2, r3, #1
 8007134:	f107 0314 	add.w	r3, r7, #20
 8007138:	4611      	mov	r1, r2
 800713a:	4618      	mov	r0, r3
 800713c:	f7ff ff74 	bl	8007028 <logs>
    return true;
 8007140:	2301      	movs	r3, #1
 8007142:	e000      	b.n	8007146 <mg_log_prefix+0xa2>
  } else {
    return false;
 8007144:	2300      	movs	r3, #0
  }
}
 8007146:	4618      	mov	r0, r3
 8007148:	374c      	adds	r7, #76	; 0x4c
 800714a:	46bd      	mov	sp, r7
 800714c:	bd90      	pop	{r4, r7, pc}
 800714e:	bf00      	nop
 8007150:	20000238 	.word	0x20000238
 8007154:	08014ab4 	.word	0x08014ab4

08007158 <mg_log>:

void mg_log(const char *fmt, ...) {
 8007158:	b40f      	push	{r0, r1, r2, r3}
 800715a:	b580      	push	{r7, lr}
 800715c:	b082      	sub	sp, #8
 800715e:	af00      	add	r7, sp, #0
  va_list ap;
  va_start(ap, fmt);
 8007160:	f107 0314 	add.w	r3, r7, #20
 8007164:	607b      	str	r3, [r7, #4]
  mg_vxprintf(s_log_func, s_log_func_param, fmt, &ap);
 8007166:	4b09      	ldr	r3, [pc, #36]	; (800718c <mg_log+0x34>)
 8007168:	6818      	ldr	r0, [r3, #0]
 800716a:	4b09      	ldr	r3, [pc, #36]	; (8007190 <mg_log+0x38>)
 800716c:	6819      	ldr	r1, [r3, #0]
 800716e:	1d3b      	adds	r3, r7, #4
 8007170:	693a      	ldr	r2, [r7, #16]
 8007172:	f7fb ff8d 	bl	8003090 <mg_vxprintf>
  va_end(ap);
  logc((unsigned char) '\n');
 8007176:	200a      	movs	r0, #10
 8007178:	f7ff ff42 	bl	8007000 <logc>
}
 800717c:	bf00      	nop
 800717e:	3708      	adds	r7, #8
 8007180:	46bd      	mov	sp, r7
 8007182:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007186:	b004      	add	sp, #16
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	2000023c 	.word	0x2000023c
 8007190:	200005cc 	.word	0x200005cc

08007194 <nibble>:

static unsigned char nibble(unsigned c) {
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  return (unsigned char) (c < 10 ? c + '0' : c + 'W');
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2b09      	cmp	r3, #9
 80071a0:	d804      	bhi.n	80071ac <nibble+0x18>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	3330      	adds	r3, #48	; 0x30
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	e003      	b.n	80071b4 <nibble+0x20>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	3357      	adds	r3, #87	; 0x57
 80071b2:	b2db      	uxtb	r3, r3
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <mg_hexdump>:

#define ISPRINT(x) ((x) >= ' ' && (x) <= '~')
void mg_hexdump(const void *buf, size_t len) {
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b08a      	sub	sp, #40	; 0x28
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  const unsigned char *p = (const unsigned char *) buf;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	61fb      	str	r3, [r7, #28]
  unsigned char ascii[16], alen = 0;
 80071ce:	2300      	movs	r3, #0
 80071d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  size_t i;
  for (i = 0; i < len; i++) {
 80071d4:	2300      	movs	r3, #0
 80071d6:	623b      	str	r3, [r7, #32]
 80071d8:	e07a      	b.n	80072d0 <mg_hexdump+0x110>
    if ((i % 16) == 0) {
 80071da:	6a3b      	ldr	r3, [r7, #32]
 80071dc:	f003 030f 	and.w	r3, r3, #15
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d13a      	bne.n	800725a <mg_hexdump+0x9a>
      // Print buffered ascii chars
      if (i > 0) logs("  ", 2), logs((char *) ascii, 16), logc('\n'), alen = 0;
 80071e4:	6a3b      	ldr	r3, [r7, #32]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00f      	beq.n	800720a <mg_hexdump+0x4a>
 80071ea:	2102      	movs	r1, #2
 80071ec:	484c      	ldr	r0, [pc, #304]	; (8007320 <mg_hexdump+0x160>)
 80071ee:	f7ff ff1b 	bl	8007028 <logs>
 80071f2:	f107 030c 	add.w	r3, r7, #12
 80071f6:	2110      	movs	r1, #16
 80071f8:	4618      	mov	r0, r3
 80071fa:	f7ff ff15 	bl	8007028 <logs>
 80071fe:	200a      	movs	r0, #10
 8007200:	f7ff fefe 	bl	8007000 <logc>
 8007204:	2300      	movs	r3, #0
 8007206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      // Print hex address, then \t
      logc(nibble((i >> 12) & 15)), logc(nibble((i >> 8) & 15)),
 800720a:	6a3b      	ldr	r3, [r7, #32]
 800720c:	0b1b      	lsrs	r3, r3, #12
 800720e:	f003 030f 	and.w	r3, r3, #15
 8007212:	4618      	mov	r0, r3
 8007214:	f7ff ffbe 	bl	8007194 <nibble>
 8007218:	4603      	mov	r3, r0
 800721a:	4618      	mov	r0, r3
 800721c:	f7ff fef0 	bl	8007000 <logc>
 8007220:	6a3b      	ldr	r3, [r7, #32]
 8007222:	0a1b      	lsrs	r3, r3, #8
 8007224:	f003 030f 	and.w	r3, r3, #15
 8007228:	4618      	mov	r0, r3
 800722a:	f7ff ffb3 	bl	8007194 <nibble>
 800722e:	4603      	mov	r3, r0
 8007230:	4618      	mov	r0, r3
 8007232:	f7ff fee5 	bl	8007000 <logc>
          logc(nibble((i >> 4) & 15)), logc('0'), logs("   ", 3);
 8007236:	6a3b      	ldr	r3, [r7, #32]
 8007238:	091b      	lsrs	r3, r3, #4
 800723a:	f003 030f 	and.w	r3, r3, #15
 800723e:	4618      	mov	r0, r3
 8007240:	f7ff ffa8 	bl	8007194 <nibble>
 8007244:	4603      	mov	r3, r0
 8007246:	4618      	mov	r0, r3
 8007248:	f7ff feda 	bl	8007000 <logc>
 800724c:	2030      	movs	r0, #48	; 0x30
 800724e:	f7ff fed7 	bl	8007000 <logc>
 8007252:	2103      	movs	r1, #3
 8007254:	4833      	ldr	r0, [pc, #204]	; (8007324 <mg_hexdump+0x164>)
 8007256:	f7ff fee7 	bl	8007028 <logs>
    }
    logc(nibble(p[i] >> 4)), logc(nibble(p[i] & 15));  // Two nibbles, e.g. c5
 800725a:	69fa      	ldr	r2, [r7, #28]
 800725c:	6a3b      	ldr	r3, [r7, #32]
 800725e:	4413      	add	r3, r2
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	091b      	lsrs	r3, r3, #4
 8007264:	b2db      	uxtb	r3, r3
 8007266:	4618      	mov	r0, r3
 8007268:	f7ff ff94 	bl	8007194 <nibble>
 800726c:	4603      	mov	r3, r0
 800726e:	4618      	mov	r0, r3
 8007270:	f7ff fec6 	bl	8007000 <logc>
 8007274:	69fa      	ldr	r2, [r7, #28]
 8007276:	6a3b      	ldr	r3, [r7, #32]
 8007278:	4413      	add	r3, r2
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	f003 030f 	and.w	r3, r3, #15
 8007280:	4618      	mov	r0, r3
 8007282:	f7ff ff87 	bl	8007194 <nibble>
 8007286:	4603      	mov	r3, r0
 8007288:	4618      	mov	r0, r3
 800728a:	f7ff feb9 	bl	8007000 <logc>
    logc(' ');                                         // Space after hex number
 800728e:	2020      	movs	r0, #32
 8007290:	f7ff feb6 	bl	8007000 <logc>
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 8007294:	69fa      	ldr	r2, [r7, #28]
 8007296:	6a3b      	ldr	r3, [r7, #32]
 8007298:	4413      	add	r3, r2
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	2b1f      	cmp	r3, #31
 800729e:	d90a      	bls.n	80072b6 <mg_hexdump+0xf6>
 80072a0:	69fa      	ldr	r2, [r7, #28]
 80072a2:	6a3b      	ldr	r3, [r7, #32]
 80072a4:	4413      	add	r3, r2
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	2b7e      	cmp	r3, #126	; 0x7e
 80072aa:	d804      	bhi.n	80072b6 <mg_hexdump+0xf6>
 80072ac:	69fa      	ldr	r2, [r7, #28]
 80072ae:	6a3b      	ldr	r3, [r7, #32]
 80072b0:	4413      	add	r3, r2
 80072b2:	781a      	ldrb	r2, [r3, #0]
 80072b4:	e000      	b.n	80072b8 <mg_hexdump+0xf8>
 80072b6:	222e      	movs	r2, #46	; 0x2e
 80072b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072bc:	1c59      	adds	r1, r3, #1
 80072be:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 80072c2:	3328      	adds	r3, #40	; 0x28
 80072c4:	443b      	add	r3, r7
 80072c6:	f803 2c1c 	strb.w	r2, [r3, #-28]
  for (i = 0; i < len; i++) {
 80072ca:	6a3b      	ldr	r3, [r7, #32]
 80072cc:	3301      	adds	r3, #1
 80072ce:	623b      	str	r3, [r7, #32]
 80072d0:	6a3a      	ldr	r2, [r7, #32]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d380      	bcc.n	80071da <mg_hexdump+0x1a>
  }
  while (alen < 16) logs("   ", 3), ascii[alen++] = ' ';
 80072d8:	e00d      	b.n	80072f6 <mg_hexdump+0x136>
 80072da:	2103      	movs	r1, #3
 80072dc:	4811      	ldr	r0, [pc, #68]	; (8007324 <mg_hexdump+0x164>)
 80072de:	f7ff fea3 	bl	8007028 <logs>
 80072e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072e6:	1c5a      	adds	r2, r3, #1
 80072e8:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 80072ec:	3328      	adds	r3, #40	; 0x28
 80072ee:	443b      	add	r3, r7
 80072f0:	2220      	movs	r2, #32
 80072f2:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80072f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072fa:	2b0f      	cmp	r3, #15
 80072fc:	d9ed      	bls.n	80072da <mg_hexdump+0x11a>
  logs("  ", 2), logs((char *) ascii, 16), logc('\n');
 80072fe:	2102      	movs	r1, #2
 8007300:	4807      	ldr	r0, [pc, #28]	; (8007320 <mg_hexdump+0x160>)
 8007302:	f7ff fe91 	bl	8007028 <logs>
 8007306:	f107 030c 	add.w	r3, r7, #12
 800730a:	2110      	movs	r1, #16
 800730c:	4618      	mov	r0, r3
 800730e:	f7ff fe8b 	bl	8007028 <logs>
 8007312:	200a      	movs	r0, #10
 8007314:	f7ff fe74 	bl	8007000 <logc>
}
 8007318:	bf00      	nop
 800731a:	3728      	adds	r7, #40	; 0x28
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}
 8007320:	08014ac8 	.word	0x08014ac8
 8007324:	08014acc 	.word	0x08014acc

08007328 <mg_mqtt_send_header>:
#define MQTT_WILL_RETAIN 0x20
#define MQTT_HAS_PASSWORD 0x40
#define MQTT_HAS_USER_NAME 0x80

void mg_mqtt_send_header(struct mg_connection *c, uint8_t cmd, uint8_t flags,
                         uint32_t len) {
 8007328:	b580      	push	{r7, lr}
 800732a:	b088      	sub	sp, #32
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	607b      	str	r3, [r7, #4]
 8007332:	460b      	mov	r3, r1
 8007334:	72fb      	strb	r3, [r7, #11]
 8007336:	4613      	mov	r3, r2
 8007338:	72bb      	strb	r3, [r7, #10]
  uint8_t buf[1 + sizeof(len)], *vlen = &buf[1];
 800733a:	f107 0314 	add.w	r3, r7, #20
 800733e:	3301      	adds	r3, #1
 8007340:	61fb      	str	r3, [r7, #28]
  buf[0] = (uint8_t) ((cmd << 4) | flags);
 8007342:	7afb      	ldrb	r3, [r7, #11]
 8007344:	011b      	lsls	r3, r3, #4
 8007346:	b25a      	sxtb	r2, r3
 8007348:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800734c:	4313      	orrs	r3, r2
 800734e:	b25b      	sxtb	r3, r3
 8007350:	b2db      	uxtb	r3, r3
 8007352:	753b      	strb	r3, [r7, #20]
  do {
    *vlen = len % 0x80;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	b2db      	uxtb	r3, r3
 8007358:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800735c:	b2da      	uxtb	r2, r3
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	701a      	strb	r2, [r3, #0]
    len /= 0x80;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	09db      	lsrs	r3, r3, #7
 8007366:	607b      	str	r3, [r7, #4]
    if (len > 0) *vlen |= 0x80;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d006      	beq.n	800737c <mg_mqtt_send_header+0x54>
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007376:	b2da      	uxtb	r2, r3
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	701a      	strb	r2, [r3, #0]
    vlen++;
 800737c:	69fb      	ldr	r3, [r7, #28]
 800737e:	3301      	adds	r3, #1
 8007380:	61fb      	str	r3, [r7, #28]
  } while (len > 0 && vlen < &buf[sizeof(buf)]);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d005      	beq.n	8007394 <mg_mqtt_send_header+0x6c>
 8007388:	f107 0314 	add.w	r3, r7, #20
 800738c:	3305      	adds	r3, #5
 800738e:	69fa      	ldr	r2, [r7, #28]
 8007390:	429a      	cmp	r2, r3
 8007392:	d3df      	bcc.n	8007354 <mg_mqtt_send_header+0x2c>
  mg_send(c, buf, (size_t) (vlen - buf));
 8007394:	f107 0314 	add.w	r3, r7, #20
 8007398:	69fa      	ldr	r2, [r7, #28]
 800739a:	1ad3      	subs	r3, r2, r3
 800739c:	461a      	mov	r2, r3
 800739e:	f107 0314 	add.w	r3, r7, #20
 80073a2:	4619      	mov	r1, r3
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f007 f9a9 	bl	800e6fc <mg_send>
}
 80073aa:	bf00      	nop
 80073ac:	3720      	adds	r7, #32
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}

080073b2 <mg_send_u16>:

static void mg_send_u16(struct mg_connection *c, uint16_t value) {
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b082      	sub	sp, #8
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
 80073ba:	460b      	mov	r3, r1
 80073bc:	807b      	strh	r3, [r7, #2]
  mg_send(c, &value, sizeof(value));
 80073be:	1cbb      	adds	r3, r7, #2
 80073c0:	2202      	movs	r2, #2
 80073c2:	4619      	mov	r1, r3
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f007 f999 	bl	800e6fc <mg_send>
}
 80073ca:	bf00      	nop
 80073cc:	3708      	adds	r7, #8
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <mg_mqtt_login>:

void mg_mqtt_login(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b092      	sub	sp, #72	; 0x48
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
 80073da:	6039      	str	r1, [r7, #0]
  char rnd[10], client_id[21], zero = 0;
 80073dc:	2300      	movs	r3, #0
 80073de:	77fb      	strb	r3, [r7, #31]
  struct mg_str cid = opts->client_id;
 80073e0:	683a      	ldr	r2, [r7, #0]
 80073e2:	f107 0314 	add.w	r3, r7, #20
 80073e6:	3210      	adds	r2, #16
 80073e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80073ec:	e883 0003 	stmia.w	r3, {r0, r1}
  uint32_t total_len = 7 + 1 + 2 + 2;
 80073f0:	230c      	movs	r3, #12
 80073f2:	647b      	str	r3, [r7, #68]	; 0x44
  uint8_t hdr[8] = {0, 4, 'M', 'Q', 'T', 'T', opts->version, 0};
 80073f4:	2300      	movs	r3, #0
 80073f6:	733b      	strb	r3, [r7, #12]
 80073f8:	2304      	movs	r3, #4
 80073fa:	737b      	strb	r3, [r7, #13]
 80073fc:	234d      	movs	r3, #77	; 0x4d
 80073fe:	73bb      	strb	r3, [r7, #14]
 8007400:	2351      	movs	r3, #81	; 0x51
 8007402:	73fb      	strb	r3, [r7, #15]
 8007404:	2354      	movs	r3, #84	; 0x54
 8007406:	743b      	strb	r3, [r7, #16]
 8007408:	2354      	movs	r3, #84	; 0x54
 800740a:	747b      	strb	r3, [r7, #17]
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8007412:	74bb      	strb	r3, [r7, #18]
 8007414:	2300      	movs	r3, #0
 8007416:	74fb      	strb	r3, [r7, #19]

  if (cid.len == 0) {
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d118      	bne.n	8007450 <mg_mqtt_login+0x7e>
    mg_random(rnd, sizeof(rnd));
 800741e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007422:	210a      	movs	r1, #10
 8007424:	4618      	mov	r0, r3
 8007426:	f003 fe87 	bl	800b138 <mg_random>
    mg_hex(rnd, sizeof(rnd), client_id);
 800742a:	f107 0220 	add.w	r2, r7, #32
 800742e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007432:	210a      	movs	r1, #10
 8007434:	4618      	mov	r0, r3
 8007436:	f003 fa2f 	bl	800a898 <mg_hex>
    client_id[sizeof(client_id) - 1] = '\0';
 800743a:	2300      	movs	r3, #0
 800743c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    cid = mg_str(client_id);
 8007440:	f107 0314 	add.w	r3, r7, #20
 8007444:	f107 0220 	add.w	r2, r7, #32
 8007448:	4611      	mov	r1, r2
 800744a:	4618      	mov	r0, r3
 800744c:	f002 ff26 	bl	800a29c <mg_str_s>
  }

  if (hdr[6] == 0) hdr[6] = 4;  // If version is not set, use 4 (3.1.1)
 8007450:	7cbb      	ldrb	r3, [r7, #18]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d101      	bne.n	800745a <mg_mqtt_login+0x88>
 8007456:	2304      	movs	r3, #4
 8007458:	74bb      	strb	r3, [r7, #18]
  c->is_mqtt5 = hdr[6] == 5;    // Set version 5 flag
 800745a:	7cbb      	ldrb	r3, [r7, #18]
 800745c:	2b05      	cmp	r3, #5
 800745e:	bf0c      	ite	eq
 8007460:	2301      	moveq	r3, #1
 8007462:	2300      	movne	r3, #0
 8007464:	b2d9      	uxtb	r1, r3
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	f892 30b1 	ldrb.w	r3, [r2, #177]	; 0xb1
 800746c:	f361 0341 	bfi	r3, r1, #1, #1
 8007470:	f882 30b1 	strb.w	r3, [r2, #177]	; 0xb1
  hdr[7] = (uint8_t) ((opts->will_qos & 3) << 3);  // Connection flags
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800747a:	00db      	lsls	r3, r3, #3
 800747c:	b2db      	uxtb	r3, r3
 800747e:	f003 0318 	and.w	r3, r3, #24
 8007482:	b2db      	uxtb	r3, r3
 8007484:	74fb      	strb	r3, [r7, #19]
  if (opts->user.len > 0) {
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00a      	beq.n	80074a4 <mg_mqtt_login+0xd2>
    total_len += 2 + (uint32_t) opts->user.len;
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	685a      	ldr	r2, [r3, #4]
 8007492:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007494:	4413      	add	r3, r2
 8007496:	3302      	adds	r3, #2
 8007498:	647b      	str	r3, [r7, #68]	; 0x44
    hdr[7] |= MQTT_HAS_USER_NAME;
 800749a:	7cfb      	ldrb	r3, [r7, #19]
 800749c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	74fb      	strb	r3, [r7, #19]
  }
  if (opts->pass.len > 0) {
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00a      	beq.n	80074c2 <mg_mqtt_login+0xf0>
    total_len += 2 + (uint32_t) opts->pass.len;
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	68da      	ldr	r2, [r3, #12]
 80074b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074b2:	4413      	add	r3, r2
 80074b4:	3302      	adds	r3, #2
 80074b6:	647b      	str	r3, [r7, #68]	; 0x44
    hdr[7] |= MQTT_HAS_PASSWORD;
 80074b8:	7cfb      	ldrb	r3, [r7, #19]
 80074ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	74fb      	strb	r3, [r7, #19]
  }
  if (opts->will_topic.len > 0 && opts->will_message.len > 0) {
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	69db      	ldr	r3, [r3, #28]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d011      	beq.n	80074ee <mg_mqtt_login+0x11c>
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00d      	beq.n	80074ee <mg_mqtt_login+0x11c>
    total_len +=
        4 + (uint32_t) opts->will_topic.len + (uint32_t) opts->will_message.len;
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	69da      	ldr	r2, [r3, #28]
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074da:	441a      	add	r2, r3
    total_len +=
 80074dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074de:	4413      	add	r3, r2
 80074e0:	3304      	adds	r3, #4
 80074e2:	647b      	str	r3, [r7, #68]	; 0x44
    hdr[7] |= MQTT_HAS_WILL;
 80074e4:	7cfb      	ldrb	r3, [r7, #19]
 80074e6:	f043 0304 	orr.w	r3, r3, #4
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	74fb      	strb	r3, [r7, #19]
  }
  if (opts->clean || cid.len == 0) hdr[7] |= MQTT_CLEAN_SESSION;
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d102      	bne.n	80074fe <mg_mqtt_login+0x12c>
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d104      	bne.n	8007508 <mg_mqtt_login+0x136>
 80074fe:	7cfb      	ldrb	r3, [r7, #19]
 8007500:	f043 0302 	orr.w	r3, r3, #2
 8007504:	b2db      	uxtb	r3, r3
 8007506:	74fb      	strb	r3, [r7, #19]
  if (opts->will_retain) hdr[7] |= MQTT_WILL_RETAIN;
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800750e:	2b00      	cmp	r3, #0
 8007510:	d004      	beq.n	800751c <mg_mqtt_login+0x14a>
 8007512:	7cfb      	ldrb	r3, [r7, #19]
 8007514:	f043 0320 	orr.w	r3, r3, #32
 8007518:	b2db      	uxtb	r3, r3
 800751a:	74fb      	strb	r3, [r7, #19]
  total_len += (uint32_t) cid.len;
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007520:	4413      	add	r3, r2
 8007522:	647b      	str	r3, [r7, #68]	; 0x44
  if (c->is_mqtt5) total_len += 1U + (hdr[7] & MQTT_HAS_WILL ? 1U : 0);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800752a:	f003 0302 	and.w	r3, r3, #2
 800752e:	b2db      	uxtb	r3, r3
 8007530:	2b00      	cmp	r3, #0
 8007532:	d007      	beq.n	8007544 <mg_mqtt_login+0x172>
 8007534:	7cfb      	ldrb	r3, [r7, #19]
 8007536:	109b      	asrs	r3, r3, #2
 8007538:	f003 0201 	and.w	r2, r3, #1
 800753c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800753e:	4413      	add	r3, r2
 8007540:	3301      	adds	r3, #1
 8007542:	647b      	str	r3, [r7, #68]	; 0x44

  mg_mqtt_send_header(c, MQTT_CMD_CONNECT, 0, total_len);
 8007544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007546:	2200      	movs	r2, #0
 8007548:	2101      	movs	r1, #1
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f7ff feec 	bl	8007328 <mg_mqtt_send_header>
  mg_send(c, hdr, sizeof(hdr));
 8007550:	f107 030c 	add.w	r3, r7, #12
 8007554:	2208      	movs	r2, #8
 8007556:	4619      	mov	r1, r3
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f007 f8cf 	bl	800e6fc <mg_send>
  // keepalive == 0 means "do not disconnect us!"
  mg_send_u16(c, mg_htons((uint16_t) opts->keepalive));
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007562:	4618      	mov	r0, r3
 8007564:	f003 fe22 	bl	800b1ac <mg_ntohs>
 8007568:	4603      	mov	r3, r0
 800756a:	4619      	mov	r1, r3
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f7ff ff20 	bl	80073b2 <mg_send_u16>

  if (c->is_mqtt5) mg_send(c, &zero, sizeof(zero));  // V5 properties
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007578:	f003 0302 	and.w	r3, r3, #2
 800757c:	b2db      	uxtb	r3, r3
 800757e:	2b00      	cmp	r3, #0
 8007580:	d006      	beq.n	8007590 <mg_mqtt_login+0x1be>
 8007582:	f107 031f 	add.w	r3, r7, #31
 8007586:	2201      	movs	r2, #1
 8007588:	4619      	mov	r1, r3
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f007 f8b6 	bl	800e6fc <mg_send>
  mg_send_u16(c, mg_htons((uint16_t) cid.len));
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	b29b      	uxth	r3, r3
 8007594:	4618      	mov	r0, r3
 8007596:	f003 fe09 	bl	800b1ac <mg_ntohs>
 800759a:	4603      	mov	r3, r0
 800759c:	4619      	mov	r1, r3
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f7ff ff07 	bl	80073b2 <mg_send_u16>
  mg_send(c, cid.ptr, cid.len);
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	69ba      	ldr	r2, [r7, #24]
 80075a8:	4619      	mov	r1, r3
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f007 f8a6 	bl	800e6fc <mg_send>

  if (hdr[7] & MQTT_HAS_WILL) {
 80075b0:	7cfb      	ldrb	r3, [r7, #19]
 80075b2:	f003 0304 	and.w	r3, r3, #4
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d034      	beq.n	8007624 <mg_mqtt_login+0x252>
    if (c->is_mqtt5) mg_send(c, &zero, sizeof(zero));  // will props
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80075c0:	f003 0302 	and.w	r3, r3, #2
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d006      	beq.n	80075d8 <mg_mqtt_login+0x206>
 80075ca:	f107 031f 	add.w	r3, r7, #31
 80075ce:	2201      	movs	r2, #1
 80075d0:	4619      	mov	r1, r3
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f007 f892 	bl	800e6fc <mg_send>
    mg_send_u16(c, mg_htons((uint16_t) opts->will_topic.len));
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	69db      	ldr	r3, [r3, #28]
 80075dc:	b29b      	uxth	r3, r3
 80075de:	4618      	mov	r0, r3
 80075e0:	f003 fde4 	bl	800b1ac <mg_ntohs>
 80075e4:	4603      	mov	r3, r0
 80075e6:	4619      	mov	r1, r3
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f7ff fee2 	bl	80073b2 <mg_send_u16>
    mg_send(c, opts->will_topic.ptr, opts->will_topic.len);
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	6999      	ldr	r1, [r3, #24]
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	69db      	ldr	r3, [r3, #28]
 80075f6:	461a      	mov	r2, r3
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f007 f87f 	bl	800e6fc <mg_send>
    mg_send_u16(c, mg_htons((uint16_t) opts->will_message.len));
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007602:	b29b      	uxth	r3, r3
 8007604:	4618      	mov	r0, r3
 8007606:	f003 fdd1 	bl	800b1ac <mg_ntohs>
 800760a:	4603      	mov	r3, r0
 800760c:	4619      	mov	r1, r3
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f7ff fecf 	bl	80073b2 <mg_send_u16>
    mg_send(c, opts->will_message.ptr, opts->will_message.len);
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	6a19      	ldr	r1, [r3, #32]
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761c:	461a      	mov	r2, r3
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f007 f86c 	bl	800e6fc <mg_send>
  }
  if (opts->user.len > 0) {
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d012      	beq.n	8007652 <mg_mqtt_login+0x280>
    mg_send_u16(c, mg_htons((uint16_t) opts->user.len));
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	b29b      	uxth	r3, r3
 8007632:	4618      	mov	r0, r3
 8007634:	f003 fdba 	bl	800b1ac <mg_ntohs>
 8007638:	4603      	mov	r3, r0
 800763a:	4619      	mov	r1, r3
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f7ff feb8 	bl	80073b2 <mg_send_u16>
    mg_send(c, opts->user.ptr, opts->user.len);
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	6819      	ldr	r1, [r3, #0]
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	461a      	mov	r2, r3
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f007 f855 	bl	800e6fc <mg_send>
  }
  if (opts->pass.len > 0) {
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d012      	beq.n	8007680 <mg_mqtt_login+0x2ae>
    mg_send_u16(c, mg_htons((uint16_t) opts->pass.len));
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	b29b      	uxth	r3, r3
 8007660:	4618      	mov	r0, r3
 8007662:	f003 fda3 	bl	800b1ac <mg_ntohs>
 8007666:	4603      	mov	r3, r0
 8007668:	4619      	mov	r1, r3
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f7ff fea1 	bl	80073b2 <mg_send_u16>
    mg_send(c, opts->pass.ptr, opts->pass.len);
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	6899      	ldr	r1, [r3, #8]
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	461a      	mov	r2, r3
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f007 f83e 	bl	800e6fc <mg_send>
  }
}
 8007680:	bf00      	nop
 8007682:	3748      	adds	r7, #72	; 0x48
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <mg_mqtt_pub>:

void mg_mqtt_pub(struct mg_connection *c, struct mg_str topic,
                 struct mg_str data, int qos, bool retain) {
 8007688:	b082      	sub	sp, #8
 800768a:	b590      	push	{r4, r7, lr}
 800768c:	b089      	sub	sp, #36	; 0x24
 800768e:	af02      	add	r7, sp, #8
 8007690:	60f8      	str	r0, [r7, #12]
 8007692:	1d38      	adds	r0, r7, #4
 8007694:	e880 0006 	stmia.w	r0, {r1, r2}
 8007698:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t flags = (uint8_t) (((qos & 3) << 1) | (retain ? 1 : 0)), zero = 0;
 800769a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800769c:	005b      	lsls	r3, r3, #1
 800769e:	b25b      	sxtb	r3, r3
 80076a0:	f003 0306 	and.w	r3, r3, #6
 80076a4:	b25b      	sxtb	r3, r3
 80076a6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80076aa:	2a00      	cmp	r2, #0
 80076ac:	d001      	beq.n	80076b2 <mg_mqtt_pub+0x2a>
 80076ae:	2201      	movs	r2, #1
 80076b0:	e000      	b.n	80076b4 <mg_mqtt_pub+0x2c>
 80076b2:	2200      	movs	r2, #0
 80076b4:	4313      	orrs	r3, r2
 80076b6:	b25b      	sxtb	r3, r3
 80076b8:	74fb      	strb	r3, [r7, #19]
 80076ba:	2300      	movs	r3, #0
 80076bc:	74bb      	strb	r3, [r7, #18]
  uint32_t len = 2 + (uint32_t) topic.len + (uint32_t) data.len;
 80076be:	68ba      	ldr	r2, [r7, #8]
 80076c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c2:	4413      	add	r3, r2
 80076c4:	3302      	adds	r3, #2
 80076c6:	617b      	str	r3, [r7, #20]
  MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) topic.len, (char *) topic.ptr,
 80076c8:	4b3c      	ldr	r3, [pc, #240]	; (80077bc <mg_mqtt_pub+0x134>)
 80076ca:	f640 422f 	movw	r2, #3119	; 0xc2f
 80076ce:	493c      	ldr	r1, [pc, #240]	; (80077c0 <mg_mqtt_pub+0x138>)
 80076d0:	2003      	movs	r0, #3
 80076d2:	f7ff fce7 	bl	80070a4 <mg_log_prefix>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d00e      	beq.n	80076fa <mg_mqtt_pub+0x72>
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	461c      	mov	r4, r3
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e8:	4618      	mov	r0, r3
 80076ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ec:	9301      	str	r3, [sp, #4]
 80076ee:	9000      	str	r0, [sp, #0]
 80076f0:	4613      	mov	r3, r2
 80076f2:	4622      	mov	r2, r4
 80076f4:	4833      	ldr	r0, [pc, #204]	; (80077c4 <mg_mqtt_pub+0x13c>)
 80076f6:	f7ff fd2f 	bl	8007158 <mg_log>
            (int) data.len, (char *) data.ptr));
  if (qos > 0) len += 2;
 80076fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	dd02      	ble.n	8007706 <mg_mqtt_pub+0x7e>
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	3302      	adds	r3, #2
 8007704:	617b      	str	r3, [r7, #20]
  if (c->is_mqtt5) len++;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800770c:	f003 0302 	and.w	r3, r3, #2
 8007710:	b2db      	uxtb	r3, r3
 8007712:	2b00      	cmp	r3, #0
 8007714:	d002      	beq.n	800771c <mg_mqtt_pub+0x94>
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	3301      	adds	r3, #1
 800771a:	617b      	str	r3, [r7, #20]
  mg_mqtt_send_header(c, MQTT_CMD_PUBLISH, flags, len);
 800771c:	7cfa      	ldrb	r2, [r7, #19]
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	2103      	movs	r1, #3
 8007722:	68f8      	ldr	r0, [r7, #12]
 8007724:	f7ff fe00 	bl	8007328 <mg_mqtt_send_header>
  mg_send_u16(c, mg_htons((uint16_t) topic.len));
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	b29b      	uxth	r3, r3
 800772c:	4618      	mov	r0, r3
 800772e:	f003 fd3d 	bl	800b1ac <mg_ntohs>
 8007732:	4603      	mov	r3, r0
 8007734:	4619      	mov	r1, r3
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	f7ff fe3b 	bl	80073b2 <mg_send_u16>
  mg_send(c, topic.ptr, topic.len);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	68ba      	ldr	r2, [r7, #8]
 8007740:	4619      	mov	r1, r3
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f006 ffda 	bl	800e6fc <mg_send>
  if (qos > 0) {
 8007748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800774a:	2b00      	cmp	r3, #0
 800774c:	dd19      	ble.n	8007782 <mg_mqtt_pub+0xfa>
    if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007754:	3201      	adds	r2, #1
 8007756:	b292      	uxth	r2, r2
 8007758:	851a      	strh	r2, [r3, #40]	; 0x28
 800775a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800775c:	2b00      	cmp	r3, #0
 800775e:	d105      	bne.n	800776c <mg_mqtt_pub+0xe4>
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007766:	3201      	adds	r2, #1
 8007768:	b292      	uxth	r2, r2
 800776a:	851a      	strh	r2, [r3, #40]	; 0x28
    mg_send_u16(c, mg_htons(c->mgr->mqtt_id));
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007772:	4618      	mov	r0, r3
 8007774:	f003 fd1a 	bl	800b1ac <mg_ntohs>
 8007778:	4603      	mov	r3, r0
 800777a:	4619      	mov	r1, r3
 800777c:	68f8      	ldr	r0, [r7, #12]
 800777e:	f7ff fe18 	bl	80073b2 <mg_send_u16>
  }
  if (c->is_mqtt5) mg_send(c, &zero, sizeof(zero));
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007788:	f003 0302 	and.w	r3, r3, #2
 800778c:	b2db      	uxtb	r3, r3
 800778e:	2b00      	cmp	r3, #0
 8007790:	d006      	beq.n	80077a0 <mg_mqtt_pub+0x118>
 8007792:	f107 0312 	add.w	r3, r7, #18
 8007796:	2201      	movs	r2, #1
 8007798:	4619      	mov	r1, r3
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	f006 ffae 	bl	800e6fc <mg_send>
  mg_send(c, data.ptr, data.len);
 80077a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077a4:	4619      	mov	r1, r3
 80077a6:	68f8      	ldr	r0, [r7, #12]
 80077a8:	f006 ffa8 	bl	800e6fc <mg_send>
}
 80077ac:	bf00      	nop
 80077ae:	371c      	adds	r7, #28
 80077b0:	46bd      	mov	sp, r7
 80077b2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80077b6:	b002      	add	sp, #8
 80077b8:	4770      	bx	lr
 80077ba:	bf00      	nop
 80077bc:	080156ec 	.word	0x080156ec
 80077c0:	08013b30 	.word	0x08013b30
 80077c4:	08014ad4 	.word	0x08014ad4

080077c8 <mg_mqtt_sub>:

void mg_mqtt_sub(struct mg_connection *c, struct mg_str topic, int qos) {
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b086      	sub	sp, #24
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	1d38      	adds	r0, r7, #4
 80077d2:	e880 0006 	stmia.w	r0, {r1, r2}
 80077d6:	603b      	str	r3, [r7, #0]
  uint8_t qos_ = qos & 3, zero = 0;
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	f003 0303 	and.w	r3, r3, #3
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	74fb      	strb	r3, [r7, #19]
 80077e4:	2300      	movs	r3, #0
 80077e6:	74bb      	strb	r3, [r7, #18]
  uint32_t len = 2 + (uint32_t) topic.len + 2 + 1 + (c->is_mqtt5 ? 1 : 0);
 80077e8:	68ba      	ldr	r2, [r7, #8]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80077f0:	085b      	lsrs	r3, r3, #1
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	f003 0301 	and.w	r3, r3, #1
 80077f8:	4413      	add	r3, r2
 80077fa:	3305      	adds	r3, #5
 80077fc:	617b      	str	r3, [r7, #20]
  mg_mqtt_send_header(c, MQTT_CMD_SUBSCRIBE, 2, len);
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	2202      	movs	r2, #2
 8007802:	2108      	movs	r1, #8
 8007804:	68f8      	ldr	r0, [r7, #12]
 8007806:	f7ff fd8f 	bl	8007328 <mg_mqtt_send_header>
  if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007810:	3201      	adds	r2, #1
 8007812:	b292      	uxth	r2, r2
 8007814:	851a      	strh	r2, [r3, #40]	; 0x28
 8007816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007818:	2b00      	cmp	r3, #0
 800781a:	d105      	bne.n	8007828 <mg_mqtt_sub+0x60>
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007822:	3201      	adds	r2, #1
 8007824:	b292      	uxth	r2, r2
 8007826:	851a      	strh	r2, [r3, #40]	; 0x28
  mg_send_u16(c, mg_htons(c->mgr->mqtt_id));
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800782e:	4618      	mov	r0, r3
 8007830:	f003 fcbc 	bl	800b1ac <mg_ntohs>
 8007834:	4603      	mov	r3, r0
 8007836:	4619      	mov	r1, r3
 8007838:	68f8      	ldr	r0, [r7, #12]
 800783a:	f7ff fdba 	bl	80073b2 <mg_send_u16>
  if (c->is_mqtt5) mg_send(c, &zero, sizeof(zero));
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007844:	f003 0302 	and.w	r3, r3, #2
 8007848:	b2db      	uxtb	r3, r3
 800784a:	2b00      	cmp	r3, #0
 800784c:	d006      	beq.n	800785c <mg_mqtt_sub+0x94>
 800784e:	f107 0312 	add.w	r3, r7, #18
 8007852:	2201      	movs	r2, #1
 8007854:	4619      	mov	r1, r3
 8007856:	68f8      	ldr	r0, [r7, #12]
 8007858:	f006 ff50 	bl	800e6fc <mg_send>
  mg_send_u16(c, mg_htons((uint16_t) topic.len));
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	b29b      	uxth	r3, r3
 8007860:	4618      	mov	r0, r3
 8007862:	f003 fca3 	bl	800b1ac <mg_ntohs>
 8007866:	4603      	mov	r3, r0
 8007868:	4619      	mov	r1, r3
 800786a:	68f8      	ldr	r0, [r7, #12]
 800786c:	f7ff fda1 	bl	80073b2 <mg_send_u16>
  mg_send(c, topic.ptr, topic.len);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	68ba      	ldr	r2, [r7, #8]
 8007874:	4619      	mov	r1, r3
 8007876:	68f8      	ldr	r0, [r7, #12]
 8007878:	f006 ff40 	bl	800e6fc <mg_send>
  mg_send(c, &qos_, sizeof(qos_));
 800787c:	f107 0313 	add.w	r3, r7, #19
 8007880:	2201      	movs	r2, #1
 8007882:	4619      	mov	r1, r3
 8007884:	68f8      	ldr	r0, [r7, #12]
 8007886:	f006 ff39 	bl	800e6fc <mg_send>
}
 800788a:	bf00      	nop
 800788c:	3718      	adds	r7, #24
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <mg_mqtt_parse>:

int mg_mqtt_parse(const uint8_t *buf, size_t len, uint8_t version,
                  struct mg_mqtt_message *m) {
 8007892:	b580      	push	{r7, lr}
 8007894:	b08a      	sub	sp, #40	; 0x28
 8007896:	af00      	add	r7, sp, #0
 8007898:	60f8      	str	r0, [r7, #12]
 800789a:	60b9      	str	r1, [r7, #8]
 800789c:	603b      	str	r3, [r7, #0]
 800789e:	4613      	mov	r3, r2
 80078a0:	71fb      	strb	r3, [r7, #7]
  uint8_t lc = 0, *p, *end;
 80078a2:	2300      	movs	r3, #0
 80078a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t n = 0, len_len = 0;
 80078a8:	2300      	movs	r3, #0
 80078aa:	61fb      	str	r3, [r7, #28]
 80078ac:	2300      	movs	r3, #0
 80078ae:	61bb      	str	r3, [r7, #24]

  memset(m, 0, sizeof(*m));
 80078b0:	2220      	movs	r2, #32
 80078b2:	2100      	movs	r1, #0
 80078b4:	6838      	ldr	r0, [r7, #0]
 80078b6:	f00a ff67 	bl	8012788 <memset>
  m->dgram.ptr = (char *) buf;
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	68fa      	ldr	r2, [r7, #12]
 80078be:	611a      	str	r2, [r3, #16]
  if (len < 2) return MQTT_INCOMPLETE;
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d801      	bhi.n	80078ca <mg_mqtt_parse+0x38>
 80078c6:	2301      	movs	r3, #1
 80078c8:	e0e7      	b.n	8007a9a <mg_mqtt_parse+0x208>
  m->cmd = (uint8_t) (buf[0] >> 4);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	091b      	lsrs	r3, r3, #4
 80078d0:	b2da      	uxtb	r2, r3
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	769a      	strb	r2, [r3, #26]
  m->qos = (buf[0] >> 1) & 3;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	085b      	lsrs	r3, r3, #1
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	f003 0303 	and.w	r3, r3, #3
 80078e2:	b2da      	uxtb	r2, r3
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	76da      	strb	r2, [r3, #27]

  n = len_len = 0;
 80078e8:	2300      	movs	r3, #0
 80078ea:	61bb      	str	r3, [r7, #24]
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	61fb      	str	r3, [r7, #28]
  p = (uint8_t *) buf + 1;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	3301      	adds	r3, #1
 80078f4:	623b      	str	r3, [r7, #32]
  while ((size_t) (p - buf) < len) {
 80078f6:	e01f      	b.n	8007938 <mg_mqtt_parse+0xa6>
    lc = *((uint8_t *) p++);
 80078f8:	6a3b      	ldr	r3, [r7, #32]
 80078fa:	1c5a      	adds	r2, r3, #1
 80078fc:	623a      	str	r2, [r7, #32]
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    n += (uint32_t) ((lc & 0x7f) << 7 * len_len);
 8007904:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007908:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 800790c:	69ba      	ldr	r2, [r7, #24]
 800790e:	4613      	mov	r3, r2
 8007910:	00db      	lsls	r3, r3, #3
 8007912:	1a9b      	subs	r3, r3, r2
 8007914:	fa01 f303 	lsl.w	r3, r1, r3
 8007918:	461a      	mov	r2, r3
 800791a:	69fb      	ldr	r3, [r7, #28]
 800791c:	4413      	add	r3, r2
 800791e:	61fb      	str	r3, [r7, #28]
    len_len++;
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	3301      	adds	r3, #1
 8007924:	61bb      	str	r3, [r7, #24]
    if (!(lc & 0x80)) break;
 8007926:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800792a:	2b00      	cmp	r3, #0
 800792c:	da0c      	bge.n	8007948 <mg_mqtt_parse+0xb6>
    if (len_len >= 4) return MQTT_MALFORMED;
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	2b03      	cmp	r3, #3
 8007932:	d901      	bls.n	8007938 <mg_mqtt_parse+0xa6>
 8007934:	2302      	movs	r3, #2
 8007936:	e0b0      	b.n	8007a9a <mg_mqtt_parse+0x208>
  while ((size_t) (p - buf) < len) {
 8007938:	6a3a      	ldr	r2, [r7, #32]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	1ad3      	subs	r3, r2, r3
 800793e:	461a      	mov	r2, r3
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	4293      	cmp	r3, r2
 8007944:	d8d8      	bhi.n	80078f8 <mg_mqtt_parse+0x66>
 8007946:	e000      	b.n	800794a <mg_mqtt_parse+0xb8>
    if (!(lc & 0x80)) break;
 8007948:	bf00      	nop
  }
  end = p + n;
 800794a:	6a3a      	ldr	r2, [r7, #32]
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	4413      	add	r3, r2
 8007950:	617b      	str	r3, [r7, #20]
  if ((lc & 0x80) || (end > buf + len)) return MQTT_INCOMPLETE;
 8007952:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007956:	2b00      	cmp	r3, #0
 8007958:	db05      	blt.n	8007966 <mg_mqtt_parse+0xd4>
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	4413      	add	r3, r2
 8007960:	697a      	ldr	r2, [r7, #20]
 8007962:	429a      	cmp	r2, r3
 8007964:	d901      	bls.n	800796a <mg_mqtt_parse+0xd8>
 8007966:	2301      	movs	r3, #1
 8007968:	e097      	b.n	8007a9a <mg_mqtt_parse+0x208>
  m->dgram.len = (size_t) (end - buf);
 800796a:	697a      	ldr	r2, [r7, #20]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	1ad3      	subs	r3, r2, r3
 8007970:	461a      	mov	r2, r3
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	615a      	str	r2, [r3, #20]

  switch (m->cmd) {
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	7e9b      	ldrb	r3, [r3, #26]
 800797a:	2b0b      	cmp	r3, #11
 800797c:	f300 808b 	bgt.w	8007a96 <mg_mqtt_parse+0x204>
 8007980:	2b04      	cmp	r3, #4
 8007982:	da10      	bge.n	80079a6 <mg_mqtt_parse+0x114>
 8007984:	2b02      	cmp	r3, #2
 8007986:	d002      	beq.n	800798e <mg_mqtt_parse+0xfc>
 8007988:	2b03      	cmp	r3, #3
 800798a:	d024      	beq.n	80079d6 <mg_mqtt_parse+0x144>
      m->data.ptr = (char *) p;
      m->data.len = (size_t) (end - p);
      break;
    }
    default:
      break;
 800798c:	e083      	b.n	8007a96 <mg_mqtt_parse+0x204>
      if (end - p < 2) return MQTT_MALFORMED;
 800798e:	697a      	ldr	r2, [r7, #20]
 8007990:	6a3b      	ldr	r3, [r7, #32]
 8007992:	1ad3      	subs	r3, r2, r3
 8007994:	2b01      	cmp	r3, #1
 8007996:	dc01      	bgt.n	800799c <mg_mqtt_parse+0x10a>
 8007998:	2302      	movs	r3, #2
 800799a:	e07e      	b.n	8007a9a <mg_mqtt_parse+0x208>
      m->ack = p[1];
 800799c:	6a3b      	ldr	r3, [r7, #32]
 800799e:	785a      	ldrb	r2, [r3, #1]
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	771a      	strb	r2, [r3, #28]
      break;
 80079a4:	e078      	b.n	8007a98 <mg_mqtt_parse+0x206>
      if (p + 2 > end) return MQTT_MALFORMED;
 80079a6:	6a3b      	ldr	r3, [r7, #32]
 80079a8:	3302      	adds	r3, #2
 80079aa:	697a      	ldr	r2, [r7, #20]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d201      	bcs.n	80079b4 <mg_mqtt_parse+0x122>
 80079b0:	2302      	movs	r3, #2
 80079b2:	e072      	b.n	8007a9a <mg_mqtt_parse+0x208>
      m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 80079b4:	6a3b      	ldr	r3, [r7, #32]
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	021b      	lsls	r3, r3, #8
 80079ba:	b21a      	sxth	r2, r3
 80079bc:	6a3b      	ldr	r3, [r7, #32]
 80079be:	3301      	adds	r3, #1
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	b21b      	sxth	r3, r3
 80079c4:	4313      	orrs	r3, r2
 80079c6:	b21b      	sxth	r3, r3
 80079c8:	b29a      	uxth	r2, r3
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	831a      	strh	r2, [r3, #24]
      p += 2;
 80079ce:	6a3b      	ldr	r3, [r7, #32]
 80079d0:	3302      	adds	r3, #2
 80079d2:	623b      	str	r3, [r7, #32]
      break;
 80079d4:	e060      	b.n	8007a98 <mg_mqtt_parse+0x206>
      if (p + 2 > end) return MQTT_MALFORMED;
 80079d6:	6a3b      	ldr	r3, [r7, #32]
 80079d8:	3302      	adds	r3, #2
 80079da:	697a      	ldr	r2, [r7, #20]
 80079dc:	429a      	cmp	r2, r3
 80079de:	d201      	bcs.n	80079e4 <mg_mqtt_parse+0x152>
 80079e0:	2302      	movs	r3, #2
 80079e2:	e05a      	b.n	8007a9a <mg_mqtt_parse+0x208>
      m->topic.len = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 80079e4:	6a3b      	ldr	r3, [r7, #32]
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	021b      	lsls	r3, r3, #8
 80079ea:	b21a      	sxth	r2, r3
 80079ec:	6a3b      	ldr	r3, [r7, #32]
 80079ee:	3301      	adds	r3, #1
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	b21b      	sxth	r3, r3
 80079f4:	4313      	orrs	r3, r2
 80079f6:	b21b      	sxth	r3, r3
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	461a      	mov	r2, r3
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	605a      	str	r2, [r3, #4]
      m->topic.ptr = (char *) p + 2;
 8007a00:	6a3b      	ldr	r3, [r7, #32]
 8007a02:	1c9a      	adds	r2, r3, #2
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	601a      	str	r2, [r3, #0]
      p += 2 + m->topic.len;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	3302      	adds	r3, #2
 8007a0e:	6a3a      	ldr	r2, [r7, #32]
 8007a10:	4413      	add	r3, r2
 8007a12:	623b      	str	r3, [r7, #32]
      if (p > end) return MQTT_MALFORMED;
 8007a14:	6a3a      	ldr	r2, [r7, #32]
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d901      	bls.n	8007a20 <mg_mqtt_parse+0x18e>
 8007a1c:	2302      	movs	r3, #2
 8007a1e:	e03c      	b.n	8007a9a <mg_mqtt_parse+0x208>
      if (m->qos > 0) {
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	7edb      	ldrb	r3, [r3, #27]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d016      	beq.n	8007a56 <mg_mqtt_parse+0x1c4>
        if (p + 2 > end) return MQTT_MALFORMED;
 8007a28:	6a3b      	ldr	r3, [r7, #32]
 8007a2a:	3302      	adds	r3, #2
 8007a2c:	697a      	ldr	r2, [r7, #20]
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d201      	bcs.n	8007a36 <mg_mqtt_parse+0x1a4>
 8007a32:	2302      	movs	r3, #2
 8007a34:	e031      	b.n	8007a9a <mg_mqtt_parse+0x208>
        m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 8007a36:	6a3b      	ldr	r3, [r7, #32]
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	021b      	lsls	r3, r3, #8
 8007a3c:	b21a      	sxth	r2, r3
 8007a3e:	6a3b      	ldr	r3, [r7, #32]
 8007a40:	3301      	adds	r3, #1
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	b21b      	sxth	r3, r3
 8007a46:	4313      	orrs	r3, r2
 8007a48:	b21b      	sxth	r3, r3
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	831a      	strh	r2, [r3, #24]
        p += 2;
 8007a50:	6a3b      	ldr	r3, [r7, #32]
 8007a52:	3302      	adds	r3, #2
 8007a54:	623b      	str	r3, [r7, #32]
      if (p > end) return MQTT_MALFORMED;
 8007a56:	6a3a      	ldr	r2, [r7, #32]
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d901      	bls.n	8007a62 <mg_mqtt_parse+0x1d0>
 8007a5e:	2302      	movs	r3, #2
 8007a60:	e01b      	b.n	8007a9a <mg_mqtt_parse+0x208>
      if (version == 5) p += 1 + p[0];  // Skip options
 8007a62:	79fb      	ldrb	r3, [r7, #7]
 8007a64:	2b05      	cmp	r3, #5
 8007a66:	d106      	bne.n	8007a76 <mg_mqtt_parse+0x1e4>
 8007a68:	6a3b      	ldr	r3, [r7, #32]
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	461a      	mov	r2, r3
 8007a70:	6a3b      	ldr	r3, [r7, #32]
 8007a72:	4413      	add	r3, r2
 8007a74:	623b      	str	r3, [r7, #32]
      if (p > end) return MQTT_MALFORMED;
 8007a76:	6a3a      	ldr	r2, [r7, #32]
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d901      	bls.n	8007a82 <mg_mqtt_parse+0x1f0>
 8007a7e:	2302      	movs	r3, #2
 8007a80:	e00b      	b.n	8007a9a <mg_mqtt_parse+0x208>
      m->data.ptr = (char *) p;
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	6a3a      	ldr	r2, [r7, #32]
 8007a86:	609a      	str	r2, [r3, #8]
      m->data.len = (size_t) (end - p);
 8007a88:	697a      	ldr	r2, [r7, #20]
 8007a8a:	6a3b      	ldr	r3, [r7, #32]
 8007a8c:	1ad3      	subs	r3, r2, r3
 8007a8e:	461a      	mov	r2, r3
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	60da      	str	r2, [r3, #12]
      break;
 8007a94:	e000      	b.n	8007a98 <mg_mqtt_parse+0x206>
      break;
 8007a96:	bf00      	nop
  }
  return MQTT_OK;
 8007a98:	2300      	movs	r3, #0
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3728      	adds	r7, #40	; 0x28
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
	...

08007aa4 <mqtt_cb>:

static void mqtt_cb(struct mg_connection *c, int ev, void *ev_data,
                    void *fn_data) {
 8007aa4:	b590      	push	{r4, r7, lr}
 8007aa6:	b093      	sub	sp, #76	; 0x4c
 8007aa8:	af02      	add	r7, sp, #8
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	607a      	str	r2, [r7, #4]
 8007ab0:	603b      	str	r3, [r7, #0]
  if (ev == MG_EV_READ) {
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	2b07      	cmp	r3, #7
 8007ab6:	f040 80d9 	bne.w	8007c6c <mqtt_cb+0x1c8>
    for (;;) {
      uint8_t version = c->is_mqtt5 ? 5 : 4;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007ac0:	f003 0302 	and.w	r3, r3, #2
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d001      	beq.n	8007ace <mqtt_cb+0x2a>
 8007aca:	2305      	movs	r3, #5
 8007acc:	e000      	b.n	8007ad0 <mqtt_cb+0x2c>
 8007ace:	2304      	movs	r3, #4
 8007ad0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      struct mg_mqtt_message mm;
      int rc = mg_mqtt_parse(c->recv.buf, c->recv.len, version, &mm);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007adc:	f107 0314 	add.w	r3, r7, #20
 8007ae0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8007ae4:	f7ff fed5 	bl	8007892 <mg_mqtt_parse>
 8007ae8:	63b8      	str	r0, [r7, #56]	; 0x38
      if (rc == MQTT_MALFORMED) {
 8007aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aec:	2b02      	cmp	r3, #2
 8007aee:	d117      	bne.n	8007b20 <mqtt_cb+0x7c>
        MG_ERROR(("%lu MQTT malformed message", c->id));
 8007af0:	4b60      	ldr	r3, [pc, #384]	; (8007c74 <mqtt_cb+0x1d0>)
 8007af2:	f640 4293 	movw	r2, #3219	; 0xc93
 8007af6:	4960      	ldr	r1, [pc, #384]	; (8007c78 <mqtt_cb+0x1d4>)
 8007af8:	2001      	movs	r0, #1
 8007afa:	f7ff fad3 	bl	80070a4 <mg_log_prefix>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d005      	beq.n	8007b10 <mqtt_cb+0x6c>
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b08:	4619      	mov	r1, r3
 8007b0a:	485c      	ldr	r0, [pc, #368]	; (8007c7c <mqtt_cb+0x1d8>)
 8007b0c:	f7ff fb24 	bl	8007158 <mg_log>
        c->is_closing = 1;
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	f892 30b1 	ldrb.w	r3, [r2, #177]	; 0xb1
 8007b16:	f043 0310 	orr.w	r3, r3, #16
 8007b1a:	f882 30b1 	strb.w	r3, [r2, #177]	; 0xb1
        break;
 8007b1e:	e0a5      	b.n	8007c6c <mqtt_cb+0x1c8>
      } else if (rc == MQTT_OK) {
 8007b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	f040 80a1 	bne.w	8007c6a <mqtt_cb+0x1c6>
        MG_VERBOSE(("%lu MQTT CMD %d len %d [%.*s]", c->id, mm.cmd,
 8007b28:	4b52      	ldr	r3, [pc, #328]	; (8007c74 <mqtt_cb+0x1d0>)
 8007b2a:	f640 4297 	movw	r2, #3223	; 0xc97
 8007b2e:	4952      	ldr	r1, [pc, #328]	; (8007c78 <mqtt_cb+0x1d4>)
 8007b30:	2004      	movs	r0, #4
 8007b32:	f7ff fab7 	bl	80070a4 <mg_log_prefix>
 8007b36:	4603      	mov	r3, r0
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d010      	beq.n	8007b5e <mqtt_cb+0xba>
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8007b40:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007b44:	4618      	mov	r0, r3
 8007b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b48:	461c      	mov	r4, r3
 8007b4a:	6a3b      	ldr	r3, [r7, #32]
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	9301      	str	r3, [sp, #4]
 8007b52:	9200      	str	r2, [sp, #0]
 8007b54:	4623      	mov	r3, r4
 8007b56:	4602      	mov	r2, r0
 8007b58:	4849      	ldr	r0, [pc, #292]	; (8007c80 <mqtt_cb+0x1dc>)
 8007b5a:	f7ff fafd 	bl	8007158 <mg_log>
                    (int) mm.dgram.len, (int) mm.data.len, mm.data.ptr));
        switch (mm.cmd) {
 8007b5e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007b62:	2b02      	cmp	r3, #2
 8007b64:	d002      	beq.n	8007b6c <mqtt_cb+0xc8>
 8007b66:	2b03      	cmp	r3, #3
 8007b68:	d037      	beq.n	8007bda <mqtt_cb+0x136>
 8007b6a:	e06f      	b.n	8007c4c <mqtt_cb+0x1a8>
          case MQTT_CMD_CONNACK:
            mg_call(c, MG_EV_MQTT_OPEN, &mm.ack);
 8007b6c:	f107 0314 	add.w	r3, r7, #20
 8007b70:	331c      	adds	r3, #28
 8007b72:	461a      	mov	r2, r3
 8007b74:	2111      	movs	r1, #17
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f7fa fb82 	bl	8002280 <mg_call>
            if (mm.ack == 0) {
 8007b7c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d110      	bne.n	8007ba6 <mqtt_cb+0x102>
              MG_DEBUG(("%lu Connected", c->id));
 8007b84:	4b3b      	ldr	r3, [pc, #236]	; (8007c74 <mqtt_cb+0x1d0>)
 8007b86:	f640 429d 	movw	r2, #3229	; 0xc9d
 8007b8a:	493b      	ldr	r1, [pc, #236]	; (8007c78 <mqtt_cb+0x1d4>)
 8007b8c:	2003      	movs	r0, #3
 8007b8e:	f7ff fa89 	bl	80070a4 <mg_log_prefix>
 8007b92:	4603      	mov	r3, r0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d058      	beq.n	8007c4a <mqtt_cb+0x1a6>
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	4839      	ldr	r0, [pc, #228]	; (8007c84 <mqtt_cb+0x1e0>)
 8007ba0:	f7ff fada 	bl	8007158 <mg_log>
            } else {
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
              c->is_closing = 1;
            }
            break;
 8007ba4:	e051      	b.n	8007c4a <mqtt_cb+0x1a6>
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
 8007ba6:	4b33      	ldr	r3, [pc, #204]	; (8007c74 <mqtt_cb+0x1d0>)
 8007ba8:	f640 429f 	movw	r2, #3231	; 0xc9f
 8007bac:	4932      	ldr	r1, [pc, #200]	; (8007c78 <mqtt_cb+0x1d4>)
 8007bae:	2001      	movs	r0, #1
 8007bb0:	f7ff fa78 	bl	80070a4 <mg_log_prefix>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d007      	beq.n	8007bca <mqtt_cb+0x126>
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bbe:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	4830      	ldr	r0, [pc, #192]	; (8007c88 <mqtt_cb+0x1e4>)
 8007bc6:	f7ff fac7 	bl	8007158 <mg_log>
              c->is_closing = 1;
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	f892 30b1 	ldrb.w	r3, [r2, #177]	; 0xb1
 8007bd0:	f043 0310 	orr.w	r3, r3, #16
 8007bd4:	f882 30b1 	strb.w	r3, [r2, #177]	; 0xb1
            break;
 8007bd8:	e037      	b.n	8007c4a <mqtt_cb+0x1a6>
          case MQTT_CMD_PUBLISH: {
            MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) mm.topic.len,
 8007bda:	4b26      	ldr	r3, [pc, #152]	; (8007c74 <mqtt_cb+0x1d0>)
 8007bdc:	f640 42a4 	movw	r2, #3236	; 0xca4
 8007be0:	4925      	ldr	r1, [pc, #148]	; (8007c78 <mqtt_cb+0x1d4>)
 8007be2:	2003      	movs	r0, #3
 8007be4:	f7ff fa5e 	bl	80070a4 <mg_log_prefix>
 8007be8:	4603      	mov	r3, r0
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00e      	beq.n	8007c0c <mqtt_cb+0x168>
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	461c      	mov	r4, r3
 8007bf6:	697a      	ldr	r2, [r7, #20]
 8007bf8:	6a3b      	ldr	r3, [r7, #32]
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	69fb      	ldr	r3, [r7, #28]
 8007bfe:	9301      	str	r3, [sp, #4]
 8007c00:	9000      	str	r0, [sp, #0]
 8007c02:	4613      	mov	r3, r2
 8007c04:	4622      	mov	r2, r4
 8007c06:	4821      	ldr	r0, [pc, #132]	; (8007c8c <mqtt_cb+0x1e8>)
 8007c08:	f7ff faa6 	bl	8007158 <mg_log>
                      mm.topic.ptr, (int) mm.data.len, mm.data.ptr));
            if (mm.qos > 0) {
 8007c0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d012      	beq.n	8007c3a <mqtt_cb+0x196>
              uint16_t id = mg_htons(mm.id);
 8007c14:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007c16:	4618      	mov	r0, r3
 8007c18:	f003 fac8 	bl	800b1ac <mg_ntohs>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	86fb      	strh	r3, [r7, #54]	; 0x36
              mg_mqtt_send_header(c, MQTT_CMD_PUBACK, 0, sizeof(id));
 8007c20:	2302      	movs	r3, #2
 8007c22:	2200      	movs	r2, #0
 8007c24:	2104      	movs	r1, #4
 8007c26:	68f8      	ldr	r0, [r7, #12]
 8007c28:	f7ff fb7e 	bl	8007328 <mg_mqtt_send_header>
              mg_send(c, &id, sizeof(id));
 8007c2c:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8007c30:	2202      	movs	r2, #2
 8007c32:	4619      	mov	r1, r3
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	f006 fd61 	bl	800e6fc <mg_send>
            }
            mg_call(c, MG_EV_MQTT_MSG, &mm);
 8007c3a:	f107 0314 	add.w	r3, r7, #20
 8007c3e:	461a      	mov	r2, r3
 8007c40:	2110      	movs	r1, #16
 8007c42:	68f8      	ldr	r0, [r7, #12]
 8007c44:	f7fa fb1c 	bl	8002280 <mg_call>
            break;
 8007c48:	e000      	b.n	8007c4c <mqtt_cb+0x1a8>
            break;
 8007c4a:	bf00      	nop
          }
        }
        mg_call(c, MG_EV_MQTT_CMD, &mm);
 8007c4c:	f107 0314 	add.w	r3, r7, #20
 8007c50:	461a      	mov	r2, r3
 8007c52:	210f      	movs	r1, #15
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	f7fa fb13 	bl	8002280 <mg_call>
        mg_iobuf_del(&c->recv, 0, mm.dgram.len);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	3348      	adds	r3, #72	; 0x48
 8007c5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c60:	2100      	movs	r1, #0
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7fe fc02 	bl	800646c <mg_iobuf_del>
    for (;;) {
 8007c68:	e727      	b.n	8007aba <mqtt_cb+0x16>
      } else {
        break;
 8007c6a:	bf00      	nop
      }
    }
  }
  (void) ev_data;
  (void) fn_data;
}
 8007c6c:	bf00      	nop
 8007c6e:	3744      	adds	r7, #68	; 0x44
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd90      	pop	{r4, r7, pc}
 8007c74:	080156f8 	.word	0x080156f8
 8007c78:	08013b30 	.word	0x08013b30
 8007c7c:	08014aec 	.word	0x08014aec
 8007c80:	08014b08 	.word	0x08014b08
 8007c84:	08014b28 	.word	0x08014b28
 8007c88:	08014b38 	.word	0x08014b38
 8007c8c:	08014ad4 	.word	0x08014ad4

08007c90 <mg_mqtt_connect>:
  mg_mqtt_send_header(nc, MQTT_CMD_DISCONNECT, 0, 0);
}

struct mg_connection *mg_mqtt_connect(struct mg_mgr *mgr, const char *url,
                                      const struct mg_mqtt_opts *opts,
                                      mg_event_handler_t fn, void *fn_data) {
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b092      	sub	sp, #72	; 0x48
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	607a      	str	r2, [r7, #4]
 8007c9c:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_connect(mgr, url, fn, fn_data);
 8007c9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ca0:	683a      	ldr	r2, [r7, #0]
 8007ca2:	68b9      	ldr	r1, [r7, #8]
 8007ca4:	68f8      	ldr	r0, [r7, #12]
 8007ca6:	f000 fb9f 	bl	80083e8 <mg_connect>
 8007caa:	6478      	str	r0, [r7, #68]	; 0x44
  if (c != NULL) {
 8007cac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d014      	beq.n	8007cdc <mg_mqtt_connect+0x4c>
    struct mg_mqtt_opts empty;
    memset(&empty, 0, sizeof(empty));
 8007cb2:	f107 0314 	add.w	r3, r7, #20
 8007cb6:	2230      	movs	r2, #48	; 0x30
 8007cb8:	2100      	movs	r1, #0
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f00a fd64 	bl	8012788 <memset>
    mg_mqtt_login(c, opts == NULL ? &empty : opts);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d102      	bne.n	8007ccc <mg_mqtt_connect+0x3c>
 8007cc6:	f107 0314 	add.w	r3, r7, #20
 8007cca:	e000      	b.n	8007cce <mg_mqtt_connect+0x3e>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	4619      	mov	r1, r3
 8007cd0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007cd2:	f7ff fb7e 	bl	80073d2 <mg_mqtt_login>
    c->pfn = mqtt_cb;
 8007cd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cd8:	4a03      	ldr	r2, [pc, #12]	; (8007ce8 <mg_mqtt_connect+0x58>)
 8007cda:	671a      	str	r2, [r3, #112]	; 0x70
  }
  return c;
 8007cdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3748      	adds	r7, #72	; 0x48
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	08007aa5 	.word	0x08007aa5

08007cec <mg_vprintf>:





size_t mg_vprintf(struct mg_connection *c, const char *fmt, va_list *ap) {
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b086      	sub	sp, #24
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	60b9      	str	r1, [r7, #8]
 8007cf6:	607a      	str	r2, [r7, #4]
  size_t old = c->send.len;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cfc:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f103 0158 	add.w	r1, r3, #88	; 0x58
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	68ba      	ldr	r2, [r7, #8]
 8007d08:	4805      	ldr	r0, [pc, #20]	; (8007d20 <mg_vprintf+0x34>)
 8007d0a:	f7fb f9c1 	bl	8003090 <mg_vxprintf>
  return c->send.len - old;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	1ad3      	subs	r3, r2, r3
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3718      	adds	r7, #24
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	080023f1 	.word	0x080023f1

08007d24 <mg_printf>:

size_t mg_printf(struct mg_connection *c, const char *fmt, ...) {
 8007d24:	b40e      	push	{r1, r2, r3}
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b085      	sub	sp, #20
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
  size_t len = 0;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 8007d32:	f107 0320 	add.w	r3, r7, #32
 8007d36:	60bb      	str	r3, [r7, #8]
  len = mg_vprintf(c, fmt, &ap);
 8007d38:	f107 0308 	add.w	r3, r7, #8
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	69f9      	ldr	r1, [r7, #28]
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f7ff ffd3 	bl	8007cec <mg_vprintf>
 8007d46:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 8007d48:	68fb      	ldr	r3, [r7, #12]
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3714      	adds	r7, #20
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d54:	b003      	add	sp, #12
 8007d56:	4770      	bx	lr

08007d58 <mg_ntoa>:
  mg_ntoa(a, tmp, sizeof(tmp));
  mg_snprintf(buf, len, fmt, tmp, (int) mg_ntohs(a->port));
  return buf;
}

char *mg_ntoa(const struct mg_addr *addr, char *buf, size_t len) {
 8007d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d5c:	b090      	sub	sp, #64	; 0x40
 8007d5e:	af08      	add	r7, sp, #32
 8007d60:	6178      	str	r0, [r7, #20]
 8007d62:	6139      	str	r1, [r7, #16]
 8007d64:	60fa      	str	r2, [r7, #12]
  if (addr->is_ip6) {
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	7e1b      	ldrb	r3, [r3, #24]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d051      	beq.n	8007e12 <mg_ntoa+0xba>
    uint16_t *p = (uint16_t *) addr->ip6;
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	3308      	adds	r3, #8
 8007d72:	61fb      	str	r3, [r7, #28]
    mg_snprintf(buf, len, "%x:%x:%x:%x:%x:%x:%x:%x", mg_htons(p[0]),
 8007d74:	69fb      	ldr	r3, [r7, #28]
 8007d76:	881b      	ldrh	r3, [r3, #0]
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f003 fa17 	bl	800b1ac <mg_ntohs>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	4698      	mov	r8, r3
                mg_htons(p[1]), mg_htons(p[2]), mg_htons(p[3]), mg_htons(p[4]),
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	3302      	adds	r3, #2
 8007d86:	881b      	ldrh	r3, [r3, #0]
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f003 fa0f 	bl	800b1ac <mg_ntohs>
 8007d8e:	4603      	mov	r3, r0
    mg_snprintf(buf, len, "%x:%x:%x:%x:%x:%x:%x:%x", mg_htons(p[0]),
 8007d90:	461c      	mov	r4, r3
                mg_htons(p[1]), mg_htons(p[2]), mg_htons(p[3]), mg_htons(p[4]),
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	3304      	adds	r3, #4
 8007d96:	881b      	ldrh	r3, [r3, #0]
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f003 fa07 	bl	800b1ac <mg_ntohs>
 8007d9e:	4603      	mov	r3, r0
    mg_snprintf(buf, len, "%x:%x:%x:%x:%x:%x:%x:%x", mg_htons(p[0]),
 8007da0:	461d      	mov	r5, r3
                mg_htons(p[1]), mg_htons(p[2]), mg_htons(p[3]), mg_htons(p[4]),
 8007da2:	69fb      	ldr	r3, [r7, #28]
 8007da4:	3306      	adds	r3, #6
 8007da6:	881b      	ldrh	r3, [r3, #0]
 8007da8:	4618      	mov	r0, r3
 8007daa:	f003 f9ff 	bl	800b1ac <mg_ntohs>
 8007dae:	4603      	mov	r3, r0
    mg_snprintf(buf, len, "%x:%x:%x:%x:%x:%x:%x:%x", mg_htons(p[0]),
 8007db0:	461e      	mov	r6, r3
                mg_htons(p[1]), mg_htons(p[2]), mg_htons(p[3]), mg_htons(p[4]),
 8007db2:	69fb      	ldr	r3, [r7, #28]
 8007db4:	3308      	adds	r3, #8
 8007db6:	881b      	ldrh	r3, [r3, #0]
 8007db8:	4618      	mov	r0, r3
 8007dba:	f003 f9f7 	bl	800b1ac <mg_ntohs>
 8007dbe:	4603      	mov	r3, r0
    mg_snprintf(buf, len, "%x:%x:%x:%x:%x:%x:%x:%x", mg_htons(p[0]),
 8007dc0:	60bb      	str	r3, [r7, #8]
                mg_htons(p[5]), mg_htons(p[6]), mg_htons(p[7]));
 8007dc2:	69fb      	ldr	r3, [r7, #28]
 8007dc4:	330a      	adds	r3, #10
 8007dc6:	881b      	ldrh	r3, [r3, #0]
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f003 f9ef 	bl	800b1ac <mg_ntohs>
 8007dce:	4603      	mov	r3, r0
    mg_snprintf(buf, len, "%x:%x:%x:%x:%x:%x:%x:%x", mg_htons(p[0]),
 8007dd0:	607b      	str	r3, [r7, #4]
                mg_htons(p[5]), mg_htons(p[6]), mg_htons(p[7]));
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	330c      	adds	r3, #12
 8007dd6:	881b      	ldrh	r3, [r3, #0]
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f003 f9e7 	bl	800b1ac <mg_ntohs>
 8007dde:	4603      	mov	r3, r0
    mg_snprintf(buf, len, "%x:%x:%x:%x:%x:%x:%x:%x", mg_htons(p[0]),
 8007de0:	603b      	str	r3, [r7, #0]
                mg_htons(p[5]), mg_htons(p[6]), mg_htons(p[7]));
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	330e      	adds	r3, #14
 8007de6:	881b      	ldrh	r3, [r3, #0]
 8007de8:	4618      	mov	r0, r3
 8007dea:	f003 f9df 	bl	800b1ac <mg_ntohs>
 8007dee:	4603      	mov	r3, r0
    mg_snprintf(buf, len, "%x:%x:%x:%x:%x:%x:%x:%x", mg_htons(p[0]),
 8007df0:	9306      	str	r3, [sp, #24]
 8007df2:	683a      	ldr	r2, [r7, #0]
 8007df4:	9205      	str	r2, [sp, #20]
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	9204      	str	r2, [sp, #16]
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	9303      	str	r3, [sp, #12]
 8007dfe:	9602      	str	r6, [sp, #8]
 8007e00:	9501      	str	r5, [sp, #4]
 8007e02:	9400      	str	r4, [sp, #0]
 8007e04:	4643      	mov	r3, r8
 8007e06:	4a0f      	ldr	r2, [pc, #60]	; (8007e44 <mg_ntoa+0xec>)
 8007e08:	68f9      	ldr	r1, [r7, #12]
 8007e0a:	6938      	ldr	r0, [r7, #16]
 8007e0c:	f7fa fb28 	bl	8002460 <mg_snprintf>
 8007e10:	e011      	b.n	8007e36 <mg_ntoa+0xde>
  } else {
    uint8_t p[4];
    memcpy(p, &addr->ip, sizeof(p));
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	3304      	adds	r3, #4
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	61bb      	str	r3, [r7, #24]
    mg_snprintf(buf, len, "%d.%d.%d.%d", (int) p[0], (int) p[1], (int) p[2],
 8007e1a:	7e3b      	ldrb	r3, [r7, #24]
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	7e7b      	ldrb	r3, [r7, #25]
 8007e20:	7eba      	ldrb	r2, [r7, #26]
                (int) p[3]);
 8007e22:	7ef9      	ldrb	r1, [r7, #27]
    mg_snprintf(buf, len, "%d.%d.%d.%d", (int) p[0], (int) p[1], (int) p[2],
 8007e24:	9102      	str	r1, [sp, #8]
 8007e26:	9201      	str	r2, [sp, #4]
 8007e28:	9300      	str	r3, [sp, #0]
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	4a06      	ldr	r2, [pc, #24]	; (8007e48 <mg_ntoa+0xf0>)
 8007e2e:	68f9      	ldr	r1, [r7, #12]
 8007e30:	6938      	ldr	r0, [r7, #16]
 8007e32:	f7fa fb15 	bl	8002460 <mg_snprintf>
  }
  return buf;
 8007e36:	693b      	ldr	r3, [r7, #16]
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3720      	adds	r7, #32
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e42:	bf00      	nop
 8007e44:	08014b68 	.word	0x08014b68
 8007e48:	08014b80 	.word	0x08014b80

08007e4c <mg_atonl>:

static bool mg_atonl(struct mg_str str, struct mg_addr *addr) {
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	f107 0308 	add.w	r3, r7, #8
 8007e56:	e883 0003 	stmia.w	r3, {r0, r1}
 8007e5a:	607a      	str	r2, [r7, #4]
  if (mg_vcasecmp(&str, "localhost") != 0) return false;
 8007e5c:	f107 0308 	add.w	r3, r7, #8
 8007e60:	490b      	ldr	r1, [pc, #44]	; (8007e90 <mg_atonl+0x44>)
 8007e62:	4618      	mov	r0, r3
 8007e64:	f002 fab8 	bl	800a3d8 <mg_vcasecmp>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d001      	beq.n	8007e72 <mg_atonl+0x26>
 8007e6e:	2300      	movs	r3, #0
 8007e70:	e009      	b.n	8007e86 <mg_atonl+0x3a>
  addr->ip = mg_htonl(0x7f000001);
 8007e72:	4808      	ldr	r0, [pc, #32]	; (8007e94 <mg_atonl+0x48>)
 8007e74:	f003 f981 	bl	800b17a <mg_ntohl>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	605a      	str	r2, [r3, #4]
  addr->is_ip6 = false;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	761a      	strb	r2, [r3, #24]
  return true;
 8007e84:	2301      	movs	r3, #1
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	08014b8c 	.word	0x08014b8c
 8007e94:	7f000001 	.word	0x7f000001

08007e98 <mg_atone>:

static bool mg_atone(struct mg_str str, struct mg_addr *addr) {
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	f107 0308 	add.w	r3, r7, #8
 8007ea2:	e883 0003 	stmia.w	r3, {r0, r1}
 8007ea6:	607a      	str	r2, [r7, #4]
  if (str.len > 0) return false;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d001      	beq.n	8007eb2 <mg_atone+0x1a>
 8007eae:	2300      	movs	r3, #0
 8007eb0:	e006      	b.n	8007ec0 <mg_atone+0x28>
  addr->ip = 0;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	605a      	str	r2, [r3, #4]
  addr->is_ip6 = false;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	761a      	strb	r2, [r3, #24]
  return true;
 8007ebe:	2301      	movs	r3, #1
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3714      	adds	r7, #20
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <mg_aton4>:

static bool mg_aton4(struct mg_str str, struct mg_addr *addr) {
 8007ecc:	b480      	push	{r7}
 8007ece:	b089      	sub	sp, #36	; 0x24
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	f107 0308 	add.w	r3, r7, #8
 8007ed6:	e883 0003 	stmia.w	r3, {r0, r1}
 8007eda:	607a      	str	r2, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 8007edc:	2300      	movs	r3, #0
 8007ede:	613b      	str	r3, [r7, #16]
  size_t i, num_dots = 0;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < str.len; i++) {
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	61fb      	str	r3, [r7, #28]
 8007ee8:	e049      	b.n	8007f7e <mg_aton4+0xb2>
    if (str.ptr[i] >= '0' && str.ptr[i] <= '9') {
 8007eea:	68ba      	ldr	r2, [r7, #8]
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	4413      	add	r3, r2
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	2b2f      	cmp	r3, #47	; 0x2f
 8007ef4:	d925      	bls.n	8007f42 <mg_aton4+0x76>
 8007ef6:	68ba      	ldr	r2, [r7, #8]
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	4413      	add	r3, r2
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	2b39      	cmp	r3, #57	; 0x39
 8007f00:	d81f      	bhi.n	8007f42 <mg_aton4+0x76>
      int octet = data[num_dots] * 10 + (str.ptr[i] - '0');
 8007f02:	f107 0210 	add.w	r2, r7, #16
 8007f06:	69bb      	ldr	r3, [r7, #24]
 8007f08:	4413      	add	r3, r2
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	4613      	mov	r3, r2
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	4413      	add	r3, r2
 8007f14:	005b      	lsls	r3, r3, #1
 8007f16:	4619      	mov	r1, r3
 8007f18:	68ba      	ldr	r2, [r7, #8]
 8007f1a:	69fb      	ldr	r3, [r7, #28]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	3b30      	subs	r3, #48	; 0x30
 8007f22:	440b      	add	r3, r1
 8007f24:	617b      	str	r3, [r7, #20]
      if (octet > 255) return false;
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	2bff      	cmp	r3, #255	; 0xff
 8007f2a:	dd01      	ble.n	8007f30 <mg_aton4+0x64>
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	e03e      	b.n	8007fae <mg_aton4+0xe2>
      data[num_dots] = (uint8_t) octet;
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	b2d9      	uxtb	r1, r3
 8007f34:	f107 0210 	add.w	r2, r7, #16
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	4413      	add	r3, r2
 8007f3c:	460a      	mov	r2, r1
 8007f3e:	701a      	strb	r2, [r3, #0]
    if (str.ptr[i] >= '0' && str.ptr[i] <= '9') {
 8007f40:	e01a      	b.n	8007f78 <mg_aton4+0xac>
    } else if (str.ptr[i] == '.') {
 8007f42:	68ba      	ldr	r2, [r7, #8]
 8007f44:	69fb      	ldr	r3, [r7, #28]
 8007f46:	4413      	add	r3, r2
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	2b2e      	cmp	r3, #46	; 0x2e
 8007f4c:	d112      	bne.n	8007f74 <mg_aton4+0xa8>
      if (num_dots >= 3 || i == 0 || str.ptr[i - 1] == '.') return false;
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	2b02      	cmp	r3, #2
 8007f52:	d809      	bhi.n	8007f68 <mg_aton4+0x9c>
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d006      	beq.n	8007f68 <mg_aton4+0x9c>
 8007f5a:	68ba      	ldr	r2, [r7, #8]
 8007f5c:	69fb      	ldr	r3, [r7, #28]
 8007f5e:	3b01      	subs	r3, #1
 8007f60:	4413      	add	r3, r2
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	2b2e      	cmp	r3, #46	; 0x2e
 8007f66:	d101      	bne.n	8007f6c <mg_aton4+0xa0>
 8007f68:	2300      	movs	r3, #0
 8007f6a:	e020      	b.n	8007fae <mg_aton4+0xe2>
      num_dots++;
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	3301      	adds	r3, #1
 8007f70:	61bb      	str	r3, [r7, #24]
 8007f72:	e001      	b.n	8007f78 <mg_aton4+0xac>
    } else {
      return false;
 8007f74:	2300      	movs	r3, #0
 8007f76:	e01a      	b.n	8007fae <mg_aton4+0xe2>
  for (i = 0; i < str.len; i++) {
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	61fb      	str	r3, [r7, #28]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	69fa      	ldr	r2, [r7, #28]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d3b1      	bcc.n	8007eea <mg_aton4+0x1e>
    }
  }
  if (num_dots != 3 || str.ptr[i - 1] == '.') return false;
 8007f86:	69bb      	ldr	r3, [r7, #24]
 8007f88:	2b03      	cmp	r3, #3
 8007f8a:	d106      	bne.n	8007f9a <mg_aton4+0xce>
 8007f8c:	68ba      	ldr	r2, [r7, #8]
 8007f8e:	69fb      	ldr	r3, [r7, #28]
 8007f90:	3b01      	subs	r3, #1
 8007f92:	4413      	add	r3, r2
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	2b2e      	cmp	r3, #46	; 0x2e
 8007f98:	d101      	bne.n	8007f9e <mg_aton4+0xd2>
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	e007      	b.n	8007fae <mg_aton4+0xe2>
  memcpy(&addr->ip, data, sizeof(data));
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	3304      	adds	r3, #4
 8007fa2:	693a      	ldr	r2, [r7, #16]
 8007fa4:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = false;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	761a      	strb	r2, [r3, #24]
  return true;
 8007fac:	2301      	movs	r3, #1
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3724      	adds	r7, #36	; 0x24
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr

08007fba <mg_v4mapped>:

static bool mg_v4mapped(struct mg_str str, struct mg_addr *addr) {
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b088      	sub	sp, #32
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	f107 0308 	add.w	r3, r7, #8
 8007fc4:	e883 0003 	stmia.w	r3, {r0, r1}
 8007fc8:	607a      	str	r2, [r7, #4]
  int i;
  if (str.len < 14) return false;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2b0d      	cmp	r3, #13
 8007fce:	d801      	bhi.n	8007fd4 <mg_v4mapped+0x1a>
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	e056      	b.n	8008082 <mg_v4mapped+0xc8>
  if (str.ptr[0] != ':' || str.ptr[1] != ':' || str.ptr[6] != ':') return false;
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	2b3a      	cmp	r3, #58	; 0x3a
 8007fda:	d109      	bne.n	8007ff0 <mg_v4mapped+0x36>
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	3301      	adds	r3, #1
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	2b3a      	cmp	r3, #58	; 0x3a
 8007fe4:	d104      	bne.n	8007ff0 <mg_v4mapped+0x36>
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	3306      	adds	r3, #6
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	2b3a      	cmp	r3, #58	; 0x3a
 8007fee:	d001      	beq.n	8007ff4 <mg_v4mapped+0x3a>
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	e046      	b.n	8008082 <mg_v4mapped+0xc8>
  for (i = 2; i < 6; i++) {
 8007ff4:	2302      	movs	r3, #2
 8007ff6:	61fb      	str	r3, [r7, #28]
 8007ff8:	e010      	b.n	800801c <mg_v4mapped+0x62>
    if (str.ptr[i] != 'f' && str.ptr[i] != 'F') return false;
 8007ffa:	68ba      	ldr	r2, [r7, #8]
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	4413      	add	r3, r2
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	2b66      	cmp	r3, #102	; 0x66
 8008004:	d007      	beq.n	8008016 <mg_v4mapped+0x5c>
 8008006:	68ba      	ldr	r2, [r7, #8]
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	4413      	add	r3, r2
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	2b46      	cmp	r3, #70	; 0x46
 8008010:	d001      	beq.n	8008016 <mg_v4mapped+0x5c>
 8008012:	2300      	movs	r3, #0
 8008014:	e035      	b.n	8008082 <mg_v4mapped+0xc8>
  for (i = 2; i < 6; i++) {
 8008016:	69fb      	ldr	r3, [r7, #28]
 8008018:	3301      	adds	r3, #1
 800801a:	61fb      	str	r3, [r7, #28]
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	2b05      	cmp	r3, #5
 8008020:	ddeb      	ble.n	8007ffa <mg_v4mapped+0x40>
  }
  if (!mg_aton4(mg_str_n(&str.ptr[7], str.len - 7), addr)) return false;
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	1dd9      	adds	r1, r3, #7
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	1fda      	subs	r2, r3, #7
 800802a:	f107 0314 	add.w	r3, r7, #20
 800802e:	4618      	mov	r0, r3
 8008030:	f002 f951 	bl	800a2d6 <mg_str_n>
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	f107 0314 	add.w	r3, r7, #20
 800803a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800803e:	f7ff ff45 	bl	8007ecc <mg_aton4>
 8008042:	4603      	mov	r3, r0
 8008044:	f083 0301 	eor.w	r3, r3, #1
 8008048:	b2db      	uxtb	r3, r3
 800804a:	2b00      	cmp	r3, #0
 800804c:	d001      	beq.n	8008052 <mg_v4mapped+0x98>
 800804e:	2300      	movs	r3, #0
 8008050:	e017      	b.n	8008082 <mg_v4mapped+0xc8>
  memset(addr->ip6, 0, sizeof(addr->ip6));
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	3308      	adds	r3, #8
 8008056:	2210      	movs	r2, #16
 8008058:	2100      	movs	r1, #0
 800805a:	4618      	mov	r0, r3
 800805c:	f00a fb94 	bl	8012788 <memset>
  addr->ip6[10] = addr->ip6[11] = 255;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	22ff      	movs	r2, #255	; 0xff
 8008064:	74da      	strb	r2, [r3, #19]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	7cda      	ldrb	r2, [r3, #19]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	749a      	strb	r2, [r3, #18]
  memcpy(&addr->ip6[12], &addr->ip, 4);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	3314      	adds	r3, #20
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	3204      	adds	r2, #4
 8008076:	6812      	ldr	r2, [r2, #0]
 8008078:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = true;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2201      	movs	r2, #1
 800807e:	761a      	strb	r2, [r3, #24]
  return true;
 8008080:	2301      	movs	r3, #1
}
 8008082:	4618      	mov	r0, r3
 8008084:	3720      	adds	r7, #32
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <mg_aton6>:

static bool mg_aton6(struct mg_str str, struct mg_addr *addr) {
 800808a:	b580      	push	{r7, lr}
 800808c:	b08a      	sub	sp, #40	; 0x28
 800808e:	af00      	add	r7, sp, #0
 8008090:	f107 0308 	add.w	r3, r7, #8
 8008094:	e883 0003 	stmia.w	r3, {r0, r1}
 8008098:	607a      	str	r2, [r7, #4]
  size_t i, j = 0, n = 0, dc = 42;
 800809a:	2300      	movs	r3, #0
 800809c:	623b      	str	r3, [r7, #32]
 800809e:	2300      	movs	r3, #0
 80080a0:	61fb      	str	r3, [r7, #28]
 80080a2:	232a      	movs	r3, #42	; 0x2a
 80080a4:	61bb      	str	r3, [r7, #24]
  if (str.len > 2 && str.ptr[0] == '[') str.ptr++, str.len -= 2;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	d909      	bls.n	80080c0 <mg_aton6+0x36>
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	2b5b      	cmp	r3, #91	; 0x5b
 80080b2:	d105      	bne.n	80080c0 <mg_aton6+0x36>
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	3301      	adds	r3, #1
 80080b8:	60bb      	str	r3, [r7, #8]
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	3b02      	subs	r3, #2
 80080be:	60fb      	str	r3, [r7, #12]
  if (mg_v4mapped(str, addr)) return true;
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	f107 0308 	add.w	r3, r7, #8
 80080c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80080ca:	f7ff ff76 	bl	8007fba <mg_v4mapped>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d001      	beq.n	80080d8 <mg_aton6+0x4e>
 80080d4:	2301      	movs	r3, #1
 80080d6:	e0be      	b.n	8008256 <mg_aton6+0x1cc>
  for (i = 0; i < str.len; i++) {
 80080d8:	2300      	movs	r3, #0
 80080da:	627b      	str	r3, [r7, #36]	; 0x24
 80080dc:	e08a      	b.n	80081f4 <mg_aton6+0x16a>
    if ((str.ptr[i] >= '0' && str.ptr[i] <= '9') ||
 80080de:	68ba      	ldr	r2, [r7, #8]
 80080e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e2:	4413      	add	r3, r2
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	2b2f      	cmp	r3, #47	; 0x2f
 80080e8:	d905      	bls.n	80080f6 <mg_aton6+0x6c>
 80080ea:	68ba      	ldr	r2, [r7, #8]
 80080ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ee:	4413      	add	r3, r2
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	2b39      	cmp	r3, #57	; 0x39
 80080f4:	d917      	bls.n	8008126 <mg_aton6+0x9c>
        (str.ptr[i] >= 'a' && str.ptr[i] <= 'f') ||
 80080f6:	68ba      	ldr	r2, [r7, #8]
 80080f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fa:	4413      	add	r3, r2
 80080fc:	781b      	ldrb	r3, [r3, #0]
    if ((str.ptr[i] >= '0' && str.ptr[i] <= '9') ||
 80080fe:	2b60      	cmp	r3, #96	; 0x60
 8008100:	d905      	bls.n	800810e <mg_aton6+0x84>
        (str.ptr[i] >= 'a' && str.ptr[i] <= 'f') ||
 8008102:	68ba      	ldr	r2, [r7, #8]
 8008104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008106:	4413      	add	r3, r2
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	2b66      	cmp	r3, #102	; 0x66
 800810c:	d90b      	bls.n	8008126 <mg_aton6+0x9c>
        (str.ptr[i] >= 'A' && str.ptr[i] <= 'F')) {
 800810e:	68ba      	ldr	r2, [r7, #8]
 8008110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008112:	4413      	add	r3, r2
 8008114:	781b      	ldrb	r3, [r3, #0]
        (str.ptr[i] >= 'a' && str.ptr[i] <= 'f') ||
 8008116:	2b40      	cmp	r3, #64	; 0x40
 8008118:	d929      	bls.n	800816e <mg_aton6+0xe4>
        (str.ptr[i] >= 'A' && str.ptr[i] <= 'F')) {
 800811a:	68ba      	ldr	r2, [r7, #8]
 800811c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811e:	4413      	add	r3, r2
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	2b46      	cmp	r3, #70	; 0x46
 8008124:	d823      	bhi.n	800816e <mg_aton6+0xe4>
      unsigned long val;
      if (i > j + 3) return false;
 8008126:	6a3b      	ldr	r3, [r7, #32]
 8008128:	3303      	adds	r3, #3
 800812a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800812c:	429a      	cmp	r2, r3
 800812e:	d901      	bls.n	8008134 <mg_aton6+0xaa>
 8008130:	2300      	movs	r3, #0
 8008132:	e090      	b.n	8008256 <mg_aton6+0x1cc>
      // MG_DEBUG(("%zu %zu [%.*s]", i, j, (int) (i - j + 1), &str.ptr[j]));
      val = mg_unhexn(&str.ptr[j], i - j + 1);
 8008134:	68ba      	ldr	r2, [r7, #8]
 8008136:	6a3b      	ldr	r3, [r7, #32]
 8008138:	18d0      	adds	r0, r2, r3
 800813a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800813c:	6a3b      	ldr	r3, [r7, #32]
 800813e:	1ad3      	subs	r3, r2, r3
 8008140:	3301      	adds	r3, #1
 8008142:	4619      	mov	r1, r3
 8008144:	f002 fc08 	bl	800a958 <mg_unhexn>
 8008148:	6178      	str	r0, [r7, #20]
      addr->ip6[n] = (uint8_t) ((val >> 8) & 255);
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	0a1b      	lsrs	r3, r3, #8
 800814e:	b2d9      	uxtb	r1, r3
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	69fb      	ldr	r3, [r7, #28]
 8008154:	4413      	add	r3, r2
 8008156:	3308      	adds	r3, #8
 8008158:	460a      	mov	r2, r1
 800815a:	701a      	strb	r2, [r3, #0]
      addr->ip6[n + 1] = (uint8_t) (val & 255);
 800815c:	69fb      	ldr	r3, [r7, #28]
 800815e:	3301      	adds	r3, #1
 8008160:	697a      	ldr	r2, [r7, #20]
 8008162:	b2d1      	uxtb	r1, r2
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	4413      	add	r3, r2
 8008168:	460a      	mov	r2, r1
 800816a:	721a      	strb	r2, [r3, #8]
        (str.ptr[i] >= 'A' && str.ptr[i] <= 'F')) {
 800816c:	e03f      	b.n	80081ee <mg_aton6+0x164>
    } else if (str.ptr[i] == ':') {
 800816e:	68ba      	ldr	r2, [r7, #8]
 8008170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008172:	4413      	add	r3, r2
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	2b3a      	cmp	r3, #58	; 0x3a
 8008178:	d137      	bne.n	80081ea <mg_aton6+0x160>
      j = i + 1;
 800817a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817c:	3301      	adds	r3, #1
 800817e:	623b      	str	r3, [r7, #32]
      if (i > 0 && str.ptr[i - 1] == ':') {
 8008180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008182:	2b00      	cmp	r3, #0
 8008184:	d014      	beq.n	80081b0 <mg_aton6+0x126>
 8008186:	68ba      	ldr	r2, [r7, #8]
 8008188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818a:	3b01      	subs	r3, #1
 800818c:	4413      	add	r3, r2
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	2b3a      	cmp	r3, #58	; 0x3a
 8008192:	d10d      	bne.n	80081b0 <mg_aton6+0x126>
        dc = n;  // Double colon
 8008194:	69fb      	ldr	r3, [r7, #28]
 8008196:	61bb      	str	r3, [r7, #24]
        if (i > 1 && str.ptr[i - 2] == ':') return false;
 8008198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819a:	2b01      	cmp	r3, #1
 800819c:	d90f      	bls.n	80081be <mg_aton6+0x134>
 800819e:	68ba      	ldr	r2, [r7, #8]
 80081a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a2:	3b02      	subs	r3, #2
 80081a4:	4413      	add	r3, r2
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	2b3a      	cmp	r3, #58	; 0x3a
 80081aa:	d108      	bne.n	80081be <mg_aton6+0x134>
 80081ac:	2300      	movs	r3, #0
 80081ae:	e052      	b.n	8008256 <mg_aton6+0x1cc>
      } else if (i > 0) {
 80081b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d004      	beq.n	80081c0 <mg_aton6+0x136>
        n += 2;
 80081b6:	69fb      	ldr	r3, [r7, #28]
 80081b8:	3302      	adds	r3, #2
 80081ba:	61fb      	str	r3, [r7, #28]
 80081bc:	e000      	b.n	80081c0 <mg_aton6+0x136>
        if (i > 1 && str.ptr[i - 2] == ':') return false;
 80081be:	bf00      	nop
      }
      if (n > 14) return false;
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	2b0e      	cmp	r3, #14
 80081c4:	d901      	bls.n	80081ca <mg_aton6+0x140>
 80081c6:	2300      	movs	r3, #0
 80081c8:	e045      	b.n	8008256 <mg_aton6+0x1cc>
      addr->ip6[n] = addr->ip6[n + 1] = 0;  // For trailing ::
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	3301      	adds	r3, #1
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	441a      	add	r2, r3
 80081d2:	2100      	movs	r1, #0
 80081d4:	7211      	strb	r1, [r2, #8]
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	4413      	add	r3, r2
 80081da:	7a19      	ldrb	r1, [r3, #8]
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	4413      	add	r3, r2
 80081e2:	3308      	adds	r3, #8
 80081e4:	460a      	mov	r2, r1
 80081e6:	701a      	strb	r2, [r3, #0]
 80081e8:	e001      	b.n	80081ee <mg_aton6+0x164>
    } else {
      return false;
 80081ea:	2300      	movs	r3, #0
 80081ec:	e033      	b.n	8008256 <mg_aton6+0x1cc>
  for (i = 0; i < str.len; i++) {
 80081ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f0:	3301      	adds	r3, #1
 80081f2:	627b      	str	r3, [r7, #36]	; 0x24
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081f8:	429a      	cmp	r2, r3
 80081fa:	f4ff af70 	bcc.w	80080de <mg_aton6+0x54>
    }
  }
  if (n < 14 && dc == 42) return false;
 80081fe:	69fb      	ldr	r3, [r7, #28]
 8008200:	2b0d      	cmp	r3, #13
 8008202:	d804      	bhi.n	800820e <mg_aton6+0x184>
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	2b2a      	cmp	r3, #42	; 0x2a
 8008208:	d101      	bne.n	800820e <mg_aton6+0x184>
 800820a:	2300      	movs	r3, #0
 800820c:	e023      	b.n	8008256 <mg_aton6+0x1cc>
  if (n < 14) {
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	2b0d      	cmp	r3, #13
 8008212:	d81c      	bhi.n	800824e <mg_aton6+0x1c4>
    memmove(&addr->ip6[dc + (14 - n)], &addr->ip6[dc], n - dc + 2);
 8008214:	69ba      	ldr	r2, [r7, #24]
 8008216:	69fb      	ldr	r3, [r7, #28]
 8008218:	1ad3      	subs	r3, r2, r3
 800821a:	330e      	adds	r3, #14
 800821c:	3308      	adds	r3, #8
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	18d0      	adds	r0, r2, r3
 8008222:	69bb      	ldr	r3, [r7, #24]
 8008224:	3308      	adds	r3, #8
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	18d1      	adds	r1, r2, r3
 800822a:	69fa      	ldr	r2, [r7, #28]
 800822c:	69bb      	ldr	r3, [r7, #24]
 800822e:	1ad3      	subs	r3, r2, r3
 8008230:	3302      	adds	r3, #2
 8008232:	461a      	mov	r2, r3
 8008234:	f00a fa8e 	bl	8012754 <memmove>
    memset(&addr->ip6[dc], 0, 14 - n);
 8008238:	69bb      	ldr	r3, [r7, #24]
 800823a:	3308      	adds	r3, #8
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	18d0      	adds	r0, r2, r3
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	f1c3 030e 	rsb	r3, r3, #14
 8008246:	461a      	mov	r2, r3
 8008248:	2100      	movs	r1, #0
 800824a:	f00a fa9d 	bl	8012788 <memset>
  }
  addr->is_ip6 = true;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2201      	movs	r2, #1
 8008252:	761a      	strb	r2, [r3, #24]
  return true;
 8008254:	2301      	movs	r3, #1
}
 8008256:	4618      	mov	r0, r3
 8008258:	3728      	adds	r7, #40	; 0x28
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <mg_aton>:

bool mg_aton(struct mg_str str, struct mg_addr *addr) {
 800825e:	b580      	push	{r7, lr}
 8008260:	b084      	sub	sp, #16
 8008262:	af00      	add	r7, sp, #0
 8008264:	f107 0308 	add.w	r3, r7, #8
 8008268:	e883 0003 	stmia.w	r3, {r0, r1}
 800826c:	607a      	str	r2, [r7, #4]
  // MG_INFO(("[%.*s]", (int) str.len, str.ptr));
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	f107 0308 	add.w	r3, r7, #8
 8008274:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008278:	f7ff fe0e 	bl	8007e98 <mg_atone>
 800827c:	4603      	mov	r3, r0
 800827e:	2b00      	cmp	r3, #0
 8008280:	d11d      	bne.n	80082be <mg_aton+0x60>
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	f107 0308 	add.w	r3, r7, #8
 8008288:	e893 0003 	ldmia.w	r3, {r0, r1}
 800828c:	f7ff fdde 	bl	8007e4c <mg_atonl>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	d113      	bne.n	80082be <mg_aton+0x60>
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	f107 0308 	add.w	r3, r7, #8
 800829c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80082a0:	f7ff fe14 	bl	8007ecc <mg_aton4>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d109      	bne.n	80082be <mg_aton+0x60>
         mg_aton6(str, addr);
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	f107 0308 	add.w	r3, r7, #8
 80082b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80082b4:	f7ff fee9 	bl	800808a <mg_aton6>
 80082b8:	4603      	mov	r3, r0
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d001      	beq.n	80082c2 <mg_aton+0x64>
 80082be:	2301      	movs	r3, #1
 80082c0:	e000      	b.n	80082c4 <mg_aton+0x66>
 80082c2:	2300      	movs	r3, #0
 80082c4:	f003 0301 	and.w	r3, r3, #1
 80082c8:	b2db      	uxtb	r3, r3
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3710      	adds	r7, #16
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <mg_alloc_conn>:

struct mg_connection *mg_alloc_conn(struct mg_mgr *mgr) {
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b084      	sub	sp, #16
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
  struct mg_connection *c =
      (struct mg_connection *) calloc(1, sizeof(*c) + mgr->extraconnsize);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082de:	33b4      	adds	r3, #180	; 0xb4
 80082e0:	4619      	mov	r1, r3
 80082e2:	2001      	movs	r0, #1
 80082e4:	f00a f9d6 	bl	8012694 <calloc>
 80082e8:	4603      	mov	r3, r0
 80082ea:	60fb      	str	r3, [r7, #12]
  if (c != NULL) {
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d013      	beq.n	800831a <mg_alloc_conn+0x48>
    c->mgr = mgr;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	605a      	str	r2, [r3, #4]
    c->send.align = c->recv.align = MG_IO_SIZE;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082fe:	655a      	str	r2, [r3, #84]	; 0x54
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	665a      	str	r2, [r3, #100]	; 0x64
    c->id = ++mgr->nextid;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	69db      	ldr	r3, [r3, #28]
 800830c:	1c5a      	adds	r2, r3, #1
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	61da      	str	r2, [r3, #28]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	69da      	ldr	r2, [r3, #28]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	645a      	str	r2, [r3, #68]	; 0x44
  }
  return c;
 800831a:	68fb      	ldr	r3, [r7, #12]
}
 800831c:	4618      	mov	r0, r3
 800831e:	3710      	adds	r7, #16
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <mg_close_conn>:

void mg_close_conn(struct mg_connection *c) {
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  mg_resolve_cancel(c);  // Close any pending DNS query
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f7f9 f9ff 	bl	8001730 <mg_resolve_cancel>
  LIST_DELETE(struct mg_connection, &c->mgr->conns, c);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	60fb      	str	r3, [r7, #12]
 8008338:	e002      	b.n	8008340 <mg_close_conn+0x1c>
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	60fb      	str	r3, [r7, #12]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	429a      	cmp	r2, r3
 8008348:	d1f7      	bne.n	800833a <mg_close_conn+0x16>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	601a      	str	r2, [r3, #0]
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	429a      	cmp	r2, r3
 800835c:	d103      	bne.n	8008366 <mg_close_conn+0x42>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	609a      	str	r2, [r3, #8]
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	691b      	ldr	r3, [r3, #16]
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	429a      	cmp	r2, r3
 8008370:	d103      	bne.n	800837a <mg_close_conn+0x56>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	2200      	movs	r2, #0
 8008378:	611a      	str	r2, [r3, #16]
  // Order of operations is important. `MG_EV_CLOSE` event must be fired
  // before we deallocate received data, see #1331
  mg_call(c, MG_EV_CLOSE, NULL);
 800837a:	2200      	movs	r2, #0
 800837c:	2109      	movs	r1, #9
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f7f9 ff7e 	bl	8002280 <mg_call>
  MG_DEBUG(("%lu %p closed", c->id, c->fd));
 8008384:	4b15      	ldr	r3, [pc, #84]	; (80083dc <mg_close_conn+0xb8>)
 8008386:	f640 527a 	movw	r2, #3450	; 0xd7a
 800838a:	4915      	ldr	r1, [pc, #84]	; (80083e0 <mg_close_conn+0xbc>)
 800838c:	2003      	movs	r0, #3
 800838e:	f7fe fe89 	bl	80070a4 <mg_log_prefix>
 8008392:	4603      	mov	r3, r0
 8008394:	2b00      	cmp	r3, #0
 8008396:	d007      	beq.n	80083a8 <mg_close_conn+0x84>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083a0:	461a      	mov	r2, r3
 80083a2:	4810      	ldr	r0, [pc, #64]	; (80083e4 <mg_close_conn+0xc0>)
 80083a4:	f7fe fed8 	bl	8007158 <mg_log>

  mg_tls_free(c);
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f002 fd33 	bl	800ae14 <mg_tls_free>
  mg_iobuf_free(&c->recv);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	3348      	adds	r3, #72	; 0x48
 80083b2:	4618      	mov	r0, r3
 80083b4:	f7fe f8a5 	bl	8006502 <mg_iobuf_free>
  mg_iobuf_free(&c->send);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	3358      	adds	r3, #88	; 0x58
 80083bc:	4618      	mov	r0, r3
 80083be:	f7fe f8a0 	bl	8006502 <mg_iobuf_free>
  memset(c, 0, sizeof(*c));
 80083c2:	22b4      	movs	r2, #180	; 0xb4
 80083c4:	2100      	movs	r1, #0
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f00a f9de 	bl	8012788 <memset>
  free(c);
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f00a f99b 	bl	8012708 <free>
}
 80083d2:	bf00      	nop
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	08015700 	.word	0x08015700
 80083e0:	08013b30 	.word	0x08013b30
 80083e4:	08014b98 	.word	0x08014b98

080083e8 <mg_connect>:

struct mg_connection *mg_connect(struct mg_mgr *mgr, const char *url,
                                 mg_event_handler_t fn, void *fn_data) {
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b086      	sub	sp, #24
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	607a      	str	r2, [r7, #4]
 80083f4:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 80083f6:	2300      	movs	r3, #0
 80083f8:	617b      	str	r3, [r7, #20]
  if (url == NULL || url[0] == '\0') {
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d003      	beq.n	8008408 <mg_connect+0x20>
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d10d      	bne.n	8008424 <mg_connect+0x3c>
    MG_ERROR(("null url"));
 8008408:	4b36      	ldr	r3, [pc, #216]	; (80084e4 <mg_connect+0xfc>)
 800840a:	f640 5287 	movw	r2, #3463	; 0xd87
 800840e:	4936      	ldr	r1, [pc, #216]	; (80084e8 <mg_connect+0x100>)
 8008410:	2001      	movs	r0, #1
 8008412:	f7fe fe47 	bl	80070a4 <mg_log_prefix>
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d05d      	beq.n	80084d8 <mg_connect+0xf0>
 800841c:	4833      	ldr	r0, [pc, #204]	; (80084ec <mg_connect+0x104>)
 800841e:	f7fe fe9b 	bl	8007158 <mg_log>
 8008422:	e059      	b.n	80084d8 <mg_connect+0xf0>
  } else if ((c = mg_alloc_conn(mgr)) == NULL) {
 8008424:	68f8      	ldr	r0, [r7, #12]
 8008426:	f7ff ff54 	bl	80082d2 <mg_alloc_conn>
 800842a:	6178      	str	r0, [r7, #20]
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d10d      	bne.n	800844e <mg_connect+0x66>
    MG_ERROR(("OOM"));
 8008432:	4b2c      	ldr	r3, [pc, #176]	; (80084e4 <mg_connect+0xfc>)
 8008434:	f640 5289 	movw	r2, #3465	; 0xd89
 8008438:	492b      	ldr	r1, [pc, #172]	; (80084e8 <mg_connect+0x100>)
 800843a:	2001      	movs	r0, #1
 800843c:	f7fe fe32 	bl	80070a4 <mg_log_prefix>
 8008440:	4603      	mov	r3, r0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d048      	beq.n	80084d8 <mg_connect+0xf0>
 8008446:	482a      	ldr	r0, [pc, #168]	; (80084f0 <mg_connect+0x108>)
 8008448:	f7fe fe86 	bl	8007158 <mg_log>
 800844c:	e044      	b.n	80084d8 <mg_connect+0xf0>
  } else {
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	601a      	str	r2, [r3, #0]
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	697a      	ldr	r2, [r7, #20]
 800845a:	601a      	str	r2, [r3, #0]
    c->is_udp = (strncmp(url, "udp:", 4) == 0);
 800845c:	2204      	movs	r2, #4
 800845e:	4925      	ldr	r1, [pc, #148]	; (80084f4 <mg_connect+0x10c>)
 8008460:	68b8      	ldr	r0, [r7, #8]
 8008462:	f00a fb80 	bl	8012b66 <strncmp>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	bf0c      	ite	eq
 800846c:	2301      	moveq	r3, #1
 800846e:	2300      	movne	r3, #0
 8008470:	b2d9      	uxtb	r1, r3
 8008472:	697a      	ldr	r2, [r7, #20]
 8008474:	f892 30b0 	ldrb.w	r3, [r2, #176]	; 0xb0
 8008478:	f361 13c7 	bfi	r3, r1, #7, #1
 800847c:	f882 30b0 	strb.w	r3, [r2, #176]	; 0xb0
    c->fd = (void *) (size_t) MG_INVALID_SOCKET;
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	f04f 32ff 	mov.w	r2, #4294967295
 8008486:	641a      	str	r2, [r3, #64]	; 0x40
    c->fn = fn;
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	669a      	str	r2, [r3, #104]	; 0x68
    c->is_client = true;
 800848e:	697a      	ldr	r2, [r7, #20]
 8008490:	f892 30b0 	ldrb.w	r3, [r2, #176]	; 0xb0
 8008494:	f043 0302 	orr.w	r3, r3, #2
 8008498:	f882 30b0 	strb.w	r3, [r2, #176]	; 0xb0
    c->fn_data = fn_data;
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	683a      	ldr	r2, [r7, #0]
 80084a0:	66da      	str	r2, [r3, #108]	; 0x6c
    MG_DEBUG(("%lu %p %s", c->id, c->fd, url));
 80084a2:	4b10      	ldr	r3, [pc, #64]	; (80084e4 <mg_connect+0xfc>)
 80084a4:	f640 5291 	movw	r2, #3473	; 0xd91
 80084a8:	490f      	ldr	r1, [pc, #60]	; (80084e8 <mg_connect+0x100>)
 80084aa:	2003      	movs	r0, #3
 80084ac:	f7fe fdfa 	bl	80070a4 <mg_log_prefix>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d007      	beq.n	80084c6 <mg_connect+0xde>
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	480d      	ldr	r0, [pc, #52]	; (80084f8 <mg_connect+0x110>)
 80084c2:	f7fe fe49 	bl	8007158 <mg_log>
    mg_call(c, MG_EV_OPEN, NULL);
 80084c6:	2200      	movs	r2, #0
 80084c8:	2101      	movs	r1, #1
 80084ca:	6978      	ldr	r0, [r7, #20]
 80084cc:	f7f9 fed8 	bl	8002280 <mg_call>
    mg_resolve(c, url);
 80084d0:	68b9      	ldr	r1, [r7, #8]
 80084d2:	6978      	ldr	r0, [r7, #20]
 80084d4:	f7f9 fe90 	bl	80021f8 <mg_resolve>
  }
  return c;
 80084d8:	697b      	ldr	r3, [r7, #20]
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3718      	adds	r7, #24
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	08015710 	.word	0x08015710
 80084e8:	08013b30 	.word	0x08013b30
 80084ec:	08014ba8 	.word	0x08014ba8
 80084f0:	08014bb4 	.word	0x08014bb4
 80084f4:	08014bb8 	.word	0x08014bb8
 80084f8:	08013c3c 	.word	0x08013c3c

080084fc <mg_listen>:

struct mg_connection *mg_listen(struct mg_mgr *mgr, const char *url,
                                mg_event_handler_t fn, void *fn_data) {
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b086      	sub	sp, #24
 8008500:	af00      	add	r7, sp, #0
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	607a      	str	r2, [r7, #4]
 8008508:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 800850a:	2300      	movs	r3, #0
 800850c:	617b      	str	r3, [r7, #20]
  if ((c = mg_alloc_conn(mgr)) == NULL) {
 800850e:	68f8      	ldr	r0, [r7, #12]
 8008510:	f7ff fedf 	bl	80082d2 <mg_alloc_conn>
 8008514:	6178      	str	r0, [r7, #20]
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d10e      	bne.n	800853a <mg_listen+0x3e>
    MG_ERROR(("OOM %s", url));
 800851c:	4b39      	ldr	r3, [pc, #228]	; (8008604 <mg_listen+0x108>)
 800851e:	f640 529c 	movw	r2, #3484	; 0xd9c
 8008522:	4939      	ldr	r1, [pc, #228]	; (8008608 <mg_listen+0x10c>)
 8008524:	2001      	movs	r0, #1
 8008526:	f7fe fdbd 	bl	80070a4 <mg_log_prefix>
 800852a:	4603      	mov	r3, r0
 800852c:	2b00      	cmp	r3, #0
 800852e:	d064      	beq.n	80085fa <mg_listen+0xfe>
 8008530:	68b9      	ldr	r1, [r7, #8]
 8008532:	4836      	ldr	r0, [pc, #216]	; (800860c <mg_listen+0x110>)
 8008534:	f7fe fe10 	bl	8007158 <mg_log>
 8008538:	e05f      	b.n	80085fa <mg_listen+0xfe>
  } else if (!mg_open_listener(c, url)) {
 800853a:	68b9      	ldr	r1, [r7, #8]
 800853c:	6978      	ldr	r0, [r7, #20]
 800853e:	f005 ffc5 	bl	800e4cc <mg_open_listener>
 8008542:	4603      	mov	r3, r0
 8008544:	f083 0301 	eor.w	r3, r3, #1
 8008548:	b2db      	uxtb	r3, r3
 800854a:	2b00      	cmp	r3, #0
 800854c:	d018      	beq.n	8008580 <mg_listen+0x84>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 800854e:	4b2d      	ldr	r3, [pc, #180]	; (8008604 <mg_listen+0x108>)
 8008550:	f640 529e 	movw	r2, #3486	; 0xd9e
 8008554:	492c      	ldr	r1, [pc, #176]	; (8008608 <mg_listen+0x10c>)
 8008556:	2001      	movs	r0, #1
 8008558:	f7fe fda4 	bl	80070a4 <mg_log_prefix>
 800855c:	4603      	mov	r3, r0
 800855e:	2b00      	cmp	r3, #0
 8008560:	d008      	beq.n	8008574 <mg_listen+0x78>
 8008562:	f00a f89f 	bl	80126a4 <__errno>
 8008566:	4603      	mov	r3, r0
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	461a      	mov	r2, r3
 800856c:	68b9      	ldr	r1, [r7, #8]
 800856e:	4828      	ldr	r0, [pc, #160]	; (8008610 <mg_listen+0x114>)
 8008570:	f7fe fdf2 	bl	8007158 <mg_log>
    free(c);
 8008574:	6978      	ldr	r0, [r7, #20]
 8008576:	f00a f8c7 	bl	8012708 <free>
    c = NULL;
 800857a:	2300      	movs	r3, #0
 800857c:	617b      	str	r3, [r7, #20]
 800857e:	e03c      	b.n	80085fa <mg_listen+0xfe>
  } else {
    c->is_listening = 1;
 8008580:	697a      	ldr	r2, [r7, #20]
 8008582:	f892 30b0 	ldrb.w	r3, [r2, #176]	; 0xb0
 8008586:	f043 0301 	orr.w	r3, r3, #1
 800858a:	f882 30b0 	strb.w	r3, [r2, #176]	; 0xb0
    c->is_udp = strncmp(url, "udp:", 4) == 0;
 800858e:	2204      	movs	r2, #4
 8008590:	4920      	ldr	r1, [pc, #128]	; (8008614 <mg_listen+0x118>)
 8008592:	68b8      	ldr	r0, [r7, #8]
 8008594:	f00a fae7 	bl	8012b66 <strncmp>
 8008598:	4603      	mov	r3, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	bf0c      	ite	eq
 800859e:	2301      	moveq	r3, #1
 80085a0:	2300      	movne	r3, #0
 80085a2:	b2d9      	uxtb	r1, r3
 80085a4:	697a      	ldr	r2, [r7, #20]
 80085a6:	f892 30b0 	ldrb.w	r3, [r2, #176]	; 0xb0
 80085aa:	f361 13c7 	bfi	r3, r1, #7, #1
 80085ae:	f882 30b0 	strb.w	r3, [r2, #176]	; 0xb0
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	601a      	str	r2, [r3, #0]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	697a      	ldr	r2, [r7, #20]
 80085be:	601a      	str	r2, [r3, #0]
    c->fn = fn;
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	669a      	str	r2, [r3, #104]	; 0x68
    c->fn_data = fn_data;
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	683a      	ldr	r2, [r7, #0]
 80085ca:	66da      	str	r2, [r3, #108]	; 0x6c
    mg_call(c, MG_EV_OPEN, NULL);
 80085cc:	2200      	movs	r2, #0
 80085ce:	2101      	movs	r1, #1
 80085d0:	6978      	ldr	r0, [r7, #20]
 80085d2:	f7f9 fe55 	bl	8002280 <mg_call>
    MG_DEBUG(("%lu %p %s", c->id, c->fd, url));
 80085d6:	4b0b      	ldr	r3, [pc, #44]	; (8008604 <mg_listen+0x108>)
 80085d8:	f640 52a8 	movw	r2, #3496	; 0xda8
 80085dc:	490a      	ldr	r1, [pc, #40]	; (8008608 <mg_listen+0x10c>)
 80085de:	2003      	movs	r0, #3
 80085e0:	f7fe fd60 	bl	80070a4 <mg_log_prefix>
 80085e4:	4603      	mov	r3, r0
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d007      	beq.n	80085fa <mg_listen+0xfe>
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	4808      	ldr	r0, [pc, #32]	; (8008618 <mg_listen+0x11c>)
 80085f6:	f7fe fdaf 	bl	8007158 <mg_log>
  }
  return c;
 80085fa:	697b      	ldr	r3, [r7, #20]
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3718      	adds	r7, #24
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	0801571c 	.word	0x0801571c
 8008608:	08013b30 	.word	0x08013b30
 800860c:	08014bc0 	.word	0x08014bc0
 8008610:	08014bc8 	.word	0x08014bc8
 8008614:	08014bb8 	.word	0x08014bb8
 8008618:	08013c3c 	.word	0x08013c3c

0800861c <mg_timer_add>:
  }
  return c;
}

struct mg_timer *mg_timer_add(struct mg_mgr *mgr, uint64_t milliseconds,
                              unsigned flags, void (*fn)(void *), void *arg) {
 800861c:	b580      	push	{r7, lr}
 800861e:	b08a      	sub	sp, #40	; 0x28
 8008620:	af04      	add	r7, sp, #16
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t = (struct mg_timer *) calloc(1, sizeof(*t));
 8008628:	2128      	movs	r1, #40	; 0x28
 800862a:	2001      	movs	r0, #1
 800862c:	f00a f832 	bl	8012694 <calloc>
 8008630:	4603      	mov	r3, r0
 8008632:	617b      	str	r3, [r7, #20]
  if (t != NULL) {
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d014      	beq.n	8008664 <mg_timer_add+0x48>
    mg_timer_init(&mgr->timers, t, milliseconds, flags, fn, arg);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008642:	9302      	str	r3, [sp, #8]
 8008644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008646:	9301      	str	r3, [sp, #4]
 8008648:	6a3b      	ldr	r3, [r7, #32]
 800864a:	9300      	str	r3, [sp, #0]
 800864c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008650:	6979      	ldr	r1, [r7, #20]
 8008652:	f002 facd 	bl	800abf0 <mg_timer_init>
    t->id = mgr->timerid++;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	6a1b      	ldr	r3, [r3, #32]
 800865a:	1c59      	adds	r1, r3, #1
 800865c:	68fa      	ldr	r2, [r7, #12]
 800865e:	6211      	str	r1, [r2, #32]
 8008660:	697a      	ldr	r2, [r7, #20]
 8008662:	6013      	str	r3, [r2, #0]
  }
  return t;
 8008664:	697b      	ldr	r3, [r7, #20]
}
 8008666:	4618      	mov	r0, r3
 8008668:	3718      	adds	r7, #24
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
	...

08008670 <mg_mgr_init>:
  if (mgr->epoll_fd >= 0) close(mgr->epoll_fd), mgr->epoll_fd = -1;
#endif
  free(mgr->priv);
}

void mg_mgr_init(struct mg_mgr *mgr) {
 8008670:	b580      	push	{r7, lr}
 8008672:	b082      	sub	sp, #8
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  memset(mgr, 0, sizeof(*mgr));
 8008678:	2240      	movs	r2, #64	; 0x40
 800867a:	2100      	movs	r1, #0
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f00a f883 	bl	8012788 <memset>
#if MG_ENABLE_EPOLL
  if ((mgr->epoll_fd = epoll_create1(0)) < 0) MG_ERROR(("epoll: %d", errno));
#else
  mgr->epoll_fd = -1;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f04f 32ff 	mov.w	r2, #4294967295
 8008688:	635a      	str	r2, [r3, #52]	; 0x34
#elif defined(__unix) || defined(__unix__) || defined(__APPLE__)
  // Ignore SIGPIPE signal, so if client cancels the request, it
  // won't kill the whole process.
  signal(SIGPIPE, SIG_IGN);
#endif
  mgr->dnstimeout = 3000;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8008690:	615a      	str	r2, [r3, #20]
  mgr->dns4.url = "udp://8.8.8.8:53";
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4a04      	ldr	r2, [pc, #16]	; (80086a8 <mg_mgr_init+0x38>)
 8008696:	605a      	str	r2, [r3, #4]
  mgr->dns6.url = "udp://[2001:4860:4860::8888]:53";
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	4a04      	ldr	r2, [pc, #16]	; (80086ac <mg_mgr_init+0x3c>)
 800869c:	60da      	str	r2, [r3, #12]
}
 800869e:	bf00      	nop
 80086a0:	3708      	adds	r7, #8
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop
 80086a8:	08014bf8 	.word	0x08014bf8
 80086ac:	08014c0c 	.word	0x08014c0c

080086b0 <blk0>:
  uint32_t l[16];
};

#define rol(value, bits) (((value) << (bits)) | ((value) >> (32 - (bits))))

static uint32_t blk0(union char64long16 *block, int i) {
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
  if (MG_BIG_ENDIAN) {
 80086ba:	4b12      	ldr	r3, [pc, #72]	; (8008704 <blk0+0x54>)
 80086bc:	881b      	ldrh	r3, [r3, #0]
 80086be:	2bff      	cmp	r3, #255	; 0xff
 80086c0:	d915      	bls.n	80086ee <blk0+0x3e>
  } else {
    block->l[i] = (rol(block->l[i], 24) & 0xFF00FF00) |
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	683a      	ldr	r2, [r7, #0]
 80086c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086ca:	ea4f 2333 	mov.w	r3, r3, ror #8
 80086ce:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
                  (rol(block->l[i], 8) & 0x00FF00FF);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6839      	ldr	r1, [r7, #0]
 80086d6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80086da:	ea4f 6333 	mov.w	r3, r3, ror #24
 80086de:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
    block->l[i] = (rol(block->l[i], 24) & 0xFF00FF00) |
 80086e2:	ea42 0103 	orr.w	r1, r2, r3
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	683a      	ldr	r2, [r7, #0]
 80086ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return block->l[i];
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	683a      	ldr	r2, [r7, #0]
 80086f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	370c      	adds	r7, #12
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr
 8008702:	bf00      	nop
 8008704:	08014ad0 	.word	0x08014ad0

08008708 <mg_sha1_transform>:
#define R4(v, w, x, y, z, i)                          \
  z += (w ^ x ^ y) + blk(i) + 0xCA62C1D6 + rol(v, 5); \
  w = rol(w, 30);

static void mg_sha1_transform(uint32_t state[5],
                              const unsigned char buffer[64]) {
 8008708:	b590      	push	{r4, r7, lr}
 800870a:	b099      	sub	sp, #100	; 0x64
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]
  uint32_t a, b, c, d, e;
  union char64long16 block[1];

  memcpy(block, buffer, 64);
 8008712:	f107 030c 	add.w	r3, r7, #12
 8008716:	2240      	movs	r2, #64	; 0x40
 8008718:	6839      	ldr	r1, [r7, #0]
 800871a:	4618      	mov	r0, r3
 800871c:	f00a f80c 	bl	8012738 <memcpy>
  a = state[0];
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	65fb      	str	r3, [r7, #92]	; 0x5c
  b = state[1];
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	65bb      	str	r3, [r7, #88]	; 0x58
  c = state[2];
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	657b      	str	r3, [r7, #84]	; 0x54
  d = state[3];
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	653b      	str	r3, [r7, #80]	; 0x50
  e = state[4];
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	691b      	ldr	r3, [r3, #16]
 800873c:	64fb      	str	r3, [r7, #76]	; 0x4c
  R0(a, b, c, d, e, 0);
 800873e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008740:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008742:	405a      	eors	r2, r3
 8008744:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008746:	401a      	ands	r2, r3
 8008748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800874a:	ea82 0403 	eor.w	r4, r2, r3
 800874e:	f107 030c 	add.w	r3, r7, #12
 8008752:	2100      	movs	r1, #0
 8008754:	4618      	mov	r0, r3
 8008756:	f7ff ffab 	bl	80086b0 <blk0>
 800875a:	4603      	mov	r3, r0
 800875c:	18e2      	adds	r2, r4, r3
 800875e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008760:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008764:	441a      	add	r2, r3
 8008766:	4bbd      	ldr	r3, [pc, #756]	; (8008a5c <mg_sha1_transform+0x354>)
 8008768:	4413      	add	r3, r2
 800876a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800876c:	4413      	add	r3, r2
 800876e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008770:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008772:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008776:	65bb      	str	r3, [r7, #88]	; 0x58
  R0(e, a, b, c, d, 1);
 8008778:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800877a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800877c:	405a      	eors	r2, r3
 800877e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008780:	401a      	ands	r2, r3
 8008782:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008784:	ea82 0403 	eor.w	r4, r2, r3
 8008788:	f107 030c 	add.w	r3, r7, #12
 800878c:	2101      	movs	r1, #1
 800878e:	4618      	mov	r0, r3
 8008790:	f7ff ff8e 	bl	80086b0 <blk0>
 8008794:	4603      	mov	r3, r0
 8008796:	18e2      	adds	r2, r4, r3
 8008798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800879a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800879e:	441a      	add	r2, r3
 80087a0:	4bae      	ldr	r3, [pc, #696]	; (8008a5c <mg_sha1_transform+0x354>)
 80087a2:	4413      	add	r3, r2
 80087a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80087a6:	4413      	add	r3, r2
 80087a8:	653b      	str	r3, [r7, #80]	; 0x50
 80087aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087ac:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80087b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  R0(d, e, a, b, c, 2);
 80087b2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80087b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80087b6:	405a      	eors	r2, r3
 80087b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087ba:	401a      	ands	r2, r3
 80087bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80087be:	ea82 0403 	eor.w	r4, r2, r3
 80087c2:	f107 030c 	add.w	r3, r7, #12
 80087c6:	2102      	movs	r1, #2
 80087c8:	4618      	mov	r0, r3
 80087ca:	f7ff ff71 	bl	80086b0 <blk0>
 80087ce:	4603      	mov	r3, r0
 80087d0:	18e2      	adds	r2, r4, r3
 80087d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087d4:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80087d8:	441a      	add	r2, r3
 80087da:	4ba0      	ldr	r3, [pc, #640]	; (8008a5c <mg_sha1_transform+0x354>)
 80087dc:	4413      	add	r3, r2
 80087de:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80087e0:	4413      	add	r3, r2
 80087e2:	657b      	str	r3, [r7, #84]	; 0x54
 80087e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087e6:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80087ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  R0(c, d, e, a, b, 3);
 80087ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80087ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087f0:	405a      	eors	r2, r3
 80087f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087f4:	401a      	ands	r2, r3
 80087f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087f8:	ea82 0403 	eor.w	r4, r2, r3
 80087fc:	f107 030c 	add.w	r3, r7, #12
 8008800:	2103      	movs	r1, #3
 8008802:	4618      	mov	r0, r3
 8008804:	f7ff ff54 	bl	80086b0 <blk0>
 8008808:	4603      	mov	r3, r0
 800880a:	18e2      	adds	r2, r4, r3
 800880c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800880e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008812:	441a      	add	r2, r3
 8008814:	4b91      	ldr	r3, [pc, #580]	; (8008a5c <mg_sha1_transform+0x354>)
 8008816:	4413      	add	r3, r2
 8008818:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800881a:	4413      	add	r3, r2
 800881c:	65bb      	str	r3, [r7, #88]	; 0x58
 800881e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008820:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008824:	653b      	str	r3, [r7, #80]	; 0x50
  R0(b, c, d, e, a, 4);
 8008826:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800882a:	405a      	eors	r2, r3
 800882c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800882e:	401a      	ands	r2, r3
 8008830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008832:	ea82 0403 	eor.w	r4, r2, r3
 8008836:	f107 030c 	add.w	r3, r7, #12
 800883a:	2104      	movs	r1, #4
 800883c:	4618      	mov	r0, r3
 800883e:	f7ff ff37 	bl	80086b0 <blk0>
 8008842:	4603      	mov	r3, r0
 8008844:	18e2      	adds	r2, r4, r3
 8008846:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008848:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800884c:	441a      	add	r2, r3
 800884e:	4b83      	ldr	r3, [pc, #524]	; (8008a5c <mg_sha1_transform+0x354>)
 8008850:	4413      	add	r3, r2
 8008852:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008854:	4413      	add	r3, r2
 8008856:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800885a:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800885e:	657b      	str	r3, [r7, #84]	; 0x54
  R0(a, b, c, d, e, 5);
 8008860:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008862:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008864:	405a      	eors	r2, r3
 8008866:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008868:	401a      	ands	r2, r3
 800886a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800886c:	ea82 0403 	eor.w	r4, r2, r3
 8008870:	f107 030c 	add.w	r3, r7, #12
 8008874:	2105      	movs	r1, #5
 8008876:	4618      	mov	r0, r3
 8008878:	f7ff ff1a 	bl	80086b0 <blk0>
 800887c:	4603      	mov	r3, r0
 800887e:	18e2      	adds	r2, r4, r3
 8008880:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008882:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008886:	441a      	add	r2, r3
 8008888:	4b74      	ldr	r3, [pc, #464]	; (8008a5c <mg_sha1_transform+0x354>)
 800888a:	4413      	add	r3, r2
 800888c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800888e:	4413      	add	r3, r2
 8008890:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008892:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008894:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008898:	65bb      	str	r3, [r7, #88]	; 0x58
  R0(e, a, b, c, d, 6);
 800889a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800889c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800889e:	405a      	eors	r2, r3
 80088a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088a2:	401a      	ands	r2, r3
 80088a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088a6:	ea82 0403 	eor.w	r4, r2, r3
 80088aa:	f107 030c 	add.w	r3, r7, #12
 80088ae:	2106      	movs	r1, #6
 80088b0:	4618      	mov	r0, r3
 80088b2:	f7ff fefd 	bl	80086b0 <blk0>
 80088b6:	4603      	mov	r3, r0
 80088b8:	18e2      	adds	r2, r4, r3
 80088ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088bc:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80088c0:	441a      	add	r2, r3
 80088c2:	4b66      	ldr	r3, [pc, #408]	; (8008a5c <mg_sha1_transform+0x354>)
 80088c4:	4413      	add	r3, r2
 80088c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80088c8:	4413      	add	r3, r2
 80088ca:	653b      	str	r3, [r7, #80]	; 0x50
 80088cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088ce:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80088d2:	65fb      	str	r3, [r7, #92]	; 0x5c
  R0(d, e, a, b, c, 7);
 80088d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80088d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80088d8:	405a      	eors	r2, r3
 80088da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088dc:	401a      	ands	r2, r3
 80088de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80088e0:	ea82 0403 	eor.w	r4, r2, r3
 80088e4:	f107 030c 	add.w	r3, r7, #12
 80088e8:	2107      	movs	r1, #7
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7ff fee0 	bl	80086b0 <blk0>
 80088f0:	4603      	mov	r3, r0
 80088f2:	18e2      	adds	r2, r4, r3
 80088f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088f6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80088fa:	441a      	add	r2, r3
 80088fc:	4b57      	ldr	r3, [pc, #348]	; (8008a5c <mg_sha1_transform+0x354>)
 80088fe:	4413      	add	r3, r2
 8008900:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008902:	4413      	add	r3, r2
 8008904:	657b      	str	r3, [r7, #84]	; 0x54
 8008906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008908:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800890c:	64fb      	str	r3, [r7, #76]	; 0x4c
  R0(c, d, e, a, b, 8);
 800890e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008910:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008912:	405a      	eors	r2, r3
 8008914:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008916:	401a      	ands	r2, r3
 8008918:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800891a:	ea82 0403 	eor.w	r4, r2, r3
 800891e:	f107 030c 	add.w	r3, r7, #12
 8008922:	2108      	movs	r1, #8
 8008924:	4618      	mov	r0, r3
 8008926:	f7ff fec3 	bl	80086b0 <blk0>
 800892a:	4603      	mov	r3, r0
 800892c:	18e2      	adds	r2, r4, r3
 800892e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008930:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008934:	441a      	add	r2, r3
 8008936:	4b49      	ldr	r3, [pc, #292]	; (8008a5c <mg_sha1_transform+0x354>)
 8008938:	4413      	add	r3, r2
 800893a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800893c:	4413      	add	r3, r2
 800893e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008940:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008942:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008946:	653b      	str	r3, [r7, #80]	; 0x50
  R0(b, c, d, e, a, 9);
 8008948:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800894a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800894c:	405a      	eors	r2, r3
 800894e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008950:	401a      	ands	r2, r3
 8008952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008954:	ea82 0403 	eor.w	r4, r2, r3
 8008958:	f107 030c 	add.w	r3, r7, #12
 800895c:	2109      	movs	r1, #9
 800895e:	4618      	mov	r0, r3
 8008960:	f7ff fea6 	bl	80086b0 <blk0>
 8008964:	4603      	mov	r3, r0
 8008966:	18e2      	adds	r2, r4, r3
 8008968:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800896a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800896e:	441a      	add	r2, r3
 8008970:	4b3a      	ldr	r3, [pc, #232]	; (8008a5c <mg_sha1_transform+0x354>)
 8008972:	4413      	add	r3, r2
 8008974:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008976:	4413      	add	r3, r2
 8008978:	65fb      	str	r3, [r7, #92]	; 0x5c
 800897a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800897c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008980:	657b      	str	r3, [r7, #84]	; 0x54
  R0(a, b, c, d, e, 10);
 8008982:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008984:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008986:	405a      	eors	r2, r3
 8008988:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800898a:	401a      	ands	r2, r3
 800898c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800898e:	ea82 0403 	eor.w	r4, r2, r3
 8008992:	f107 030c 	add.w	r3, r7, #12
 8008996:	210a      	movs	r1, #10
 8008998:	4618      	mov	r0, r3
 800899a:	f7ff fe89 	bl	80086b0 <blk0>
 800899e:	4603      	mov	r3, r0
 80089a0:	18e2      	adds	r2, r4, r3
 80089a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089a4:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80089a8:	441a      	add	r2, r3
 80089aa:	4b2c      	ldr	r3, [pc, #176]	; (8008a5c <mg_sha1_transform+0x354>)
 80089ac:	4413      	add	r3, r2
 80089ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80089b0:	4413      	add	r3, r2
 80089b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80089b6:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80089ba:	65bb      	str	r3, [r7, #88]	; 0x58
  R0(e, a, b, c, d, 11);
 80089bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80089be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089c0:	405a      	eors	r2, r3
 80089c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089c4:	401a      	ands	r2, r3
 80089c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089c8:	ea82 0403 	eor.w	r4, r2, r3
 80089cc:	f107 030c 	add.w	r3, r7, #12
 80089d0:	210b      	movs	r1, #11
 80089d2:	4618      	mov	r0, r3
 80089d4:	f7ff fe6c 	bl	80086b0 <blk0>
 80089d8:	4603      	mov	r3, r0
 80089da:	18e2      	adds	r2, r4, r3
 80089dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089de:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80089e2:	441a      	add	r2, r3
 80089e4:	4b1d      	ldr	r3, [pc, #116]	; (8008a5c <mg_sha1_transform+0x354>)
 80089e6:	4413      	add	r3, r2
 80089e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80089ea:	4413      	add	r3, r2
 80089ec:	653b      	str	r3, [r7, #80]	; 0x50
 80089ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089f0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80089f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  R0(d, e, a, b, c, 12);
 80089f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80089f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80089fa:	405a      	eors	r2, r3
 80089fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089fe:	401a      	ands	r2, r3
 8008a00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a02:	ea82 0403 	eor.w	r4, r2, r3
 8008a06:	f107 030c 	add.w	r3, r7, #12
 8008a0a:	210c      	movs	r1, #12
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f7ff fe4f 	bl	80086b0 <blk0>
 8008a12:	4603      	mov	r3, r0
 8008a14:	18e2      	adds	r2, r4, r3
 8008a16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a18:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008a1c:	441a      	add	r2, r3
 8008a1e:	4b0f      	ldr	r3, [pc, #60]	; (8008a5c <mg_sha1_transform+0x354>)
 8008a20:	4413      	add	r3, r2
 8008a22:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008a24:	4413      	add	r3, r2
 8008a26:	657b      	str	r3, [r7, #84]	; 0x54
 8008a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a2a:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  R0(c, d, e, a, b, 13);
 8008a30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a34:	405a      	eors	r2, r3
 8008a36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a38:	401a      	ands	r2, r3
 8008a3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a3c:	ea82 0403 	eor.w	r4, r2, r3
 8008a40:	f107 030c 	add.w	r3, r7, #12
 8008a44:	210d      	movs	r1, #13
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7ff fe32 	bl	80086b0 <blk0>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	18e2      	adds	r2, r4, r3
 8008a50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a52:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008a56:	441a      	add	r2, r3
 8008a58:	e002      	b.n	8008a60 <mg_sha1_transform+0x358>
 8008a5a:	bf00      	nop
 8008a5c:	5a827999 	.word	0x5a827999
 8008a60:	4bac      	ldr	r3, [pc, #688]	; (8008d14 <mg_sha1_transform+0x60c>)
 8008a62:	4413      	add	r3, r2
 8008a64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008a66:	4413      	add	r3, r2
 8008a68:	65bb      	str	r3, [r7, #88]	; 0x58
 8008a6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a6c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008a70:	653b      	str	r3, [r7, #80]	; 0x50
  R0(b, c, d, e, a, 14);
 8008a72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008a74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a76:	405a      	eors	r2, r3
 8008a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a7a:	401a      	ands	r2, r3
 8008a7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a7e:	ea82 0403 	eor.w	r4, r2, r3
 8008a82:	f107 030c 	add.w	r3, r7, #12
 8008a86:	210e      	movs	r1, #14
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f7ff fe11 	bl	80086b0 <blk0>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	18e2      	adds	r2, r4, r3
 8008a92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a94:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008a98:	441a      	add	r2, r3
 8008a9a:	4b9e      	ldr	r3, [pc, #632]	; (8008d14 <mg_sha1_transform+0x60c>)
 8008a9c:	4413      	add	r3, r2
 8008a9e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008aa0:	4413      	add	r3, r2
 8008aa2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008aa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008aa6:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008aaa:	657b      	str	r3, [r7, #84]	; 0x54
  R0(a, b, c, d, e, 15);
 8008aac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008aae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ab0:	405a      	eors	r2, r3
 8008ab2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ab4:	401a      	ands	r2, r3
 8008ab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ab8:	ea82 0403 	eor.w	r4, r2, r3
 8008abc:	f107 030c 	add.w	r3, r7, #12
 8008ac0:	210f      	movs	r1, #15
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f7ff fdf4 	bl	80086b0 <blk0>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	18e2      	adds	r2, r4, r3
 8008acc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ace:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008ad2:	441a      	add	r2, r3
 8008ad4:	4b8f      	ldr	r3, [pc, #572]	; (8008d14 <mg_sha1_transform+0x60c>)
 8008ad6:	4413      	add	r3, r2
 8008ad8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ada:	4413      	add	r3, r2
 8008adc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ade:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ae0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008ae4:	65bb      	str	r3, [r7, #88]	; 0x58
  R1(e, a, b, c, d, 16);
 8008ae6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008ae8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008aea:	405a      	eors	r2, r3
 8008aec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008aee:	401a      	ands	r2, r3
 8008af0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008af2:	405a      	eors	r2, r3
 8008af4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af8:	4059      	eors	r1, r3
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	4059      	eors	r1, r3
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	404b      	eors	r3, r1
 8008b02:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008b06:	60fb      	str	r3, [r7, #12]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	441a      	add	r2, r3
 8008b0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b0e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008b12:	441a      	add	r2, r3
 8008b14:	4b7f      	ldr	r3, [pc, #508]	; (8008d14 <mg_sha1_transform+0x60c>)
 8008b16:	4413      	add	r3, r2
 8008b18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b1a:	4413      	add	r3, r2
 8008b1c:	653b      	str	r3, [r7, #80]	; 0x50
 8008b1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b20:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008b24:	65fb      	str	r3, [r7, #92]	; 0x5c
  R1(d, e, a, b, c, 17);
 8008b26:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008b28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b2a:	405a      	eors	r2, r3
 8008b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b2e:	401a      	ands	r2, r3
 8008b30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b32:	405a      	eors	r2, r3
 8008b34:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b38:	4059      	eors	r1, r3
 8008b3a:	69bb      	ldr	r3, [r7, #24]
 8008b3c:	4059      	eors	r1, r3
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	404b      	eors	r3, r1
 8008b42:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008b46:	613b      	str	r3, [r7, #16]
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	441a      	add	r2, r3
 8008b4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b4e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008b52:	441a      	add	r2, r3
 8008b54:	4b6f      	ldr	r3, [pc, #444]	; (8008d14 <mg_sha1_transform+0x60c>)
 8008b56:	4413      	add	r3, r2
 8008b58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008b5a:	4413      	add	r3, r2
 8008b5c:	657b      	str	r3, [r7, #84]	; 0x54
 8008b5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b60:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008b64:	64fb      	str	r3, [r7, #76]	; 0x4c
  R1(c, d, e, a, b, 18);
 8008b66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008b68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b6a:	405a      	eors	r2, r3
 8008b6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b6e:	401a      	ands	r2, r3
 8008b70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b72:	405a      	eors	r2, r3
 8008b74:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b78:	4059      	eors	r1, r3
 8008b7a:	69fb      	ldr	r3, [r7, #28]
 8008b7c:	4059      	eors	r1, r3
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	404b      	eors	r3, r1
 8008b82:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008b86:	617b      	str	r3, [r7, #20]
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	441a      	add	r2, r3
 8008b8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b8e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008b92:	441a      	add	r2, r3
 8008b94:	4b5f      	ldr	r3, [pc, #380]	; (8008d14 <mg_sha1_transform+0x60c>)
 8008b96:	4413      	add	r3, r2
 8008b98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008b9a:	4413      	add	r3, r2
 8008b9c:	65bb      	str	r3, [r7, #88]	; 0x58
 8008b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ba0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008ba4:	653b      	str	r3, [r7, #80]	; 0x50
  R1(b, c, d, e, a, 19);
 8008ba6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008baa:	405a      	eors	r2, r3
 8008bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bae:	401a      	ands	r2, r3
 8008bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bb2:	405a      	eors	r2, r3
 8008bb4:	68f9      	ldr	r1, [r7, #12]
 8008bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb8:	4059      	eors	r1, r3
 8008bba:	6a3b      	ldr	r3, [r7, #32]
 8008bbc:	4059      	eors	r1, r3
 8008bbe:	69bb      	ldr	r3, [r7, #24]
 8008bc0:	404b      	eors	r3, r1
 8008bc2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008bc6:	61bb      	str	r3, [r7, #24]
 8008bc8:	69bb      	ldr	r3, [r7, #24]
 8008bca:	441a      	add	r2, r3
 8008bcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008bce:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008bd2:	441a      	add	r2, r3
 8008bd4:	4b4f      	ldr	r3, [pc, #316]	; (8008d14 <mg_sha1_transform+0x60c>)
 8008bd6:	4413      	add	r3, r2
 8008bd8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008bda:	4413      	add	r3, r2
 8008bdc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008bde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008be0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008be4:	657b      	str	r3, [r7, #84]	; 0x54
  R2(a, b, c, d, e, 20);
 8008be6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008be8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bea:	405a      	eors	r2, r3
 8008bec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bee:	405a      	eors	r2, r3
 8008bf0:	6939      	ldr	r1, [r7, #16]
 8008bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bf4:	4059      	eors	r1, r3
 8008bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf8:	4059      	eors	r1, r3
 8008bfa:	69fb      	ldr	r3, [r7, #28]
 8008bfc:	404b      	eors	r3, r1
 8008bfe:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008c02:	61fb      	str	r3, [r7, #28]
 8008c04:	69fb      	ldr	r3, [r7, #28]
 8008c06:	441a      	add	r2, r3
 8008c08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c0a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008c0e:	441a      	add	r2, r3
 8008c10:	4b41      	ldr	r3, [pc, #260]	; (8008d18 <mg_sha1_transform+0x610>)
 8008c12:	4413      	add	r3, r2
 8008c14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008c16:	4413      	add	r3, r2
 8008c18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c1c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008c20:	65bb      	str	r3, [r7, #88]	; 0x58
  R2(e, a, b, c, d, 21);
 8008c22:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008c24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c26:	405a      	eors	r2, r3
 8008c28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c2a:	405a      	eors	r2, r3
 8008c2c:	6979      	ldr	r1, [r7, #20]
 8008c2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c30:	4059      	eors	r1, r3
 8008c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c34:	4059      	eors	r1, r3
 8008c36:	6a3b      	ldr	r3, [r7, #32]
 8008c38:	404b      	eors	r3, r1
 8008c3a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008c3e:	623b      	str	r3, [r7, #32]
 8008c40:	6a3b      	ldr	r3, [r7, #32]
 8008c42:	441a      	add	r2, r3
 8008c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c46:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008c4a:	441a      	add	r2, r3
 8008c4c:	4b32      	ldr	r3, [pc, #200]	; (8008d18 <mg_sha1_transform+0x610>)
 8008c4e:	4413      	add	r3, r2
 8008c50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008c52:	4413      	add	r3, r2
 8008c54:	653b      	str	r3, [r7, #80]	; 0x50
 8008c56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c58:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008c5c:	65fb      	str	r3, [r7, #92]	; 0x5c
  R2(d, e, a, b, c, 22);
 8008c5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008c60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c62:	405a      	eors	r2, r3
 8008c64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c66:	405a      	eors	r2, r3
 8008c68:	69b9      	ldr	r1, [r7, #24]
 8008c6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c6c:	4059      	eors	r1, r3
 8008c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c70:	4059      	eors	r1, r3
 8008c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c74:	404b      	eors	r3, r1
 8008c76:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8008c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7e:	441a      	add	r2, r3
 8008c80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c82:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008c86:	441a      	add	r2, r3
 8008c88:	4b23      	ldr	r3, [pc, #140]	; (8008d18 <mg_sha1_transform+0x610>)
 8008c8a:	4413      	add	r3, r2
 8008c8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008c8e:	4413      	add	r3, r2
 8008c90:	657b      	str	r3, [r7, #84]	; 0x54
 8008c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c94:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008c98:	64fb      	str	r3, [r7, #76]	; 0x4c
  R2(c, d, e, a, b, 23);
 8008c9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008c9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c9e:	405a      	eors	r2, r3
 8008ca0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ca2:	405a      	eors	r2, r3
 8008ca4:	69f9      	ldr	r1, [r7, #28]
 8008ca6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ca8:	4059      	eors	r1, r3
 8008caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cac:	4059      	eors	r1, r3
 8008cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb0:	404b      	eors	r3, r1
 8008cb2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008cb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8008cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cba:	441a      	add	r2, r3
 8008cbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cbe:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008cc2:	441a      	add	r2, r3
 8008cc4:	4b14      	ldr	r3, [pc, #80]	; (8008d18 <mg_sha1_transform+0x610>)
 8008cc6:	4413      	add	r3, r2
 8008cc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008cca:	4413      	add	r3, r2
 8008ccc:	65bb      	str	r3, [r7, #88]	; 0x58
 8008cce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cd0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008cd4:	653b      	str	r3, [r7, #80]	; 0x50
  R2(b, c, d, e, a, 24);
 8008cd6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008cd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cda:	405a      	eors	r2, r3
 8008cdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cde:	405a      	eors	r2, r3
 8008ce0:	6a39      	ldr	r1, [r7, #32]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	4059      	eors	r1, r3
 8008ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ce8:	4059      	eors	r1, r3
 8008cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cec:	404b      	eors	r3, r1
 8008cee:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf6:	441a      	add	r2, r3
 8008cf8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008cfa:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008cfe:	441a      	add	r2, r3
 8008d00:	4b05      	ldr	r3, [pc, #20]	; (8008d18 <mg_sha1_transform+0x610>)
 8008d02:	4413      	add	r3, r2
 8008d04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008d06:	4413      	add	r3, r2
 8008d08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d0c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008d10:	e004      	b.n	8008d1c <mg_sha1_transform+0x614>
 8008d12:	bf00      	nop
 8008d14:	5a827999 	.word	0x5a827999
 8008d18:	6ed9eba1 	.word	0x6ed9eba1
 8008d1c:	657b      	str	r3, [r7, #84]	; 0x54
  R2(a, b, c, d, e, 25);
 8008d1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d22:	405a      	eors	r2, r3
 8008d24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d26:	405a      	eors	r2, r3
 8008d28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	4059      	eors	r1, r3
 8008d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d30:	4059      	eors	r1, r3
 8008d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d34:	404b      	eors	r3, r1
 8008d36:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008d3a:	633b      	str	r3, [r7, #48]	; 0x30
 8008d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d3e:	441a      	add	r2, r3
 8008d40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d42:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008d46:	441a      	add	r2, r3
 8008d48:	4ba9      	ldr	r3, [pc, #676]	; (8008ff0 <mg_sha1_transform+0x8e8>)
 8008d4a:	4413      	add	r3, r2
 8008d4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008d4e:	4413      	add	r3, r2
 8008d50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d54:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008d58:	65bb      	str	r3, [r7, #88]	; 0x58
  R2(e, a, b, c, d, 26);
 8008d5a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008d5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d5e:	405a      	eors	r2, r3
 8008d60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d62:	405a      	eors	r2, r3
 8008d64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	4059      	eors	r1, r3
 8008d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d6c:	4059      	eors	r1, r3
 8008d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d70:	404b      	eors	r3, r1
 8008d72:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008d76:	637b      	str	r3, [r7, #52]	; 0x34
 8008d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d7a:	441a      	add	r2, r3
 8008d7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d7e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008d82:	441a      	add	r2, r3
 8008d84:	4b9a      	ldr	r3, [pc, #616]	; (8008ff0 <mg_sha1_transform+0x8e8>)
 8008d86:	4413      	add	r3, r2
 8008d88:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008d8a:	4413      	add	r3, r2
 8008d8c:	653b      	str	r3, [r7, #80]	; 0x50
 8008d8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d90:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008d94:	65fb      	str	r3, [r7, #92]	; 0x5c
  R2(d, e, a, b, c, 27);
 8008d96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008d98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d9a:	405a      	eors	r2, r3
 8008d9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d9e:	405a      	eors	r2, r3
 8008da0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008da2:	69bb      	ldr	r3, [r7, #24]
 8008da4:	4059      	eors	r1, r3
 8008da6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008da8:	4059      	eors	r1, r3
 8008daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dac:	404b      	eors	r3, r1
 8008dae:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008db2:	63bb      	str	r3, [r7, #56]	; 0x38
 8008db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db6:	441a      	add	r2, r3
 8008db8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dba:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008dbe:	441a      	add	r2, r3
 8008dc0:	4b8b      	ldr	r3, [pc, #556]	; (8008ff0 <mg_sha1_transform+0x8e8>)
 8008dc2:	4413      	add	r3, r2
 8008dc4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008dc6:	4413      	add	r3, r2
 8008dc8:	657b      	str	r3, [r7, #84]	; 0x54
 8008dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dcc:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008dd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  R2(c, d, e, a, b, 28);
 8008dd2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dd6:	405a      	eors	r2, r3
 8008dd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008dda:	405a      	eors	r2, r3
 8008ddc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008dde:	69fb      	ldr	r3, [r7, #28]
 8008de0:	4059      	eors	r1, r3
 8008de2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008de4:	4059      	eors	r1, r3
 8008de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008de8:	404b      	eors	r3, r1
 8008dea:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008dee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008df2:	441a      	add	r2, r3
 8008df4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008df6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008dfa:	441a      	add	r2, r3
 8008dfc:	4b7c      	ldr	r3, [pc, #496]	; (8008ff0 <mg_sha1_transform+0x8e8>)
 8008dfe:	4413      	add	r3, r2
 8008e00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e02:	4413      	add	r3, r2
 8008e04:	65bb      	str	r3, [r7, #88]	; 0x58
 8008e06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e08:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008e0c:	653b      	str	r3, [r7, #80]	; 0x50
  R2(b, c, d, e, a, 29);
 8008e0e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008e10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e12:	405a      	eors	r2, r3
 8008e14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e16:	405a      	eors	r2, r3
 8008e18:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008e1a:	6a3b      	ldr	r3, [r7, #32]
 8008e1c:	4059      	eors	r1, r3
 8008e1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e20:	4059      	eors	r1, r3
 8008e22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e24:	404b      	eors	r3, r1
 8008e26:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008e2a:	643b      	str	r3, [r7, #64]	; 0x40
 8008e2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e2e:	441a      	add	r2, r3
 8008e30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e32:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008e36:	441a      	add	r2, r3
 8008e38:	4b6d      	ldr	r3, [pc, #436]	; (8008ff0 <mg_sha1_transform+0x8e8>)
 8008e3a:	4413      	add	r3, r2
 8008e3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008e3e:	4413      	add	r3, r2
 8008e40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e44:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008e48:	657b      	str	r3, [r7, #84]	; 0x54
  R2(a, b, c, d, e, 30);
 8008e4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e4e:	405a      	eors	r2, r3
 8008e50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e52:	405a      	eors	r2, r3
 8008e54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e58:	4059      	eors	r1, r3
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	4059      	eors	r1, r3
 8008e5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e60:	404b      	eors	r3, r1
 8008e62:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008e66:	647b      	str	r3, [r7, #68]	; 0x44
 8008e68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e6a:	441a      	add	r2, r3
 8008e6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e6e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008e72:	441a      	add	r2, r3
 8008e74:	4b5e      	ldr	r3, [pc, #376]	; (8008ff0 <mg_sha1_transform+0x8e8>)
 8008e76:	4413      	add	r3, r2
 8008e78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008e7a:	4413      	add	r3, r2
 8008e7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e80:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008e84:	65bb      	str	r3, [r7, #88]	; 0x58
  R2(e, a, b, c, d, 31);
 8008e86:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008e88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e8a:	405a      	eors	r2, r3
 8008e8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e8e:	405a      	eors	r2, r3
 8008e90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e94:	4059      	eors	r1, r3
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	4059      	eors	r1, r3
 8008e9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e9c:	404b      	eors	r3, r1
 8008e9e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008ea2:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ea4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ea6:	441a      	add	r2, r3
 8008ea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008eaa:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008eae:	441a      	add	r2, r3
 8008eb0:	4b4f      	ldr	r3, [pc, #316]	; (8008ff0 <mg_sha1_transform+0x8e8>)
 8008eb2:	4413      	add	r3, r2
 8008eb4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008eb6:	4413      	add	r3, r2
 8008eb8:	653b      	str	r3, [r7, #80]	; 0x50
 8008eba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ebc:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008ec0:	65fb      	str	r3, [r7, #92]	; 0x5c
  R2(d, e, a, b, c, 32);
 8008ec2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ec4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ec6:	405a      	eors	r2, r3
 8008ec8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008eca:	405a      	eors	r2, r3
 8008ecc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed0:	4059      	eors	r1, r3
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	4059      	eors	r1, r3
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	404b      	eors	r3, r1
 8008eda:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008ede:	60fb      	str	r3, [r7, #12]
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	441a      	add	r2, r3
 8008ee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ee6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008eea:	441a      	add	r2, r3
 8008eec:	4b40      	ldr	r3, [pc, #256]	; (8008ff0 <mg_sha1_transform+0x8e8>)
 8008eee:	4413      	add	r3, r2
 8008ef0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008ef2:	4413      	add	r3, r2
 8008ef4:	657b      	str	r3, [r7, #84]	; 0x54
 8008ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ef8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008efc:	64fb      	str	r3, [r7, #76]	; 0x4c
  R2(c, d, e, a, b, 33);
 8008efe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008f00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f02:	405a      	eors	r2, r3
 8008f04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f06:	405a      	eors	r2, r3
 8008f08:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f0c:	4059      	eors	r1, r3
 8008f0e:	69bb      	ldr	r3, [r7, #24]
 8008f10:	4059      	eors	r1, r3
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	404b      	eors	r3, r1
 8008f16:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008f1a:	613b      	str	r3, [r7, #16]
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	441a      	add	r2, r3
 8008f20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f22:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008f26:	441a      	add	r2, r3
 8008f28:	4b31      	ldr	r3, [pc, #196]	; (8008ff0 <mg_sha1_transform+0x8e8>)
 8008f2a:	4413      	add	r3, r2
 8008f2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f2e:	4413      	add	r3, r2
 8008f30:	65bb      	str	r3, [r7, #88]	; 0x58
 8008f32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f34:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008f38:	653b      	str	r3, [r7, #80]	; 0x50
  R2(b, c, d, e, a, 34);
 8008f3a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008f3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f3e:	405a      	eors	r2, r3
 8008f40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f42:	405a      	eors	r2, r3
 8008f44:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f48:	4059      	eors	r1, r3
 8008f4a:	69fb      	ldr	r3, [r7, #28]
 8008f4c:	4059      	eors	r1, r3
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	404b      	eors	r3, r1
 8008f52:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008f56:	617b      	str	r3, [r7, #20]
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	441a      	add	r2, r3
 8008f5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f5e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008f62:	441a      	add	r2, r3
 8008f64:	4b22      	ldr	r3, [pc, #136]	; (8008ff0 <mg_sha1_transform+0x8e8>)
 8008f66:	4413      	add	r3, r2
 8008f68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008f6a:	4413      	add	r3, r2
 8008f6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f70:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008f74:	657b      	str	r3, [r7, #84]	; 0x54
  R2(a, b, c, d, e, 35);
 8008f76:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f7a:	405a      	eors	r2, r3
 8008f7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f7e:	405a      	eors	r2, r3
 8008f80:	68f9      	ldr	r1, [r7, #12]
 8008f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f84:	4059      	eors	r1, r3
 8008f86:	6a3b      	ldr	r3, [r7, #32]
 8008f88:	4059      	eors	r1, r3
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	404b      	eors	r3, r1
 8008f8e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008f92:	61bb      	str	r3, [r7, #24]
 8008f94:	69bb      	ldr	r3, [r7, #24]
 8008f96:	441a      	add	r2, r3
 8008f98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f9a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008f9e:	441a      	add	r2, r3
 8008fa0:	4b13      	ldr	r3, [pc, #76]	; (8008ff0 <mg_sha1_transform+0x8e8>)
 8008fa2:	4413      	add	r3, r2
 8008fa4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008fa6:	4413      	add	r3, r2
 8008fa8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008faa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008fac:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008fb0:	65bb      	str	r3, [r7, #88]	; 0x58
  R2(e, a, b, c, d, 36);
 8008fb2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008fb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008fb6:	405a      	eors	r2, r3
 8008fb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008fba:	405a      	eors	r2, r3
 8008fbc:	6939      	ldr	r1, [r7, #16]
 8008fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fc0:	4059      	eors	r1, r3
 8008fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc4:	4059      	eors	r1, r3
 8008fc6:	69fb      	ldr	r3, [r7, #28]
 8008fc8:	404b      	eors	r3, r1
 8008fca:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008fce:	61fb      	str	r3, [r7, #28]
 8008fd0:	69fb      	ldr	r3, [r7, #28]
 8008fd2:	441a      	add	r2, r3
 8008fd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fd6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008fda:	441a      	add	r2, r3
 8008fdc:	4b04      	ldr	r3, [pc, #16]	; (8008ff0 <mg_sha1_transform+0x8e8>)
 8008fde:	4413      	add	r3, r2
 8008fe0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008fe2:	4413      	add	r3, r2
 8008fe4:	653b      	str	r3, [r7, #80]	; 0x50
 8008fe6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008fe8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008fec:	e002      	b.n	8008ff4 <mg_sha1_transform+0x8ec>
 8008fee:	bf00      	nop
 8008ff0:	6ed9eba1 	.word	0x6ed9eba1
 8008ff4:	65fb      	str	r3, [r7, #92]	; 0x5c
  R2(d, e, a, b, c, 37);
 8008ff6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ff8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ffa:	405a      	eors	r2, r3
 8008ffc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ffe:	405a      	eors	r2, r3
 8009000:	6979      	ldr	r1, [r7, #20]
 8009002:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009004:	4059      	eors	r1, r3
 8009006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009008:	4059      	eors	r1, r3
 800900a:	6a3b      	ldr	r3, [r7, #32]
 800900c:	404b      	eors	r3, r1
 800900e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8009012:	623b      	str	r3, [r7, #32]
 8009014:	6a3b      	ldr	r3, [r7, #32]
 8009016:	441a      	add	r2, r3
 8009018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800901a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800901e:	441a      	add	r2, r3
 8009020:	4ba9      	ldr	r3, [pc, #676]	; (80092c8 <mg_sha1_transform+0xbc0>)
 8009022:	4413      	add	r3, r2
 8009024:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009026:	4413      	add	r3, r2
 8009028:	657b      	str	r3, [r7, #84]	; 0x54
 800902a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800902c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8009030:	64fb      	str	r3, [r7, #76]	; 0x4c
  R2(c, d, e, a, b, 38);
 8009032:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009036:	405a      	eors	r2, r3
 8009038:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800903a:	405a      	eors	r2, r3
 800903c:	69b9      	ldr	r1, [r7, #24]
 800903e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009040:	4059      	eors	r1, r3
 8009042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009044:	4059      	eors	r1, r3
 8009046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009048:	404b      	eors	r3, r1
 800904a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800904e:	627b      	str	r3, [r7, #36]	; 0x24
 8009050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009052:	441a      	add	r2, r3
 8009054:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009056:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800905a:	441a      	add	r2, r3
 800905c:	4b9a      	ldr	r3, [pc, #616]	; (80092c8 <mg_sha1_transform+0xbc0>)
 800905e:	4413      	add	r3, r2
 8009060:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009062:	4413      	add	r3, r2
 8009064:	65bb      	str	r3, [r7, #88]	; 0x58
 8009066:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009068:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800906c:	653b      	str	r3, [r7, #80]	; 0x50
  R2(b, c, d, e, a, 39);
 800906e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009070:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009072:	405a      	eors	r2, r3
 8009074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009076:	405a      	eors	r2, r3
 8009078:	69f9      	ldr	r1, [r7, #28]
 800907a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800907c:	4059      	eors	r1, r3
 800907e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009080:	4059      	eors	r1, r3
 8009082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009084:	404b      	eors	r3, r1
 8009086:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800908a:	62bb      	str	r3, [r7, #40]	; 0x28
 800908c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908e:	441a      	add	r2, r3
 8009090:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009092:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8009096:	441a      	add	r2, r3
 8009098:	4b8b      	ldr	r3, [pc, #556]	; (80092c8 <mg_sha1_transform+0xbc0>)
 800909a:	4413      	add	r3, r2
 800909c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800909e:	4413      	add	r3, r2
 80090a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80090a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090a4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80090a8:	657b      	str	r3, [r7, #84]	; 0x54
  R3(a, b, c, d, e, 40);
 80090aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80090ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090ae:	431a      	orrs	r2, r3
 80090b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090b2:	401a      	ands	r2, r3
 80090b4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80090b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090b8:	400b      	ands	r3, r1
 80090ba:	431a      	orrs	r2, r3
 80090bc:	6a39      	ldr	r1, [r7, #32]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	4059      	eors	r1, r3
 80090c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090c4:	4059      	eors	r1, r3
 80090c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c8:	404b      	eors	r3, r1
 80090ca:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80090ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090d2:	441a      	add	r2, r3
 80090d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090d6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80090da:	441a      	add	r2, r3
 80090dc:	4b7b      	ldr	r3, [pc, #492]	; (80092cc <mg_sha1_transform+0xbc4>)
 80090de:	4413      	add	r3, r2
 80090e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80090e2:	4413      	add	r3, r2
 80090e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80090e8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80090ec:	65bb      	str	r3, [r7, #88]	; 0x58
  R3(e, a, b, c, d, 41);
 80090ee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80090f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80090f2:	431a      	orrs	r2, r3
 80090f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090f6:	401a      	ands	r2, r3
 80090f8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80090fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80090fc:	400b      	ands	r3, r1
 80090fe:	431a      	orrs	r2, r3
 8009100:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	4059      	eors	r1, r3
 8009106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009108:	4059      	eors	r1, r3
 800910a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800910c:	404b      	eors	r3, r1
 800910e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8009112:	633b      	str	r3, [r7, #48]	; 0x30
 8009114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009116:	441a      	add	r2, r3
 8009118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800911a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800911e:	441a      	add	r2, r3
 8009120:	4b6a      	ldr	r3, [pc, #424]	; (80092cc <mg_sha1_transform+0xbc4>)
 8009122:	4413      	add	r3, r2
 8009124:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009126:	4413      	add	r3, r2
 8009128:	653b      	str	r3, [r7, #80]	; 0x50
 800912a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800912c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8009130:	65fb      	str	r3, [r7, #92]	; 0x5c
  R3(d, e, a, b, c, 42);
 8009132:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009134:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009136:	431a      	orrs	r2, r3
 8009138:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800913a:	401a      	ands	r2, r3
 800913c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800913e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009140:	400b      	ands	r3, r1
 8009142:	431a      	orrs	r2, r3
 8009144:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	4059      	eors	r1, r3
 800914a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800914c:	4059      	eors	r1, r3
 800914e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009150:	404b      	eors	r3, r1
 8009152:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8009156:	637b      	str	r3, [r7, #52]	; 0x34
 8009158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800915a:	441a      	add	r2, r3
 800915c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800915e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8009162:	441a      	add	r2, r3
 8009164:	4b59      	ldr	r3, [pc, #356]	; (80092cc <mg_sha1_transform+0xbc4>)
 8009166:	4413      	add	r3, r2
 8009168:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800916a:	4413      	add	r3, r2
 800916c:	657b      	str	r3, [r7, #84]	; 0x54
 800916e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009170:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8009174:	64fb      	str	r3, [r7, #76]	; 0x4c
  R3(c, d, e, a, b, 43);
 8009176:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800917a:	431a      	orrs	r2, r3
 800917c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800917e:	401a      	ands	r2, r3
 8009180:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009184:	400b      	ands	r3, r1
 8009186:	431a      	orrs	r2, r3
 8009188:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800918a:	69bb      	ldr	r3, [r7, #24]
 800918c:	4059      	eors	r1, r3
 800918e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009190:	4059      	eors	r1, r3
 8009192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009194:	404b      	eors	r3, r1
 8009196:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800919a:	63bb      	str	r3, [r7, #56]	; 0x38
 800919c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800919e:	441a      	add	r2, r3
 80091a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091a2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80091a6:	441a      	add	r2, r3
 80091a8:	4b48      	ldr	r3, [pc, #288]	; (80092cc <mg_sha1_transform+0xbc4>)
 80091aa:	4413      	add	r3, r2
 80091ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80091ae:	4413      	add	r3, r2
 80091b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80091b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091b4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80091b8:	653b      	str	r3, [r7, #80]	; 0x50
  R3(b, c, d, e, a, 44);
 80091ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80091bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091be:	431a      	orrs	r2, r3
 80091c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091c2:	401a      	ands	r2, r3
 80091c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80091c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091c8:	400b      	ands	r3, r1
 80091ca:	431a      	orrs	r2, r3
 80091cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80091ce:	69fb      	ldr	r3, [r7, #28]
 80091d0:	4059      	eors	r1, r3
 80091d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091d4:	4059      	eors	r1, r3
 80091d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091d8:	404b      	eors	r3, r1
 80091da:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80091de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091e2:	441a      	add	r2, r3
 80091e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80091e6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80091ea:	441a      	add	r2, r3
 80091ec:	4b37      	ldr	r3, [pc, #220]	; (80092cc <mg_sha1_transform+0xbc4>)
 80091ee:	4413      	add	r3, r2
 80091f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80091f2:	4413      	add	r3, r2
 80091f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091f8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80091fc:	657b      	str	r3, [r7, #84]	; 0x54
  R3(a, b, c, d, e, 45);
 80091fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009200:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009202:	431a      	orrs	r2, r3
 8009204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009206:	401a      	ands	r2, r3
 8009208:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800920a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800920c:	400b      	ands	r3, r1
 800920e:	431a      	orrs	r2, r3
 8009210:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009212:	6a3b      	ldr	r3, [r7, #32]
 8009214:	4059      	eors	r1, r3
 8009216:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009218:	4059      	eors	r1, r3
 800921a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800921c:	404b      	eors	r3, r1
 800921e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8009222:	643b      	str	r3, [r7, #64]	; 0x40
 8009224:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009226:	441a      	add	r2, r3
 8009228:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800922a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800922e:	441a      	add	r2, r3
 8009230:	4b26      	ldr	r3, [pc, #152]	; (80092cc <mg_sha1_transform+0xbc4>)
 8009232:	4413      	add	r3, r2
 8009234:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009236:	4413      	add	r3, r2
 8009238:	64fb      	str	r3, [r7, #76]	; 0x4c
 800923a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800923c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8009240:	65bb      	str	r3, [r7, #88]	; 0x58
  R3(e, a, b, c, d, 46);
 8009242:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009244:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009246:	431a      	orrs	r2, r3
 8009248:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800924a:	401a      	ands	r2, r3
 800924c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800924e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009250:	400b      	ands	r3, r1
 8009252:	431a      	orrs	r2, r3
 8009254:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009258:	4059      	eors	r1, r3
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	4059      	eors	r1, r3
 800925e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009260:	404b      	eors	r3, r1
 8009262:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8009266:	647b      	str	r3, [r7, #68]	; 0x44
 8009268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800926a:	441a      	add	r2, r3
 800926c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800926e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8009272:	441a      	add	r2, r3
 8009274:	4b15      	ldr	r3, [pc, #84]	; (80092cc <mg_sha1_transform+0xbc4>)
 8009276:	4413      	add	r3, r2
 8009278:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800927a:	4413      	add	r3, r2
 800927c:	653b      	str	r3, [r7, #80]	; 0x50
 800927e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009280:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8009284:	65fb      	str	r3, [r7, #92]	; 0x5c
  R3(d, e, a, b, c, 47);
 8009286:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009288:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800928a:	431a      	orrs	r2, r3
 800928c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800928e:	401a      	ands	r2, r3
 8009290:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009292:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009294:	400b      	ands	r3, r1
 8009296:	431a      	orrs	r2, r3
 8009298:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800929a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800929c:	4059      	eors	r1, r3
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	4059      	eors	r1, r3
 80092a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092a4:	404b      	eors	r3, r1
 80092a6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80092aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80092ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092ae:	441a      	add	r2, r3
 80092b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092b2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80092b6:	441a      	add	r2, r3
 80092b8:	4b04      	ldr	r3, [pc, #16]	; (80092cc <mg_sha1_transform+0xbc4>)
 80092ba:	4413      	add	r3, r2
 80092bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80092be:	4413      	add	r3, r2
 80092c0:	657b      	str	r3, [r7, #84]	; 0x54
 80092c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092c4:	e004      	b.n	80092d0 <mg_sha1_transform+0xbc8>
 80092c6:	bf00      	nop
 80092c8:	6ed9eba1 	.word	0x6ed9eba1
 80092cc:	8f1bbcdc 	.word	0x8f1bbcdc
 80092d0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80092d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  R3(c, d, e, a, b, 48);
 80092d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80092d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092da:	431a      	orrs	r2, r3
 80092dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092de:	401a      	ands	r2, r3
 80092e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80092e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092e4:	400b      	ands	r3, r1
 80092e6:	431a      	orrs	r2, r3
 80092e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80092ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ec:	4059      	eors	r1, r3
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	4059      	eors	r1, r3
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	404b      	eors	r3, r1
 80092f6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80092fa:	60fb      	str	r3, [r7, #12]
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	441a      	add	r2, r3
 8009300:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009302:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8009306:	441a      	add	r2, r3
 8009308:	4ba8      	ldr	r3, [pc, #672]	; (80095ac <mg_sha1_transform+0xea4>)
 800930a:	4413      	add	r3, r2
 800930c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800930e:	4413      	add	r3, r2
 8009310:	65bb      	str	r3, [r7, #88]	; 0x58
 8009312:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009314:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8009318:	653b      	str	r3, [r7, #80]	; 0x50
  R3(b, c, d, e, a, 49);
 800931a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800931c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800931e:	431a      	orrs	r2, r3
 8009320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009322:	401a      	ands	r2, r3
 8009324:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009328:	400b      	ands	r3, r1
 800932a:	431a      	orrs	r2, r3
 800932c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800932e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009330:	4059      	eors	r1, r3
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	4059      	eors	r1, r3
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	404b      	eors	r3, r1
 800933a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800933e:	613b      	str	r3, [r7, #16]
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	441a      	add	r2, r3
 8009344:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009346:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800934a:	441a      	add	r2, r3
 800934c:	4b97      	ldr	r3, [pc, #604]	; (80095ac <mg_sha1_transform+0xea4>)
 800934e:	4413      	add	r3, r2
 8009350:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009352:	4413      	add	r3, r2
 8009354:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009356:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009358:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800935c:	657b      	str	r3, [r7, #84]	; 0x54
  R3(a, b, c, d, e, 50);
 800935e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009360:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009362:	431a      	orrs	r2, r3
 8009364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009366:	401a      	ands	r2, r3
 8009368:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800936a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800936c:	400b      	ands	r3, r1
 800936e:	431a      	orrs	r2, r3
 8009370:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009374:	4059      	eors	r1, r3
 8009376:	69fb      	ldr	r3, [r7, #28]
 8009378:	4059      	eors	r1, r3
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	404b      	eors	r3, r1
 800937e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8009382:	617b      	str	r3, [r7, #20]
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	441a      	add	r2, r3
 8009388:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800938a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800938e:	441a      	add	r2, r3
 8009390:	4b86      	ldr	r3, [pc, #536]	; (80095ac <mg_sha1_transform+0xea4>)
 8009392:	4413      	add	r3, r2
 8009394:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009396:	4413      	add	r3, r2
 8009398:	64fb      	str	r3, [r7, #76]	; 0x4c
 800939a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800939c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80093a0:	65bb      	str	r3, [r7, #88]	; 0x58
  R3(e, a, b, c, d, 51);
 80093a2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80093a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80093a6:	431a      	orrs	r2, r3
 80093a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093aa:	401a      	ands	r2, r3
 80093ac:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80093ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80093b0:	400b      	ands	r3, r1
 80093b2:	431a      	orrs	r2, r3
 80093b4:	68f9      	ldr	r1, [r7, #12]
 80093b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b8:	4059      	eors	r1, r3
 80093ba:	6a3b      	ldr	r3, [r7, #32]
 80093bc:	4059      	eors	r1, r3
 80093be:	69bb      	ldr	r3, [r7, #24]
 80093c0:	404b      	eors	r3, r1
 80093c2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80093c6:	61bb      	str	r3, [r7, #24]
 80093c8:	69bb      	ldr	r3, [r7, #24]
 80093ca:	441a      	add	r2, r3
 80093cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093ce:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80093d2:	441a      	add	r2, r3
 80093d4:	4b75      	ldr	r3, [pc, #468]	; (80095ac <mg_sha1_transform+0xea4>)
 80093d6:	4413      	add	r3, r2
 80093d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80093da:	4413      	add	r3, r2
 80093dc:	653b      	str	r3, [r7, #80]	; 0x50
 80093de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093e0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80093e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  R3(d, e, a, b, c, 52);
 80093e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80093e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093ea:	431a      	orrs	r2, r3
 80093ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80093ee:	401a      	ands	r2, r3
 80093f0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80093f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093f4:	400b      	ands	r3, r1
 80093f6:	431a      	orrs	r2, r3
 80093f8:	6939      	ldr	r1, [r7, #16]
 80093fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093fc:	4059      	eors	r1, r3
 80093fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009400:	4059      	eors	r1, r3
 8009402:	69fb      	ldr	r3, [r7, #28]
 8009404:	404b      	eors	r3, r1
 8009406:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800940a:	61fb      	str	r3, [r7, #28]
 800940c:	69fb      	ldr	r3, [r7, #28]
 800940e:	441a      	add	r2, r3
 8009410:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009412:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8009416:	441a      	add	r2, r3
 8009418:	4b64      	ldr	r3, [pc, #400]	; (80095ac <mg_sha1_transform+0xea4>)
 800941a:	4413      	add	r3, r2
 800941c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800941e:	4413      	add	r3, r2
 8009420:	657b      	str	r3, [r7, #84]	; 0x54
 8009422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009424:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8009428:	64fb      	str	r3, [r7, #76]	; 0x4c
  R3(c, d, e, a, b, 53);
 800942a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800942c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800942e:	431a      	orrs	r2, r3
 8009430:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009432:	401a      	ands	r2, r3
 8009434:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009438:	400b      	ands	r3, r1
 800943a:	431a      	orrs	r2, r3
 800943c:	6979      	ldr	r1, [r7, #20]
 800943e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009440:	4059      	eors	r1, r3
 8009442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009444:	4059      	eors	r1, r3
 8009446:	6a3b      	ldr	r3, [r7, #32]
 8009448:	404b      	eors	r3, r1
 800944a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800944e:	623b      	str	r3, [r7, #32]
 8009450:	6a3b      	ldr	r3, [r7, #32]
 8009452:	441a      	add	r2, r3
 8009454:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009456:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800945a:	441a      	add	r2, r3
 800945c:	4b53      	ldr	r3, [pc, #332]	; (80095ac <mg_sha1_transform+0xea4>)
 800945e:	4413      	add	r3, r2
 8009460:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009462:	4413      	add	r3, r2
 8009464:	65bb      	str	r3, [r7, #88]	; 0x58
 8009466:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009468:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800946c:	653b      	str	r3, [r7, #80]	; 0x50
  R3(b, c, d, e, a, 54);
 800946e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009472:	431a      	orrs	r2, r3
 8009474:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009476:	401a      	ands	r2, r3
 8009478:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800947a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800947c:	400b      	ands	r3, r1
 800947e:	431a      	orrs	r2, r3
 8009480:	69b9      	ldr	r1, [r7, #24]
 8009482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009484:	4059      	eors	r1, r3
 8009486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009488:	4059      	eors	r1, r3
 800948a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948c:	404b      	eors	r3, r1
 800948e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8009492:	627b      	str	r3, [r7, #36]	; 0x24
 8009494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009496:	441a      	add	r2, r3
 8009498:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800949a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800949e:	441a      	add	r2, r3
 80094a0:	4b42      	ldr	r3, [pc, #264]	; (80095ac <mg_sha1_transform+0xea4>)
 80094a2:	4413      	add	r3, r2
 80094a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80094a6:	4413      	add	r3, r2
 80094a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094ac:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80094b0:	657b      	str	r3, [r7, #84]	; 0x54
  R3(a, b, c, d, e, 55);
 80094b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80094b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094b6:	431a      	orrs	r2, r3
 80094b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094ba:	401a      	ands	r2, r3
 80094bc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80094be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094c0:	400b      	ands	r3, r1
 80094c2:	431a      	orrs	r2, r3
 80094c4:	69f9      	ldr	r1, [r7, #28]
 80094c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094c8:	4059      	eors	r1, r3
 80094ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094cc:	4059      	eors	r1, r3
 80094ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d0:	404b      	eors	r3, r1
 80094d2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80094d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80094d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094da:	441a      	add	r2, r3
 80094dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094de:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80094e2:	441a      	add	r2, r3
 80094e4:	4b31      	ldr	r3, [pc, #196]	; (80095ac <mg_sha1_transform+0xea4>)
 80094e6:	4413      	add	r3, r2
 80094e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80094ea:	4413      	add	r3, r2
 80094ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80094f0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80094f4:	65bb      	str	r3, [r7, #88]	; 0x58
  R3(e, a, b, c, d, 56);
 80094f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80094f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80094fa:	431a      	orrs	r2, r3
 80094fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094fe:	401a      	ands	r2, r3
 8009500:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8009502:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009504:	400b      	ands	r3, r1
 8009506:	431a      	orrs	r2, r3
 8009508:	6a39      	ldr	r1, [r7, #32]
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	4059      	eors	r1, r3
 800950e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009510:	4059      	eors	r1, r3
 8009512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009514:	404b      	eors	r3, r1
 8009516:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800951a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800951c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800951e:	441a      	add	r2, r3
 8009520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009522:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8009526:	441a      	add	r2, r3
 8009528:	4b20      	ldr	r3, [pc, #128]	; (80095ac <mg_sha1_transform+0xea4>)
 800952a:	4413      	add	r3, r2
 800952c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800952e:	4413      	add	r3, r2
 8009530:	653b      	str	r3, [r7, #80]	; 0x50
 8009532:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009534:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8009538:	65fb      	str	r3, [r7, #92]	; 0x5c
  R3(d, e, a, b, c, 57);
 800953a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800953c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800953e:	431a      	orrs	r2, r3
 8009540:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009542:	401a      	ands	r2, r3
 8009544:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009546:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009548:	400b      	ands	r3, r1
 800954a:	431a      	orrs	r2, r3
 800954c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	4059      	eors	r1, r3
 8009552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009554:	4059      	eors	r1, r3
 8009556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009558:	404b      	eors	r3, r1
 800955a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800955e:	633b      	str	r3, [r7, #48]	; 0x30
 8009560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009562:	441a      	add	r2, r3
 8009564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009566:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800956a:	441a      	add	r2, r3
 800956c:	4b0f      	ldr	r3, [pc, #60]	; (80095ac <mg_sha1_transform+0xea4>)
 800956e:	4413      	add	r3, r2
 8009570:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009572:	4413      	add	r3, r2
 8009574:	657b      	str	r3, [r7, #84]	; 0x54
 8009576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009578:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800957c:	64fb      	str	r3, [r7, #76]	; 0x4c
  R3(c, d, e, a, b, 58);
 800957e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009582:	431a      	orrs	r2, r3
 8009584:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009586:	401a      	ands	r2, r3
 8009588:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800958a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800958c:	400b      	ands	r3, r1
 800958e:	431a      	orrs	r2, r3
 8009590:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	4059      	eors	r1, r3
 8009596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009598:	4059      	eors	r1, r3
 800959a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800959c:	404b      	eors	r3, r1
 800959e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80095a2:	637b      	str	r3, [r7, #52]	; 0x34
 80095a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095a6:	441a      	add	r2, r3
 80095a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095aa:	e001      	b.n	80095b0 <mg_sha1_transform+0xea8>
 80095ac:	8f1bbcdc 	.word	0x8f1bbcdc
 80095b0:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80095b4:	441a      	add	r2, r3
 80095b6:	4ba9      	ldr	r3, [pc, #676]	; (800985c <mg_sha1_transform+0x1154>)
 80095b8:	4413      	add	r3, r2
 80095ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80095bc:	4413      	add	r3, r2
 80095be:	65bb      	str	r3, [r7, #88]	; 0x58
 80095c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095c2:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80095c6:	653b      	str	r3, [r7, #80]	; 0x50
  R3(b, c, d, e, a, 59);
 80095c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80095ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095cc:	431a      	orrs	r2, r3
 80095ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095d0:	401a      	ands	r2, r3
 80095d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80095d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095d6:	400b      	ands	r3, r1
 80095d8:	431a      	orrs	r2, r3
 80095da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80095dc:	69bb      	ldr	r3, [r7, #24]
 80095de:	4059      	eors	r1, r3
 80095e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095e2:	4059      	eors	r1, r3
 80095e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e6:	404b      	eors	r3, r1
 80095e8:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80095ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80095ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095f0:	441a      	add	r2, r3
 80095f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80095f4:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80095f8:	441a      	add	r2, r3
 80095fa:	4b98      	ldr	r3, [pc, #608]	; (800985c <mg_sha1_transform+0x1154>)
 80095fc:	4413      	add	r3, r2
 80095fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009600:	4413      	add	r3, r2
 8009602:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009606:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800960a:	657b      	str	r3, [r7, #84]	; 0x54
  R4(a, b, c, d, e, 60);
 800960c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800960e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009610:	405a      	eors	r2, r3
 8009612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009614:	405a      	eors	r2, r3
 8009616:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009618:	69fb      	ldr	r3, [r7, #28]
 800961a:	4059      	eors	r1, r3
 800961c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800961e:	4059      	eors	r1, r3
 8009620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009622:	404b      	eors	r3, r1
 8009624:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8009628:	63fb      	str	r3, [r7, #60]	; 0x3c
 800962a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800962c:	441a      	add	r2, r3
 800962e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009630:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8009634:	441a      	add	r2, r3
 8009636:	4b8a      	ldr	r3, [pc, #552]	; (8009860 <mg_sha1_transform+0x1158>)
 8009638:	4413      	add	r3, r2
 800963a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800963c:	4413      	add	r3, r2
 800963e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009640:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009642:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8009646:	65bb      	str	r3, [r7, #88]	; 0x58
  R4(e, a, b, c, d, 61);
 8009648:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800964a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800964c:	405a      	eors	r2, r3
 800964e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009650:	405a      	eors	r2, r3
 8009652:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009654:	6a3b      	ldr	r3, [r7, #32]
 8009656:	4059      	eors	r1, r3
 8009658:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800965a:	4059      	eors	r1, r3
 800965c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800965e:	404b      	eors	r3, r1
 8009660:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8009664:	643b      	str	r3, [r7, #64]	; 0x40
 8009666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009668:	441a      	add	r2, r3
 800966a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800966c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8009670:	441a      	add	r2, r3
 8009672:	4b7b      	ldr	r3, [pc, #492]	; (8009860 <mg_sha1_transform+0x1158>)
 8009674:	4413      	add	r3, r2
 8009676:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009678:	4413      	add	r3, r2
 800967a:	653b      	str	r3, [r7, #80]	; 0x50
 800967c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800967e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8009682:	65fb      	str	r3, [r7, #92]	; 0x5c
  R4(d, e, a, b, c, 62);
 8009684:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009686:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009688:	405a      	eors	r2, r3
 800968a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800968c:	405a      	eors	r2, r3
 800968e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009692:	4059      	eors	r1, r3
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	4059      	eors	r1, r3
 8009698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800969a:	404b      	eors	r3, r1
 800969c:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80096a0:	647b      	str	r3, [r7, #68]	; 0x44
 80096a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096a4:	441a      	add	r2, r3
 80096a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096a8:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80096ac:	441a      	add	r2, r3
 80096ae:	4b6c      	ldr	r3, [pc, #432]	; (8009860 <mg_sha1_transform+0x1158>)
 80096b0:	4413      	add	r3, r2
 80096b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80096b4:	4413      	add	r3, r2
 80096b6:	657b      	str	r3, [r7, #84]	; 0x54
 80096b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096ba:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80096be:	64fb      	str	r3, [r7, #76]	; 0x4c
  R4(c, d, e, a, b, 63);
 80096c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80096c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096c4:	405a      	eors	r2, r3
 80096c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096c8:	405a      	eors	r2, r3
 80096ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80096cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ce:	4059      	eors	r1, r3
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	4059      	eors	r1, r3
 80096d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096d6:	404b      	eors	r3, r1
 80096d8:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80096dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80096de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096e0:	441a      	add	r2, r3
 80096e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096e4:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80096e8:	441a      	add	r2, r3
 80096ea:	4b5d      	ldr	r3, [pc, #372]	; (8009860 <mg_sha1_transform+0x1158>)
 80096ec:	4413      	add	r3, r2
 80096ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80096f0:	4413      	add	r3, r2
 80096f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80096f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096f6:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80096fa:	653b      	str	r3, [r7, #80]	; 0x50
  R4(b, c, d, e, a, 64);
 80096fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80096fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009700:	405a      	eors	r2, r3
 8009702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009704:	405a      	eors	r2, r3
 8009706:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800970a:	4059      	eors	r1, r3
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	4059      	eors	r1, r3
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	404b      	eors	r3, r1
 8009714:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8009718:	60fb      	str	r3, [r7, #12]
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	441a      	add	r2, r3
 800971e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009720:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8009724:	441a      	add	r2, r3
 8009726:	4b4e      	ldr	r3, [pc, #312]	; (8009860 <mg_sha1_transform+0x1158>)
 8009728:	4413      	add	r3, r2
 800972a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800972c:	4413      	add	r3, r2
 800972e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009730:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009732:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8009736:	657b      	str	r3, [r7, #84]	; 0x54
  R4(a, b, c, d, e, 65);
 8009738:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800973a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800973c:	405a      	eors	r2, r3
 800973e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009740:	405a      	eors	r2, r3
 8009742:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009746:	4059      	eors	r1, r3
 8009748:	69bb      	ldr	r3, [r7, #24]
 800974a:	4059      	eors	r1, r3
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	404b      	eors	r3, r1
 8009750:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8009754:	613b      	str	r3, [r7, #16]
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	441a      	add	r2, r3
 800975a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800975c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8009760:	441a      	add	r2, r3
 8009762:	4b3f      	ldr	r3, [pc, #252]	; (8009860 <mg_sha1_transform+0x1158>)
 8009764:	4413      	add	r3, r2
 8009766:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009768:	4413      	add	r3, r2
 800976a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800976c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800976e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8009772:	65bb      	str	r3, [r7, #88]	; 0x58
  R4(e, a, b, c, d, 66);
 8009774:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009776:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009778:	405a      	eors	r2, r3
 800977a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800977c:	405a      	eors	r2, r3
 800977e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009782:	4059      	eors	r1, r3
 8009784:	69fb      	ldr	r3, [r7, #28]
 8009786:	4059      	eors	r1, r3
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	404b      	eors	r3, r1
 800978c:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8009790:	617b      	str	r3, [r7, #20]
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	441a      	add	r2, r3
 8009796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009798:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800979c:	441a      	add	r2, r3
 800979e:	4b30      	ldr	r3, [pc, #192]	; (8009860 <mg_sha1_transform+0x1158>)
 80097a0:	4413      	add	r3, r2
 80097a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80097a4:	4413      	add	r3, r2
 80097a6:	653b      	str	r3, [r7, #80]	; 0x50
 80097a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097aa:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80097ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  R4(d, e, a, b, c, 67);
 80097b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80097b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097b4:	405a      	eors	r2, r3
 80097b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80097b8:	405a      	eors	r2, r3
 80097ba:	68f9      	ldr	r1, [r7, #12]
 80097bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097be:	4059      	eors	r1, r3
 80097c0:	6a3b      	ldr	r3, [r7, #32]
 80097c2:	4059      	eors	r1, r3
 80097c4:	69bb      	ldr	r3, [r7, #24]
 80097c6:	404b      	eors	r3, r1
 80097c8:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80097cc:	61bb      	str	r3, [r7, #24]
 80097ce:	69bb      	ldr	r3, [r7, #24]
 80097d0:	441a      	add	r2, r3
 80097d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097d4:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80097d8:	441a      	add	r2, r3
 80097da:	4b21      	ldr	r3, [pc, #132]	; (8009860 <mg_sha1_transform+0x1158>)
 80097dc:	4413      	add	r3, r2
 80097de:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80097e0:	4413      	add	r3, r2
 80097e2:	657b      	str	r3, [r7, #84]	; 0x54
 80097e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097e6:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80097ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  R4(c, d, e, a, b, 68);
 80097ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80097ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097f0:	405a      	eors	r2, r3
 80097f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097f4:	405a      	eors	r2, r3
 80097f6:	6939      	ldr	r1, [r7, #16]
 80097f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097fa:	4059      	eors	r1, r3
 80097fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fe:	4059      	eors	r1, r3
 8009800:	69fb      	ldr	r3, [r7, #28]
 8009802:	404b      	eors	r3, r1
 8009804:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8009808:	61fb      	str	r3, [r7, #28]
 800980a:	69fb      	ldr	r3, [r7, #28]
 800980c:	441a      	add	r2, r3
 800980e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009810:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8009814:	441a      	add	r2, r3
 8009816:	4b12      	ldr	r3, [pc, #72]	; (8009860 <mg_sha1_transform+0x1158>)
 8009818:	4413      	add	r3, r2
 800981a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800981c:	4413      	add	r3, r2
 800981e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009820:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009822:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8009826:	653b      	str	r3, [r7, #80]	; 0x50
  R4(b, c, d, e, a, 69);
 8009828:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800982a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800982c:	405a      	eors	r2, r3
 800982e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009830:	405a      	eors	r2, r3
 8009832:	6979      	ldr	r1, [r7, #20]
 8009834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009836:	4059      	eors	r1, r3
 8009838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800983a:	4059      	eors	r1, r3
 800983c:	6a3b      	ldr	r3, [r7, #32]
 800983e:	404b      	eors	r3, r1
 8009840:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8009844:	623b      	str	r3, [r7, #32]
 8009846:	6a3b      	ldr	r3, [r7, #32]
 8009848:	441a      	add	r2, r3
 800984a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800984c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8009850:	441a      	add	r2, r3
 8009852:	4b03      	ldr	r3, [pc, #12]	; (8009860 <mg_sha1_transform+0x1158>)
 8009854:	4413      	add	r3, r2
 8009856:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009858:	4413      	add	r3, r2
 800985a:	e003      	b.n	8009864 <mg_sha1_transform+0x115c>
 800985c:	8f1bbcdc 	.word	0x8f1bbcdc
 8009860:	ca62c1d6 	.word	0xca62c1d6
 8009864:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009868:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800986c:	657b      	str	r3, [r7, #84]	; 0x54
  R4(a, b, c, d, e, 70);
 800986e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009870:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009872:	405a      	eors	r2, r3
 8009874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009876:	405a      	eors	r2, r3
 8009878:	69b9      	ldr	r1, [r7, #24]
 800987a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800987c:	4059      	eors	r1, r3
 800987e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009880:	4059      	eors	r1, r3
 8009882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009884:	404b      	eors	r3, r1
 8009886:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800988a:	627b      	str	r3, [r7, #36]	; 0x24
 800988c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988e:	441a      	add	r2, r3
 8009890:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009892:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8009896:	441a      	add	r2, r3
 8009898:	4ba7      	ldr	r3, [pc, #668]	; (8009b38 <mg_sha1_transform+0x1430>)
 800989a:	4413      	add	r3, r2
 800989c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800989e:	4413      	add	r3, r2
 80098a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80098a4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80098a8:	65bb      	str	r3, [r7, #88]	; 0x58
  R4(e, a, b, c, d, 71);
 80098aa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80098ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80098ae:	405a      	eors	r2, r3
 80098b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098b2:	405a      	eors	r2, r3
 80098b4:	69f9      	ldr	r1, [r7, #28]
 80098b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098b8:	4059      	eors	r1, r3
 80098ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098bc:	4059      	eors	r1, r3
 80098be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c0:	404b      	eors	r3, r1
 80098c2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80098c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80098c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ca:	441a      	add	r2, r3
 80098cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098ce:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80098d2:	441a      	add	r2, r3
 80098d4:	4b98      	ldr	r3, [pc, #608]	; (8009b38 <mg_sha1_transform+0x1430>)
 80098d6:	4413      	add	r3, r2
 80098d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80098da:	4413      	add	r3, r2
 80098dc:	653b      	str	r3, [r7, #80]	; 0x50
 80098de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098e0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80098e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  R4(d, e, a, b, c, 72);
 80098e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80098e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098ea:	405a      	eors	r2, r3
 80098ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80098ee:	405a      	eors	r2, r3
 80098f0:	6a39      	ldr	r1, [r7, #32]
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	4059      	eors	r1, r3
 80098f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098f8:	4059      	eors	r1, r3
 80098fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098fc:	404b      	eors	r3, r1
 80098fe:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8009902:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009906:	441a      	add	r2, r3
 8009908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800990a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800990e:	441a      	add	r2, r3
 8009910:	4b89      	ldr	r3, [pc, #548]	; (8009b38 <mg_sha1_transform+0x1430>)
 8009912:	4413      	add	r3, r2
 8009914:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009916:	4413      	add	r3, r2
 8009918:	657b      	str	r3, [r7, #84]	; 0x54
 800991a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800991c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8009920:	64fb      	str	r3, [r7, #76]	; 0x4c
  R4(c, d, e, a, b, 73);
 8009922:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009926:	405a      	eors	r2, r3
 8009928:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800992a:	405a      	eors	r2, r3
 800992c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	4059      	eors	r1, r3
 8009932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009934:	4059      	eors	r1, r3
 8009936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009938:	404b      	eors	r3, r1
 800993a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800993e:	633b      	str	r3, [r7, #48]	; 0x30
 8009940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009942:	441a      	add	r2, r3
 8009944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009946:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800994a:	441a      	add	r2, r3
 800994c:	4b7a      	ldr	r3, [pc, #488]	; (8009b38 <mg_sha1_transform+0x1430>)
 800994e:	4413      	add	r3, r2
 8009950:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009952:	4413      	add	r3, r2
 8009954:	65bb      	str	r3, [r7, #88]	; 0x58
 8009956:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009958:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800995c:	653b      	str	r3, [r7, #80]	; 0x50
  R4(b, c, d, e, a, 74);
 800995e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009962:	405a      	eors	r2, r3
 8009964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009966:	405a      	eors	r2, r3
 8009968:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	4059      	eors	r1, r3
 800996e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009970:	4059      	eors	r1, r3
 8009972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009974:	404b      	eors	r3, r1
 8009976:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800997a:	637b      	str	r3, [r7, #52]	; 0x34
 800997c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800997e:	441a      	add	r2, r3
 8009980:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009982:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8009986:	441a      	add	r2, r3
 8009988:	4b6b      	ldr	r3, [pc, #428]	; (8009b38 <mg_sha1_transform+0x1430>)
 800998a:	4413      	add	r3, r2
 800998c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800998e:	4413      	add	r3, r2
 8009990:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009994:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8009998:	657b      	str	r3, [r7, #84]	; 0x54
  R4(a, b, c, d, e, 75);
 800999a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800999c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800999e:	405a      	eors	r2, r3
 80099a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099a2:	405a      	eors	r2, r3
 80099a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80099a6:	69bb      	ldr	r3, [r7, #24]
 80099a8:	4059      	eors	r1, r3
 80099aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099ac:	4059      	eors	r1, r3
 80099ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b0:	404b      	eors	r3, r1
 80099b2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80099b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80099b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ba:	441a      	add	r2, r3
 80099bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099be:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80099c2:	441a      	add	r2, r3
 80099c4:	4b5c      	ldr	r3, [pc, #368]	; (8009b38 <mg_sha1_transform+0x1430>)
 80099c6:	4413      	add	r3, r2
 80099c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80099ca:	4413      	add	r3, r2
 80099cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80099ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80099d0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80099d4:	65bb      	str	r3, [r7, #88]	; 0x58
  R4(e, a, b, c, d, 76);
 80099d6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80099d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80099da:	405a      	eors	r2, r3
 80099dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099de:	405a      	eors	r2, r3
 80099e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80099e2:	69fb      	ldr	r3, [r7, #28]
 80099e4:	4059      	eors	r1, r3
 80099e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099e8:	4059      	eors	r1, r3
 80099ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099ec:	404b      	eors	r3, r1
 80099ee:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80099f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099f6:	441a      	add	r2, r3
 80099f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099fa:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80099fe:	441a      	add	r2, r3
 8009a00:	4b4d      	ldr	r3, [pc, #308]	; (8009b38 <mg_sha1_transform+0x1430>)
 8009a02:	4413      	add	r3, r2
 8009a04:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009a06:	4413      	add	r3, r2
 8009a08:	653b      	str	r3, [r7, #80]	; 0x50
 8009a0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a0c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8009a10:	65fb      	str	r3, [r7, #92]	; 0x5c
  R4(d, e, a, b, c, 77);
 8009a12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009a14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a16:	405a      	eors	r2, r3
 8009a18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a1a:	405a      	eors	r2, r3
 8009a1c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009a1e:	6a3b      	ldr	r3, [r7, #32]
 8009a20:	4059      	eors	r1, r3
 8009a22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a24:	4059      	eors	r1, r3
 8009a26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a28:	404b      	eors	r3, r1
 8009a2a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8009a2e:	643b      	str	r3, [r7, #64]	; 0x40
 8009a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a32:	441a      	add	r2, r3
 8009a34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a36:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8009a3a:	441a      	add	r2, r3
 8009a3c:	4b3e      	ldr	r3, [pc, #248]	; (8009b38 <mg_sha1_transform+0x1430>)
 8009a3e:	4413      	add	r3, r2
 8009a40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009a42:	4413      	add	r3, r2
 8009a44:	657b      	str	r3, [r7, #84]	; 0x54
 8009a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a48:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8009a4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  R4(c, d, e, a, b, 78);
 8009a4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a52:	405a      	eors	r2, r3
 8009a54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a56:	405a      	eors	r2, r3
 8009a58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5c:	4059      	eors	r1, r3
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	4059      	eors	r1, r3
 8009a62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a64:	404b      	eors	r3, r1
 8009a66:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8009a6a:	647b      	str	r3, [r7, #68]	; 0x44
 8009a6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a6e:	441a      	add	r2, r3
 8009a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a72:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8009a76:	441a      	add	r2, r3
 8009a78:	4b2f      	ldr	r3, [pc, #188]	; (8009b38 <mg_sha1_transform+0x1430>)
 8009a7a:	4413      	add	r3, r2
 8009a7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009a7e:	4413      	add	r3, r2
 8009a80:	65bb      	str	r3, [r7, #88]	; 0x58
 8009a82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a84:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8009a88:	653b      	str	r3, [r7, #80]	; 0x50
  R4(b, c, d, e, a, 79);
 8009a8a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009a8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a8e:	405a      	eors	r2, r3
 8009a90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a92:	405a      	eors	r2, r3
 8009a94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a98:	4059      	eors	r1, r3
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	4059      	eors	r1, r3
 8009a9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009aa0:	404b      	eors	r3, r1
 8009aa2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8009aa6:	64bb      	str	r3, [r7, #72]	; 0x48
 8009aa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009aaa:	441a      	add	r2, r3
 8009aac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009aae:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8009ab2:	441a      	add	r2, r3
 8009ab4:	4b20      	ldr	r3, [pc, #128]	; (8009b38 <mg_sha1_transform+0x1430>)
 8009ab6:	4413      	add	r3, r2
 8009ab8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009aba:	4413      	add	r3, r2
 8009abc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009abe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ac0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8009ac4:	657b      	str	r3, [r7, #84]	; 0x54
  state[0] += a;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009acc:	441a      	add	r2, r3
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	601a      	str	r2, [r3, #0]
  state[1] += b;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	3304      	adds	r3, #4
 8009ad6:	6819      	ldr	r1, [r3, #0]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	3304      	adds	r3, #4
 8009adc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009ade:	440a      	add	r2, r1
 8009ae0:	601a      	str	r2, [r3, #0]
  state[2] += c;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	3308      	adds	r3, #8
 8009ae6:	6819      	ldr	r1, [r3, #0]
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	3308      	adds	r3, #8
 8009aec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009aee:	440a      	add	r2, r1
 8009af0:	601a      	str	r2, [r3, #0]
  state[3] += d;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	330c      	adds	r3, #12
 8009af6:	6819      	ldr	r1, [r3, #0]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	330c      	adds	r3, #12
 8009afc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009afe:	440a      	add	r2, r1
 8009b00:	601a      	str	r2, [r3, #0]
  state[4] += e;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	3310      	adds	r3, #16
 8009b06:	6819      	ldr	r1, [r3, #0]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	3310      	adds	r3, #16
 8009b0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009b0e:	440a      	add	r2, r1
 8009b10:	601a      	str	r2, [r3, #0]
  /* Erase working structures. The order of operations is important,
   * used to ensure that compiler doesn't optimize those out. */
  memset(block, 0, sizeof(block));
 8009b12:	f107 030c 	add.w	r3, r7, #12
 8009b16:	2240      	movs	r2, #64	; 0x40
 8009b18:	2100      	movs	r1, #0
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f008 fe34 	bl	8012788 <memset>
  a = b = c = d = e = 0;
 8009b20:	2300      	movs	r3, #0
 8009b22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b26:	653b      	str	r3, [r7, #80]	; 0x50
 8009b28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b2a:	657b      	str	r3, [r7, #84]	; 0x54
 8009b2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b2e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009b30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b34:	e002      	b.n	8009b3c <mg_sha1_transform+0x1434>
 8009b36:	bf00      	nop
 8009b38:	ca62c1d6 	.word	0xca62c1d6
  (void) a;
  (void) b;
  (void) c;
  (void) d;
  (void) e;
}
 8009b3c:	bf00      	nop
 8009b3e:	3764      	adds	r7, #100	; 0x64
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd90      	pop	{r4, r7, pc}

08009b44 <mg_sha1_init>:

void mg_sha1_init(mg_sha1_ctx *context) {
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  context->state[0] = 0x67452301;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	4a0d      	ldr	r2, [pc, #52]	; (8009b84 <mg_sha1_init+0x40>)
 8009b50:	601a      	str	r2, [r3, #0]
  context->state[1] = 0xEFCDAB89;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	4a0c      	ldr	r2, [pc, #48]	; (8009b88 <mg_sha1_init+0x44>)
 8009b56:	605a      	str	r2, [r3, #4]
  context->state[2] = 0x98BADCFE;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	4a0c      	ldr	r2, [pc, #48]	; (8009b8c <mg_sha1_init+0x48>)
 8009b5c:	609a      	str	r2, [r3, #8]
  context->state[3] = 0x10325476;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	4a0b      	ldr	r2, [pc, #44]	; (8009b90 <mg_sha1_init+0x4c>)
 8009b62:	60da      	str	r2, [r3, #12]
  context->state[4] = 0xC3D2E1F0;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	4a0b      	ldr	r2, [pc, #44]	; (8009b94 <mg_sha1_init+0x50>)
 8009b68:	611a      	str	r2, [r3, #16]
  context->count[0] = context->count[1] = 0;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	619a      	str	r2, [r3, #24]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	699a      	ldr	r2, [r3, #24]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	615a      	str	r2, [r3, #20]
}
 8009b78:	bf00      	nop
 8009b7a:	370c      	adds	r7, #12
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr
 8009b84:	67452301 	.word	0x67452301
 8009b88:	efcdab89 	.word	0xefcdab89
 8009b8c:	98badcfe 	.word	0x98badcfe
 8009b90:	10325476 	.word	0x10325476
 8009b94:	c3d2e1f0 	.word	0xc3d2e1f0

08009b98 <mg_sha1_update>:

void mg_sha1_update(mg_sha1_ctx *context, const unsigned char *data,
                    size_t len) {
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b086      	sub	sp, #24
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	60f8      	str	r0, [r7, #12]
 8009ba0:	60b9      	str	r1, [r7, #8]
 8009ba2:	607a      	str	r2, [r7, #4]
  size_t i, j;

  j = context->count[0];
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	695b      	ldr	r3, [r3, #20]
 8009ba8:	613b      	str	r3, [r7, #16]
  if ((context->count[0] += (uint32_t) len << 3) < j) context->count[1]++;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	695a      	ldr	r2, [r3, #20]
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	00db      	lsls	r3, r3, #3
 8009bb2:	441a      	add	r2, r3
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	615a      	str	r2, [r3, #20]
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	695b      	ldr	r3, [r3, #20]
 8009bbc:	693a      	ldr	r2, [r7, #16]
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d904      	bls.n	8009bcc <mg_sha1_update+0x34>
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	699b      	ldr	r3, [r3, #24]
 8009bc6:	1c5a      	adds	r2, r3, #1
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	619a      	str	r2, [r3, #24]
  context->count[1] += (uint32_t) (len >> 29);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	699a      	ldr	r2, [r3, #24]
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	0f5b      	lsrs	r3, r3, #29
 8009bd4:	441a      	add	r2, r3
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	619a      	str	r2, [r3, #24]
  j = (j >> 3) & 63;
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	08db      	lsrs	r3, r3, #3
 8009bde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009be2:	613b      	str	r3, [r7, #16]
  if ((j + len) > 63) {
 8009be4:	693a      	ldr	r2, [r7, #16]
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	4413      	add	r3, r2
 8009bea:	2b3f      	cmp	r3, #63	; 0x3f
 8009bec:	d926      	bls.n	8009c3c <mg_sha1_update+0xa4>
    memcpy(&context->buffer[j], data, (i = 64 - j));
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	3318      	adds	r3, #24
 8009bf2:	68fa      	ldr	r2, [r7, #12]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	1d18      	adds	r0, r3, #4
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8009bfe:	617b      	str	r3, [r7, #20]
 8009c00:	697a      	ldr	r2, [r7, #20]
 8009c02:	68b9      	ldr	r1, [r7, #8]
 8009c04:	f008 fd98 	bl	8012738 <memcpy>
    mg_sha1_transform(context->state, context->buffer);
 8009c08:	68fa      	ldr	r2, [r7, #12]
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	331c      	adds	r3, #28
 8009c0e:	4619      	mov	r1, r3
 8009c10:	4610      	mov	r0, r2
 8009c12:	f7fe fd79 	bl	8008708 <mg_sha1_transform>
    for (; i + 63 < len; i += 64) {
 8009c16:	e009      	b.n	8009c2c <mg_sha1_update+0x94>
      mg_sha1_transform(context->state, &data[i]);
 8009c18:	68f8      	ldr	r0, [r7, #12]
 8009c1a:	68ba      	ldr	r2, [r7, #8]
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	4413      	add	r3, r2
 8009c20:	4619      	mov	r1, r3
 8009c22:	f7fe fd71 	bl	8008708 <mg_sha1_transform>
    for (; i + 63 < len; i += 64) {
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	3340      	adds	r3, #64	; 0x40
 8009c2a:	617b      	str	r3, [r7, #20]
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	333f      	adds	r3, #63	; 0x3f
 8009c30:	687a      	ldr	r2, [r7, #4]
 8009c32:	429a      	cmp	r2, r3
 8009c34:	d8f0      	bhi.n	8009c18 <mg_sha1_update+0x80>
    }
    j = 0;
 8009c36:	2300      	movs	r3, #0
 8009c38:	613b      	str	r3, [r7, #16]
 8009c3a:	e001      	b.n	8009c40 <mg_sha1_update+0xa8>
  } else
    i = 0;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	617b      	str	r3, [r7, #20]
  memcpy(&context->buffer[j], &data[i], len - i);
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	3318      	adds	r3, #24
 8009c44:	68fa      	ldr	r2, [r7, #12]
 8009c46:	4413      	add	r3, r2
 8009c48:	1d18      	adds	r0, r3, #4
 8009c4a:	68ba      	ldr	r2, [r7, #8]
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	18d1      	adds	r1, r2, r3
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	1ad3      	subs	r3, r2, r3
 8009c56:	461a      	mov	r2, r3
 8009c58:	f008 fd6e 	bl	8012738 <memcpy>
}
 8009c5c:	bf00      	nop
 8009c5e:	3718      	adds	r7, #24
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <mg_sha1_final>:

void mg_sha1_final(unsigned char digest[20], mg_sha1_ctx *context) {
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b086      	sub	sp, #24
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	6039      	str	r1, [r7, #0]
  unsigned i;
  unsigned char finalcount[8], c;

  for (i = 0; i < 8; i++) {
 8009c6e:	2300      	movs	r3, #0
 8009c70:	617b      	str	r3, [r7, #20]
 8009c72:	e01b      	b.n	8009cac <mg_sha1_final+0x48>
    finalcount[i] = (unsigned char) ((context->count[(i >= 4 ? 0 : 1)] >>
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	2b03      	cmp	r3, #3
 8009c78:	bf94      	ite	ls
 8009c7a:	2301      	movls	r3, #1
 8009c7c:	2300      	movhi	r3, #0
 8009c7e:	b2db      	uxtb	r3, r3
 8009c80:	683a      	ldr	r2, [r7, #0]
 8009c82:	3304      	adds	r3, #4
 8009c84:	009b      	lsls	r3, r3, #2
 8009c86:	4413      	add	r3, r2
 8009c88:	685a      	ldr	r2, [r3, #4]
                                      ((3 - (i & 3)) * 8)) &
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	43db      	mvns	r3, r3
 8009c8e:	f003 0303 	and.w	r3, r3, #3
 8009c92:	00db      	lsls	r3, r3, #3
    finalcount[i] = (unsigned char) ((context->count[(i >= 4 ? 0 : 1)] >>
 8009c94:	fa22 f303 	lsr.w	r3, r2, r3
 8009c98:	b2d9      	uxtb	r1, r3
 8009c9a:	f107 020c 	add.w	r2, r7, #12
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	4413      	add	r3, r2
 8009ca2:	460a      	mov	r2, r1
 8009ca4:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 8; i++) {
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	3301      	adds	r3, #1
 8009caa:	617b      	str	r3, [r7, #20]
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	2b07      	cmp	r3, #7
 8009cb0:	d9e0      	bls.n	8009c74 <mg_sha1_final+0x10>
                                     255);
  }
  c = 0200;
 8009cb2:	2380      	movs	r3, #128	; 0x80
 8009cb4:	72fb      	strb	r3, [r7, #11]
  mg_sha1_update(context, &c, 1);
 8009cb6:	f107 030b 	add.w	r3, r7, #11
 8009cba:	2201      	movs	r2, #1
 8009cbc:	4619      	mov	r1, r3
 8009cbe:	6838      	ldr	r0, [r7, #0]
 8009cc0:	f7ff ff6a 	bl	8009b98 <mg_sha1_update>
  while ((context->count[0] & 504) != 448) {
 8009cc4:	e008      	b.n	8009cd8 <mg_sha1_final+0x74>
    c = 0000;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	72fb      	strb	r3, [r7, #11]
    mg_sha1_update(context, &c, 1);
 8009cca:	f107 030b 	add.w	r3, r7, #11
 8009cce:	2201      	movs	r2, #1
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	6838      	ldr	r0, [r7, #0]
 8009cd4:	f7ff ff60 	bl	8009b98 <mg_sha1_update>
  while ((context->count[0] & 504) != 448) {
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	695b      	ldr	r3, [r3, #20]
 8009cdc:	f403 73fc 	and.w	r3, r3, #504	; 0x1f8
 8009ce0:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8009ce4:	d1ef      	bne.n	8009cc6 <mg_sha1_final+0x62>
  }
  mg_sha1_update(context, finalcount, 8);
 8009ce6:	f107 030c 	add.w	r3, r7, #12
 8009cea:	2208      	movs	r2, #8
 8009cec:	4619      	mov	r1, r3
 8009cee:	6838      	ldr	r0, [r7, #0]
 8009cf0:	f7ff ff52 	bl	8009b98 <mg_sha1_update>
  for (i = 0; i < 20; i++) {
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	617b      	str	r3, [r7, #20]
 8009cf8:	e013      	b.n	8009d22 <mg_sha1_final+0xbe>
    digest[i] =
        (unsigned char) ((context->state[i >> 2] >> ((3 - (i & 3)) * 8)) & 255);
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	089a      	lsrs	r2, r3, #2
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	43db      	mvns	r3, r3
 8009d08:	f003 0303 	and.w	r3, r3, #3
 8009d0c:	00db      	lsls	r3, r3, #3
 8009d0e:	fa22 f103 	lsr.w	r1, r2, r3
    digest[i] =
 8009d12:	687a      	ldr	r2, [r7, #4]
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	4413      	add	r3, r2
        (unsigned char) ((context->state[i >> 2] >> ((3 - (i & 3)) * 8)) & 255);
 8009d18:	b2ca      	uxtb	r2, r1
    digest[i] =
 8009d1a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 20; i++) {
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	3301      	adds	r3, #1
 8009d20:	617b      	str	r3, [r7, #20]
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	2b13      	cmp	r3, #19
 8009d26:	d9e8      	bls.n	8009cfa <mg_sha1_final+0x96>
  }
  memset(context, '\0', sizeof(*context));
 8009d28:	225c      	movs	r2, #92	; 0x5c
 8009d2a:	2100      	movs	r1, #0
 8009d2c:	6838      	ldr	r0, [r7, #0]
 8009d2e:	f008 fd2b 	bl	8012788 <memset>
  memset(&finalcount, '\0', sizeof(finalcount));
 8009d32:	f107 030c 	add.w	r3, r7, #12
 8009d36:	2208      	movs	r2, #8
 8009d38:	2100      	movs	r1, #0
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f008 fd24 	bl	8012788 <memset>
}
 8009d40:	bf00      	nop
 8009d42:	3718      	adds	r7, #24
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <gettimestamp>:


#define SNTP_TIME_OFFSET 2208988800U  // (1970 - 1900) in seconds
#define SNTP_MAX_FRAC 4294967295.0    // 2 ** 32 - 1

static int64_t gettimestamp(const uint32_t *data) {
 8009d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d4c:	b086      	sub	sp, #24
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	60f8      	str	r0, [r7, #12]
  uint32_t sec = mg_ntohl(data[0]), frac = mg_ntohl(data[1]);
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4618      	mov	r0, r3
 8009d58:	f001 fa0f 	bl	800b17a <mg_ntohl>
 8009d5c:	6178      	str	r0, [r7, #20]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	3304      	adds	r3, #4
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4618      	mov	r0, r3
 8009d66:	f001 fa08 	bl	800b17a <mg_ntohl>
 8009d6a:	6138      	str	r0, [r7, #16]
  if (sec) sec -= SNTP_TIME_OFFSET;
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d003      	beq.n	8009d7a <gettimestamp+0x32>
 8009d72:	697a      	ldr	r2, [r7, #20]
 8009d74:	4b2e      	ldr	r3, [pc, #184]	; (8009e30 <gettimestamp+0xe8>)
 8009d76:	4413      	add	r3, r2
 8009d78:	617b      	str	r3, [r7, #20]
  return ((int64_t) sec) * 1000 + (int64_t) (frac / SNTP_MAX_FRAC * 1000.0);
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	4698      	mov	r8, r3
 8009d80:	4691      	mov	r9, r2
 8009d82:	4642      	mov	r2, r8
 8009d84:	464b      	mov	r3, r9
 8009d86:	f04f 0000 	mov.w	r0, #0
 8009d8a:	f04f 0100 	mov.w	r1, #0
 8009d8e:	0159      	lsls	r1, r3, #5
 8009d90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009d94:	0150      	lsls	r0, r2, #5
 8009d96:	4602      	mov	r2, r0
 8009d98:	460b      	mov	r3, r1
 8009d9a:	ebb2 0408 	subs.w	r4, r2, r8
 8009d9e:	eb63 0509 	sbc.w	r5, r3, r9
 8009da2:	f04f 0200 	mov.w	r2, #0
 8009da6:	f04f 0300 	mov.w	r3, #0
 8009daa:	00ab      	lsls	r3, r5, #2
 8009dac:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8009db0:	00a2      	lsls	r2, r4, #2
 8009db2:	4614      	mov	r4, r2
 8009db4:	461d      	mov	r5, r3
 8009db6:	eb14 0a08 	adds.w	sl, r4, r8
 8009dba:	eb45 0b09 	adc.w	fp, r5, r9
 8009dbe:	f04f 0200 	mov.w	r2, #0
 8009dc2:	f04f 0300 	mov.w	r3, #0
 8009dc6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009dca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009dce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009dd2:	4692      	mov	sl, r2
 8009dd4:	469b      	mov	fp, r3
 8009dd6:	4654      	mov	r4, sl
 8009dd8:	465d      	mov	r5, fp
 8009dda:	6938      	ldr	r0, [r7, #16]
 8009ddc:	f7f6 fbbc 	bl	8000558 <__aeabi_ui2d>
 8009de0:	a311      	add	r3, pc, #68	; (adr r3, 8009e28 <gettimestamp+0xe0>)
 8009de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de6:	f7f6 fd5b 	bl	80008a0 <__aeabi_ddiv>
 8009dea:	4602      	mov	r2, r0
 8009dec:	460b      	mov	r3, r1
 8009dee:	4610      	mov	r0, r2
 8009df0:	4619      	mov	r1, r3
 8009df2:	f04f 0200 	mov.w	r2, #0
 8009df6:	4b0f      	ldr	r3, [pc, #60]	; (8009e34 <gettimestamp+0xec>)
 8009df8:	f7f6 fc28 	bl	800064c <__aeabi_dmul>
 8009dfc:	4602      	mov	r2, r0
 8009dfe:	460b      	mov	r3, r1
 8009e00:	4610      	mov	r0, r2
 8009e02:	4619      	mov	r1, r3
 8009e04:	f7f6 ff6c 	bl	8000ce0 <__aeabi_d2lz>
 8009e08:	4602      	mov	r2, r0
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	18a1      	adds	r1, r4, r2
 8009e0e:	6039      	str	r1, [r7, #0]
 8009e10:	eb45 0303 	adc.w	r3, r5, r3
 8009e14:	607b      	str	r3, [r7, #4]
 8009e16:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8009e1a:	4610      	mov	r0, r2
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	3718      	adds	r7, #24
 8009e20:	46bd      	mov	sp, r7
 8009e22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e26:	bf00      	nop
 8009e28:	ffe00000 	.word	0xffe00000
 8009e2c:	41efffff 	.word	0x41efffff
 8009e30:	7c558180 	.word	0x7c558180
 8009e34:	408f4000 	.word	0x408f4000

08009e38 <mg_sntp_parse>:

int64_t mg_sntp_parse(const unsigned char *buf, size_t len) {
 8009e38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e3c:	b09c      	sub	sp, #112	; 0x70
 8009e3e:	af08      	add	r7, sp, #32
 8009e40:	6178      	str	r0, [r7, #20]
 8009e42:	6139      	str	r1, [r7, #16]
  int64_t res = -1;
 8009e44:	f04f 32ff 	mov.w	r2, #4294967295
 8009e48:	f04f 33ff 	mov.w	r3, #4294967295
 8009e4c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  int mode = len > 0 ? buf[0] & 7 : 0;
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d004      	beq.n	8009e60 <mg_sntp_parse+0x28>
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	781b      	ldrb	r3, [r3, #0]
 8009e5a:	f003 0307 	and.w	r3, r3, #7
 8009e5e:	e000      	b.n	8009e62 <mg_sntp_parse+0x2a>
 8009e60:	2300      	movs	r3, #0
 8009e62:	647b      	str	r3, [r7, #68]	; 0x44
  int version = len > 0 ? (buf[0] >> 3) & 7 : 0;
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d006      	beq.n	8009e78 <mg_sntp_parse+0x40>
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	08db      	lsrs	r3, r3, #3
 8009e70:	b2db      	uxtb	r3, r3
 8009e72:	f003 0307 	and.w	r3, r3, #7
 8009e76:	e000      	b.n	8009e7a <mg_sntp_parse+0x42>
 8009e78:	2300      	movs	r3, #0
 8009e7a:	643b      	str	r3, [r7, #64]	; 0x40
  if (len < 48) {
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	2b2f      	cmp	r3, #47	; 0x2f
 8009e80:	d80f      	bhi.n	8009ea2 <mg_sntp_parse+0x6a>
    MG_ERROR(("%s", "corrupt packet"));
 8009e82:	4b63      	ldr	r3, [pc, #396]	; (800a010 <mg_sntp_parse+0x1d8>)
 8009e84:	f640 723d 	movw	r2, #3901	; 0xf3d
 8009e88:	4962      	ldr	r1, [pc, #392]	; (800a014 <mg_sntp_parse+0x1dc>)
 8009e8a:	2001      	movs	r0, #1
 8009e8c:	f7fd f90a 	bl	80070a4 <mg_log_prefix>
 8009e90:	4603      	mov	r3, r0
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	f000 80b3 	beq.w	8009ffe <mg_sntp_parse+0x1c6>
 8009e98:	495f      	ldr	r1, [pc, #380]	; (800a018 <mg_sntp_parse+0x1e0>)
 8009e9a:	4860      	ldr	r0, [pc, #384]	; (800a01c <mg_sntp_parse+0x1e4>)
 8009e9c:	f7fd f95c 	bl	8007158 <mg_log>
 8009ea0:	e0ad      	b.n	8009ffe <mg_sntp_parse+0x1c6>
  } else if (mode != 4 && mode != 5) {
 8009ea2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ea4:	2b04      	cmp	r3, #4
 8009ea6:	d012      	beq.n	8009ece <mg_sntp_parse+0x96>
 8009ea8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009eaa:	2b05      	cmp	r3, #5
 8009eac:	d00f      	beq.n	8009ece <mg_sntp_parse+0x96>
    MG_ERROR(("%s", "not a server reply"));
 8009eae:	4b58      	ldr	r3, [pc, #352]	; (800a010 <mg_sntp_parse+0x1d8>)
 8009eb0:	f640 723f 	movw	r2, #3903	; 0xf3f
 8009eb4:	4957      	ldr	r1, [pc, #348]	; (800a014 <mg_sntp_parse+0x1dc>)
 8009eb6:	2001      	movs	r0, #1
 8009eb8:	f7fd f8f4 	bl	80070a4 <mg_log_prefix>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	f000 809d 	beq.w	8009ffe <mg_sntp_parse+0x1c6>
 8009ec4:	4956      	ldr	r1, [pc, #344]	; (800a020 <mg_sntp_parse+0x1e8>)
 8009ec6:	4855      	ldr	r0, [pc, #340]	; (800a01c <mg_sntp_parse+0x1e4>)
 8009ec8:	f7fd f946 	bl	8007158 <mg_log>
 8009ecc:	e097      	b.n	8009ffe <mg_sntp_parse+0x1c6>
  } else if (buf[1] == 0) {
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	781b      	ldrb	r3, [r3, #0]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d10f      	bne.n	8009ef8 <mg_sntp_parse+0xc0>
    MG_ERROR(("%s", "server sent a kiss of death"));
 8009ed8:	4b4d      	ldr	r3, [pc, #308]	; (800a010 <mg_sntp_parse+0x1d8>)
 8009eda:	f640 7241 	movw	r2, #3905	; 0xf41
 8009ede:	494d      	ldr	r1, [pc, #308]	; (800a014 <mg_sntp_parse+0x1dc>)
 8009ee0:	2001      	movs	r0, #1
 8009ee2:	f7fd f8df 	bl	80070a4 <mg_log_prefix>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	f000 8088 	beq.w	8009ffe <mg_sntp_parse+0x1c6>
 8009eee:	494d      	ldr	r1, [pc, #308]	; (800a024 <mg_sntp_parse+0x1ec>)
 8009ef0:	484a      	ldr	r0, [pc, #296]	; (800a01c <mg_sntp_parse+0x1e4>)
 8009ef2:	f7fd f931 	bl	8007158 <mg_log>
 8009ef6:	e082      	b.n	8009ffe <mg_sntp_parse+0x1c6>
  } else if (version == 4 || version == 3) {
 8009ef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009efa:	2b04      	cmp	r3, #4
 8009efc:	d002      	beq.n	8009f04 <mg_sntp_parse+0xcc>
 8009efe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f00:	2b03      	cmp	r3, #3
 8009f02:	d16e      	bne.n	8009fe2 <mg_sntp_parse+0x1aa>
    // int64_t ref = gettimestamp((uint32_t *) &buf[16]);
    int64_t t0 = gettimestamp((uint32_t *) &buf[24]);
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	3318      	adds	r3, #24
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f7ff ff1d 	bl	8009d48 <gettimestamp>
 8009f0e:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
    int64_t t1 = gettimestamp((uint32_t *) &buf[32]);
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	3320      	adds	r3, #32
 8009f16:	4618      	mov	r0, r3
 8009f18:	f7ff ff16 	bl	8009d48 <gettimestamp>
 8009f1c:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    int64_t t2 = gettimestamp((uint32_t *) &buf[40]);
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	3328      	adds	r3, #40	; 0x28
 8009f24:	4618      	mov	r0, r3
 8009f26:	f7ff ff0f 	bl	8009d48 <gettimestamp>
 8009f2a:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
    int64_t t3 = (int64_t) mg_millis();
 8009f2e:	f7f7 f877 	bl	8001020 <mg_millis>
 8009f32:	4602      	mov	r2, r0
 8009f34:	460b      	mov	r3, r1
 8009f36:	e9c7 2308 	strd	r2, r3, [r7, #32]
    int64_t delta = (t3 - t0) - (t2 - t1);
 8009f3a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009f3e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009f42:	ebb0 0802 	subs.w	r8, r0, r2
 8009f46:	eb61 0903 	sbc.w	r9, r1, r3
 8009f4a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009f4e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009f52:	1a84      	subs	r4, r0, r2
 8009f54:	eb61 0503 	sbc.w	r5, r1, r3
 8009f58:	ebb8 0304 	subs.w	r3, r8, r4
 8009f5c:	60bb      	str	r3, [r7, #8]
 8009f5e:	eb69 0305 	sbc.w	r3, r9, r5
 8009f62:	60fb      	str	r3, [r7, #12]
 8009f64:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8009f68:	e9c7 3406 	strd	r3, r4, [r7, #24]
    MG_VERBOSE(("%lld %lld %lld %lld delta:%lld", t0, t1, t2, t3, delta));
 8009f6c:	4b28      	ldr	r3, [pc, #160]	; (800a010 <mg_sntp_parse+0x1d8>)
 8009f6e:	f640 7249 	movw	r2, #3913	; 0xf49
 8009f72:	4928      	ldr	r1, [pc, #160]	; (800a014 <mg_sntp_parse+0x1dc>)
 8009f74:	2004      	movs	r0, #4
 8009f76:	f7fd f895 	bl	80070a4 <mg_log_prefix>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d014      	beq.n	8009faa <mg_sntp_parse+0x172>
 8009f80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009f84:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009f88:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009f8c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009f90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009f94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009f98:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009f9c:	e9cd 2300 	strd	r2, r3, [sp]
 8009fa0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009fa4:	4820      	ldr	r0, [pc, #128]	; (800a028 <mg_sntp_parse+0x1f0>)
 8009fa6:	f7fd f8d7 	bl	8007158 <mg_log>
    res = t2 + delta / 2;
 8009faa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	da06      	bge.n	8009fc0 <mg_sntp_parse+0x188>
 8009fb2:	1c51      	adds	r1, r2, #1
 8009fb4:	6039      	str	r1, [r7, #0]
 8009fb6:	f143 0300 	adc.w	r3, r3, #0
 8009fba:	607b      	str	r3, [r7, #4]
 8009fbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fc0:	f04f 0000 	mov.w	r0, #0
 8009fc4:	f04f 0100 	mov.w	r1, #0
 8009fc8:	0850      	lsrs	r0, r2, #1
 8009fca:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 8009fce:	1059      	asrs	r1, r3, #1
 8009fd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009fd4:	eb12 0a00 	adds.w	sl, r2, r0
 8009fd8:	eb43 0b01 	adc.w	fp, r3, r1
 8009fdc:	e9c7 ab12 	strd	sl, fp, [r7, #72]	; 0x48
  } else if (version == 4 || version == 3) {
 8009fe0:	e00d      	b.n	8009ffe <mg_sntp_parse+0x1c6>
  } else {
    MG_ERROR(("unexpected version: %d", version));
 8009fe2:	4b0b      	ldr	r3, [pc, #44]	; (800a010 <mg_sntp_parse+0x1d8>)
 8009fe4:	f640 724c 	movw	r2, #3916	; 0xf4c
 8009fe8:	490a      	ldr	r1, [pc, #40]	; (800a014 <mg_sntp_parse+0x1dc>)
 8009fea:	2001      	movs	r0, #1
 8009fec:	f7fd f85a 	bl	80070a4 <mg_log_prefix>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d003      	beq.n	8009ffe <mg_sntp_parse+0x1c6>
 8009ff6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009ff8:	480c      	ldr	r0, [pc, #48]	; (800a02c <mg_sntp_parse+0x1f4>)
 8009ffa:	f7fd f8ad 	bl	8007158 <mg_log>
  }
  return res;
 8009ffe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
}
 800a002:	4610      	mov	r0, r2
 800a004:	4619      	mov	r1, r3
 800a006:	3750      	adds	r7, #80	; 0x50
 800a008:	46bd      	mov	sp, r7
 800a00a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a00e:	bf00      	nop
 800a010:	08015728 	.word	0x08015728
 800a014:	08013b30 	.word	0x08013b30
 800a018:	08014ce0 	.word	0x08014ce0
 800a01c:	08013c4c 	.word	0x08013c4c
 800a020:	08014cf0 	.word	0x08014cf0
 800a024:	08014d04 	.word	0x08014d04
 800a028:	08014d20 	.word	0x08014d20
 800a02c:	08014d40 	.word	0x08014d40

0800a030 <sntp_cb>:

static void sntp_cb(struct mg_connection *c, int ev, void *evd, void *fnd) {
 800a030:	b590      	push	{r4, r7, lr}
 800a032:	b087      	sub	sp, #28
 800a034:	af00      	add	r7, sp, #0
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	60b9      	str	r1, [r7, #8]
 800a03a:	607a      	str	r2, [r7, #4]
 800a03c:	603b      	str	r3, [r7, #0]
  if (ev == MG_EV_READ) {
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	2b07      	cmp	r3, #7
 800a042:	d156      	bne.n	800a0f2 <sntp_cb+0xc2>
    int64_t milliseconds = mg_sntp_parse(c->recv.buf, c->recv.len);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a04c:	4619      	mov	r1, r3
 800a04e:	4610      	mov	r0, r2
 800a050:	f7ff fef2 	bl	8009e38 <mg_sntp_parse>
 800a054:	4602      	mov	r2, r0
 800a056:	460b      	mov	r3, r1
 800a058:	e9c7 2304 	strd	r2, r3, [r7, #16]
    if (milliseconds > 0) {
 800a05c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a060:	2a01      	cmp	r2, #1
 800a062:	f173 0300 	sbcs.w	r3, r3, #0
 800a066:	db3a      	blt.n	800a0de <sntp_cb+0xae>
      MG_INFO(("%lu got time: %lld ms from epoch", c->id, milliseconds));
 800a068:	4b27      	ldr	r3, [pc, #156]	; (800a108 <sntp_cb+0xd8>)
 800a06a:	f640 7255 	movw	r2, #3925	; 0xf55
 800a06e:	4927      	ldr	r1, [pc, #156]	; (800a10c <sntp_cb+0xdc>)
 800a070:	2002      	movs	r0, #2
 800a072:	f7fd f817 	bl	80070a4 <mg_log_prefix>
 800a076:	4603      	mov	r3, r0
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d006      	beq.n	800a08a <sntp_cb+0x5a>
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800a080:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a084:	4822      	ldr	r0, [pc, #136]	; (800a110 <sntp_cb+0xe0>)
 800a086:	f7fd f867 	bl	8007158 <mg_log>
      mg_call(c, MG_EV_SNTP_TIME, (uint64_t *) &milliseconds);
 800a08a:	f107 0310 	add.w	r3, r7, #16
 800a08e:	461a      	mov	r2, r3
 800a090:	2112      	movs	r1, #18
 800a092:	68f8      	ldr	r0, [r7, #12]
 800a094:	f7f8 f8f4 	bl	8002280 <mg_call>
      MG_VERBOSE(("%u.%u", (unsigned) (milliseconds / 1000),
 800a098:	4b1b      	ldr	r3, [pc, #108]	; (800a108 <sntp_cb+0xd8>)
 800a09a:	f640 7257 	movw	r2, #3927	; 0xf57
 800a09e:	491b      	ldr	r1, [pc, #108]	; (800a10c <sntp_cb+0xdc>)
 800a0a0:	2004      	movs	r0, #4
 800a0a2:	f7fc ffff 	bl	80070a4 <mg_log_prefix>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d018      	beq.n	800a0de <sntp_cb+0xae>
 800a0ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a0b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a0b4:	f04f 0300 	mov.w	r3, #0
 800a0b8:	f7f6 fdaa 	bl	8000c10 <__aeabi_ldivmod>
 800a0bc:	4602      	mov	r2, r0
 800a0be:	460b      	mov	r3, r1
 800a0c0:	4614      	mov	r4, r2
 800a0c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a0c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a0ca:	f04f 0300 	mov.w	r3, #0
 800a0ce:	f7f6 fd9f 	bl	8000c10 <__aeabi_ldivmod>
 800a0d2:	4613      	mov	r3, r2
 800a0d4:	461a      	mov	r2, r3
 800a0d6:	4621      	mov	r1, r4
 800a0d8:	480e      	ldr	r0, [pc, #56]	; (800a114 <sntp_cb+0xe4>)
 800a0da:	f7fd f83d 	bl	8007158 <mg_log>
                  (unsigned) (milliseconds % 1000)));
    }
    mg_iobuf_del(&c->recv, 0, c->recv.len);  // Free receive buffer
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	2100      	movs	r1, #0
 800a0ec:	f7fc f9be 	bl	800646c <mg_iobuf_del>
    mg_sntp_request(c);
  } else if (ev == MG_EV_CLOSE) {
  }
  (void) fnd;
  (void) evd;
}
 800a0f0:	e005      	b.n	800a0fe <sntp_cb+0xce>
  } else if (ev == MG_EV_CONNECT) {
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	2b04      	cmp	r3, #4
 800a0f6:	d102      	bne.n	800a0fe <sntp_cb+0xce>
    mg_sntp_request(c);
 800a0f8:	68f8      	ldr	r0, [r7, #12]
 800a0fa:	f000 f80d 	bl	800a118 <mg_sntp_request>
}
 800a0fe:	bf00      	nop
 800a100:	371c      	adds	r7, #28
 800a102:	46bd      	mov	sp, r7
 800a104:	bd90      	pop	{r4, r7, pc}
 800a106:	bf00      	nop
 800a108:	08015738 	.word	0x08015738
 800a10c:	08013b30 	.word	0x08013b30
 800a110:	08014d58 	.word	0x08014d58
 800a114:	08014d7c 	.word	0x08014d7c

0800a118 <mg_sntp_request>:

void mg_sntp_request(struct mg_connection *c) {
 800a118:	b590      	push	{r4, r7, lr}
 800a11a:	b095      	sub	sp, #84	; 0x54
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
  if (c->is_resolving) {
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800a126:	f003 0308 	and.w	r3, r3, #8
 800a12a:	b2db      	uxtb	r3, r3
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d010      	beq.n	800a152 <mg_sntp_request+0x3a>
    MG_ERROR(("%lu wait until resolved", c->id));
 800a130:	4b39      	ldr	r3, [pc, #228]	; (800a218 <mg_sntp_request+0x100>)
 800a132:	f640 7265 	movw	r2, #3941	; 0xf65
 800a136:	4939      	ldr	r1, [pc, #228]	; (800a21c <mg_sntp_request+0x104>)
 800a138:	2001      	movs	r0, #1
 800a13a:	f7fc ffb3 	bl	80070a4 <mg_log_prefix>
 800a13e:	4603      	mov	r3, r0
 800a140:	2b00      	cmp	r3, #0
 800a142:	d05e      	beq.n	800a202 <mg_sntp_request+0xea>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a148:	4619      	mov	r1, r3
 800a14a:	4835      	ldr	r0, [pc, #212]	; (800a220 <mg_sntp_request+0x108>)
 800a14c:	f7fd f804 	bl	8007158 <mg_log>
    buf[0] = (0 << 6) | (4 << 3) | 3;
    t[0] = mg_htonl((uint32_t) (now / 1000) + SNTP_TIME_OFFSET);
    t[1] = mg_htonl((uint32_t) frac);
    mg_send(c, buf, sizeof(buf));
  }
}
 800a150:	e057      	b.n	800a202 <mg_sntp_request+0xea>
    int64_t now = (int64_t) mg_millis();  // Use int64_t, for vc98
 800a152:	f7f6 ff65 	bl	8001020 <mg_millis>
 800a156:	4602      	mov	r2, r0
 800a158:	460b      	mov	r3, r1
 800a15a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    uint8_t buf[48] = {0};
 800a15e:	2300      	movs	r3, #0
 800a160:	60bb      	str	r3, [r7, #8]
 800a162:	f107 030c 	add.w	r3, r7, #12
 800a166:	222c      	movs	r2, #44	; 0x2c
 800a168:	2100      	movs	r1, #0
 800a16a:	4618      	mov	r0, r3
 800a16c:	f008 fb0c 	bl	8012788 <memset>
    uint32_t *t = (uint32_t *) &buf[40];
 800a170:	f107 0308 	add.w	r3, r7, #8
 800a174:	3328      	adds	r3, #40	; 0x28
 800a176:	647b      	str	r3, [r7, #68]	; 0x44
    double frac = ((double) (now % 1000)) / 1000.0 * SNTP_MAX_FRAC;
 800a178:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a17c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a180:	f04f 0300 	mov.w	r3, #0
 800a184:	f7f6 fd44 	bl	8000c10 <__aeabi_ldivmod>
 800a188:	4610      	mov	r0, r2
 800a18a:	4619      	mov	r1, r3
 800a18c:	f7f6 fa30 	bl	80005f0 <__aeabi_l2d>
 800a190:	f04f 0200 	mov.w	r2, #0
 800a194:	4b23      	ldr	r3, [pc, #140]	; (800a224 <mg_sntp_request+0x10c>)
 800a196:	f7f6 fb83 	bl	80008a0 <__aeabi_ddiv>
 800a19a:	4602      	mov	r2, r0
 800a19c:	460b      	mov	r3, r1
 800a19e:	4610      	mov	r0, r2
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	a31b      	add	r3, pc, #108	; (adr r3, 800a210 <mg_sntp_request+0xf8>)
 800a1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a8:	f7f6 fa50 	bl	800064c <__aeabi_dmul>
 800a1ac:	4602      	mov	r2, r0
 800a1ae:	460b      	mov	r3, r1
 800a1b0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    buf[0] = (0 << 6) | (4 << 3) | 3;
 800a1b4:	2323      	movs	r3, #35	; 0x23
 800a1b6:	723b      	strb	r3, [r7, #8]
    t[0] = mg_htonl((uint32_t) (now / 1000) + SNTP_TIME_OFFSET);
 800a1b8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a1bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a1c0:	f04f 0300 	mov.w	r3, #0
 800a1c4:	f7f6 fd24 	bl	8000c10 <__aeabi_ldivmod>
 800a1c8:	4602      	mov	r2, r0
 800a1ca:	460b      	mov	r3, r1
 800a1cc:	4b16      	ldr	r3, [pc, #88]	; (800a228 <mg_sntp_request+0x110>)
 800a1ce:	4413      	add	r3, r2
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f000 ffd2 	bl	800b17a <mg_ntohl>
 800a1d6:	4602      	mov	r2, r0
 800a1d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1da:	601a      	str	r2, [r3, #0]
    t[1] = mg_htonl((uint32_t) frac);
 800a1dc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a1e0:	f7f6 fcf6 	bl	8000bd0 <__aeabi_d2uiz>
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1e8:	1d1c      	adds	r4, r3, #4
 800a1ea:	4610      	mov	r0, r2
 800a1ec:	f000 ffc5 	bl	800b17a <mg_ntohl>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	6023      	str	r3, [r4, #0]
    mg_send(c, buf, sizeof(buf));
 800a1f4:	f107 0308 	add.w	r3, r7, #8
 800a1f8:	2230      	movs	r2, #48	; 0x30
 800a1fa:	4619      	mov	r1, r3
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f004 fa7d 	bl	800e6fc <mg_send>
}
 800a202:	bf00      	nop
 800a204:	3754      	adds	r7, #84	; 0x54
 800a206:	46bd      	mov	sp, r7
 800a208:	bd90      	pop	{r4, r7, pc}
 800a20a:	bf00      	nop
 800a20c:	f3af 8000 	nop.w
 800a210:	ffe00000 	.word	0xffe00000
 800a214:	41efffff 	.word	0x41efffff
 800a218:	08015740 	.word	0x08015740
 800a21c:	08013b30 	.word	0x08013b30
 800a220:	08014d84 	.word	0x08014d84
 800a224:	408f4000 	.word	0x408f4000
 800a228:	83aa7e80 	.word	0x83aa7e80

0800a22c <mg_sntp_connect>:

struct mg_connection *mg_sntp_connect(struct mg_mgr *mgr, const char *url,
                                      mg_event_handler_t fn, void *fnd) {
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b086      	sub	sp, #24
 800a230:	af00      	add	r7, sp, #0
 800a232:	60f8      	str	r0, [r7, #12]
 800a234:	60b9      	str	r1, [r7, #8]
 800a236:	607a      	str	r2, [r7, #4]
 800a238:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 800a23a:	2300      	movs	r3, #0
 800a23c:	617b      	str	r3, [r7, #20]
  if (url == NULL) url = "udp://time.google.com:123";
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d101      	bne.n	800a248 <mg_sntp_connect+0x1c>
 800a244:	4b09      	ldr	r3, [pc, #36]	; (800a26c <mg_sntp_connect+0x40>)
 800a246:	60bb      	str	r3, [r7, #8]
  if ((c = mg_connect(mgr, url, fn, fnd)) != NULL) c->pfn = sntp_cb;
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	687a      	ldr	r2, [r7, #4]
 800a24c:	68b9      	ldr	r1, [r7, #8]
 800a24e:	68f8      	ldr	r0, [r7, #12]
 800a250:	f7fe f8ca 	bl	80083e8 <mg_connect>
 800a254:	6178      	str	r0, [r7, #20]
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d002      	beq.n	800a262 <mg_sntp_connect+0x36>
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	4a04      	ldr	r2, [pc, #16]	; (800a270 <mg_sntp_connect+0x44>)
 800a260:	671a      	str	r2, [r3, #112]	; 0x70
  return c;
 800a262:	697b      	ldr	r3, [r7, #20]
}
 800a264:	4618      	mov	r0, r3
 800a266:	3718      	adds	r7, #24
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}
 800a26c:	08014d9c 	.word	0x08014d9c
 800a270:	0800a031 	.word	0x0800a031

0800a274 <mg_http_serve_ssi>:
  mg_http_reply(c, 200, headers, "%s", data == NULL ? "" : data);
  free(data);
}
#else
void mg_http_serve_ssi(struct mg_connection *c, const char *root,
                       const char *fullpath) {
 800a274:	b580      	push	{r7, lr}
 800a276:	b084      	sub	sp, #16
 800a278:	af00      	add	r7, sp, #0
 800a27a:	60f8      	str	r0, [r7, #12]
 800a27c:	60b9      	str	r1, [r7, #8]
 800a27e:	607a      	str	r2, [r7, #4]
  mg_http_reply(c, 501, NULL, "SSI not enabled");
 800a280:	4b05      	ldr	r3, [pc, #20]	; (800a298 <mg_http_serve_ssi+0x24>)
 800a282:	2200      	movs	r2, #0
 800a284:	f240 11f5 	movw	r1, #501	; 0x1f5
 800a288:	68f8      	ldr	r0, [r7, #12]
 800a28a:	f7fa f9ed 	bl	8004668 <mg_http_reply>
  (void) root, (void) fullpath;
}
 800a28e:	bf00      	nop
 800a290:	3710      	adds	r7, #16
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}
 800a296:	bf00      	nop
 800a298:	08014db8 	.word	0x08014db8

0800a29c <mg_str_s>:
#ifdef MG_ENABLE_LINES
#line 1 "src/str.c"
#endif


struct mg_str mg_str_s(const char *s) {
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b084      	sub	sp, #16
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	6039      	str	r1, [r7, #0]
  struct mg_str str = {s, s == NULL ? 0 : strlen(s)};
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	60bb      	str	r3, [r7, #8]
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d004      	beq.n	800a2ba <mg_str_s+0x1e>
 800a2b0:	6838      	ldr	r0, [r7, #0]
 800a2b2:	f7f6 f807 	bl	80002c4 <strlen>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	e000      	b.n	800a2bc <mg_str_s+0x20>
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	60fb      	str	r3, [r7, #12]
  return str;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	461a      	mov	r2, r3
 800a2c2:	f107 0308 	add.w	r3, r7, #8
 800a2c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a2ca:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	3710      	adds	r7, #16
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}

0800a2d6 <mg_str_n>:

struct mg_str mg_str_n(const char *s, size_t n) {
 800a2d6:	b480      	push	{r7}
 800a2d8:	b087      	sub	sp, #28
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	60f8      	str	r0, [r7, #12]
 800a2de:	60b9      	str	r1, [r7, #8]
 800a2e0:	607a      	str	r2, [r7, #4]
  struct mg_str str = {s, n};
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	613b      	str	r3, [r7, #16]
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	617b      	str	r3, [r7, #20]
  return str;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	f107 0310 	add.w	r3, r7, #16
 800a2f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a2f6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800a2fa:	68f8      	ldr	r0, [r7, #12]
 800a2fc:	371c      	adds	r7, #28
 800a2fe:	46bd      	mov	sp, r7
 800a300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a304:	4770      	bx	lr

0800a306 <mg_lower>:

int mg_lower(const char *s) {
 800a306:	b480      	push	{r7}
 800a308:	b085      	sub	sp, #20
 800a30a:	af00      	add	r7, sp, #0
 800a30c:	6078      	str	r0, [r7, #4]
  int c = *s;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	781b      	ldrb	r3, [r3, #0]
 800a312:	60fb      	str	r3, [r7, #12]
  if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2b40      	cmp	r3, #64	; 0x40
 800a318:	dd05      	ble.n	800a326 <mg_lower+0x20>
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	2b5a      	cmp	r3, #90	; 0x5a
 800a31e:	dc02      	bgt.n	800a326 <mg_lower+0x20>
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	3320      	adds	r3, #32
 800a324:	60fb      	str	r3, [r7, #12]
  return c;
 800a326:	68fb      	ldr	r3, [r7, #12]
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3714      	adds	r7, #20
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr

0800a334 <mg_ncasecmp>:

int mg_ncasecmp(const char *s1, const char *s2, size_t len) {
 800a334:	b590      	push	{r4, r7, lr}
 800a336:	b087      	sub	sp, #28
 800a338:	af00      	add	r7, sp, #0
 800a33a:	60f8      	str	r0, [r7, #12]
 800a33c:	60b9      	str	r1, [r7, #8]
 800a33e:	607a      	str	r2, [r7, #4]
  int diff = 0;
 800a340:	2300      	movs	r3, #0
 800a342:	617b      	str	r3, [r7, #20]
  if (len > 0) do {
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d01d      	beq.n	800a386 <mg_ncasecmp+0x52>
      diff = mg_lower(s1++) - mg_lower(s2++);
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	1c5a      	adds	r2, r3, #1
 800a34e:	60fa      	str	r2, [r7, #12]
 800a350:	4618      	mov	r0, r3
 800a352:	f7ff ffd8 	bl	800a306 <mg_lower>
 800a356:	4604      	mov	r4, r0
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	1c5a      	adds	r2, r3, #1
 800a35c:	60ba      	str	r2, [r7, #8]
 800a35e:	4618      	mov	r0, r3
 800a360:	f7ff ffd1 	bl	800a306 <mg_lower>
 800a364:	4603      	mov	r3, r0
 800a366:	1ae3      	subs	r3, r4, r3
 800a368:	617b      	str	r3, [r7, #20]
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d10a      	bne.n	800a386 <mg_ncasecmp+0x52>
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	3b01      	subs	r3, #1
 800a374:	781b      	ldrb	r3, [r3, #0]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d005      	beq.n	800a386 <mg_ncasecmp+0x52>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	3b01      	subs	r3, #1
 800a37e:	607b      	str	r3, [r7, #4]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d1e1      	bne.n	800a34a <mg_ncasecmp+0x16>
  return diff;
 800a386:	697b      	ldr	r3, [r7, #20]
}
 800a388:	4618      	mov	r0, r3
 800a38a:	371c      	adds	r7, #28
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd90      	pop	{r4, r7, pc}

0800a390 <mg_vcmp>:

int mg_casecmp(const char *s1, const char *s2) {
  return mg_ncasecmp(s1, s2, (size_t) ~0);
}

int mg_vcmp(const struct mg_str *s1, const char *s2) {
 800a390:	b580      	push	{r7, lr}
 800a392:	b086      	sub	sp, #24
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
 800a398:	6039      	str	r1, [r7, #0]
  size_t n2 = strlen(s2), n1 = s1->len;
 800a39a:	6838      	ldr	r0, [r7, #0]
 800a39c:	f7f5 ff92 	bl	80002c4 <strlen>
 800a3a0:	6178      	str	r0, [r7, #20]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	685b      	ldr	r3, [r3, #4]
 800a3a6:	613b      	str	r3, [r7, #16]
  int r = strncmp(s1->ptr, s2, (n1 < n2) ? n1 : n2);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6818      	ldr	r0, [r3, #0]
 800a3ac:	697a      	ldr	r2, [r7, #20]
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	bf28      	it	cs
 800a3b4:	4613      	movcs	r3, r2
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	6839      	ldr	r1, [r7, #0]
 800a3ba:	f008 fbd4 	bl	8012b66 <strncmp>
 800a3be:	60f8      	str	r0, [r7, #12]
  if (r == 0) return (int) (n1 - n2);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d103      	bne.n	800a3ce <mg_vcmp+0x3e>
 800a3c6:	693a      	ldr	r2, [r7, #16]
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	1ad3      	subs	r3, r2, r3
 800a3cc:	e000      	b.n	800a3d0 <mg_vcmp+0x40>
  return r;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3718      	adds	r7, #24
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}

0800a3d8 <mg_vcasecmp>:

int mg_vcasecmp(const struct mg_str *str1, const char *str2) {
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b086      	sub	sp, #24
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	6039      	str	r1, [r7, #0]
  size_t n2 = strlen(str2), n1 = str1->len;
 800a3e2:	6838      	ldr	r0, [r7, #0]
 800a3e4:	f7f5 ff6e 	bl	80002c4 <strlen>
 800a3e8:	6178      	str	r0, [r7, #20]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	613b      	str	r3, [r7, #16]
  int r = mg_ncasecmp(str1->ptr, str2, (n1 < n2) ? n1 : n2);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6818      	ldr	r0, [r3, #0]
 800a3f4:	697a      	ldr	r2, [r7, #20]
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	bf28      	it	cs
 800a3fc:	4613      	movcs	r3, r2
 800a3fe:	461a      	mov	r2, r3
 800a400:	6839      	ldr	r1, [r7, #0]
 800a402:	f7ff ff97 	bl	800a334 <mg_ncasecmp>
 800a406:	60f8      	str	r0, [r7, #12]
  if (r == 0) return (int) (n1 - n2);
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d103      	bne.n	800a416 <mg_vcasecmp+0x3e>
 800a40e:	693a      	ldr	r2, [r7, #16]
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	1ad3      	subs	r3, r2, r3
 800a414:	e000      	b.n	800a418 <mg_vcasecmp+0x40>
  return r;
 800a416:	68fb      	ldr	r3, [r7, #12]
}
 800a418:	4618      	mov	r0, r3
 800a41a:	3718      	adds	r7, #24
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}

0800a420 <mg_strcmp>:
    }
  }
  return r;
}

int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {
 800a420:	b490      	push	{r4, r7}
 800a422:	b088      	sub	sp, #32
 800a424:	af00      	add	r7, sp, #0
 800a426:	f107 0408 	add.w	r4, r7, #8
 800a42a:	e884 0003 	stmia.w	r4, {r0, r1}
 800a42e:	4639      	mov	r1, r7
 800a430:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 800a434:	2300      	movs	r3, #0
 800a436:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 800a438:	e019      	b.n	800a46e <mg_strcmp+0x4e>
    int c1 = str1.ptr[i];
 800a43a:	68ba      	ldr	r2, [r7, #8]
 800a43c:	69fb      	ldr	r3, [r7, #28]
 800a43e:	4413      	add	r3, r2
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	61bb      	str	r3, [r7, #24]
    int c2 = str2.ptr[i];
 800a444:	683a      	ldr	r2, [r7, #0]
 800a446:	69fb      	ldr	r3, [r7, #28]
 800a448:	4413      	add	r3, r2
 800a44a:	781b      	ldrb	r3, [r3, #0]
 800a44c:	617b      	str	r3, [r7, #20]
    if (c1 < c2) return -1;
 800a44e:	69ba      	ldr	r2, [r7, #24]
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	429a      	cmp	r2, r3
 800a454:	da02      	bge.n	800a45c <mg_strcmp+0x3c>
 800a456:	f04f 33ff 	mov.w	r3, #4294967295
 800a45a:	e01e      	b.n	800a49a <mg_strcmp+0x7a>
    if (c1 > c2) return 1;
 800a45c:	69ba      	ldr	r2, [r7, #24]
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	429a      	cmp	r2, r3
 800a462:	dd01      	ble.n	800a468 <mg_strcmp+0x48>
 800a464:	2301      	movs	r3, #1
 800a466:	e018      	b.n	800a49a <mg_strcmp+0x7a>
    i++;
 800a468:	69fb      	ldr	r3, [r7, #28]
 800a46a:	3301      	adds	r3, #1
 800a46c:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	69fa      	ldr	r2, [r7, #28]
 800a472:	429a      	cmp	r2, r3
 800a474:	d203      	bcs.n	800a47e <mg_strcmp+0x5e>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	69fa      	ldr	r2, [r7, #28]
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d3dd      	bcc.n	800a43a <mg_strcmp+0x1a>
  }
  if (i < str1.len) return 1;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	69fa      	ldr	r2, [r7, #28]
 800a482:	429a      	cmp	r2, r3
 800a484:	d201      	bcs.n	800a48a <mg_strcmp+0x6a>
 800a486:	2301      	movs	r3, #1
 800a488:	e007      	b.n	800a49a <mg_strcmp+0x7a>
  if (i < str2.len) return -1;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	69fa      	ldr	r2, [r7, #28]
 800a48e:	429a      	cmp	r2, r3
 800a490:	d202      	bcs.n	800a498 <mg_strcmp+0x78>
 800a492:	f04f 33ff 	mov.w	r3, #4294967295
 800a496:	e000      	b.n	800a49a <mg_strcmp+0x7a>
  return 0;
 800a498:	2300      	movs	r3, #0
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3720      	adds	r7, #32
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bc90      	pop	{r4, r7}
 800a4a2:	4770      	bx	lr

0800a4a4 <mg_match>:
  while (s.len > 0 && is_space((int) *s.ptr)) s.ptr++, s.len--;
  while (s.len > 0 && is_space((int) *(s.ptr + s.len - 1))) s.len--;
  return s;
}

bool mg_match(struct mg_str s, struct mg_str p, struct mg_str *caps) {
 800a4a4:	b490      	push	{r4, r7}
 800a4a6:	b088      	sub	sp, #32
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	f107 0408 	add.w	r4, r7, #8
 800a4ae:	e884 0003 	stmia.w	r4, {r0, r1}
 800a4b2:	4639      	mov	r1, r7
 800a4b4:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0, j = 0, ni = 0, nj = 0;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	61fb      	str	r3, [r7, #28]
 800a4bc:	2300      	movs	r3, #0
 800a4be:	61bb      	str	r3, [r7, #24]
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	617b      	str	r3, [r7, #20]
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	613b      	str	r3, [r7, #16]
  if (caps) caps->ptr = NULL, caps->len = 0;
 800a4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	f000 80ad 	beq.w	800a62a <mg_match+0x186>
 800a4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	601a      	str	r2, [r3, #0]
 800a4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d8:	2200      	movs	r2, #0
 800a4da:	605a      	str	r2, [r3, #4]
  while (i < p.len || j < s.len) {
 800a4dc:	e0a5      	b.n	800a62a <mg_match+0x186>
    if (i < p.len && j < s.len && (p.ptr[i] == '?' || s.ptr[j] == p.ptr[i])) {
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	69fa      	ldr	r2, [r7, #28]
 800a4e2:	429a      	cmp	r2, r3
 800a4e4:	d24f      	bcs.n	800a586 <mg_match+0xe2>
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	69ba      	ldr	r2, [r7, #24]
 800a4ea:	429a      	cmp	r2, r3
 800a4ec:	d24b      	bcs.n	800a586 <mg_match+0xe2>
 800a4ee:	683a      	ldr	r2, [r7, #0]
 800a4f0:	69fb      	ldr	r3, [r7, #28]
 800a4f2:	4413      	add	r3, r2
 800a4f4:	781b      	ldrb	r3, [r3, #0]
 800a4f6:	2b3f      	cmp	r3, #63	; 0x3f
 800a4f8:	d009      	beq.n	800a50e <mg_match+0x6a>
 800a4fa:	68ba      	ldr	r2, [r7, #8]
 800a4fc:	69bb      	ldr	r3, [r7, #24]
 800a4fe:	4413      	add	r3, r2
 800a500:	781a      	ldrb	r2, [r3, #0]
 800a502:	6839      	ldr	r1, [r7, #0]
 800a504:	69fb      	ldr	r3, [r7, #28]
 800a506:	440b      	add	r3, r1
 800a508:	781b      	ldrb	r3, [r3, #0]
 800a50a:	429a      	cmp	r2, r3
 800a50c:	d13b      	bne.n	800a586 <mg_match+0xe2>
      if (caps == NULL) {
 800a50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a510:	2b00      	cmp	r3, #0
 800a512:	d031      	beq.n	800a578 <mg_match+0xd4>
      } else if (p.ptr[i] == '?') {
 800a514:	683a      	ldr	r2, [r7, #0]
 800a516:	69fb      	ldr	r3, [r7, #28]
 800a518:	4413      	add	r3, r2
 800a51a:	781b      	ldrb	r3, [r3, #0]
 800a51c:	2b3f      	cmp	r3, #63	; 0x3f
 800a51e:	d111      	bne.n	800a544 <mg_match+0xa0>
        caps->ptr = &s.ptr[j], caps->len = 1;     // Finalize `?` cap
 800a520:	68ba      	ldr	r2, [r7, #8]
 800a522:	69bb      	ldr	r3, [r7, #24]
 800a524:	441a      	add	r2, r3
 800a526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a528:	601a      	str	r2, [r3, #0]
 800a52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a52c:	2201      	movs	r2, #1
 800a52e:	605a      	str	r2, [r3, #4]
        caps++, caps->ptr = NULL, caps->len = 0;  // Init next cap
 800a530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a532:	3308      	adds	r3, #8
 800a534:	62bb      	str	r3, [r7, #40]	; 0x28
 800a536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a538:	2200      	movs	r2, #0
 800a53a:	601a      	str	r2, [r3, #0]
 800a53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a53e:	2200      	movs	r2, #0
 800a540:	605a      	str	r2, [r3, #4]
 800a542:	e019      	b.n	800a578 <mg_match+0xd4>
      } else if (caps->ptr != NULL && caps->len == 0) {
 800a544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d015      	beq.n	800a578 <mg_match+0xd4>
 800a54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d111      	bne.n	800a578 <mg_match+0xd4>
        caps->len = (size_t) (&s.ptr[j] - caps->ptr);  // Finalize current cap
 800a554:	68ba      	ldr	r2, [r7, #8]
 800a556:	69bb      	ldr	r3, [r7, #24]
 800a558:	441a      	add	r2, r3
 800a55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	1ad3      	subs	r3, r2, r3
 800a560:	461a      	mov	r2, r3
 800a562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a564:	605a      	str	r2, [r3, #4]
        caps++, caps->len = 0, caps->ptr = NULL;       // Init next cap
 800a566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a568:	3308      	adds	r3, #8
 800a56a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a56e:	2200      	movs	r2, #0
 800a570:	605a      	str	r2, [r3, #4]
 800a572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a574:	2200      	movs	r2, #0
 800a576:	601a      	str	r2, [r3, #0]
      }
      i++, j++;
 800a578:	69fb      	ldr	r3, [r7, #28]
 800a57a:	3301      	adds	r3, #1
 800a57c:	61fb      	str	r3, [r7, #28]
 800a57e:	69bb      	ldr	r3, [r7, #24]
 800a580:	3301      	adds	r3, #1
 800a582:	61bb      	str	r3, [r7, #24]
 800a584:	e051      	b.n	800a62a <mg_match+0x186>
    } else if (i < p.len && (p.ptr[i] == '*' || p.ptr[i] == '#')) {
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	69fa      	ldr	r2, [r7, #28]
 800a58a:	429a      	cmp	r2, r3
 800a58c:	d222      	bcs.n	800a5d4 <mg_match+0x130>
 800a58e:	683a      	ldr	r2, [r7, #0]
 800a590:	69fb      	ldr	r3, [r7, #28]
 800a592:	4413      	add	r3, r2
 800a594:	781b      	ldrb	r3, [r3, #0]
 800a596:	2b2a      	cmp	r3, #42	; 0x2a
 800a598:	d005      	beq.n	800a5a6 <mg_match+0x102>
 800a59a:	683a      	ldr	r2, [r7, #0]
 800a59c:	69fb      	ldr	r3, [r7, #28]
 800a59e:	4413      	add	r3, r2
 800a5a0:	781b      	ldrb	r3, [r3, #0]
 800a5a2:	2b23      	cmp	r3, #35	; 0x23
 800a5a4:	d116      	bne.n	800a5d4 <mg_match+0x130>
      if (caps && !caps->ptr) caps->len = 0, caps->ptr = &s.ptr[j];  // Init cap
 800a5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d00b      	beq.n	800a5c4 <mg_match+0x120>
 800a5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d107      	bne.n	800a5c4 <mg_match+0x120>
 800a5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	605a      	str	r2, [r3, #4]
 800a5ba:	68ba      	ldr	r2, [r7, #8]
 800a5bc:	69bb      	ldr	r3, [r7, #24]
 800a5be:	441a      	add	r2, r3
 800a5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c2:	601a      	str	r2, [r3, #0]
      ni = i++, nj = j + 1;
 800a5c4:	69fb      	ldr	r3, [r7, #28]
 800a5c6:	1c5a      	adds	r2, r3, #1
 800a5c8:	61fa      	str	r2, [r7, #28]
 800a5ca:	617b      	str	r3, [r7, #20]
 800a5cc:	69bb      	ldr	r3, [r7, #24]
 800a5ce:	3301      	adds	r3, #1
 800a5d0:	613b      	str	r3, [r7, #16]
 800a5d2:	e02a      	b.n	800a62a <mg_match+0x186>
    } else if (nj > 0 && nj <= s.len && (p.ptr[ni] == '#' || s.ptr[j] != '/')) {
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d025      	beq.n	800a626 <mg_match+0x182>
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	693a      	ldr	r2, [r7, #16]
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d821      	bhi.n	800a626 <mg_match+0x182>
 800a5e2:	683a      	ldr	r2, [r7, #0]
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	4413      	add	r3, r2
 800a5e8:	781b      	ldrb	r3, [r3, #0]
 800a5ea:	2b23      	cmp	r3, #35	; 0x23
 800a5ec:	d005      	beq.n	800a5fa <mg_match+0x156>
 800a5ee:	68ba      	ldr	r2, [r7, #8]
 800a5f0:	69bb      	ldr	r3, [r7, #24]
 800a5f2:	4413      	add	r3, r2
 800a5f4:	781b      	ldrb	r3, [r3, #0]
 800a5f6:	2b2f      	cmp	r3, #47	; 0x2f
 800a5f8:	d015      	beq.n	800a626 <mg_match+0x182>
      i = ni, j = nj;
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	61fb      	str	r3, [r7, #28]
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	61bb      	str	r3, [r7, #24]
      if (caps && caps->ptr == NULL && caps->len == 0) {
 800a602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a604:	2b00      	cmp	r3, #0
 800a606:	d010      	beq.n	800a62a <mg_match+0x186>
 800a608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d10c      	bne.n	800a62a <mg_match+0x186>
 800a610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a612:	685b      	ldr	r3, [r3, #4]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d108      	bne.n	800a62a <mg_match+0x186>
        caps--, caps->len = 0;  // Restart previous cap
 800a618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a61a:	3b08      	subs	r3, #8
 800a61c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a620:	2200      	movs	r2, #0
 800a622:	605a      	str	r2, [r3, #4]
      if (caps && caps->ptr == NULL && caps->len == 0) {
 800a624:	e001      	b.n	800a62a <mg_match+0x186>
      }
    } else {
      return false;
 800a626:	2300      	movs	r3, #0
 800a628:	e01e      	b.n	800a668 <mg_match+0x1c4>
  while (i < p.len || j < s.len) {
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	69fa      	ldr	r2, [r7, #28]
 800a62e:	429a      	cmp	r2, r3
 800a630:	f4ff af55 	bcc.w	800a4de <mg_match+0x3a>
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	69ba      	ldr	r2, [r7, #24]
 800a638:	429a      	cmp	r2, r3
 800a63a:	f4ff af50 	bcc.w	800a4de <mg_match+0x3a>
    }
  }
  if (caps && caps->ptr && caps->len == 0) {
 800a63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a640:	2b00      	cmp	r3, #0
 800a642:	d010      	beq.n	800a666 <mg_match+0x1c2>
 800a644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d00c      	beq.n	800a666 <mg_match+0x1c2>
 800a64c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d108      	bne.n	800a666 <mg_match+0x1c2>
    caps->len = (size_t) (&s.ptr[j] - caps->ptr);
 800a654:	68ba      	ldr	r2, [r7, #8]
 800a656:	69bb      	ldr	r3, [r7, #24]
 800a658:	441a      	add	r2, r3
 800a65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	1ad3      	subs	r3, r2, r3
 800a660:	461a      	mov	r2, r3
 800a662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a664:	605a      	str	r2, [r3, #4]
  }
  return true;
 800a666:	2301      	movs	r3, #1
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3720      	adds	r7, #32
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bc90      	pop	{r4, r7}
 800a670:	4770      	bx	lr

0800a672 <mg_globmatch>:

bool mg_globmatch(const char *s1, size_t n1, const char *s2, size_t n2) {
 800a672:	b580      	push	{r7, lr}
 800a674:	b08a      	sub	sp, #40	; 0x28
 800a676:	af02      	add	r7, sp, #8
 800a678:	60f8      	str	r0, [r7, #12]
 800a67a:	60b9      	str	r1, [r7, #8]
 800a67c:	607a      	str	r2, [r7, #4]
 800a67e:	603b      	str	r3, [r7, #0]
  return mg_match(mg_str_n(s2, n2), mg_str_n(s1, n1), NULL);
 800a680:	f107 0310 	add.w	r3, r7, #16
 800a684:	683a      	ldr	r2, [r7, #0]
 800a686:	6879      	ldr	r1, [r7, #4]
 800a688:	4618      	mov	r0, r3
 800a68a:	f7ff fe24 	bl	800a2d6 <mg_str_n>
 800a68e:	f107 0318 	add.w	r3, r7, #24
 800a692:	68ba      	ldr	r2, [r7, #8]
 800a694:	68f9      	ldr	r1, [r7, #12]
 800a696:	4618      	mov	r0, r3
 800a698:	f7ff fe1d 	bl	800a2d6 <mg_str_n>
 800a69c:	2300      	movs	r3, #0
 800a69e:	9300      	str	r3, [sp, #0]
 800a6a0:	f107 0318 	add.w	r3, r7, #24
 800a6a4:	cb0c      	ldmia	r3, {r2, r3}
 800a6a6:	f107 0110 	add.w	r1, r7, #16
 800a6aa:	c903      	ldmia	r1, {r0, r1}
 800a6ac:	f7ff fefa 	bl	800a4a4 <mg_match>
 800a6b0:	4603      	mov	r3, r0
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3720      	adds	r7, #32
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}

0800a6ba <mg_nce>:

static size_t mg_nce(const char *s, size_t n, size_t ofs, size_t *koff,
                     size_t *klen, size_t *voff, size_t *vlen, char delim) {
 800a6ba:	b480      	push	{r7}
 800a6bc:	b087      	sub	sp, #28
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	60f8      	str	r0, [r7, #12]
 800a6c2:	60b9      	str	r1, [r7, #8]
 800a6c4:	607a      	str	r2, [r7, #4]
 800a6c6:	603b      	str	r3, [r7, #0]
  size_t kvlen, kl;
  for (kvlen = 0; ofs + kvlen < n && s[ofs + kvlen] != delim;) kvlen++;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	617b      	str	r3, [r7, #20]
 800a6cc:	e002      	b.n	800a6d4 <mg_nce+0x1a>
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	3301      	adds	r3, #1
 800a6d2:	617b      	str	r3, [r7, #20]
 800a6d4:	687a      	ldr	r2, [r7, #4]
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	4413      	add	r3, r2
 800a6da:	68ba      	ldr	r2, [r7, #8]
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d909      	bls.n	800a6f4 <mg_nce+0x3a>
 800a6e0:	687a      	ldr	r2, [r7, #4]
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	4413      	add	r3, r2
 800a6e6:	68fa      	ldr	r2, [r7, #12]
 800a6e8:	4413      	add	r3, r2
 800a6ea:	781b      	ldrb	r3, [r3, #0]
 800a6ec:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d1ec      	bne.n	800a6ce <mg_nce+0x14>
  for (kl = 0; kl < kvlen && s[ofs + kl] != '=';) kl++;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	613b      	str	r3, [r7, #16]
 800a6f8:	e002      	b.n	800a700 <mg_nce+0x46>
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	3301      	adds	r3, #1
 800a6fe:	613b      	str	r3, [r7, #16]
 800a700:	693a      	ldr	r2, [r7, #16]
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	429a      	cmp	r2, r3
 800a706:	d207      	bcs.n	800a718 <mg_nce+0x5e>
 800a708:	687a      	ldr	r2, [r7, #4]
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	4413      	add	r3, r2
 800a70e:	68fa      	ldr	r2, [r7, #12]
 800a710:	4413      	add	r3, r2
 800a712:	781b      	ldrb	r3, [r3, #0]
 800a714:	2b3d      	cmp	r3, #61	; 0x3d
 800a716:	d1f0      	bne.n	800a6fa <mg_nce+0x40>
  if (koff != NULL) *koff = ofs;
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d002      	beq.n	800a724 <mg_nce+0x6a>
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	687a      	ldr	r2, [r7, #4]
 800a722:	601a      	str	r2, [r3, #0]
  if (klen != NULL) *klen = kl;
 800a724:	6a3b      	ldr	r3, [r7, #32]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d002      	beq.n	800a730 <mg_nce+0x76>
 800a72a:	6a3b      	ldr	r3, [r7, #32]
 800a72c:	693a      	ldr	r2, [r7, #16]
 800a72e:	601a      	str	r2, [r3, #0]
  if (voff != NULL) *voff = kl < kvlen ? ofs + kl + 1 : 0;
 800a730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a732:	2b00      	cmp	r3, #0
 800a734:	d00b      	beq.n	800a74e <mg_nce+0x94>
 800a736:	693a      	ldr	r2, [r7, #16]
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d204      	bcs.n	800a748 <mg_nce+0x8e>
 800a73e:	687a      	ldr	r2, [r7, #4]
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	4413      	add	r3, r2
 800a744:	3301      	adds	r3, #1
 800a746:	e000      	b.n	800a74a <mg_nce+0x90>
 800a748:	2300      	movs	r3, #0
 800a74a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a74c:	6013      	str	r3, [r2, #0]
  if (vlen != NULL) *vlen = kl < kvlen ? kvlen - kl - 1 : 0;
 800a74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a750:	2b00      	cmp	r3, #0
 800a752:	d00b      	beq.n	800a76c <mg_nce+0xb2>
 800a754:	693a      	ldr	r2, [r7, #16]
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	429a      	cmp	r2, r3
 800a75a:	d204      	bcs.n	800a766 <mg_nce+0xac>
 800a75c:	697a      	ldr	r2, [r7, #20]
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	1ad3      	subs	r3, r2, r3
 800a762:	3b01      	subs	r3, #1
 800a764:	e000      	b.n	800a768 <mg_nce+0xae>
 800a766:	2300      	movs	r3, #0
 800a768:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a76a:	6013      	str	r3, [r2, #0]
  ofs += kvlen + 1;
 800a76c:	697a      	ldr	r2, [r7, #20]
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	4413      	add	r3, r2
 800a772:	3301      	adds	r3, #1
 800a774:	607b      	str	r3, [r7, #4]
  return ofs > n ? n : ofs;
 800a776:	687a      	ldr	r2, [r7, #4]
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	4293      	cmp	r3, r2
 800a77c:	bf28      	it	cs
 800a77e:	4613      	movcs	r3, r2
}
 800a780:	4618      	mov	r0, r3
 800a782:	371c      	adds	r7, #28
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr

0800a78c <mg_split>:

bool mg_split(struct mg_str *s, struct mg_str *k, struct mg_str *v, char sep) {
 800a78c:	b590      	push	{r4, r7, lr}
 800a78e:	b091      	sub	sp, #68	; 0x44
 800a790:	af04      	add	r7, sp, #16
 800a792:	6178      	str	r0, [r7, #20]
 800a794:	6139      	str	r1, [r7, #16]
 800a796:	60fa      	str	r2, [r7, #12]
 800a798:	72fb      	strb	r3, [r7, #11]
  size_t koff = 0, klen = 0, voff = 0, vlen = 0, off = 0;
 800a79a:	2300      	movs	r3, #0
 800a79c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a79e:	2300      	movs	r3, #0
 800a7a0:	627b      	str	r3, [r7, #36]	; 0x24
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	623b      	str	r3, [r7, #32]
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	61fb      	str	r3, [r7, #28]
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (s->ptr == NULL || s->len == 0) return 0;
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d003      	beq.n	800a7be <mg_split+0x32>
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	685b      	ldr	r3, [r3, #4]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d101      	bne.n	800a7c2 <mg_split+0x36>
 800a7be:	2300      	movs	r3, #0
 800a7c0:	e054      	b.n	800a86c <mg_split+0xe0>
  off = mg_nce(s->ptr, s->len, 0, &koff, &klen, &voff, &vlen, sep);
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	6818      	ldr	r0, [r3, #0]
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	6859      	ldr	r1, [r3, #4]
 800a7ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800a7ce:	7afb      	ldrb	r3, [r7, #11]
 800a7d0:	9303      	str	r3, [sp, #12]
 800a7d2:	f107 031c 	add.w	r3, r7, #28
 800a7d6:	9302      	str	r3, [sp, #8]
 800a7d8:	f107 0320 	add.w	r3, r7, #32
 800a7dc:	9301      	str	r3, [sp, #4]
 800a7de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7e2:	9300      	str	r3, [sp, #0]
 800a7e4:	4613      	mov	r3, r2
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	f7ff ff67 	bl	800a6ba <mg_nce>
 800a7ec:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (k != NULL) *k = mg_str_n(s->ptr + koff, klen);
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d00f      	beq.n	800a814 <mg_split+0x88>
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	681a      	ldr	r2, [r3, #0]
 800a7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7fa:	18d1      	adds	r1, r2, r3
 800a7fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7fe:	693c      	ldr	r4, [r7, #16]
 800a800:	463b      	mov	r3, r7
 800a802:	4618      	mov	r0, r3
 800a804:	f7ff fd67 	bl	800a2d6 <mg_str_n>
 800a808:	4622      	mov	r2, r4
 800a80a:	463b      	mov	r3, r7
 800a80c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a810:	e882 0003 	stmia.w	r2, {r0, r1}
  if (v != NULL) *v = mg_str_n(s->ptr + voff, vlen);
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d00f      	beq.n	800a83a <mg_split+0xae>
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	681a      	ldr	r2, [r3, #0]
 800a81e:	6a3b      	ldr	r3, [r7, #32]
 800a820:	18d1      	adds	r1, r2, r3
 800a822:	69fa      	ldr	r2, [r7, #28]
 800a824:	68fc      	ldr	r4, [r7, #12]
 800a826:	463b      	mov	r3, r7
 800a828:	4618      	mov	r0, r3
 800a82a:	f7ff fd54 	bl	800a2d6 <mg_str_n>
 800a82e:	4622      	mov	r2, r4
 800a830:	463b      	mov	r3, r7
 800a832:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a836:	e882 0003 	stmia.w	r2, {r0, r1}
  *s = mg_str_n(s->ptr + off, s->len - off);
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	681a      	ldr	r2, [r3, #0]
 800a83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a840:	18d1      	adds	r1, r2, r3
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	685a      	ldr	r2, [r3, #4]
 800a846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a848:	1ad2      	subs	r2, r2, r3
 800a84a:	697c      	ldr	r4, [r7, #20]
 800a84c:	463b      	mov	r3, r7
 800a84e:	4618      	mov	r0, r3
 800a850:	f7ff fd41 	bl	800a2d6 <mg_str_n>
 800a854:	4622      	mov	r2, r4
 800a856:	463b      	mov	r3, r7
 800a858:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a85c:	e882 0003 	stmia.w	r2, {r0, r1}
  return off > 0;
 800a860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a862:	2b00      	cmp	r3, #0
 800a864:	bf14      	ite	ne
 800a866:	2301      	movne	r3, #1
 800a868:	2300      	moveq	r3, #0
 800a86a:	b2db      	uxtb	r3, r3
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3734      	adds	r7, #52	; 0x34
 800a870:	46bd      	mov	sp, r7
 800a872:	bd90      	pop	{r4, r7, pc}

0800a874 <mg_commalist>:

bool mg_commalist(struct mg_str *s, struct mg_str *k, struct mg_str *v) {
 800a874:	b580      	push	{r7, lr}
 800a876:	b084      	sub	sp, #16
 800a878:	af00      	add	r7, sp, #0
 800a87a:	60f8      	str	r0, [r7, #12]
 800a87c:	60b9      	str	r1, [r7, #8]
 800a87e:	607a      	str	r2, [r7, #4]
  return mg_split(s, k, v, ',');
 800a880:	232c      	movs	r3, #44	; 0x2c
 800a882:	687a      	ldr	r2, [r7, #4]
 800a884:	68b9      	ldr	r1, [r7, #8]
 800a886:	68f8      	ldr	r0, [r7, #12]
 800a888:	f7ff ff80 	bl	800a78c <mg_split>
 800a88c:	4603      	mov	r3, r0
}
 800a88e:	4618      	mov	r0, r3
 800a890:	3710      	adds	r7, #16
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}
	...

0800a898 <mg_hex>:

char *mg_hex(const void *buf, size_t len, char *to) {
 800a898:	b480      	push	{r7}
 800a89a:	b089      	sub	sp, #36	; 0x24
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	60f8      	str	r0, [r7, #12]
 800a8a0:	60b9      	str	r1, [r7, #8]
 800a8a2:	607a      	str	r2, [r7, #4]
  const unsigned char *p = (const unsigned char *) buf;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	61fb      	str	r3, [r7, #28]
  const char *hex = "0123456789abcdef";
 800a8a8:	4b19      	ldr	r3, [pc, #100]	; (800a910 <mg_hex+0x78>)
 800a8aa:	617b      	str	r3, [r7, #20]
  size_t i = 0;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	61bb      	str	r3, [r7, #24]
  for (; len--; p++) {
 800a8b0:	e01d      	b.n	800a8ee <mg_hex+0x56>
    to[i++] = hex[p[0] >> 4];
 800a8b2:	69fb      	ldr	r3, [r7, #28]
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	091b      	lsrs	r3, r3, #4
 800a8b8:	b2db      	uxtb	r3, r3
 800a8ba:	461a      	mov	r2, r3
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	441a      	add	r2, r3
 800a8c0:	69bb      	ldr	r3, [r7, #24]
 800a8c2:	1c59      	adds	r1, r3, #1
 800a8c4:	61b9      	str	r1, [r7, #24]
 800a8c6:	6879      	ldr	r1, [r7, #4]
 800a8c8:	440b      	add	r3, r1
 800a8ca:	7812      	ldrb	r2, [r2, #0]
 800a8cc:	701a      	strb	r2, [r3, #0]
    to[i++] = hex[p[0] & 0x0f];
 800a8ce:	69fb      	ldr	r3, [r7, #28]
 800a8d0:	781b      	ldrb	r3, [r3, #0]
 800a8d2:	f003 030f 	and.w	r3, r3, #15
 800a8d6:	697a      	ldr	r2, [r7, #20]
 800a8d8:	441a      	add	r2, r3
 800a8da:	69bb      	ldr	r3, [r7, #24]
 800a8dc:	1c59      	adds	r1, r3, #1
 800a8de:	61b9      	str	r1, [r7, #24]
 800a8e0:	6879      	ldr	r1, [r7, #4]
 800a8e2:	440b      	add	r3, r1
 800a8e4:	7812      	ldrb	r2, [r2, #0]
 800a8e6:	701a      	strb	r2, [r3, #0]
  for (; len--; p++) {
 800a8e8:	69fb      	ldr	r3, [r7, #28]
 800a8ea:	3301      	adds	r3, #1
 800a8ec:	61fb      	str	r3, [r7, #28]
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	1e5a      	subs	r2, r3, #1
 800a8f2:	60ba      	str	r2, [r7, #8]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d1dc      	bne.n	800a8b2 <mg_hex+0x1a>
  }
  to[i] = '\0';
 800a8f8:	687a      	ldr	r2, [r7, #4]
 800a8fa:	69bb      	ldr	r3, [r7, #24]
 800a8fc:	4413      	add	r3, r2
 800a8fe:	2200      	movs	r2, #0
 800a900:	701a      	strb	r2, [r3, #0]
  return to;
 800a902:	687b      	ldr	r3, [r7, #4]
}
 800a904:	4618      	mov	r0, r3
 800a906:	3724      	adds	r7, #36	; 0x24
 800a908:	46bd      	mov	sp, r7
 800a90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90e:	4770      	bx	lr
 800a910:	08013c68 	.word	0x08013c68

0800a914 <mg_unhex_nimble>:

static unsigned char mg_unhex_nimble(unsigned char c) {
 800a914:	b480      	push	{r7}
 800a916:	b083      	sub	sp, #12
 800a918:	af00      	add	r7, sp, #0
 800a91a:	4603      	mov	r3, r0
 800a91c:	71fb      	strb	r3, [r7, #7]
  return (c >= '0' && c <= '9')   ? (unsigned char) (c - '0')
         : (c >= 'A' && c <= 'F') ? (unsigned char) (c - '7')
 800a91e:	79fb      	ldrb	r3, [r7, #7]
 800a920:	2b2f      	cmp	r3, #47	; 0x2f
 800a922:	d906      	bls.n	800a932 <mg_unhex_nimble+0x1e>
  return (c >= '0' && c <= '9')   ? (unsigned char) (c - '0')
 800a924:	79fb      	ldrb	r3, [r7, #7]
 800a926:	2b39      	cmp	r3, #57	; 0x39
 800a928:	d803      	bhi.n	800a932 <mg_unhex_nimble+0x1e>
         : (c >= 'A' && c <= 'F') ? (unsigned char) (c - '7')
 800a92a:	79fb      	ldrb	r3, [r7, #7]
 800a92c:	3b30      	subs	r3, #48	; 0x30
 800a92e:	b2db      	uxtb	r3, r3
 800a930:	e00c      	b.n	800a94c <mg_unhex_nimble+0x38>
 800a932:	79fb      	ldrb	r3, [r7, #7]
 800a934:	2b40      	cmp	r3, #64	; 0x40
 800a936:	d906      	bls.n	800a946 <mg_unhex_nimble+0x32>
 800a938:	79fb      	ldrb	r3, [r7, #7]
 800a93a:	2b46      	cmp	r3, #70	; 0x46
 800a93c:	d803      	bhi.n	800a946 <mg_unhex_nimble+0x32>
 800a93e:	79fb      	ldrb	r3, [r7, #7]
 800a940:	3b37      	subs	r3, #55	; 0x37
 800a942:	b2db      	uxtb	r3, r3
 800a944:	e002      	b.n	800a94c <mg_unhex_nimble+0x38>
 800a946:	79fb      	ldrb	r3, [r7, #7]
 800a948:	3b57      	subs	r3, #87	; 0x57
 800a94a:	b2db      	uxtb	r3, r3
                                  : (unsigned char) (c - 'W');
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	370c      	adds	r7, #12
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr

0800a958 <mg_unhexn>:

unsigned long mg_unhexn(const char *s, size_t len) {
 800a958:	b580      	push	{r7, lr}
 800a95a:	b084      	sub	sp, #16
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	6039      	str	r1, [r7, #0]
  unsigned long i = 0, v = 0;
 800a962:	2300      	movs	r3, #0
 800a964:	60fb      	str	r3, [r7, #12]
 800a966:	2300      	movs	r3, #0
 800a968:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < len; i++) v <<= 4, v |= mg_unhex_nimble(((uint8_t *) s)[i]);
 800a96a:	2300      	movs	r3, #0
 800a96c:	60fb      	str	r3, [r7, #12]
 800a96e:	e011      	b.n	800a994 <mg_unhexn+0x3c>
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	011b      	lsls	r3, r3, #4
 800a974:	60bb      	str	r3, [r7, #8]
 800a976:	687a      	ldr	r2, [r7, #4]
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	4413      	add	r3, r2
 800a97c:	781b      	ldrb	r3, [r3, #0]
 800a97e:	4618      	mov	r0, r3
 800a980:	f7ff ffc8 	bl	800a914 <mg_unhex_nimble>
 800a984:	4603      	mov	r3, r0
 800a986:	461a      	mov	r2, r3
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	4313      	orrs	r3, r2
 800a98c:	60bb      	str	r3, [r7, #8]
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	3301      	adds	r3, #1
 800a992:	60fb      	str	r3, [r7, #12]
 800a994:	68fa      	ldr	r2, [r7, #12]
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	429a      	cmp	r2, r3
 800a99a:	d3e9      	bcc.n	800a970 <mg_unhexn+0x18>
  return v;
 800a99c:	68bb      	ldr	r3, [r7, #8]
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3710      	adds	r7, #16
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}

0800a9a6 <mg_unhex>:

void mg_unhex(const char *buf, size_t len, unsigned char *to) {
 800a9a6:	b580      	push	{r7, lr}
 800a9a8:	b086      	sub	sp, #24
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	60f8      	str	r0, [r7, #12]
 800a9ae:	60b9      	str	r1, [r7, #8]
 800a9b0:	607a      	str	r2, [r7, #4]
  size_t i;
  for (i = 0; i < len; i += 2) {
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	617b      	str	r3, [r7, #20]
 800a9b6:	e010      	b.n	800a9da <mg_unhex+0x34>
    to[i >> 1] = (unsigned char) mg_unhexn(&buf[i], 2);
 800a9b8:	68fa      	ldr	r2, [r7, #12]
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	4413      	add	r3, r2
 800a9be:	2102      	movs	r1, #2
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f7ff ffc9 	bl	800a958 <mg_unhexn>
 800a9c6:	4601      	mov	r1, r0
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	085b      	lsrs	r3, r3, #1
 800a9cc:	687a      	ldr	r2, [r7, #4]
 800a9ce:	4413      	add	r3, r2
 800a9d0:	b2ca      	uxtb	r2, r1
 800a9d2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < len; i += 2) {
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	3302      	adds	r3, #2
 800a9d8:	617b      	str	r3, [r7, #20]
 800a9da:	697a      	ldr	r2, [r7, #20]
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	d3ea      	bcc.n	800a9b8 <mg_unhex+0x12>
  }
}
 800a9e2:	bf00      	nop
 800a9e4:	bf00      	nop
 800a9e6:	3718      	adds	r7, #24
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}
 800a9ec:	0000      	movs	r0, r0
	...

0800a9f0 <mg_to64>:
    i++;
  }
  return result;
}

int64_t mg_to64(struct mg_str str) {
 800a9f0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800a9f4:	b091      	sub	sp, #68	; 0x44
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	f107 0318 	add.w	r3, r7, #24
 800a9fc:	e883 0003 	stmia.w	r3, {r0, r1}
  int64_t result = 0, neg = 1, max = 922337203685477570 /* INT64_MAX/10-10 */;
 800aa00:	f04f 0200 	mov.w	r2, #0
 800aa04:	f04f 0300 	mov.w	r3, #0
 800aa08:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 800aa0c:	f04f 0201 	mov.w	r2, #1
 800aa10:	f04f 0300 	mov.w	r3, #0
 800aa14:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800aa18:	a34b      	add	r3, pc, #300	; (adr r3, 800ab48 <mg_to64+0x158>)
 800aa1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1e:	e9c7 2308 	strd	r2, r3, [r7, #32]
  size_t i = 0;
 800aa22:	2300      	movs	r3, #0
 800aa24:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (i < str.len && (str.ptr[i] == ' ' || str.ptr[i] == '\t')) i++;
 800aa26:	e002      	b.n	800aa2e <mg_to64+0x3e>
 800aa28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa2a:	3301      	adds	r3, #1
 800aa2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa2e:	69fb      	ldr	r3, [r7, #28]
 800aa30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa32:	429a      	cmp	r2, r3
 800aa34:	d20b      	bcs.n	800aa4e <mg_to64+0x5e>
 800aa36:	69ba      	ldr	r2, [r7, #24]
 800aa38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa3a:	4413      	add	r3, r2
 800aa3c:	781b      	ldrb	r3, [r3, #0]
 800aa3e:	2b20      	cmp	r3, #32
 800aa40:	d0f2      	beq.n	800aa28 <mg_to64+0x38>
 800aa42:	69ba      	ldr	r2, [r7, #24]
 800aa44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa46:	4413      	add	r3, r2
 800aa48:	781b      	ldrb	r3, [r3, #0]
 800aa4a:	2b09      	cmp	r3, #9
 800aa4c:	d0ec      	beq.n	800aa28 <mg_to64+0x38>
  if (i < str.len && str.ptr[i] == '-') neg = -1, i++;
 800aa4e:	69fb      	ldr	r3, [r7, #28]
 800aa50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa52:	429a      	cmp	r2, r3
 800aa54:	d250      	bcs.n	800aaf8 <mg_to64+0x108>
 800aa56:	69ba      	ldr	r2, [r7, #24]
 800aa58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa5a:	4413      	add	r3, r2
 800aa5c:	781b      	ldrb	r3, [r3, #0]
 800aa5e:	2b2d      	cmp	r3, #45	; 0x2d
 800aa60:	d14a      	bne.n	800aaf8 <mg_to64+0x108>
 800aa62:	f04f 32ff 	mov.w	r2, #4294967295
 800aa66:	f04f 33ff 	mov.w	r3, #4294967295
 800aa6a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800aa6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa70:	3301      	adds	r3, #1
 800aa72:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (i < str.len && str.ptr[i] >= '0' && str.ptr[i] <= '9') {
 800aa74:	e040      	b.n	800aaf8 <mg_to64+0x108>
    if (result > max) return 0;
 800aa76:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800aa7a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800aa7e:	4290      	cmp	r0, r2
 800aa80:	eb71 0303 	sbcs.w	r3, r1, r3
 800aa84:	da04      	bge.n	800aa90 <mg_to64+0xa0>
 800aa86:	f04f 0800 	mov.w	r8, #0
 800aa8a:	f04f 0900 	mov.w	r9, #0
 800aa8e:	e052      	b.n	800ab36 <mg_to64+0x146>
    result *= 10;
 800aa90:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 800aa94:	4652      	mov	r2, sl
 800aa96:	465b      	mov	r3, fp
 800aa98:	f04f 0000 	mov.w	r0, #0
 800aa9c:	f04f 0100 	mov.w	r1, #0
 800aaa0:	0099      	lsls	r1, r3, #2
 800aaa2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800aaa6:	0090      	lsls	r0, r2, #2
 800aaa8:	4602      	mov	r2, r0
 800aaaa:	460b      	mov	r3, r1
 800aaac:	eb12 040a 	adds.w	r4, r2, sl
 800aab0:	eb43 050b 	adc.w	r5, r3, fp
 800aab4:	1923      	adds	r3, r4, r4
 800aab6:	60bb      	str	r3, [r7, #8]
 800aab8:	eb45 0305 	adc.w	r3, r5, r5
 800aabc:	60fb      	str	r3, [r7, #12]
 800aabe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800aac2:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
    result += (str.ptr[i] - '0');
 800aac6:	69ba      	ldr	r2, [r7, #24]
 800aac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaca:	4413      	add	r3, r2
 800aacc:	781b      	ldrb	r3, [r3, #0]
 800aace:	3b30      	subs	r3, #48	; 0x30
 800aad0:	17da      	asrs	r2, r3, #31
 800aad2:	613b      	str	r3, [r7, #16]
 800aad4:	617a      	str	r2, [r7, #20]
 800aad6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800aada:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800aade:	4651      	mov	r1, sl
 800aae0:	1851      	adds	r1, r2, r1
 800aae2:	6039      	str	r1, [r7, #0]
 800aae4:	4659      	mov	r1, fp
 800aae6:	414b      	adcs	r3, r1
 800aae8:	607b      	str	r3, [r7, #4]
 800aaea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aaee:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    i++;
 800aaf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf4:	3301      	adds	r3, #1
 800aaf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (i < str.len && str.ptr[i] >= '0' && str.ptr[i] <= '9') {
 800aaf8:	69fb      	ldr	r3, [r7, #28]
 800aafa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aafc:	429a      	cmp	r2, r3
 800aafe:	d20b      	bcs.n	800ab18 <mg_to64+0x128>
 800ab00:	69ba      	ldr	r2, [r7, #24]
 800ab02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab04:	4413      	add	r3, r2
 800ab06:	781b      	ldrb	r3, [r3, #0]
 800ab08:	2b2f      	cmp	r3, #47	; 0x2f
 800ab0a:	d905      	bls.n	800ab18 <mg_to64+0x128>
 800ab0c:	69ba      	ldr	r2, [r7, #24]
 800ab0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab10:	4413      	add	r3, r2
 800ab12:	781b      	ldrb	r3, [r3, #0]
 800ab14:	2b39      	cmp	r3, #57	; 0x39
 800ab16:	d9ae      	bls.n	800aa76 <mg_to64+0x86>
  }
  return result * neg;
 800ab18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab1c:	fb03 f202 	mul.w	r2, r3, r2
 800ab20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ab24:	fb01 f303 	mul.w	r3, r1, r3
 800ab28:	4413      	add	r3, r2
 800ab2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ab2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab2e:	fba1 8902 	umull	r8, r9, r1, r2
 800ab32:	444b      	add	r3, r9
 800ab34:	4699      	mov	r9, r3
}
 800ab36:	4642      	mov	r2, r8
 800ab38:	464b      	mov	r3, r9
 800ab3a:	4610      	mov	r0, r2
 800ab3c:	4619      	mov	r1, r3
 800ab3e:	3744      	adds	r7, #68	; 0x44
 800ab40:	46bd      	mov	sp, r7
 800ab42:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800ab46:	4770      	bx	lr
 800ab48:	ccccccc2 	.word	0xccccccc2
 800ab4c:	0ccccccc 	.word	0x0ccccccc

0800ab50 <mg_remove_double_dots>:

char *mg_remove_double_dots(char *s) {
 800ab50:	b480      	push	{r7}
 800ab52:	b085      	sub	sp, #20
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
  char *saved = s, *p = s;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	60bb      	str	r3, [r7, #8]
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	60fb      	str	r3, [r7, #12]
  while (*s != '\0') {
 800ab60:	e038      	b.n	800abd4 <mg_remove_double_dots+0x84>
    *p++ = *s++;
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	1c53      	adds	r3, r2, #1
 800ab66:	607b      	str	r3, [r7, #4]
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	1c59      	adds	r1, r3, #1
 800ab6c:	60f9      	str	r1, [r7, #12]
 800ab6e:	7812      	ldrb	r2, [r2, #0]
 800ab70:	701a      	strb	r2, [r3, #0]
    if (s[-1] == '/' || s[-1] == '\\') {
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	3b01      	subs	r3, #1
 800ab76:	781b      	ldrb	r3, [r3, #0]
 800ab78:	2b2f      	cmp	r3, #47	; 0x2f
 800ab7a:	d027      	beq.n	800abcc <mg_remove_double_dots+0x7c>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	3b01      	subs	r3, #1
 800ab80:	781b      	ldrb	r3, [r3, #0]
 800ab82:	2b5c      	cmp	r3, #92	; 0x5c
 800ab84:	d126      	bne.n	800abd4 <mg_remove_double_dots+0x84>
      while (s[0] != '\0') {
 800ab86:	e021      	b.n	800abcc <mg_remove_double_dots+0x7c>
        if (s[0] == '/' || s[0] == '\\') {
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	2b2f      	cmp	r3, #47	; 0x2f
 800ab8e:	d003      	beq.n	800ab98 <mg_remove_double_dots+0x48>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	781b      	ldrb	r3, [r3, #0]
 800ab94:	2b5c      	cmp	r3, #92	; 0x5c
 800ab96:	d103      	bne.n	800aba0 <mg_remove_double_dots+0x50>
          s++;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	3301      	adds	r3, #1
 800ab9c:	607b      	str	r3, [r7, #4]
 800ab9e:	e015      	b.n	800abcc <mg_remove_double_dots+0x7c>
        } else if (s[0] == '.' && s[1] == '.' &&
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	781b      	ldrb	r3, [r3, #0]
 800aba4:	2b2e      	cmp	r3, #46	; 0x2e
 800aba6:	d115      	bne.n	800abd4 <mg_remove_double_dots+0x84>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	3301      	adds	r3, #1
 800abac:	781b      	ldrb	r3, [r3, #0]
 800abae:	2b2e      	cmp	r3, #46	; 0x2e
 800abb0:	d110      	bne.n	800abd4 <mg_remove_double_dots+0x84>
                   (s[2] == '/' || s[2] == '\\')) {
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	3302      	adds	r3, #2
 800abb6:	781b      	ldrb	r3, [r3, #0]
        } else if (s[0] == '.' && s[1] == '.' &&
 800abb8:	2b2f      	cmp	r3, #47	; 0x2f
 800abba:	d004      	beq.n	800abc6 <mg_remove_double_dots+0x76>
                   (s[2] == '/' || s[2] == '\\')) {
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	3302      	adds	r3, #2
 800abc0:	781b      	ldrb	r3, [r3, #0]
 800abc2:	2b5c      	cmp	r3, #92	; 0x5c
 800abc4:	d106      	bne.n	800abd4 <mg_remove_double_dots+0x84>
          s += 2;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	3302      	adds	r3, #2
 800abca:	607b      	str	r3, [r7, #4]
      while (s[0] != '\0') {
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d1d9      	bne.n	800ab88 <mg_remove_double_dots+0x38>
  while (*s != '\0') {
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	781b      	ldrb	r3, [r3, #0]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d1c2      	bne.n	800ab62 <mg_remove_double_dots+0x12>
          break;
        }
      }
    }
  }
  *p = '\0';
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2200      	movs	r2, #0
 800abe0:	701a      	strb	r2, [r3, #0]
  return saved;
 800abe2:	68bb      	ldr	r3, [r7, #8]
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	3714      	adds	r7, #20
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <mg_timer_init>:


#define MG_TIMER_CALLED 4

void mg_timer_init(struct mg_timer **head, struct mg_timer *t, uint64_t ms,
                   unsigned flags, void (*fn)(void *), void *arg) {
 800abf0:	b480      	push	{r7}
 800abf2:	b085      	sub	sp, #20
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	60f8      	str	r0, [r7, #12]
 800abf8:	60b9      	str	r1, [r7, #8]
 800abfa:	e9c7 2300 	strd	r2, r3, [r7]
  t->id = 0, t->period_ms = ms, t->expire = 0;
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	2200      	movs	r2, #0
 800ac02:	601a      	str	r2, [r3, #0]
 800ac04:	68b9      	ldr	r1, [r7, #8]
 800ac06:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac0a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800ac0e:	68b9      	ldr	r1, [r7, #8]
 800ac10:	f04f 0200 	mov.w	r2, #0
 800ac14:	f04f 0300 	mov.w	r3, #0
 800ac18:	e9c1 2304 	strd	r2, r3, [r1, #16]
  t->flags = flags, t->fn = fn, t->arg = arg, t->next = *head;
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	69ba      	ldr	r2, [r7, #24]
 800ac20:	619a      	str	r2, [r3, #24]
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	69fa      	ldr	r2, [r7, #28]
 800ac26:	61da      	str	r2, [r3, #28]
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	6a3a      	ldr	r2, [r7, #32]
 800ac2c:	621a      	str	r2, [r3, #32]
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681a      	ldr	r2, [r3, #0]
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	625a      	str	r2, [r3, #36]	; 0x24
  *head = t;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	68ba      	ldr	r2, [r7, #8]
 800ac3a:	601a      	str	r2, [r3, #0]
}
 800ac3c:	bf00      	nop
 800ac3e:	3714      	adds	r7, #20
 800ac40:	46bd      	mov	sp, r7
 800ac42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac46:	4770      	bx	lr

0800ac48 <mg_timer_expired>:
  while (*head && *head != t) head = &(*head)->next;
  if (*head) *head = t->next;
}

// t: expiration time, prd: period, now: current time. Return true if expired
bool mg_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {
 800ac48:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ac4c:	b086      	sub	sp, #24
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	6178      	str	r0, [r7, #20]
 800ac52:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (now + prd < *t) *t = 0;                    // Time wrapped? Reset timer
 800ac56:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800ac5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ac5e:	eb10 0a02 	adds.w	sl, r0, r2
 800ac62:	eb41 0b03 	adc.w	fp, r1, r3
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac6c:	4592      	cmp	sl, r2
 800ac6e:	eb7b 0303 	sbcs.w	r3, fp, r3
 800ac72:	d206      	bcs.n	800ac82 <mg_timer_expired+0x3a>
 800ac74:	6979      	ldr	r1, [r7, #20]
 800ac76:	f04f 0200 	mov.w	r2, #0
 800ac7a:	f04f 0300 	mov.w	r3, #0
 800ac7e:	e9c1 2300 	strd	r2, r3, [r1]
  if (*t == 0) *t = now + prd;                   // Firt poll? Set expiration
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac88:	4313      	orrs	r3, r2
 800ac8a:	d10d      	bne.n	800aca8 <mg_timer_expired+0x60>
 800ac8c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800ac90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ac94:	1886      	adds	r6, r0, r2
 800ac96:	603e      	str	r6, [r7, #0]
 800ac98:	eb41 0303 	adc.w	r3, r1, r3
 800ac9c:	607b      	str	r3, [r7, #4]
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	e9d7 1200 	ldrd	r1, r2, [r7]
 800aca4:	e9c3 1200 	strd	r1, r2, [r3]
  if (*t > now) return false;                    // Not expired yet, return
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acae:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800acb2:	4290      	cmp	r0, r2
 800acb4:	eb71 0303 	sbcs.w	r3, r1, r3
 800acb8:	d201      	bcs.n	800acbe <mg_timer_expired+0x76>
 800acba:	2300      	movs	r3, #0
 800acbc:	e022      	b.n	800ad04 <mg_timer_expired+0xbc>
  *t = (now - *t) > prd ? now + prd : *t + prd;  // Next expiration time
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800acc8:	ebb0 0802 	subs.w	r8, r0, r2
 800accc:	eb61 0903 	sbc.w	r9, r1, r3
 800acd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800acd4:	4542      	cmp	r2, r8
 800acd6:	eb73 0309 	sbcs.w	r3, r3, r9
 800acda:	d207      	bcs.n	800acec <mg_timer_expired+0xa4>
 800acdc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800ace0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ace4:	1884      	adds	r4, r0, r2
 800ace6:	eb41 0503 	adc.w	r5, r1, r3
 800acea:	e007      	b.n	800acfc <mg_timer_expired+0xb4>
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	e9d3 0100 	ldrd	r0, r1, [r3]
 800acf2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800acf6:	1884      	adds	r4, r0, r2
 800acf8:	eb41 0503 	adc.w	r5, r1, r3
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	e9c3 4500 	strd	r4, r5, [r3]
  return true;                                   // Expired, return true
 800ad02:	2301      	movs	r3, #1
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	3718      	adds	r7, #24
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ad0e:	4770      	bx	lr

0800ad10 <mg_timer_poll>:

void mg_timer_poll(struct mg_timer **head, uint64_t now_ms) {
 800ad10:	b590      	push	{r4, r7, lr}
 800ad12:	b08b      	sub	sp, #44	; 0x2c
 800ad14:	af02      	add	r7, sp, #8
 800ad16:	60f8      	str	r0, [r7, #12]
 800ad18:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t, *tmp;
  for (t = *head; t != NULL; t = tmp) {
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	61fb      	str	r3, [r7, #28]
 800ad22:	e054      	b.n	800adce <mg_timer_poll+0xbe>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 800ad24:	69fb      	ldr	r3, [r7, #28]
 800ad26:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ad2a:	4313      	orrs	r3, r2
 800ad2c:	d10d      	bne.n	800ad4a <mg_timer_poll+0x3a>
 800ad2e:	69fb      	ldr	r3, [r7, #28]
 800ad30:	699b      	ldr	r3, [r3, #24]
 800ad32:	f003 0302 	and.w	r3, r3, #2
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d007      	beq.n	800ad4a <mg_timer_poll+0x3a>
                !(t->flags & MG_TIMER_CALLED);  // Handle MG_TIMER_NOW only once
 800ad3a:	69fb      	ldr	r3, [r7, #28]
 800ad3c:	699b      	ldr	r3, [r3, #24]
 800ad3e:	f003 0304 	and.w	r3, r3, #4
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d101      	bne.n	800ad4a <mg_timer_poll+0x3a>
 800ad46:	2301      	movs	r3, #1
 800ad48:	e000      	b.n	800ad4c <mg_timer_poll+0x3c>
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	76fb      	strb	r3, [r7, #27]
 800ad4e:	7efb      	ldrb	r3, [r7, #27]
 800ad50:	f003 0301 	and.w	r3, r3, #1
 800ad54:	76fb      	strb	r3, [r7, #27]
    bool expired = mg_timer_expired(&t->expire, t->period_ms, now_ms);
 800ad56:	69fb      	ldr	r3, [r7, #28]
 800ad58:	f103 0410 	add.w	r4, r3, #16
 800ad5c:	69fb      	ldr	r3, [r7, #28]
 800ad5e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800ad62:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad66:	e9cd 2300 	strd	r2, r3, [sp]
 800ad6a:	4602      	mov	r2, r0
 800ad6c:	460b      	mov	r3, r1
 800ad6e:	4620      	mov	r0, r4
 800ad70:	f7ff ff6a 	bl	800ac48 <mg_timer_expired>
 800ad74:	4603      	mov	r3, r0
 800ad76:	76bb      	strb	r3, [r7, #26]
    tmp = t->next;
 800ad78:	69fb      	ldr	r3, [r7, #28]
 800ad7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad7c:	617b      	str	r3, [r7, #20]
    if (!once && !expired) continue;
 800ad7e:	7efb      	ldrb	r3, [r7, #27]
 800ad80:	f083 0301 	eor.w	r3, r3, #1
 800ad84:	b2db      	uxtb	r3, r3
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d005      	beq.n	800ad96 <mg_timer_poll+0x86>
 800ad8a:	7ebb      	ldrb	r3, [r7, #26]
 800ad8c:	f083 0301 	eor.w	r3, r3, #1
 800ad90:	b2db      	uxtb	r3, r3
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d118      	bne.n	800adc8 <mg_timer_poll+0xb8>
    if ((t->flags & MG_TIMER_REPEAT) || !(t->flags & MG_TIMER_CALLED)) {
 800ad96:	69fb      	ldr	r3, [r7, #28]
 800ad98:	699b      	ldr	r3, [r3, #24]
 800ad9a:	f003 0301 	and.w	r3, r3, #1
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d105      	bne.n	800adae <mg_timer_poll+0x9e>
 800ada2:	69fb      	ldr	r3, [r7, #28]
 800ada4:	699b      	ldr	r3, [r3, #24]
 800ada6:	f003 0304 	and.w	r3, r3, #4
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d105      	bne.n	800adba <mg_timer_poll+0xaa>
      t->fn(t->arg);
 800adae:	69fb      	ldr	r3, [r7, #28]
 800adb0:	69db      	ldr	r3, [r3, #28]
 800adb2:	69fa      	ldr	r2, [r7, #28]
 800adb4:	6a12      	ldr	r2, [r2, #32]
 800adb6:	4610      	mov	r0, r2
 800adb8:	4798      	blx	r3
    }
    t->flags |= MG_TIMER_CALLED;
 800adba:	69fb      	ldr	r3, [r7, #28]
 800adbc:	699b      	ldr	r3, [r3, #24]
 800adbe:	f043 0204 	orr.w	r2, r3, #4
 800adc2:	69fb      	ldr	r3, [r7, #28]
 800adc4:	619a      	str	r2, [r3, #24]
 800adc6:	e000      	b.n	800adca <mg_timer_poll+0xba>
    if (!once && !expired) continue;
 800adc8:	bf00      	nop
  for (t = *head; t != NULL; t = tmp) {
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	61fb      	str	r3, [r7, #28]
 800adce:	69fb      	ldr	r3, [r7, #28]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d1a7      	bne.n	800ad24 <mg_timer_poll+0x14>
  }
}
 800add4:	bf00      	nop
 800add6:	bf00      	nop
 800add8:	3724      	adds	r7, #36	; 0x24
 800adda:	46bd      	mov	sp, r7
 800addc:	bd90      	pop	{r4, r7, pc}
	...

0800ade0 <mg_tls_init>:
#line 1 "src/tls_dummy.c"
#endif


#if !MG_ENABLE_MBEDTLS && !MG_ENABLE_OPENSSL && !MG_ENABLE_CUSTOM_TLS
void mg_tls_init(struct mg_connection *c, const struct mg_tls_opts *opts) {
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b082      	sub	sp, #8
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	6039      	str	r1, [r7, #0]
  (void) opts;
  mg_error(c, "TLS is not enabled");
 800adea:	4904      	ldr	r1, [pc, #16]	; (800adfc <mg_tls_init+0x1c>)
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f7f7 fa69 	bl	80022c4 <mg_error>
}
 800adf2:	bf00      	nop
 800adf4:	3708      	adds	r7, #8
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}
 800adfa:	bf00      	nop
 800adfc:	08014dc8 	.word	0x08014dc8

0800ae00 <mg_tls_handshake>:
void mg_tls_handshake(struct mg_connection *c) {
 800ae00:	b480      	push	{r7}
 800ae02:	b083      	sub	sp, #12
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  (void) c;
}
 800ae08:	bf00      	nop
 800ae0a:	370c      	adds	r7, #12
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr

0800ae14 <mg_tls_free>:
void mg_tls_free(struct mg_connection *c) {
 800ae14:	b480      	push	{r7}
 800ae16:	b083      	sub	sp, #12
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
  (void) c;
}
 800ae1c:	bf00      	nop
 800ae1e:	370c      	adds	r7, #12
 800ae20:	46bd      	mov	sp, r7
 800ae22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae26:	4770      	bx	lr

0800ae28 <mg_tls_recv>:
long mg_tls_recv(struct mg_connection *c, void *buf, size_t len) {
 800ae28:	b480      	push	{r7}
 800ae2a:	b085      	sub	sp, #20
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	60f8      	str	r0, [r7, #12]
 800ae30:	60b9      	str	r1, [r7, #8]
 800ae32:	607a      	str	r2, [r7, #4]
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d005      	beq.n	800ae46 <mg_tls_recv+0x1e>
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d002      	beq.n	800ae46 <mg_tls_recv+0x1e>
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d101      	bne.n	800ae4a <mg_tls_recv+0x22>
 800ae46:	2300      	movs	r3, #0
 800ae48:	e001      	b.n	800ae4e <mg_tls_recv+0x26>
 800ae4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3714      	adds	r7, #20
 800ae52:	46bd      	mov	sp, r7
 800ae54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae58:	4770      	bx	lr

0800ae5a <mg_tls_send>:
long mg_tls_send(struct mg_connection *c, const void *buf, size_t len) {
 800ae5a:	b480      	push	{r7}
 800ae5c:	b085      	sub	sp, #20
 800ae5e:	af00      	add	r7, sp, #0
 800ae60:	60f8      	str	r0, [r7, #12]
 800ae62:	60b9      	str	r1, [r7, #8]
 800ae64:	607a      	str	r2, [r7, #4]
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d005      	beq.n	800ae78 <mg_tls_send+0x1e>
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d002      	beq.n	800ae78 <mg_tls_send+0x1e>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d101      	bne.n	800ae7c <mg_tls_send+0x22>
 800ae78:	2300      	movs	r3, #0
 800ae7a:	e001      	b.n	800ae80 <mg_tls_send+0x26>
 800ae7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3714      	adds	r7, #20
 800ae84:	46bd      	mov	sp, r7
 800ae86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8a:	4770      	bx	lr

0800ae8c <mg_url_is_ssl>:

struct url {
  size_t key, user, pass, host, port, uri, end;
};

int mg_url_is_ssl(const char *url) {
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b082      	sub	sp, #8
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 800ae94:	2204      	movs	r2, #4
 800ae96:	4917      	ldr	r1, [pc, #92]	; (800aef4 <mg_url_is_ssl+0x68>)
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f007 fe64 	bl	8012b66 <strncmp>
 800ae9e:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d01f      	beq.n	800aee4 <mg_url_is_ssl+0x58>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 800aea4:	2206      	movs	r2, #6
 800aea6:	4914      	ldr	r1, [pc, #80]	; (800aef8 <mg_url_is_ssl+0x6c>)
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f007 fe5c 	bl	8012b66 <strncmp>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d017      	beq.n	800aee4 <mg_url_is_ssl+0x58>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 800aeb4:	2206      	movs	r2, #6
 800aeb6:	4911      	ldr	r1, [pc, #68]	; (800aefc <mg_url_is_ssl+0x70>)
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f007 fe54 	bl	8012b66 <strncmp>
 800aebe:	4603      	mov	r3, r0
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d00f      	beq.n	800aee4 <mg_url_is_ssl+0x58>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 800aec4:	2204      	movs	r2, #4
 800aec6:	490e      	ldr	r1, [pc, #56]	; (800af00 <mg_url_is_ssl+0x74>)
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f007 fe4c 	bl	8012b66 <strncmp>
 800aece:	4603      	mov	r3, r0
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d007      	beq.n	800aee4 <mg_url_is_ssl+0x58>
         strncmp(url, "tls:", 4) == 0;
 800aed4:	2204      	movs	r2, #4
 800aed6:	490b      	ldr	r1, [pc, #44]	; (800af04 <mg_url_is_ssl+0x78>)
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f007 fe44 	bl	8012b66 <strncmp>
 800aede:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d101      	bne.n	800aee8 <mg_url_is_ssl+0x5c>
 800aee4:	2301      	movs	r3, #1
 800aee6:	e000      	b.n	800aeea <mg_url_is_ssl+0x5e>
 800aee8:	2300      	movs	r3, #0
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	3708      	adds	r7, #8
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}
 800aef2:	bf00      	nop
 800aef4:	08014ddc 	.word	0x08014ddc
 800aef8:	08014de4 	.word	0x08014de4
 800aefc:	08014dec 	.word	0x08014dec
 800af00:	08014df4 	.word	0x08014df4
 800af04:	08014dfc 	.word	0x08014dfc

0800af08 <urlparse>:

static struct url urlparse(const char *url) {
 800af08:	b5b0      	push	{r4, r5, r7, lr}
 800af0a:	b08a      	sub	sp, #40	; 0x28
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	6039      	str	r1, [r7, #0]
  size_t i;
  struct url u;
  memset(&u, 0, sizeof(u));
 800af12:	f107 0308 	add.w	r3, r7, #8
 800af16:	221c      	movs	r2, #28
 800af18:	2100      	movs	r1, #0
 800af1a:	4618      	mov	r0, r3
 800af1c:	f007 fc34 	bl	8012788 <memset>
  for (i = 0; url[i] != '\0'; i++) {
 800af20:	2300      	movs	r3, #0
 800af22:	627b      	str	r3, [r7, #36]	; 0x24
 800af24:	e05b      	b.n	800afde <urlparse+0xd6>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 800af26:	683a      	ldr	r2, [r7, #0]
 800af28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af2a:	4413      	add	r3, r2
 800af2c:	781b      	ldrb	r3, [r3, #0]
 800af2e:	2b2f      	cmp	r3, #47	; 0x2f
 800af30:	d112      	bne.n	800af58 <urlparse+0x50>
 800af32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af34:	2b00      	cmp	r3, #0
 800af36:	d00f      	beq.n	800af58 <urlparse+0x50>
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d10c      	bne.n	800af58 <urlparse+0x50>
 800af3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af40:	3b01      	subs	r3, #1
 800af42:	683a      	ldr	r2, [r7, #0]
 800af44:	4413      	add	r3, r2
 800af46:	781b      	ldrb	r3, [r3, #0]
 800af48:	2b2f      	cmp	r3, #47	; 0x2f
 800af4a:	d105      	bne.n	800af58 <urlparse+0x50>
      u.host = i + 1;
 800af4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af4e:	3301      	adds	r3, #1
 800af50:	617b      	str	r3, [r7, #20]
      u.port = 0;
 800af52:	2300      	movs	r3, #0
 800af54:	61bb      	str	r3, [r7, #24]
 800af56:	e03f      	b.n	800afd8 <urlparse+0xd0>
    } else if (url[i] == ']') {
 800af58:	683a      	ldr	r2, [r7, #0]
 800af5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af5c:	4413      	add	r3, r2
 800af5e:	781b      	ldrb	r3, [r3, #0]
 800af60:	2b5d      	cmp	r3, #93	; 0x5d
 800af62:	d102      	bne.n	800af6a <urlparse+0x62>
      u.port = 0;  // IPv6 URLs, like http://[::1]/bar
 800af64:	2300      	movs	r3, #0
 800af66:	61bb      	str	r3, [r7, #24]
 800af68:	e036      	b.n	800afd8 <urlparse+0xd0>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 800af6a:	683a      	ldr	r2, [r7, #0]
 800af6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af6e:	4413      	add	r3, r2
 800af70:	781b      	ldrb	r3, [r3, #0]
 800af72:	2b3a      	cmp	r3, #58	; 0x3a
 800af74:	d109      	bne.n	800af8a <urlparse+0x82>
 800af76:	69bb      	ldr	r3, [r7, #24]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d106      	bne.n	800af8a <urlparse+0x82>
 800af7c:	69fb      	ldr	r3, [r7, #28]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d103      	bne.n	800af8a <urlparse+0x82>
      u.port = i + 1;
 800af82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af84:	3301      	adds	r3, #1
 800af86:	61bb      	str	r3, [r7, #24]
 800af88:	e026      	b.n	800afd8 <urlparse+0xd0>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 800af8a:	683a      	ldr	r2, [r7, #0]
 800af8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af8e:	4413      	add	r3, r2
 800af90:	781b      	ldrb	r3, [r3, #0]
 800af92:	2b40      	cmp	r3, #64	; 0x40
 800af94:	d112      	bne.n	800afbc <urlparse+0xb4>
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d10f      	bne.n	800afbc <urlparse+0xb4>
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d10c      	bne.n	800afbc <urlparse+0xb4>
 800afa2:	69fb      	ldr	r3, [r7, #28]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d109      	bne.n	800afbc <urlparse+0xb4>
      u.user = u.host;
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	60fb      	str	r3, [r7, #12]
      u.pass = u.port;
 800afac:	69bb      	ldr	r3, [r7, #24]
 800afae:	613b      	str	r3, [r7, #16]
      u.host = i + 1;
 800afb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afb2:	3301      	adds	r3, #1
 800afb4:	617b      	str	r3, [r7, #20]
      u.port = 0;
 800afb6:	2300      	movs	r3, #0
 800afb8:	61bb      	str	r3, [r7, #24]
 800afba:	e00d      	b.n	800afd8 <urlparse+0xd0>
    } else if (url[i] == '/' && u.host && u.uri == 0) {
 800afbc:	683a      	ldr	r2, [r7, #0]
 800afbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc0:	4413      	add	r3, r2
 800afc2:	781b      	ldrb	r3, [r3, #0]
 800afc4:	2b2f      	cmp	r3, #47	; 0x2f
 800afc6:	d107      	bne.n	800afd8 <urlparse+0xd0>
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d004      	beq.n	800afd8 <urlparse+0xd0>
 800afce:	69fb      	ldr	r3, [r7, #28]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d101      	bne.n	800afd8 <urlparse+0xd0>
      u.uri = i;
 800afd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd6:	61fb      	str	r3, [r7, #28]
  for (i = 0; url[i] != '\0'; i++) {
 800afd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afda:	3301      	adds	r3, #1
 800afdc:	627b      	str	r3, [r7, #36]	; 0x24
 800afde:	683a      	ldr	r2, [r7, #0]
 800afe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe2:	4413      	add	r3, r2
 800afe4:	781b      	ldrb	r3, [r3, #0]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d19d      	bne.n	800af26 <urlparse+0x1e>
    }
  }
  u.end = i;
 800afea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afec:	623b      	str	r3, [r7, #32]
#if 0
  printf("[%s] %d %d %d %d %d\n", url, u.user, u.pass, u.host, u.port, u.uri);
#endif
  return u;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	461d      	mov	r5, r3
 800aff2:	f107 0408 	add.w	r4, r7, #8
 800aff6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aff8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800affa:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800affe:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	3728      	adds	r7, #40	; 0x28
 800b006:	46bd      	mov	sp, r7
 800b008:	bdb0      	pop	{r4, r5, r7, pc}

0800b00a <mg_url_host>:

struct mg_str mg_url_host(const char *url) {
 800b00a:	b580      	push	{r7, lr}
 800b00c:	b08c      	sub	sp, #48	; 0x30
 800b00e:	af00      	add	r7, sp, #0
 800b010:	6078      	str	r0, [r7, #4]
 800b012:	6039      	str	r1, [r7, #0]
  struct url u = urlparse(url);
 800b014:	f107 0310 	add.w	r3, r7, #16
 800b018:	6839      	ldr	r1, [r7, #0]
 800b01a:	4618      	mov	r0, r3
 800b01c:	f7ff ff74 	bl	800af08 <urlparse>
  size_t n = u.port  ? u.port - u.host - 1
 800b020:	6a3b      	ldr	r3, [r7, #32]
             : u.uri ? u.uri - u.host
 800b022:	2b00      	cmp	r3, #0
 800b024:	d004      	beq.n	800b030 <mg_url_host+0x26>
  size_t n = u.port  ? u.port - u.host - 1
 800b026:	6a3a      	ldr	r2, [r7, #32]
 800b028:	69fb      	ldr	r3, [r7, #28]
 800b02a:	1ad3      	subs	r3, r2, r3
             : u.uri ? u.uri - u.host
 800b02c:	3b01      	subs	r3, #1
 800b02e:	e009      	b.n	800b044 <mg_url_host+0x3a>
 800b030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                     : u.end - u.host;
 800b032:	2b00      	cmp	r3, #0
 800b034:	d003      	beq.n	800b03e <mg_url_host+0x34>
             : u.uri ? u.uri - u.host
 800b036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b038:	69fb      	ldr	r3, [r7, #28]
                     : u.end - u.host;
 800b03a:	1ad3      	subs	r3, r2, r3
 800b03c:	e002      	b.n	800b044 <mg_url_host+0x3a>
 800b03e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b040:	69fb      	ldr	r3, [r7, #28]
 800b042:	1ad3      	subs	r3, r2, r3
  size_t n = u.port  ? u.port - u.host - 1
 800b044:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct mg_str s = mg_str_n(url + u.host, n);
 800b046:	69fb      	ldr	r3, [r7, #28]
 800b048:	683a      	ldr	r2, [r7, #0]
 800b04a:	18d1      	adds	r1, r2, r3
 800b04c:	f107 0308 	add.w	r3, r7, #8
 800b050:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b052:	4618      	mov	r0, r3
 800b054:	f7ff f93f 	bl	800a2d6 <mg_str_n>
  return s;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	461a      	mov	r2, r3
 800b05c:	f107 0308 	add.w	r3, r7, #8
 800b060:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b064:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	3730      	adds	r7, #48	; 0x30
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}

0800b070 <mg_url_port>:
const char *mg_url_uri(const char *url) {
  struct url u = urlparse(url);
  return u.uri ? url + u.uri : "/";
}

unsigned short mg_url_port(const char *url) {
 800b070:	b580      	push	{r7, lr}
 800b072:	b08a      	sub	sp, #40	; 0x28
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
  struct url u = urlparse(url);
 800b078:	f107 0308 	add.w	r3, r7, #8
 800b07c:	6879      	ldr	r1, [r7, #4]
 800b07e:	4618      	mov	r0, r3
 800b080:	f7ff ff42 	bl	800af08 <urlparse>
  unsigned short port = 0;
 800b084:	2300      	movs	r3, #0
 800b086:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 800b088:	2205      	movs	r2, #5
 800b08a:	4925      	ldr	r1, [pc, #148]	; (800b120 <mg_url_port+0xb0>)
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f007 fd6a 	bl	8012b66 <strncmp>
 800b092:	4603      	mov	r3, r0
 800b094:	2b00      	cmp	r3, #0
 800b096:	d007      	beq.n	800b0a8 <mg_url_port+0x38>
 800b098:	2203      	movs	r2, #3
 800b09a:	4922      	ldr	r1, [pc, #136]	; (800b124 <mg_url_port+0xb4>)
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f007 fd62 	bl	8012b66 <strncmp>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d101      	bne.n	800b0ac <mg_url_port+0x3c>
 800b0a8:	2350      	movs	r3, #80	; 0x50
 800b0aa:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0)
 800b0ac:	2204      	movs	r2, #4
 800b0ae:	491e      	ldr	r1, [pc, #120]	; (800b128 <mg_url_port+0xb8>)
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f007 fd58 	bl	8012b66 <strncmp>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d007      	beq.n	800b0cc <mg_url_port+0x5c>
 800b0bc:	2206      	movs	r2, #6
 800b0be:	491b      	ldr	r1, [pc, #108]	; (800b12c <mg_url_port+0xbc>)
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f007 fd50 	bl	8012b66 <strncmp>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d102      	bne.n	800b0d2 <mg_url_port+0x62>
    port = 443;
 800b0cc:	f240 13bb 	movw	r3, #443	; 0x1bb
 800b0d0:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (strncmp(url, "mqtt:", 5) == 0) port = 1883;
 800b0d2:	2205      	movs	r2, #5
 800b0d4:	4916      	ldr	r1, [pc, #88]	; (800b130 <mg_url_port+0xc0>)
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f007 fd45 	bl	8012b66 <strncmp>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d102      	bne.n	800b0e8 <mg_url_port+0x78>
 800b0e2:	f240 735b 	movw	r3, #1883	; 0x75b
 800b0e6:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (strncmp(url, "mqtts:", 6) == 0) port = 8883;
 800b0e8:	2206      	movs	r2, #6
 800b0ea:	4912      	ldr	r1, [pc, #72]	; (800b134 <mg_url_port+0xc4>)
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f007 fd3a 	bl	8012b66 <strncmp>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d102      	bne.n	800b0fe <mg_url_port+0x8e>
 800b0f8:	f242 23b3 	movw	r3, #8883	; 0x22b3
 800b0fc:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (u.port) port = (unsigned short) atoi(url + u.port);
 800b0fe:	69bb      	ldr	r3, [r7, #24]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d007      	beq.n	800b114 <mg_url_port+0xa4>
 800b104:	69bb      	ldr	r3, [r7, #24]
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	4413      	add	r3, r2
 800b10a:	4618      	mov	r0, r3
 800b10c:	f007 fabd 	bl	801268a <atoi>
 800b110:	4603      	mov	r3, r0
 800b112:	84fb      	strh	r3, [r7, #38]	; 0x26
  return port;
 800b114:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 800b116:	4618      	mov	r0, r3
 800b118:	3728      	adds	r7, #40	; 0x28
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
 800b11e:	bf00      	nop
 800b120:	08014e04 	.word	0x08014e04
 800b124:	08014e0c 	.word	0x08014e0c
 800b128:	08014ddc 	.word	0x08014ddc
 800b12c:	08014de4 	.word	0x08014de4
 800b130:	08014e10 	.word	0x08014e10
 800b134:	08014dec 	.word	0x08014dec

0800b138 <mg_random>:
#endif


#if MG_ENABLE_CUSTOM_RANDOM
#else
void mg_random(void *buf, size_t len) {
 800b138:	b580      	push	{r7, lr}
 800b13a:	b084      	sub	sp, #16
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
 800b140:	6039      	str	r1, [r7, #0]
  bool done = false;
 800b142:	2300      	movs	r3, #0
 800b144:	72fb      	strb	r3, [r7, #11]
  unsigned char *p = (unsigned char *) buf;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	60fb      	str	r3, [r7, #12]
    if (fread(buf, 1, len, fp) == len) done = true;
    fclose(fp);
  }
#endif
  // If everything above did not work, fallback to a pseudo random generator
  while (!done && len--) *p++ = (unsigned char) (rand() & 255);
 800b14a:	e007      	b.n	800b15c <mg_random+0x24>
 800b14c:	f007 fc48 	bl	80129e0 <rand>
 800b150:	4601      	mov	r1, r0
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	1c5a      	adds	r2, r3, #1
 800b156:	60fa      	str	r2, [r7, #12]
 800b158:	b2ca      	uxtb	r2, r1
 800b15a:	701a      	strb	r2, [r3, #0]
 800b15c:	7afb      	ldrb	r3, [r7, #11]
 800b15e:	f083 0301 	eor.w	r3, r3, #1
 800b162:	b2db      	uxtb	r3, r3
 800b164:	2b00      	cmp	r3, #0
 800b166:	d004      	beq.n	800b172 <mg_random+0x3a>
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	1e5a      	subs	r2, r3, #1
 800b16c:	603a      	str	r2, [r7, #0]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d1ec      	bne.n	800b14c <mg_random+0x14>
}
 800b172:	bf00      	nop
 800b174:	3710      	adds	r7, #16
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}

0800b17a <mg_ntohl>:
                          : (char) ('0' + c - 52);     // numeric
  }
  return buf;
}

uint32_t mg_ntohl(uint32_t net) {
 800b17a:	b480      	push	{r7}
 800b17c:	b085      	sub	sp, #20
 800b17e:	af00      	add	r7, sp, #0
 800b180:	6078      	str	r0, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 800b182:	2300      	movs	r3, #0
 800b184:	60fb      	str	r3, [r7, #12]
 800b186:	687b      	ldr	r3, [r7, #4]
  memcpy(&data, &net, sizeof(data));
 800b188:	60fb      	str	r3, [r7, #12]
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 800b18a:	7bfb      	ldrb	r3, [r7, #15]
 800b18c:	461a      	mov	r2, r3
 800b18e:	7bbb      	ldrb	r3, [r7, #14]
 800b190:	021b      	lsls	r3, r3, #8
 800b192:	431a      	orrs	r2, r3
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 800b194:	7b7b      	ldrb	r3, [r7, #13]
 800b196:	041b      	lsls	r3, r3, #16
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 800b198:	431a      	orrs	r2, r3
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 800b19a:	7b3b      	ldrb	r3, [r7, #12]
 800b19c:	061b      	lsls	r3, r3, #24
 800b19e:	4313      	orrs	r3, r2
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3714      	adds	r7, #20
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr

0800b1ac <mg_ntohs>:

uint16_t mg_ntohs(uint16_t net) {
 800b1ac:	b480      	push	{r7}
 800b1ae:	b085      	sub	sp, #20
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	80fb      	strh	r3, [r7, #6]
  uint8_t data[2] = {0, 0};
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	81bb      	strh	r3, [r7, #12]
 800b1ba:	88fb      	ldrh	r3, [r7, #6]
  memcpy(&data, &net, sizeof(data));
 800b1bc:	81bb      	strh	r3, [r7, #12]
  return (uint16_t) ((uint16_t) data[1] | (((uint16_t) data[0]) << 8));
 800b1be:	7b7b      	ldrb	r3, [r7, #13]
 800b1c0:	b21a      	sxth	r2, r3
 800b1c2:	7b3b      	ldrb	r3, [r7, #12]
 800b1c4:	021b      	lsls	r3, r3, #8
 800b1c6:	b21b      	sxth	r3, r3
 800b1c8:	4313      	orrs	r3, r2
 800b1ca:	b21b      	sxth	r3, r3
 800b1cc:	b29b      	uxth	r3, r3
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	3714      	adds	r7, #20
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d8:	4770      	bx	lr
	...

0800b1dc <mg_ws_vprintf>:
  size_t header_len;
  size_t data_len;
};

size_t mg_ws_vprintf(struct mg_connection *c, int op, const char *fmt,
                     va_list *ap) {
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b086      	sub	sp, #24
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	60f8      	str	r0, [r7, #12]
 800b1e4:	60b9      	str	r1, [r7, #8]
 800b1e6:	607a      	str	r2, [r7, #4]
 800b1e8:	603b      	str	r3, [r7, #0]
  size_t len = c->send.len;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1ee:	617b      	str	r3, [r7, #20]
  size_t n = mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	f103 0158 	add.w	r1, r3, #88	; 0x58
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	687a      	ldr	r2, [r7, #4]
 800b1fa:	4809      	ldr	r0, [pc, #36]	; (800b220 <mg_ws_vprintf+0x44>)
 800b1fc:	f7f7 ff48 	bl	8003090 <mg_vxprintf>
 800b200:	6138      	str	r0, [r7, #16]
  mg_ws_wrap(c, c->send.len - len, op);
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	1ad3      	subs	r3, r2, r3
 800b20a:	68ba      	ldr	r2, [r7, #8]
 800b20c:	4619      	mov	r1, r3
 800b20e:	68f8      	ldr	r0, [r7, #12]
 800b210:	f000 fc58 	bl	800bac4 <mg_ws_wrap>
  return n;
 800b214:	693b      	ldr	r3, [r7, #16]
}
 800b216:	4618      	mov	r0, r3
 800b218:	3718      	adds	r7, #24
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}
 800b21e:	bf00      	nop
 800b220:	080023f1 	.word	0x080023f1

0800b224 <ws_handshake>:
  return len;
}

static void ws_handshake(struct mg_connection *c, const struct mg_str *wskey,
                         const struct mg_str *wsproto, const char *fmt,
                         va_list *ap) {
 800b224:	b580      	push	{r7, lr}
 800b226:	b0aa      	sub	sp, #168	; 0xa8
 800b228:	af00      	add	r7, sp, #0
 800b22a:	60f8      	str	r0, [r7, #12]
 800b22c:	60b9      	str	r1, [r7, #8]
 800b22e:	607a      	str	r2, [r7, #4]
 800b230:	603b      	str	r3, [r7, #0]
  const char *magic = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";
 800b232:	4b29      	ldr	r3, [pc, #164]	; (800b2d8 <ws_handshake+0xb4>)
 800b234:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  unsigned char sha[20], b64_sha[30];

  mg_sha1_ctx sha_ctx;
  mg_sha1_init(&sha_ctx);
 800b238:	f107 0314 	add.w	r3, r7, #20
 800b23c:	4618      	mov	r0, r3
 800b23e:	f7fe fc81 	bl	8009b44 <mg_sha1_init>
  mg_sha1_update(&sha_ctx, (unsigned char *) wskey->ptr, wskey->len);
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	6819      	ldr	r1, [r3, #0]
 800b246:	68bb      	ldr	r3, [r7, #8]
 800b248:	685a      	ldr	r2, [r3, #4]
 800b24a:	f107 0314 	add.w	r3, r7, #20
 800b24e:	4618      	mov	r0, r3
 800b250:	f7fe fca2 	bl	8009b98 <mg_sha1_update>
  mg_sha1_update(&sha_ctx, (unsigned char *) magic, 36);
 800b254:	f107 0314 	add.w	r3, r7, #20
 800b258:	2224      	movs	r2, #36	; 0x24
 800b25a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b25e:	4618      	mov	r0, r3
 800b260:	f7fe fc9a 	bl	8009b98 <mg_sha1_update>
  mg_sha1_final(sha, &sha_ctx);
 800b264:	f107 0214 	add.w	r2, r7, #20
 800b268:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800b26c:	4611      	mov	r1, r2
 800b26e:	4618      	mov	r0, r3
 800b270:	f7fe fcf8 	bl	8009c64 <mg_sha1_final>
  mg_base64_encode(sha, sizeof(sha), (char *) b64_sha);
 800b274:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800b278:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800b27c:	2114      	movs	r1, #20
 800b27e:	4618      	mov	r0, r3
 800b280:	f7f6 f984 	bl	800158c <mg_base64_encode>
  mg_xprintf(mg_pfn_iobuf, &c->send,
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	f103 0158 	add.w	r1, r3, #88	; 0x58
 800b28a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b28e:	4a13      	ldr	r2, [pc, #76]	; (800b2dc <ws_handshake+0xb8>)
 800b290:	4813      	ldr	r0, [pc, #76]	; (800b2e0 <ws_handshake+0xbc>)
 800b292:	f7f7 f8fe 	bl	8002492 <mg_xprintf>
             "HTTP/1.1 101 Switching Protocols\r\n"
             "Upgrade: websocket\r\n"
             "Connection: Upgrade\r\n"
             "Sec-WebSocket-Accept: %s\r\n",
             b64_sha);
  if (fmt != NULL) mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d008      	beq.n	800b2ae <ws_handshake+0x8a>
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	f103 0158 	add.w	r1, r3, #88	; 0x58
 800b2a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b2a6:	683a      	ldr	r2, [r7, #0]
 800b2a8:	480d      	ldr	r0, [pc, #52]	; (800b2e0 <ws_handshake+0xbc>)
 800b2aa:	f7f7 fef1 	bl	8003090 <mg_vxprintf>
  if (wsproto != NULL) {
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d008      	beq.n	800b2c6 <ws_handshake+0xa2>
    mg_printf(c, "Sec-WebSocket-Protocol: %.*s\r\n", (int) wsproto->len,
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	685b      	ldr	r3, [r3, #4]
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	4909      	ldr	r1, [pc, #36]	; (800b2e4 <ws_handshake+0xc0>)
 800b2c0:	68f8      	ldr	r0, [r7, #12]
 800b2c2:	f7fc fd2f 	bl	8007d24 <mg_printf>
              wsproto->ptr);
  }
  mg_send(c, "\r\n", 2);
 800b2c6:	2202      	movs	r2, #2
 800b2c8:	4907      	ldr	r1, [pc, #28]	; (800b2e8 <ws_handshake+0xc4>)
 800b2ca:	68f8      	ldr	r0, [r7, #12]
 800b2cc:	f003 fa16 	bl	800e6fc <mg_send>
}
 800b2d0:	bf00      	nop
 800b2d2:	37a8      	adds	r7, #168	; 0xa8
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}
 800b2d8:	08014e3c 	.word	0x08014e3c
 800b2dc:	08014e64 	.word	0x08014e64
 800b2e0:	080023f1 	.word	0x080023f1
 800b2e4:	08014ecc 	.word	0x08014ecc
 800b2e8:	08013d1c 	.word	0x08013d1c

0800b2ec <be32>:

static uint32_t be32(const uint8_t *p) {
 800b2ec:	b480      	push	{r7}
 800b2ee:	b083      	sub	sp, #12
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  return (((uint32_t) p[3]) << 0) | (((uint32_t) p[2]) << 8) |
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	3303      	adds	r3, #3
 800b2f8:	781b      	ldrb	r3, [r3, #0]
 800b2fa:	461a      	mov	r2, r3
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	3302      	adds	r3, #2
 800b300:	781b      	ldrb	r3, [r3, #0]
 800b302:	021b      	lsls	r3, r3, #8
 800b304:	431a      	orrs	r2, r3
         (((uint32_t) p[1]) << 16) | (((uint32_t) p[0]) << 24);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	3301      	adds	r3, #1
 800b30a:	781b      	ldrb	r3, [r3, #0]
 800b30c:	041b      	lsls	r3, r3, #16
  return (((uint32_t) p[3]) << 0) | (((uint32_t) p[2]) << 8) |
 800b30e:	431a      	orrs	r2, r3
         (((uint32_t) p[1]) << 16) | (((uint32_t) p[0]) << 24);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	061b      	lsls	r3, r3, #24
 800b316:	4313      	orrs	r3, r2
}
 800b318:	4618      	mov	r0, r3
 800b31a:	370c      	adds	r7, #12
 800b31c:	46bd      	mov	sp, r7
 800b31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b322:	4770      	bx	lr

0800b324 <ws_process>:

static size_t ws_process(uint8_t *buf, size_t len, struct ws_msg *msg) {
 800b324:	b5b0      	push	{r4, r5, r7, lr}
 800b326:	b08a      	sub	sp, #40	; 0x28
 800b328:	af00      	add	r7, sp, #0
 800b32a:	60f8      	str	r0, [r7, #12]
 800b32c:	60b9      	str	r1, [r7, #8]
 800b32e:	607a      	str	r2, [r7, #4]
  size_t i, n = 0, mask_len = 0;
 800b330:	2300      	movs	r3, #0
 800b332:	61fb      	str	r3, [r7, #28]
 800b334:	2300      	movs	r3, #0
 800b336:	623b      	str	r3, [r7, #32]
  memset(msg, 0, sizeof(*msg));
 800b338:	220c      	movs	r2, #12
 800b33a:	2100      	movs	r1, #0
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f007 fa23 	bl	8012788 <memset>
  if (len >= 2) {
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	2b01      	cmp	r3, #1
 800b346:	d953      	bls.n	800b3f0 <ws_process+0xcc>
    n = buf[1] & 0x7f;                // Frame length
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	3301      	adds	r3, #1
 800b34c:	781b      	ldrb	r3, [r3, #0]
 800b34e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b352:	61fb      	str	r3, [r7, #28]
    mask_len = buf[1] & 128 ? 4 : 0;  // last bit is a mask bit
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	3301      	adds	r3, #1
 800b358:	781b      	ldrb	r3, [r3, #0]
 800b35a:	b25b      	sxtb	r3, r3
 800b35c:	115b      	asrs	r3, r3, #5
 800b35e:	b25b      	sxtb	r3, r3
 800b360:	f003 0304 	and.w	r3, r3, #4
 800b364:	623b      	str	r3, [r7, #32]
    msg->flags = buf[0];
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	781a      	ldrb	r2, [r3, #0]
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	701a      	strb	r2, [r3, #0]
    if (n < 126 && len >= mask_len) {
 800b36e:	69fb      	ldr	r3, [r7, #28]
 800b370:	2b7d      	cmp	r3, #125	; 0x7d
 800b372:	d80b      	bhi.n	800b38c <ws_process+0x68>
 800b374:	68ba      	ldr	r2, [r7, #8]
 800b376:	6a3b      	ldr	r3, [r7, #32]
 800b378:	429a      	cmp	r2, r3
 800b37a:	d307      	bcc.n	800b38c <ws_process+0x68>
      msg->data_len = n;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	69fa      	ldr	r2, [r7, #28]
 800b380:	609a      	str	r2, [r3, #8]
      msg->header_len = 2 + mask_len;
 800b382:	6a3b      	ldr	r3, [r7, #32]
 800b384:	1c9a      	adds	r2, r3, #2
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	605a      	str	r2, [r3, #4]
 800b38a:	e031      	b.n	800b3f0 <ws_process+0xcc>
    } else if (n == 126 && len >= 4 + mask_len) {
 800b38c:	69fb      	ldr	r3, [r7, #28]
 800b38e:	2b7e      	cmp	r3, #126	; 0x7e
 800b390:	d113      	bne.n	800b3ba <ws_process+0x96>
 800b392:	6a3b      	ldr	r3, [r7, #32]
 800b394:	3304      	adds	r3, #4
 800b396:	68ba      	ldr	r2, [r7, #8]
 800b398:	429a      	cmp	r2, r3
 800b39a:	d30e      	bcc.n	800b3ba <ws_process+0x96>
      msg->header_len = 4 + mask_len;
 800b39c:	6a3b      	ldr	r3, [r7, #32]
 800b39e:	1d1a      	adds	r2, r3, #4
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	605a      	str	r2, [r3, #4]
      msg->data_len = (((size_t) buf[2]) << 8) | buf[3];
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	3302      	adds	r3, #2
 800b3a8:	781b      	ldrb	r3, [r3, #0]
 800b3aa:	021b      	lsls	r3, r3, #8
 800b3ac:	68fa      	ldr	r2, [r7, #12]
 800b3ae:	3203      	adds	r2, #3
 800b3b0:	7812      	ldrb	r2, [r2, #0]
 800b3b2:	431a      	orrs	r2, r3
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	609a      	str	r2, [r3, #8]
 800b3b8:	e01a      	b.n	800b3f0 <ws_process+0xcc>
    } else if (len >= 10 + mask_len) {
 800b3ba:	6a3b      	ldr	r3, [r7, #32]
 800b3bc:	330a      	adds	r3, #10
 800b3be:	68ba      	ldr	r2, [r7, #8]
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	d315      	bcc.n	800b3f0 <ws_process+0xcc>
      msg->header_len = 10 + mask_len;
 800b3c4:	6a3b      	ldr	r3, [r7, #32]
 800b3c6:	f103 020a 	add.w	r2, r3, #10
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	605a      	str	r2, [r3, #4]
      msg->data_len =
          (size_t) (((uint64_t) be32(buf + 2) << 32) + be32(buf + 6));
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	3302      	adds	r3, #2
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f7ff ff8a 	bl	800b2ec <be32>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	2200      	movs	r2, #0
 800b3dc:	461c      	mov	r4, r3
 800b3de:	4615      	mov	r5, r2
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	3306      	adds	r3, #6
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f7ff ff81 	bl	800b2ec <be32>
 800b3ea:	4602      	mov	r2, r0
      msg->data_len =
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	609a      	str	r2, [r3, #8]
    }
  }
  // Sanity check, and integer overflow protection for the boundary check below
  // data_len should not be larger than 1 Gb
  if (msg->data_len > 1024 * 1024 * 1024) return 0;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	689b      	ldr	r3, [r3, #8]
 800b3f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3f8:	d901      	bls.n	800b3fe <ws_process+0xda>
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	e036      	b.n	800b46c <ws_process+0x148>
  if (msg->header_len + msg->data_len > len) return 0;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	685a      	ldr	r2, [r3, #4]
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	689b      	ldr	r3, [r3, #8]
 800b406:	4413      	add	r3, r2
 800b408:	68ba      	ldr	r2, [r7, #8]
 800b40a:	429a      	cmp	r2, r3
 800b40c:	d201      	bcs.n	800b412 <ws_process+0xee>
 800b40e:	2300      	movs	r3, #0
 800b410:	e02c      	b.n	800b46c <ws_process+0x148>
  if (mask_len > 0) {
 800b412:	6a3b      	ldr	r3, [r7, #32]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d024      	beq.n	800b462 <ws_process+0x13e>
    uint8_t *p = buf + msg->header_len, *m = p - mask_len;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	685b      	ldr	r3, [r3, #4]
 800b41c:	68fa      	ldr	r2, [r7, #12]
 800b41e:	4413      	add	r3, r2
 800b420:	61bb      	str	r3, [r7, #24]
 800b422:	6a3b      	ldr	r3, [r7, #32]
 800b424:	425b      	negs	r3, r3
 800b426:	69ba      	ldr	r2, [r7, #24]
 800b428:	4413      	add	r3, r2
 800b42a:	617b      	str	r3, [r7, #20]
    for (i = 0; i < msg->data_len; i++) p[i] ^= m[i & 3];
 800b42c:	2300      	movs	r3, #0
 800b42e:	627b      	str	r3, [r7, #36]	; 0x24
 800b430:	e012      	b.n	800b458 <ws_process+0x134>
 800b432:	69ba      	ldr	r2, [r7, #24]
 800b434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b436:	4413      	add	r3, r2
 800b438:	7819      	ldrb	r1, [r3, #0]
 800b43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b43c:	f003 0303 	and.w	r3, r3, #3
 800b440:	697a      	ldr	r2, [r7, #20]
 800b442:	4413      	add	r3, r2
 800b444:	781a      	ldrb	r2, [r3, #0]
 800b446:	69b8      	ldr	r0, [r7, #24]
 800b448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b44a:	4403      	add	r3, r0
 800b44c:	404a      	eors	r2, r1
 800b44e:	b2d2      	uxtb	r2, r2
 800b450:	701a      	strb	r2, [r3, #0]
 800b452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b454:	3301      	adds	r3, #1
 800b456:	627b      	str	r3, [r7, #36]	; 0x24
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	689b      	ldr	r3, [r3, #8]
 800b45c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b45e:	429a      	cmp	r2, r3
 800b460:	d3e7      	bcc.n	800b432 <ws_process+0x10e>
  }
  return msg->header_len + msg->data_len;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	685a      	ldr	r2, [r3, #4]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	689b      	ldr	r3, [r3, #8]
 800b46a:	4413      	add	r3, r2
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3728      	adds	r7, #40	; 0x28
 800b470:	46bd      	mov	sp, r7
 800b472:	bdb0      	pop	{r4, r5, r7, pc}

0800b474 <mkhdr>:

static size_t mkhdr(size_t len, int op, bool is_client, uint8_t *buf) {
 800b474:	b5b0      	push	{r4, r5, r7, lr}
 800b476:	b088      	sub	sp, #32
 800b478:	af00      	add	r7, sp, #0
 800b47a:	60f8      	str	r0, [r7, #12]
 800b47c:	60b9      	str	r1, [r7, #8]
 800b47e:	603b      	str	r3, [r7, #0]
 800b480:	4613      	mov	r3, r2
 800b482:	71fb      	strb	r3, [r7, #7]
  size_t n = 0;
 800b484:	2300      	movs	r3, #0
 800b486:	61fb      	str	r3, [r7, #28]
  buf[0] = (uint8_t) (op | 128);
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	b25b      	sxtb	r3, r3
 800b48c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b490:	b25b      	sxtb	r3, r3
 800b492:	b2da      	uxtb	r2, r3
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	701a      	strb	r2, [r3, #0]
  if (len < 126) {
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	2b7d      	cmp	r3, #125	; 0x7d
 800b49c:	d807      	bhi.n	800b4ae <mkhdr+0x3a>
    buf[1] = (unsigned char) len;
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	3301      	adds	r3, #1
 800b4a2:	68fa      	ldr	r2, [r7, #12]
 800b4a4:	b2d2      	uxtb	r2, r2
 800b4a6:	701a      	strb	r2, [r3, #0]
    n = 2;
 800b4a8:	2302      	movs	r3, #2
 800b4aa:	61fb      	str	r3, [r7, #28]
 800b4ac:	e038      	b.n	800b520 <mkhdr+0xac>
  } else if (len < 65536) {
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4b4:	d211      	bcs.n	800b4da <mkhdr+0x66>
    uint16_t tmp = mg_htons((uint16_t) len);
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	b29b      	uxth	r3, r3
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f7ff fe76 	bl	800b1ac <mg_ntohs>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	837b      	strh	r3, [r7, #26]
    buf[1] = 126;
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	3301      	adds	r3, #1
 800b4c8:	227e      	movs	r2, #126	; 0x7e
 800b4ca:	701a      	strb	r2, [r3, #0]
    memcpy(&buf[2], &tmp, sizeof(tmp));
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	3302      	adds	r3, #2
 800b4d0:	8b7a      	ldrh	r2, [r7, #26]
 800b4d2:	801a      	strh	r2, [r3, #0]
    n = 4;
 800b4d4:	2304      	movs	r3, #4
 800b4d6:	61fb      	str	r3, [r7, #28]
 800b4d8:	e022      	b.n	800b520 <mkhdr+0xac>
  } else {
    uint32_t tmp;
    buf[1] = 127;
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	3301      	adds	r3, #1
 800b4de:	227f      	movs	r2, #127	; 0x7f
 800b4e0:	701a      	strb	r2, [r3, #0]
    tmp = mg_htonl((uint32_t) (((uint64_t) len) >> 32));
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	461c      	mov	r4, r3
 800b4e8:	4615      	mov	r5, r2
 800b4ea:	f04f 0200 	mov.w	r2, #0
 800b4ee:	f04f 0300 	mov.w	r3, #0
 800b4f2:	002a      	movs	r2, r5
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	4613      	mov	r3, r2
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f7ff fe3e 	bl	800b17a <mg_ntohl>
 800b4fe:	4603      	mov	r3, r0
 800b500:	617b      	str	r3, [r7, #20]
    memcpy(&buf[2], &tmp, sizeof(tmp));
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	3302      	adds	r3, #2
 800b506:	697a      	ldr	r2, [r7, #20]
 800b508:	601a      	str	r2, [r3, #0]
    tmp = mg_htonl((uint32_t) (len & 0xffffffffU));
 800b50a:	68f8      	ldr	r0, [r7, #12]
 800b50c:	f7ff fe35 	bl	800b17a <mg_ntohl>
 800b510:	4603      	mov	r3, r0
 800b512:	617b      	str	r3, [r7, #20]
    memcpy(&buf[6], &tmp, sizeof(tmp));
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	3306      	adds	r3, #6
 800b518:	697a      	ldr	r2, [r7, #20]
 800b51a:	601a      	str	r2, [r3, #0]
    n = 10;
 800b51c:	230a      	movs	r3, #10
 800b51e:	61fb      	str	r3, [r7, #28]
  }
  if (is_client) {
 800b520:	79fb      	ldrb	r3, [r7, #7]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d012      	beq.n	800b54c <mkhdr+0xd8>
    buf[1] |= 1 << 7;  // Set masking flag
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	3301      	adds	r3, #1
 800b52a:	781a      	ldrb	r2, [r3, #0]
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	3301      	adds	r3, #1
 800b530:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b534:	b2d2      	uxtb	r2, r2
 800b536:	701a      	strb	r2, [r3, #0]
    mg_random(&buf[n], 4);
 800b538:	683a      	ldr	r2, [r7, #0]
 800b53a:	69fb      	ldr	r3, [r7, #28]
 800b53c:	4413      	add	r3, r2
 800b53e:	2104      	movs	r1, #4
 800b540:	4618      	mov	r0, r3
 800b542:	f7ff fdf9 	bl	800b138 <mg_random>
    n += 4;
 800b546:	69fb      	ldr	r3, [r7, #28]
 800b548:	3304      	adds	r3, #4
 800b54a:	61fb      	str	r3, [r7, #28]
  }
  return n;
 800b54c:	69fb      	ldr	r3, [r7, #28]
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3720      	adds	r7, #32
 800b552:	46bd      	mov	sp, r7
 800b554:	bdb0      	pop	{r4, r5, r7, pc}

0800b556 <mg_ws_mask>:

static void mg_ws_mask(struct mg_connection *c, size_t len) {
 800b556:	b480      	push	{r7}
 800b558:	b087      	sub	sp, #28
 800b55a:	af00      	add	r7, sp, #0
 800b55c:	6078      	str	r0, [r7, #4]
 800b55e:	6039      	str	r1, [r7, #0]
  if (c->is_client && c->send.buf != NULL) {
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800b566:	f003 0302 	and.w	r3, r3, #2
 800b56a:	b2db      	uxtb	r3, r3
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d028      	beq.n	800b5c2 <mg_ws_mask+0x6c>
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b574:	2b00      	cmp	r3, #0
 800b576:	d024      	beq.n	800b5c2 <mg_ws_mask+0x6c>
    size_t i;
    uint8_t *p = c->send.buf + c->send.len - len, *mask = p - 4;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	1acb      	subs	r3, r1, r3
 800b584:	4413      	add	r3, r2
 800b586:	613b      	str	r3, [r7, #16]
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	3b04      	subs	r3, #4
 800b58c:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < len; i++) p[i] ^= mask[i & 3];
 800b58e:	2300      	movs	r3, #0
 800b590:	617b      	str	r3, [r7, #20]
 800b592:	e012      	b.n	800b5ba <mg_ws_mask+0x64>
 800b594:	693a      	ldr	r2, [r7, #16]
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	4413      	add	r3, r2
 800b59a:	7819      	ldrb	r1, [r3, #0]
 800b59c:	697b      	ldr	r3, [r7, #20]
 800b59e:	f003 0303 	and.w	r3, r3, #3
 800b5a2:	68fa      	ldr	r2, [r7, #12]
 800b5a4:	4413      	add	r3, r2
 800b5a6:	781a      	ldrb	r2, [r3, #0]
 800b5a8:	6938      	ldr	r0, [r7, #16]
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	4403      	add	r3, r0
 800b5ae:	404a      	eors	r2, r1
 800b5b0:	b2d2      	uxtb	r2, r2
 800b5b2:	701a      	strb	r2, [r3, #0]
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	3301      	adds	r3, #1
 800b5b8:	617b      	str	r3, [r7, #20]
 800b5ba:	697a      	ldr	r2, [r7, #20]
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d3e8      	bcc.n	800b594 <mg_ws_mask+0x3e>
  }
}
 800b5c2:	bf00      	nop
 800b5c4:	371c      	adds	r7, #28
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5cc:	4770      	bx	lr
	...

0800b5d0 <mg_ws_send>:

size_t mg_ws_send(struct mg_connection *c, const void *buf, size_t len,
                  int op) {
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b08a      	sub	sp, #40	; 0x28
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	60f8      	str	r0, [r7, #12]
 800b5d8:	60b9      	str	r1, [r7, #8]
 800b5da:	607a      	str	r2, [r7, #4]
 800b5dc:	603b      	str	r3, [r7, #0]
  uint8_t header[14];
  size_t header_len = mkhdr(len, op, c->is_client, header);
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800b5e4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b5e8:	b2db      	uxtb	r3, r3
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	bf14      	ite	ne
 800b5ee:	2301      	movne	r3, #1
 800b5f0:	2300      	moveq	r3, #0
 800b5f2:	b2da      	uxtb	r2, r3
 800b5f4:	f107 0314 	add.w	r3, r7, #20
 800b5f8:	6839      	ldr	r1, [r7, #0]
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f7ff ff3a 	bl	800b474 <mkhdr>
 800b600:	6278      	str	r0, [r7, #36]	; 0x24
  mg_send(c, header, header_len);
 800b602:	f107 0314 	add.w	r3, r7, #20
 800b606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b608:	4619      	mov	r1, r3
 800b60a:	68f8      	ldr	r0, [r7, #12]
 800b60c:	f003 f876 	bl	800e6fc <mg_send>
  MG_VERBOSE(("WS out: %d [%.*s]", (int) len, (int) len, buf));
 800b610:	4b0f      	ldr	r3, [pc, #60]	; (800b650 <mg_ws_send+0x80>)
 800b612:	f241 6291 	movw	r2, #5777	; 0x1691
 800b616:	490f      	ldr	r1, [pc, #60]	; (800b654 <mg_ws_send+0x84>)
 800b618:	2004      	movs	r0, #4
 800b61a:	f7fb fd43 	bl	80070a4 <mg_log_prefix>
 800b61e:	4603      	mov	r3, r0
 800b620:	2b00      	cmp	r3, #0
 800b622:	d005      	beq.n	800b630 <mg_ws_send+0x60>
 800b624:	6879      	ldr	r1, [r7, #4]
 800b626:	687a      	ldr	r2, [r7, #4]
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	480b      	ldr	r0, [pc, #44]	; (800b658 <mg_ws_send+0x88>)
 800b62c:	f7fb fd94 	bl	8007158 <mg_log>
  mg_send(c, buf, len);
 800b630:	687a      	ldr	r2, [r7, #4]
 800b632:	68b9      	ldr	r1, [r7, #8]
 800b634:	68f8      	ldr	r0, [r7, #12]
 800b636:	f003 f861 	bl	800e6fc <mg_send>
  mg_ws_mask(c, len);
 800b63a:	6879      	ldr	r1, [r7, #4]
 800b63c:	68f8      	ldr	r0, [r7, #12]
 800b63e:	f7ff ff8a 	bl	800b556 <mg_ws_mask>
  return header_len + len;
 800b642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	4413      	add	r3, r2
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3728      	adds	r7, #40	; 0x28
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}
 800b650:	08015750 	.word	0x08015750
 800b654:	08013b30 	.word	0x08013b30
 800b658:	08014eec 	.word	0x08014eec

0800b65c <mg_ws_client_handshake>:

static bool mg_ws_client_handshake(struct mg_connection *c) {
 800b65c:	b580      	push	{r7, lr}
 800b65e:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 800b662:	af00      	add	r7, sp, #0
 800b664:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800b668:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800b66c:	6018      	str	r0, [r3, #0]
  int n = mg_http_get_request_len(c->recv.buf, c->recv.len);
 800b66e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800b672:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b67a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800b67e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b686:	4619      	mov	r1, r3
 800b688:	4610      	mov	r0, r2
 800b68a:	f7f8 fcef 	bl	800406c <mg_http_get_request_len>
 800b68e:	f8c7 022c 	str.w	r0, [r7, #556]	; 0x22c
  if (n < 0) {
 800b692:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800b696:	2b00      	cmp	r3, #0
 800b698:	da08      	bge.n	800b6ac <mg_ws_client_handshake+0x50>
    mg_error(c, "not http");  // Some just, not an HTTP request
 800b69a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800b69e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800b6a2:	4930      	ldr	r1, [pc, #192]	; (800b764 <mg_ws_client_handshake+0x108>)
 800b6a4:	6818      	ldr	r0, [r3, #0]
 800b6a6:	f7f6 fe0d 	bl	80022c4 <mg_error>
 800b6aa:	e054      	b.n	800b756 <mg_ws_client_handshake+0xfa>
  } else if (n > 0) {
 800b6ac:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	dd4e      	ble.n	800b752 <mg_ws_client_handshake+0xf6>
    if (n < 15 || memcmp(c->recv.buf + 9, "101", 3) != 0) {
 800b6b4:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800b6b8:	2b0e      	cmp	r3, #14
 800b6ba:	dd0e      	ble.n	800b6da <mg_ws_client_handshake+0x7e>
 800b6bc:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800b6c0:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6c8:	3309      	adds	r3, #9
 800b6ca:	2203      	movs	r2, #3
 800b6cc:	4926      	ldr	r1, [pc, #152]	; (800b768 <mg_ws_client_handshake+0x10c>)
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f007 f822 	bl	8012718 <memcmp>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d008      	beq.n	800b6ec <mg_ws_client_handshake+0x90>
      mg_error(c, "handshake error");
 800b6da:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800b6de:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800b6e2:	4922      	ldr	r1, [pc, #136]	; (800b76c <mg_ws_client_handshake+0x110>)
 800b6e4:	6818      	ldr	r0, [r3, #0]
 800b6e6:	f7f6 fded 	bl	80022c4 <mg_error>
 800b6ea:	e025      	b.n	800b738 <mg_ws_client_handshake+0xdc>
    } else {
      struct mg_http_message hm;
      mg_http_parse((char *) c->recv.buf, c->recv.len, &hm);
 800b6ec:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800b6f0:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800b6f8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800b6fc:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b704:	f107 020c 	add.w	r2, r7, #12
 800b708:	4619      	mov	r1, r3
 800b70a:	f7f8 fddb 	bl	80042c4 <mg_http_parse>
      c->is_websocket = 1;
 800b70e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800b712:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800b716:	681a      	ldr	r2, [r3, #0]
 800b718:	f892 30b1 	ldrb.w	r3, [r2, #177]	; 0xb1
 800b71c:	f043 0301 	orr.w	r3, r3, #1
 800b720:	f882 30b1 	strb.w	r3, [r2, #177]	; 0xb1
      mg_call(c, MG_EV_WS_OPEN, &hm);
 800b724:	f107 020c 	add.w	r2, r7, #12
 800b728:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800b72c:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800b730:	210c      	movs	r1, #12
 800b732:	6818      	ldr	r0, [r3, #0]
 800b734:	f7f6 fda4 	bl	8002280 <mg_call>
    }
    mg_iobuf_del(&c->recv, 0, (size_t) n);
 800b738:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800b73c:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	3348      	adds	r3, #72	; 0x48
 800b744:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 800b748:	2100      	movs	r1, #0
 800b74a:	4618      	mov	r0, r3
 800b74c:	f7fa fe8e 	bl	800646c <mg_iobuf_del>
 800b750:	e001      	b.n	800b756 <mg_ws_client_handshake+0xfa>
  } else {
    return true;  // Request is not yet received, quit event handler
 800b752:	2301      	movs	r3, #1
 800b754:	e000      	b.n	800b758 <mg_ws_client_handshake+0xfc>
  }
  return false;  // Continue event handler
 800b756:	2300      	movs	r3, #0
}
 800b758:	4618      	mov	r0, r3
 800b75a:	f507 770c 	add.w	r7, r7, #560	; 0x230
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}
 800b762:	bf00      	nop
 800b764:	08014f00 	.word	0x08014f00
 800b768:	08014f0c 	.word	0x08014f0c
 800b76c:	08014f10 	.word	0x08014f10

0800b770 <mg_ws_cb>:

static void mg_ws_cb(struct mg_connection *c, int ev, void *ev_data,
                     void *fn_data) {
 800b770:	b580      	push	{r7, lr}
 800b772:	b090      	sub	sp, #64	; 0x40
 800b774:	af00      	add	r7, sp, #0
 800b776:	6178      	str	r0, [r7, #20]
 800b778:	6139      	str	r1, [r7, #16]
 800b77a:	60fa      	str	r2, [r7, #12]
 800b77c:	60bb      	str	r3, [r7, #8]
  struct ws_msg msg;
  size_t ofs = (size_t) c->pfn_data;
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b782:	63fb      	str	r3, [r7, #60]	; 0x3c

  // assert(ofs < c->recv.len);
  if (ev == MG_EV_READ) {
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	2b07      	cmp	r3, #7
 800b788:	f040 8135 	bne.w	800b9f6 <mg_ws_cb+0x286>
    if (c->is_client && !c->is_websocket && mg_ws_client_handshake(c)) return;
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800b792:	f003 0302 	and.w	r3, r3, #2
 800b796:	b2db      	uxtb	r3, r3
 800b798:	2b00      	cmp	r3, #0
 800b79a:	f000 8119 	beq.w	800b9d0 <mg_ws_cb+0x260>
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800b7a4:	f003 0301 	and.w	r3, r3, #1
 800b7a8:	b2db      	uxtb	r3, r3
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	f040 8110 	bne.w	800b9d0 <mg_ws_cb+0x260>
 800b7b0:	6978      	ldr	r0, [r7, #20]
 800b7b2:	f7ff ff53 	bl	800b65c <mg_ws_client_handshake>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	f040 811b 	bne.w	800b9f4 <mg_ws_cb+0x284>

    while (ws_process(c->recv.buf + ofs, c->recv.len - ofs, &msg) > 0) {
 800b7be:	e107      	b.n	800b9d0 <mg_ws_cb+0x260>
      char *s = (char *) c->recv.buf + ofs + msg.header_len;
 800b7c0:	697b      	ldr	r3, [r7, #20]
 800b7c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b7c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b7c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7c8:	440b      	add	r3, r1
 800b7ca:	4413      	add	r3, r2
 800b7cc:	637b      	str	r3, [r7, #52]	; 0x34
      struct mg_ws_message m = {{s, msg.data_len}, msg.flags};
 800b7ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7d0:	61bb      	str	r3, [r7, #24]
 800b7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7d4:	61fb      	str	r3, [r7, #28]
 800b7d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b7da:	f887 3020 	strb.w	r3, [r7, #32]
      size_t len = msg.header_len + msg.data_len;
 800b7de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7e2:	4413      	add	r3, r2
 800b7e4:	63bb      	str	r3, [r7, #56]	; 0x38
      uint8_t final = msg.flags & 128, op = msg.flags & 15;
 800b7e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b7ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b7ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b7f2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b7f6:	f003 030f 	and.w	r3, r3, #15
 800b7fa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      // MG_VERBOSE ("fin %d op %d len %d [%.*s]", final, op,
      //                       (int) m.data.len, (int) m.data.len, m.data.ptr));
      switch (op) {
 800b7fe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b802:	2b0a      	cmp	r3, #10
 800b804:	d875      	bhi.n	800b8f2 <mg_ws_cb+0x182>
 800b806:	a201      	add	r2, pc, #4	; (adr r2, 800b80c <mg_ws_cb+0x9c>)
 800b808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b80c:	0800b839 	.word	0x0800b839
 800b810:	0800b891 	.word	0x0800b891
 800b814:	0800b891 	.word	0x0800b891
 800b818:	0800b8f3 	.word	0x0800b8f3
 800b81c:	0800b8f3 	.word	0x0800b8f3
 800b820:	0800b8f3 	.word	0x0800b8f3
 800b824:	0800b8f3 	.word	0x0800b8f3
 800b828:	0800b8f3 	.word	0x0800b8f3
 800b82c:	0800b8a9 	.word	0x0800b8a9
 800b830:	0800b849 	.word	0x0800b849
 800b834:	0800b881 	.word	0x0800b881
        case WEBSOCKET_OP_CONTINUE:
          mg_call(c, MG_EV_WS_CTL, &m);
 800b838:	f107 0318 	add.w	r3, r7, #24
 800b83c:	461a      	mov	r2, r3
 800b83e:	210e      	movs	r1, #14
 800b840:	6978      	ldr	r0, [r7, #20]
 800b842:	f7f6 fd1d 	bl	8002280 <mg_call>
          break;
 800b846:	e05d      	b.n	800b904 <mg_ws_cb+0x194>
        case WEBSOCKET_OP_PING:
          MG_DEBUG(("%s", "WS PONG"));
 800b848:	4b6c      	ldr	r3, [pc, #432]	; (800b9fc <mg_ws_cb+0x28c>)
 800b84a:	f44f 52b6 	mov.w	r2, #5824	; 0x16c0
 800b84e:	496c      	ldr	r1, [pc, #432]	; (800ba00 <mg_ws_cb+0x290>)
 800b850:	2003      	movs	r0, #3
 800b852:	f7fb fc27 	bl	80070a4 <mg_log_prefix>
 800b856:	4603      	mov	r3, r0
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d003      	beq.n	800b864 <mg_ws_cb+0xf4>
 800b85c:	4969      	ldr	r1, [pc, #420]	; (800ba04 <mg_ws_cb+0x294>)
 800b85e:	486a      	ldr	r0, [pc, #424]	; (800ba08 <mg_ws_cb+0x298>)
 800b860:	f7fb fc7a 	bl	8007158 <mg_log>
          mg_ws_send(c, s, msg.data_len, WEBSOCKET_OP_PONG);
 800b864:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b866:	230a      	movs	r3, #10
 800b868:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b86a:	6978      	ldr	r0, [r7, #20]
 800b86c:	f7ff feb0 	bl	800b5d0 <mg_ws_send>
          mg_call(c, MG_EV_WS_CTL, &m);
 800b870:	f107 0318 	add.w	r3, r7, #24
 800b874:	461a      	mov	r2, r3
 800b876:	210e      	movs	r1, #14
 800b878:	6978      	ldr	r0, [r7, #20]
 800b87a:	f7f6 fd01 	bl	8002280 <mg_call>
          break;
 800b87e:	e041      	b.n	800b904 <mg_ws_cb+0x194>
        case WEBSOCKET_OP_PONG:
          mg_call(c, MG_EV_WS_CTL, &m);
 800b880:	f107 0318 	add.w	r3, r7, #24
 800b884:	461a      	mov	r2, r3
 800b886:	210e      	movs	r1, #14
 800b888:	6978      	ldr	r0, [r7, #20]
 800b88a:	f7f6 fcf9 	bl	8002280 <mg_call>
          break;
 800b88e:	e039      	b.n	800b904 <mg_ws_cb+0x194>
        case WEBSOCKET_OP_TEXT:
        case WEBSOCKET_OP_BINARY:
          if (final) mg_call(c, MG_EV_WS_MSG, &m);
 800b890:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b894:	2b00      	cmp	r3, #0
 800b896:	d034      	beq.n	800b902 <mg_ws_cb+0x192>
 800b898:	f107 0318 	add.w	r3, r7, #24
 800b89c:	461a      	mov	r2, r3
 800b89e:	210d      	movs	r1, #13
 800b8a0:	6978      	ldr	r0, [r7, #20]
 800b8a2:	f7f6 fced 	bl	8002280 <mg_call>
          break;
 800b8a6:	e02c      	b.n	800b902 <mg_ws_cb+0x192>
        case WEBSOCKET_OP_CLOSE:
          MG_DEBUG(("%lu WS CLOSE", c->id));
 800b8a8:	4b54      	ldr	r3, [pc, #336]	; (800b9fc <mg_ws_cb+0x28c>)
 800b8aa:	f241 62cc 	movw	r2, #5836	; 0x16cc
 800b8ae:	4954      	ldr	r1, [pc, #336]	; (800ba00 <mg_ws_cb+0x290>)
 800b8b0:	2003      	movs	r0, #3
 800b8b2:	f7fb fbf7 	bl	80070a4 <mg_log_prefix>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d005      	beq.n	800b8c8 <mg_ws_cb+0x158>
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8c0:	4619      	mov	r1, r3
 800b8c2:	4852      	ldr	r0, [pc, #328]	; (800ba0c <mg_ws_cb+0x29c>)
 800b8c4:	f7fb fc48 	bl	8007158 <mg_log>
          mg_call(c, MG_EV_WS_CTL, &m);
 800b8c8:	f107 0318 	add.w	r3, r7, #24
 800b8cc:	461a      	mov	r2, r3
 800b8ce:	210e      	movs	r1, #14
 800b8d0:	6978      	ldr	r0, [r7, #20]
 800b8d2:	f7f6 fcd5 	bl	8002280 <mg_call>
          // Echo the payload of the received CLOSE message back to the sender
          mg_ws_send(c, m.data.ptr, m.data.len, WEBSOCKET_OP_CLOSE);
 800b8d6:	69b9      	ldr	r1, [r7, #24]
 800b8d8:	69fa      	ldr	r2, [r7, #28]
 800b8da:	2308      	movs	r3, #8
 800b8dc:	6978      	ldr	r0, [r7, #20]
 800b8de:	f7ff fe77 	bl	800b5d0 <mg_ws_send>
          c->is_draining = 1;
 800b8e2:	697a      	ldr	r2, [r7, #20]
 800b8e4:	f892 30b1 	ldrb.w	r3, [r2, #177]	; 0xb1
 800b8e8:	f043 0308 	orr.w	r3, r3, #8
 800b8ec:	f882 30b1 	strb.w	r3, [r2, #177]	; 0xb1
          break;
 800b8f0:	e008      	b.n	800b904 <mg_ws_cb+0x194>
        default:
          // Per RFC6455, close conn when an unknown op is recvd
          mg_error(c, "unknown WS op %d", op);
 800b8f2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	4945      	ldr	r1, [pc, #276]	; (800ba10 <mg_ws_cb+0x2a0>)
 800b8fa:	6978      	ldr	r0, [r7, #20]
 800b8fc:	f7f6 fce2 	bl	80022c4 <mg_error>
          break;
 800b900:	e000      	b.n	800b904 <mg_ws_cb+0x194>
          break;
 800b902:	bf00      	nop
      }

      // Handle fragmented frames: strip header, keep in c->recv
      if (final == 0 || op == 0) {
 800b904:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d003      	beq.n	800b914 <mg_ws_cb+0x1a4>
 800b90c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b910:	2b00      	cmp	r3, #0
 800b912:	d11e      	bne.n	800b952 <mg_ws_cb+0x1e2>
        if (op) ofs++, len--, msg.header_len--;       // First frame
 800b914:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d008      	beq.n	800b92e <mg_ws_cb+0x1be>
 800b91c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b91e:	3301      	adds	r3, #1
 800b920:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b924:	3b01      	subs	r3, #1
 800b926:	63bb      	str	r3, [r7, #56]	; 0x38
 800b928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b92a:	3b01      	subs	r3, #1
 800b92c:	62bb      	str	r3, [r7, #40]	; 0x28
        mg_iobuf_del(&c->recv, ofs, msg.header_len);  // Strip header
 800b92e:	697b      	ldr	r3, [r7, #20]
 800b930:	3348      	adds	r3, #72	; 0x48
 800b932:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b934:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b936:	4618      	mov	r0, r3
 800b938:	f7fa fd98 	bl	800646c <mg_iobuf_del>
        len -= msg.header_len;
 800b93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b93e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b940:	1ad3      	subs	r3, r2, r3
 800b942:	63bb      	str	r3, [r7, #56]	; 0x38
        ofs += len;
 800b944:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b948:	4413      	add	r3, r2
 800b94a:	63fb      	str	r3, [r7, #60]	; 0x3c
        c->pfn_data = (void *) ofs;
 800b94c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	675a      	str	r2, [r3, #116]	; 0x74
        // MG_INFO(("FRAG %d [%.*s]", (int) ofs, (int) ofs, c->recv.buf));
      }
      // Remove non-fragmented frame
      if (final && op) mg_iobuf_del(&c->recv, ofs, len);
 800b952:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b956:	2b00      	cmp	r3, #0
 800b958:	d00a      	beq.n	800b970 <mg_ws_cb+0x200>
 800b95a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d006      	beq.n	800b970 <mg_ws_cb+0x200>
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	3348      	adds	r3, #72	; 0x48
 800b966:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b968:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b96a:	4618      	mov	r0, r3
 800b96c:	f7fa fd7e 	bl	800646c <mg_iobuf_del>
      // Last chunk of the fragmented frame
      if (final && !op) {
 800b970:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b974:	2b00      	cmp	r3, #0
 800b976:	d02b      	beq.n	800b9d0 <mg_ws_cb+0x260>
 800b978:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d127      	bne.n	800b9d0 <mg_ws_cb+0x260>
        m.flags = c->recv.buf[0];
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b984:	781b      	ldrb	r3, [r3, #0]
 800b986:	f887 3020 	strb.w	r3, [r7, #32]
        m.data = mg_str_n((char *) &c->recv.buf[1], (size_t) (ofs - 1));
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b98e:	1c59      	adds	r1, r3, #1
 800b990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b992:	1e5a      	subs	r2, r3, #1
 800b994:	463b      	mov	r3, r7
 800b996:	4618      	mov	r0, r3
 800b998:	f7fe fc9d 	bl	800a2d6 <mg_str_n>
 800b99c:	f107 0318 	add.w	r3, r7, #24
 800b9a0:	463a      	mov	r2, r7
 800b9a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b9a6:	e883 0003 	stmia.w	r3, {r0, r1}
        mg_call(c, MG_EV_WS_MSG, &m);
 800b9aa:	f107 0318 	add.w	r3, r7, #24
 800b9ae:	461a      	mov	r2, r3
 800b9b0:	210d      	movs	r1, #13
 800b9b2:	6978      	ldr	r0, [r7, #20]
 800b9b4:	f7f6 fc64 	bl	8002280 <mg_call>
        mg_iobuf_del(&c->recv, 0, ofs);
 800b9b8:	697b      	ldr	r3, [r7, #20]
 800b9ba:	3348      	adds	r3, #72	; 0x48
 800b9bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b9be:	2100      	movs	r1, #0
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f7fa fd53 	bl	800646c <mg_iobuf_del>
        ofs = 0;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        c->pfn_data = NULL;
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	675a      	str	r2, [r3, #116]	; 0x74
    while (ws_process(c->recv.buf + ofs, c->recv.len - ofs, &msg) > 0) {
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b9d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9d6:	18d0      	adds	r0, r2, r3
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b9dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9de:	1ad3      	subs	r3, r2, r3
 800b9e0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800b9e4:	4619      	mov	r1, r3
 800b9e6:	f7ff fc9d 	bl	800b324 <ws_process>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	f47f aee7 	bne.w	800b7c0 <mg_ws_cb+0x50>
 800b9f2:	e000      	b.n	800b9f6 <mg_ws_cb+0x286>
    if (c->is_client && !c->is_websocket && mg_ws_client_handshake(c)) return;
 800b9f4:	bf00      	nop
      }
    }
  }
  (void) fn_data;
  (void) ev_data;
}
 800b9f6:	3740      	adds	r7, #64	; 0x40
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}
 800b9fc:	0801575c 	.word	0x0801575c
 800ba00:	08013b30 	.word	0x08013b30
 800ba04:	08014f20 	.word	0x08014f20
 800ba08:	08013c4c 	.word	0x08013c4c
 800ba0c:	08014f28 	.word	0x08014f28
 800ba10:	08014f38 	.word	0x08014f38

0800ba14 <mg_ws_upgrade>:
  }
  return c;
}

void mg_ws_upgrade(struct mg_connection *c, struct mg_http_message *hm,
                   const char *fmt, ...) {
 800ba14:	b40c      	push	{r2, r3}
 800ba16:	b580      	push	{r7, lr}
 800ba18:	b088      	sub	sp, #32
 800ba1a:	af02      	add	r7, sp, #8
 800ba1c:	6078      	str	r0, [r7, #4]
 800ba1e:	6039      	str	r1, [r7, #0]
  struct mg_str *wskey = mg_http_get_header(hm, "Sec-WebSocket-Key");
 800ba20:	4923      	ldr	r1, [pc, #140]	; (800bab0 <mg_ws_upgrade+0x9c>)
 800ba22:	6838      	ldr	r0, [r7, #0]
 800ba24:	f7f8 fbac 	bl	8004180 <mg_http_get_header>
 800ba28:	6178      	str	r0, [r7, #20]
  c->pfn = mg_ws_cb;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	4a21      	ldr	r2, [pc, #132]	; (800bab4 <mg_ws_upgrade+0xa0>)
 800ba2e:	671a      	str	r2, [r3, #112]	; 0x70
  c->pfn_data = NULL;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2200      	movs	r2, #0
 800ba34:	675a      	str	r2, [r3, #116]	; 0x74
  if (wskey == NULL) {
 800ba36:	697b      	ldr	r3, [r7, #20]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d10e      	bne.n	800ba5a <mg_ws_upgrade+0x46>
    mg_http_reply(c, 426, "", "WS upgrade expected\n");
 800ba3c:	4b1e      	ldr	r3, [pc, #120]	; (800bab8 <mg_ws_upgrade+0xa4>)
 800ba3e:	4a1f      	ldr	r2, [pc, #124]	; (800babc <mg_ws_upgrade+0xa8>)
 800ba40:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f7f8 fe0f 	bl	8004668 <mg_http_reply>
    c->is_draining = 1;
 800ba4a:	687a      	ldr	r2, [r7, #4]
 800ba4c:	f892 30b1 	ldrb.w	r3, [r2, #177]	; 0xb1
 800ba50:	f043 0308 	orr.w	r3, r3, #8
 800ba54:	f882 30b1 	strb.w	r3, [r2, #177]	; 0xb1
    va_end(ap);
    c->is_websocket = 1;
    c->is_resp = 0;
    mg_call(c, MG_EV_WS_OPEN, hm);
  }
}
 800ba58:	e023      	b.n	800baa2 <mg_ws_upgrade+0x8e>
    struct mg_str *wsproto = mg_http_get_header(hm, "Sec-WebSocket-Protocol");
 800ba5a:	4919      	ldr	r1, [pc, #100]	; (800bac0 <mg_ws_upgrade+0xac>)
 800ba5c:	6838      	ldr	r0, [r7, #0]
 800ba5e:	f7f8 fb8f 	bl	8004180 <mg_http_get_header>
 800ba62:	6138      	str	r0, [r7, #16]
    va_start(ap, fmt);
 800ba64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba68:	60fb      	str	r3, [r7, #12]
    ws_handshake(c, wskey, wsproto, fmt, &ap);
 800ba6a:	f107 030c 	add.w	r3, r7, #12
 800ba6e:	9300      	str	r3, [sp, #0]
 800ba70:	6a3b      	ldr	r3, [r7, #32]
 800ba72:	693a      	ldr	r2, [r7, #16]
 800ba74:	6979      	ldr	r1, [r7, #20]
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f7ff fbd4 	bl	800b224 <ws_handshake>
    c->is_websocket = 1;
 800ba7c:	687a      	ldr	r2, [r7, #4]
 800ba7e:	f892 30b1 	ldrb.w	r3, [r2, #177]	; 0xb1
 800ba82:	f043 0301 	orr.w	r3, r3, #1
 800ba86:	f882 30b1 	strb.w	r3, [r2, #177]	; 0xb1
    c->is_resp = 0;
 800ba8a:	687a      	ldr	r2, [r7, #4]
 800ba8c:	f892 30b1 	ldrb.w	r3, [r2, #177]	; 0xb1
 800ba90:	f36f 1386 	bfc	r3, #6, #1
 800ba94:	f882 30b1 	strb.w	r3, [r2, #177]	; 0xb1
    mg_call(c, MG_EV_WS_OPEN, hm);
 800ba98:	683a      	ldr	r2, [r7, #0]
 800ba9a:	210c      	movs	r1, #12
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f7f6 fbef 	bl	8002280 <mg_call>
}
 800baa2:	bf00      	nop
 800baa4:	3718      	adds	r7, #24
 800baa6:	46bd      	mov	sp, r7
 800baa8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800baac:	b002      	add	sp, #8
 800baae:	4770      	bx	lr
 800bab0:	08014fc8 	.word	0x08014fc8
 800bab4:	0800b771 	.word	0x0800b771
 800bab8:	08014fdc 	.word	0x08014fdc
 800babc:	08013e70 	.word	0x08013e70
 800bac0:	08014ff4 	.word	0x08014ff4

0800bac4 <mg_ws_wrap>:

size_t mg_ws_wrap(struct mg_connection *c, size_t len, int op) {
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b08a      	sub	sp, #40	; 0x28
 800bac8:	af00      	add	r7, sp, #0
 800baca:	60f8      	str	r0, [r7, #12]
 800bacc:	60b9      	str	r1, [r7, #8]
 800bace:	607a      	str	r2, [r7, #4]
  uint8_t header[14], *p;
  size_t header_len = mkhdr(len, op, c->is_client, header);
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800bad6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800bada:	b2db      	uxtb	r3, r3
 800badc:	2b00      	cmp	r3, #0
 800bade:	bf14      	ite	ne
 800bae0:	2301      	movne	r3, #1
 800bae2:	2300      	moveq	r3, #0
 800bae4:	b2da      	uxtb	r2, r3
 800bae6:	f107 0310 	add.w	r3, r7, #16
 800baea:	6879      	ldr	r1, [r7, #4]
 800baec:	68b8      	ldr	r0, [r7, #8]
 800baee:	f7ff fcc1 	bl	800b474 <mkhdr>
 800baf2:	6278      	str	r0, [r7, #36]	; 0x24

  // NOTE: order of operations is important!
  mg_iobuf_add(&c->send, c->send.len, NULL, header_len);
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800bafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb00:	2200      	movs	r2, #0
 800bb02:	f7fa fc61 	bl	80063c8 <mg_iobuf_add>
  p = &c->send.buf[c->send.len - len];         // p points to data
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	1acb      	subs	r3, r1, r3
 800bb12:	4413      	add	r3, r2
 800bb14:	623b      	str	r3, [r7, #32]
  memmove(p, p - header_len, len);             // Shift data
 800bb16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb18:	425b      	negs	r3, r3
 800bb1a:	6a3a      	ldr	r2, [r7, #32]
 800bb1c:	4413      	add	r3, r2
 800bb1e:	68ba      	ldr	r2, [r7, #8]
 800bb20:	4619      	mov	r1, r3
 800bb22:	6a38      	ldr	r0, [r7, #32]
 800bb24:	f006 fe16 	bl	8012754 <memmove>
  memcpy(p - header_len, header, header_len);  // Prepend header
 800bb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb2a:	425b      	negs	r3, r3
 800bb2c:	6a3a      	ldr	r2, [r7, #32]
 800bb2e:	4413      	add	r3, r2
 800bb30:	f107 0110 	add.w	r1, r7, #16
 800bb34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb36:	4618      	mov	r0, r3
 800bb38:	f006 fdfe 	bl	8012738 <memcpy>
  mg_ws_mask(c, len);                          // Mask data
 800bb3c:	68b9      	ldr	r1, [r7, #8]
 800bb3e:	68f8      	ldr	r0, [r7, #12]
 800bb40:	f7ff fd09 	bl	800b556 <mg_ws_mask>

  return c->send.len;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	3728      	adds	r7, #40	; 0x28
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}

0800bb50 <spin>:
static uint8_t s_txbuf[ETH_DESC_CNT][ETH_PKT_SIZE];  // TX ethernet buffers
static void (*s_rx)(void *, size_t, void *);         // Recv callback
static void *s_rxdata;                               // Recv callback data
enum { PHY_ADDR = 0, PHY_BCR = 0, PHY_BSR = 1 };     // PHY constants

static inline void spin(volatile uint32_t count) {
 800bb50:	b480      	push	{r7}
 800bb52:	b083      	sub	sp, #12
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
  while (count--) (void) 0;
 800bb58:	bf00      	nop
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	1e5a      	subs	r2, r3, #1
 800bb5e:	607a      	str	r2, [r7, #4]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d1fa      	bne.n	800bb5a <spin+0xa>
}
 800bb64:	bf00      	nop
 800bb66:	bf00      	nop
 800bb68:	370c      	adds	r7, #12
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb70:	4770      	bx	lr
	...

0800bb74 <eth_read_phy>:

static uint32_t eth_read_phy(uint8_t addr, uint8_t reg) {
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b082      	sub	sp, #8
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	460a      	mov	r2, r1
 800bb7e:	71fb      	strb	r3, [r7, #7]
 800bb80:	4613      	mov	r3, r2
 800bb82:	71bb      	strb	r3, [r7, #6]
  ETH->MACMIIAR &= (7 << 2);
 800bb84:	4b12      	ldr	r3, [pc, #72]	; (800bbd0 <eth_read_phy+0x5c>)
 800bb86:	691b      	ldr	r3, [r3, #16]
 800bb88:	4a11      	ldr	r2, [pc, #68]	; (800bbd0 <eth_read_phy+0x5c>)
 800bb8a:	f003 031c 	and.w	r3, r3, #28
 800bb8e:	6113      	str	r3, [r2, #16]
  ETH->MACMIIAR |= ((uint32_t) addr << 11) | ((uint32_t) reg << 6);
 800bb90:	4b0f      	ldr	r3, [pc, #60]	; (800bbd0 <eth_read_phy+0x5c>)
 800bb92:	691a      	ldr	r2, [r3, #16]
 800bb94:	79fb      	ldrb	r3, [r7, #7]
 800bb96:	02d9      	lsls	r1, r3, #11
 800bb98:	79bb      	ldrb	r3, [r7, #6]
 800bb9a:	019b      	lsls	r3, r3, #6
 800bb9c:	430b      	orrs	r3, r1
 800bb9e:	490c      	ldr	r1, [pc, #48]	; (800bbd0 <eth_read_phy+0x5c>)
 800bba0:	4313      	orrs	r3, r2
 800bba2:	610b      	str	r3, [r1, #16]
  ETH->MACMIIAR |= BIT(0);
 800bba4:	4b0a      	ldr	r3, [pc, #40]	; (800bbd0 <eth_read_phy+0x5c>)
 800bba6:	691b      	ldr	r3, [r3, #16]
 800bba8:	4a09      	ldr	r2, [pc, #36]	; (800bbd0 <eth_read_phy+0x5c>)
 800bbaa:	f043 0301 	orr.w	r3, r3, #1
 800bbae:	6113      	str	r3, [r2, #16]
  while (ETH->MACMIIAR & BIT(0)) spin(1);
 800bbb0:	e002      	b.n	800bbb8 <eth_read_phy+0x44>
 800bbb2:	2001      	movs	r0, #1
 800bbb4:	f7ff ffcc 	bl	800bb50 <spin>
 800bbb8:	4b05      	ldr	r3, [pc, #20]	; (800bbd0 <eth_read_phy+0x5c>)
 800bbba:	691b      	ldr	r3, [r3, #16]
 800bbbc:	f003 0301 	and.w	r3, r3, #1
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d1f6      	bne.n	800bbb2 <eth_read_phy+0x3e>
  return ETH->MACMIIDR;
 800bbc4:	4b02      	ldr	r3, [pc, #8]	; (800bbd0 <eth_read_phy+0x5c>)
 800bbc6:	695b      	ldr	r3, [r3, #20]
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	3708      	adds	r7, #8
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd80      	pop	{r7, pc}
 800bbd0:	40028000 	.word	0x40028000

0800bbd4 <eth_write_phy>:

static void eth_write_phy(uint8_t addr, uint8_t reg, uint32_t val) {
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b082      	sub	sp, #8
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	4603      	mov	r3, r0
 800bbdc:	603a      	str	r2, [r7, #0]
 800bbde:	71fb      	strb	r3, [r7, #7]
 800bbe0:	460b      	mov	r3, r1
 800bbe2:	71bb      	strb	r3, [r7, #6]
  ETH->MACMIIDR = val;
 800bbe4:	4a14      	ldr	r2, [pc, #80]	; (800bc38 <eth_write_phy+0x64>)
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	6153      	str	r3, [r2, #20]
  ETH->MACMIIAR &= (7 << 2);
 800bbea:	4b13      	ldr	r3, [pc, #76]	; (800bc38 <eth_write_phy+0x64>)
 800bbec:	691b      	ldr	r3, [r3, #16]
 800bbee:	4a12      	ldr	r2, [pc, #72]	; (800bc38 <eth_write_phy+0x64>)
 800bbf0:	f003 031c 	and.w	r3, r3, #28
 800bbf4:	6113      	str	r3, [r2, #16]
  ETH->MACMIIAR |= ((uint32_t) addr << 11) | ((uint32_t) reg << 6) | BIT(1);
 800bbf6:	4b10      	ldr	r3, [pc, #64]	; (800bc38 <eth_write_phy+0x64>)
 800bbf8:	691a      	ldr	r2, [r3, #16]
 800bbfa:	79fb      	ldrb	r3, [r7, #7]
 800bbfc:	02d9      	lsls	r1, r3, #11
 800bbfe:	79bb      	ldrb	r3, [r7, #6]
 800bc00:	019b      	lsls	r3, r3, #6
 800bc02:	430b      	orrs	r3, r1
 800bc04:	4313      	orrs	r3, r2
 800bc06:	4a0c      	ldr	r2, [pc, #48]	; (800bc38 <eth_write_phy+0x64>)
 800bc08:	f043 0302 	orr.w	r3, r3, #2
 800bc0c:	6113      	str	r3, [r2, #16]
  ETH->MACMIIAR |= BIT(0);
 800bc0e:	4b0a      	ldr	r3, [pc, #40]	; (800bc38 <eth_write_phy+0x64>)
 800bc10:	691b      	ldr	r3, [r3, #16]
 800bc12:	4a09      	ldr	r2, [pc, #36]	; (800bc38 <eth_write_phy+0x64>)
 800bc14:	f043 0301 	orr.w	r3, r3, #1
 800bc18:	6113      	str	r3, [r2, #16]
  while (ETH->MACMIIAR & BIT(0)) spin(1);
 800bc1a:	e002      	b.n	800bc22 <eth_write_phy+0x4e>
 800bc1c:	2001      	movs	r0, #1
 800bc1e:	f7ff ff97 	bl	800bb50 <spin>
 800bc22:	4b05      	ldr	r3, [pc, #20]	; (800bc38 <eth_write_phy+0x64>)
 800bc24:	691b      	ldr	r3, [r3, #16]
 800bc26:	f003 0301 	and.w	r3, r3, #1
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d1f6      	bne.n	800bc1c <eth_write_phy+0x48>
}
 800bc2e:	bf00      	nop
 800bc30:	bf00      	nop
 800bc32:	3708      	adds	r7, #8
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}
 800bc38:	40028000 	.word	0x40028000

0800bc3c <get_hclk>:

static uint32_t get_hclk(void) {
 800bc3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bc40:	b08d      	sub	sp, #52	; 0x34
 800bc42:	af00      	add	r7, sp, #0
  struct rcc {
    volatile uint32_t CR, PLLCFGR, CFGR;
  } *RCC = (struct rcc *) 0x40023800;
 800bc44:	4e3c      	ldr	r6, [pc, #240]	; (800bd38 <get_hclk+0xfc>)
 800bc46:	62be      	str	r6, [r7, #40]	; 0x28
  uint32_t clk = 0, hsi = 16000000 /* 16 MHz */, hse = 8000000 /* 8MHz */;
 800bc48:	2600      	movs	r6, #0
 800bc4a:	62fe      	str	r6, [r7, #44]	; 0x2c
 800bc4c:	4e3b      	ldr	r6, [pc, #236]	; (800bd3c <get_hclk+0x100>)
 800bc4e:	627e      	str	r6, [r7, #36]	; 0x24
 800bc50:	4e3b      	ldr	r6, [pc, #236]	; (800bd40 <get_hclk+0x104>)
 800bc52:	623e      	str	r6, [r7, #32]

  if (RCC->CFGR & (1 << 2)) {
 800bc54:	6abe      	ldr	r6, [r7, #40]	; 0x28
 800bc56:	68b6      	ldr	r6, [r6, #8]
 800bc58:	f006 0604 	and.w	r6, r6, #4
 800bc5c:	2e00      	cmp	r6, #0
 800bc5e:	d002      	beq.n	800bc66 <get_hclk+0x2a>
    clk = hse;
 800bc60:	6a3b      	ldr	r3, [r7, #32]
 800bc62:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc64:	e049      	b.n	800bcfa <get_hclk+0xbe>
  } else if (RCC->CFGR & (1 << 3)) {
 800bc66:	6abe      	ldr	r6, [r7, #40]	; 0x28
 800bc68:	68b6      	ldr	r6, [r6, #8]
 800bc6a:	f006 0608 	and.w	r6, r6, #8
 800bc6e:	2e00      	cmp	r6, #0
 800bc70:	d041      	beq.n	800bcf6 <get_hclk+0xba>
    uint32_t vco, m, n, p;
    m = (RCC->PLLCFGR & (0x3f << 0)) >> 0;
 800bc72:	6abe      	ldr	r6, [r7, #40]	; 0x28
 800bc74:	6876      	ldr	r6, [r6, #4]
 800bc76:	f006 063f 	and.w	r6, r6, #63	; 0x3f
 800bc7a:	61fe      	str	r6, [r7, #28]
    n = (RCC->PLLCFGR & (0x1ff << 6)) >> 6;
 800bc7c:	6abe      	ldr	r6, [r7, #40]	; 0x28
 800bc7e:	6876      	ldr	r6, [r6, #4]
 800bc80:	09b6      	lsrs	r6, r6, #6
 800bc82:	f3c6 0608 	ubfx	r6, r6, #0, #9
 800bc86:	61be      	str	r6, [r7, #24]
    p = (((RCC->PLLCFGR & (3 << 16)) >> 16) + 1) * 2;
 800bc88:	6abe      	ldr	r6, [r7, #40]	; 0x28
 800bc8a:	6876      	ldr	r6, [r6, #4]
 800bc8c:	0c36      	lsrs	r6, r6, #16
 800bc8e:	f006 0603 	and.w	r6, r6, #3
 800bc92:	3601      	adds	r6, #1
 800bc94:	0076      	lsls	r6, r6, #1
 800bc96:	617e      	str	r6, [r7, #20]
    clk = (RCC->PLLCFGR & (1 << 22)) ? hse : hsi;
 800bc98:	6abe      	ldr	r6, [r7, #40]	; 0x28
 800bc9a:	6876      	ldr	r6, [r6, #4]
 800bc9c:	f406 0680 	and.w	r6, r6, #4194304	; 0x400000
 800bca0:	2e00      	cmp	r6, #0
 800bca2:	d001      	beq.n	800bca8 <get_hclk+0x6c>
 800bca4:	6a3e      	ldr	r6, [r7, #32]
 800bca6:	e000      	b.n	800bcaa <get_hclk+0x6e>
 800bca8:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800bcaa:	62fe      	str	r6, [r7, #44]	; 0x2c
    vco = (uint32_t) ((uint64_t) clk * n / m);
 800bcac:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 800bcae:	f04f 0c00 	mov.w	ip, #0
 800bcb2:	4634      	mov	r4, r6
 800bcb4:	4665      	mov	r5, ip
 800bcb6:	69be      	ldr	r6, [r7, #24]
 800bcb8:	f04f 0c00 	mov.w	ip, #0
 800bcbc:	4632      	mov	r2, r6
 800bcbe:	4663      	mov	r3, ip
 800bcc0:	fb02 fc05 	mul.w	ip, r2, r5
 800bcc4:	fb04 f603 	mul.w	r6, r4, r3
 800bcc8:	4466      	add	r6, ip
 800bcca:	fba4 0102 	umull	r0, r1, r4, r2
 800bcce:	1873      	adds	r3, r6, r1
 800bcd0:	4619      	mov	r1, r3
 800bcd2:	69fb      	ldr	r3, [r7, #28]
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	4698      	mov	r8, r3
 800bcd8:	4691      	mov	r9, r2
 800bcda:	4642      	mov	r2, r8
 800bcdc:	464b      	mov	r3, r9
 800bcde:	f7f4 ffe7 	bl	8000cb0 <__aeabi_uldivmod>
 800bce2:	4602      	mov	r2, r0
 800bce4:	460b      	mov	r3, r1
 800bce6:	4613      	mov	r3, r2
 800bce8:	613b      	str	r3, [r7, #16]
    clk = vco / p;
 800bcea:	693a      	ldr	r2, [r7, #16]
 800bcec:	697b      	ldr	r3, [r7, #20]
 800bcee:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bcf4:	e001      	b.n	800bcfa <get_hclk+0xbe>
  } else {
    clk = hsi;
 800bcf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  uint32_t hpre = (RCC->CFGR & (15 << 4)) >> 4;
 800bcfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcfc:	689b      	ldr	r3, [r3, #8]
 800bcfe:	091b      	lsrs	r3, r3, #4
 800bd00:	f003 030f 	and.w	r3, r3, #15
 800bd04:	60fb      	str	r3, [r7, #12]
  if (hpre < 8) return clk;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	2b07      	cmp	r3, #7
 800bd0a:	d801      	bhi.n	800bd10 <get_hclk+0xd4>
 800bd0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd0e:	e00e      	b.n	800bd2e <get_hclk+0xf2>

  uint8_t ahbptab[8] = {1, 2, 3, 4, 6, 7, 8, 9};  // log2(div)
 800bd10:	4a0c      	ldr	r2, [pc, #48]	; (800bd44 <get_hclk+0x108>)
 800bd12:	1d3b      	adds	r3, r7, #4
 800bd14:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bd18:	e883 0003 	stmia.w	r3, {r0, r1}
  return ((uint32_t) clk) >> ahbptab[hpre - 8];
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	3b08      	subs	r3, #8
 800bd20:	3330      	adds	r3, #48	; 0x30
 800bd22:	443b      	add	r3, r7
 800bd24:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800bd28:	461a      	mov	r2, r3
 800bd2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd2c:	40d3      	lsrs	r3, r2
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3734      	adds	r7, #52	; 0x34
 800bd32:	46bd      	mov	sp, r7
 800bd34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd38:	40023800 	.word	0x40023800
 800bd3c:	00f42400 	.word	0x00f42400
 800bd40:	007a1200 	.word	0x007a1200
 800bd44:	0801500c 	.word	0x0801500c

0800bd48 <guess_mdc_cr>:
//  specify a range of frequencies and activate one of a series of dividers to
//  keep the MDC clock safely below 2.5MHz. We guess a divider setting based on
//  HCLK with a +5% drift. If the user uses a different clock from our
//  defaults, needs to set the macros on top Valid for STM32F74xxx/75xxx
//  (38.8.1) and STM32F42xxx/43xxx (33.8.1) (both 4.5% worst case drift)
static int guess_mdc_cr(void) {
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b088      	sub	sp, #32
 800bd4c:	af00      	add	r7, sp, #0
  uint8_t crs[] = {2, 3, 0, 1, 4, 5};          // ETH->MACMIIAR::CR values
 800bd4e:	4a33      	ldr	r2, [pc, #204]	; (800be1c <guess_mdc_cr+0xd4>)
 800bd50:	f107 030c 	add.w	r3, r7, #12
 800bd54:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bd58:	6018      	str	r0, [r3, #0]
 800bd5a:	3304      	adds	r3, #4
 800bd5c:	8019      	strh	r1, [r3, #0]
  uint8_t div[] = {16, 26, 42, 62, 102, 124};  // Respective HCLK dividers
 800bd5e:	4a30      	ldr	r2, [pc, #192]	; (800be20 <guess_mdc_cr+0xd8>)
 800bd60:	1d3b      	adds	r3, r7, #4
 800bd62:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bd66:	6018      	str	r0, [r3, #0]
 800bd68:	3304      	adds	r3, #4
 800bd6a:	8019      	strh	r1, [r3, #0]
  uint32_t hclk = get_hclk();                  // Guess system HCLK
 800bd6c:	f7ff ff66 	bl	800bc3c <get_hclk>
 800bd70:	6178      	str	r0, [r7, #20]
  int result = -1;                             // Invalid CR value
 800bd72:	f04f 33ff 	mov.w	r3, #4294967295
 800bd76:	61fb      	str	r3, [r7, #28]
  if (hclk < 25000000) {
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	4a2a      	ldr	r2, [pc, #168]	; (800be24 <guess_mdc_cr+0xdc>)
 800bd7c:	4293      	cmp	r3, r2
 800bd7e:	d80d      	bhi.n	800bd9c <guess_mdc_cr+0x54>
    MG_ERROR(("HCLK too low"));
 800bd80:	4b29      	ldr	r3, [pc, #164]	; (800be28 <guess_mdc_cr+0xe0>)
 800bd82:	f241 72bd 	movw	r2, #6077	; 0x17bd
 800bd86:	4929      	ldr	r1, [pc, #164]	; (800be2c <guess_mdc_cr+0xe4>)
 800bd88:	2001      	movs	r0, #1
 800bd8a:	f7fb f98b 	bl	80070a4 <mg_log_prefix>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d02e      	beq.n	800bdf2 <guess_mdc_cr+0xaa>
 800bd94:	4826      	ldr	r0, [pc, #152]	; (800be30 <guess_mdc_cr+0xe8>)
 800bd96:	f7fb f9df 	bl	8007158 <mg_log>
 800bd9a:	e02a      	b.n	800bdf2 <guess_mdc_cr+0xaa>
  } else {
    for (int i = 0; i < 6; i++) {
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	61bb      	str	r3, [r7, #24]
 800bda0:	e014      	b.n	800bdcc <guess_mdc_cr+0x84>
      if (hclk / div[i] <= 2375000UL /* 2.5MHz - 5% */) {
 800bda2:	1d3a      	adds	r2, r7, #4
 800bda4:	69bb      	ldr	r3, [r7, #24]
 800bda6:	4413      	add	r3, r2
 800bda8:	781b      	ldrb	r3, [r3, #0]
 800bdaa:	461a      	mov	r2, r3
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	fbb3 f3f2 	udiv	r3, r3, r2
 800bdb2:	4a20      	ldr	r2, [pc, #128]	; (800be34 <guess_mdc_cr+0xec>)
 800bdb4:	4293      	cmp	r3, r2
 800bdb6:	d806      	bhi.n	800bdc6 <guess_mdc_cr+0x7e>
        result = crs[i];
 800bdb8:	f107 020c 	add.w	r2, r7, #12
 800bdbc:	69bb      	ldr	r3, [r7, #24]
 800bdbe:	4413      	add	r3, r2
 800bdc0:	781b      	ldrb	r3, [r3, #0]
 800bdc2:	61fb      	str	r3, [r7, #28]
        break;
 800bdc4:	e005      	b.n	800bdd2 <guess_mdc_cr+0x8a>
    for (int i = 0; i < 6; i++) {
 800bdc6:	69bb      	ldr	r3, [r7, #24]
 800bdc8:	3301      	adds	r3, #1
 800bdca:	61bb      	str	r3, [r7, #24]
 800bdcc:	69bb      	ldr	r3, [r7, #24]
 800bdce:	2b05      	cmp	r3, #5
 800bdd0:	dde7      	ble.n	800bda2 <guess_mdc_cr+0x5a>
      }
    }
    if (result < 0) MG_ERROR(("HCLK too high"));
 800bdd2:	69fb      	ldr	r3, [r7, #28]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	da0c      	bge.n	800bdf2 <guess_mdc_cr+0xaa>
 800bdd8:	4b13      	ldr	r3, [pc, #76]	; (800be28 <guess_mdc_cr+0xe0>)
 800bdda:	f241 72c5 	movw	r2, #6085	; 0x17c5
 800bdde:	4913      	ldr	r1, [pc, #76]	; (800be2c <guess_mdc_cr+0xe4>)
 800bde0:	2001      	movs	r0, #1
 800bde2:	f7fb f95f 	bl	80070a4 <mg_log_prefix>
 800bde6:	4603      	mov	r3, r0
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d002      	beq.n	800bdf2 <guess_mdc_cr+0xaa>
 800bdec:	4812      	ldr	r0, [pc, #72]	; (800be38 <guess_mdc_cr+0xf0>)
 800bdee:	f7fb f9b3 	bl	8007158 <mg_log>
  }
  MG_DEBUG(("HCLK: %u, CR: %d", hclk, result));
 800bdf2:	4b0d      	ldr	r3, [pc, #52]	; (800be28 <guess_mdc_cr+0xe0>)
 800bdf4:	f241 72c7 	movw	r2, #6087	; 0x17c7
 800bdf8:	490c      	ldr	r1, [pc, #48]	; (800be2c <guess_mdc_cr+0xe4>)
 800bdfa:	2003      	movs	r0, #3
 800bdfc:	f7fb f952 	bl	80070a4 <mg_log_prefix>
 800be00:	4603      	mov	r3, r0
 800be02:	2b00      	cmp	r3, #0
 800be04:	d004      	beq.n	800be10 <guess_mdc_cr+0xc8>
 800be06:	69fa      	ldr	r2, [r7, #28]
 800be08:	6979      	ldr	r1, [r7, #20]
 800be0a:	480c      	ldr	r0, [pc, #48]	; (800be3c <guess_mdc_cr+0xf4>)
 800be0c:	f7fb f9a4 	bl	8007158 <mg_log>
  return result;
 800be10:	69fb      	ldr	r3, [r7, #28]
}
 800be12:	4618      	mov	r0, r3
 800be14:	3720      	adds	r7, #32
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}
 800be1a:	bf00      	nop
 800be1c:	08015048 	.word	0x08015048
 800be20:	08015050 	.word	0x08015050
 800be24:	017d783f 	.word	0x017d783f
 800be28:	08015768 	.word	0x08015768
 800be2c:	08013b30 	.word	0x08013b30
 800be30:	08015014 	.word	0x08015014
 800be34:	00243d58 	.word	0x00243d58
 800be38:	08015024 	.word	0x08015024
 800be3c:	08015034 	.word	0x08015034

0800be40 <mip_driver_stm32_init>:

static bool mip_driver_stm32_init(uint8_t *mac, void *userdata) {
 800be40:	b580      	push	{r7, lr}
 800be42:	b086      	sub	sp, #24
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
 800be48:	6039      	str	r1, [r7, #0]
  struct mip_driver_stm32 *d = (struct mip_driver_stm32 *) userdata;
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	60fb      	str	r3, [r7, #12]
  // Init RX descriptors
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 800be4e:	2300      	movs	r3, #0
 800be50:	617b      	str	r3, [r7, #20]
 800be52:	e032      	b.n	800beba <mip_driver_stm32_init+0x7a>
    s_rxdesc[i][0] = BIT(31);                            // Own
 800be54:	4a6f      	ldr	r2, [pc, #444]	; (800c014 <mip_driver_stm32_init+0x1d4>)
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	011b      	lsls	r3, r3, #4
 800be5a:	4413      	add	r3, r2
 800be5c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800be60:	601a      	str	r2, [r3, #0]
    s_rxdesc[i][1] = sizeof(s_rxbuf[i]) | BIT(14);       // 2nd address chained
 800be62:	4a6c      	ldr	r2, [pc, #432]	; (800c014 <mip_driver_stm32_init+0x1d4>)
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	011b      	lsls	r3, r3, #4
 800be68:	4413      	add	r3, r2
 800be6a:	3304      	adds	r3, #4
 800be6c:	f244 6204 	movw	r2, #17924	; 0x4604
 800be70:	601a      	str	r2, [r3, #0]
    s_rxdesc[i][2] = (uint32_t) (uintptr_t) s_rxbuf[i];  // Point to data buffer
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	f240 6204 	movw	r2, #1540	; 0x604
 800be78:	fb02 f303 	mul.w	r3, r2, r3
 800be7c:	4a66      	ldr	r2, [pc, #408]	; (800c018 <mip_driver_stm32_init+0x1d8>)
 800be7e:	4413      	add	r3, r2
 800be80:	4619      	mov	r1, r3
 800be82:	4a64      	ldr	r2, [pc, #400]	; (800c014 <mip_driver_stm32_init+0x1d4>)
 800be84:	697b      	ldr	r3, [r7, #20]
 800be86:	011b      	lsls	r3, r3, #4
 800be88:	4413      	add	r3, r2
 800be8a:	3308      	adds	r3, #8
 800be8c:	6019      	str	r1, [r3, #0]
    s_rxdesc[i][3] =
        (uint32_t) (uintptr_t) s_rxdesc[(i + 1) % ETH_DESC_CNT];  // Chain
 800be8e:	697b      	ldr	r3, [r7, #20]
 800be90:	3301      	adds	r3, #1
 800be92:	425a      	negs	r2, r3
 800be94:	f003 0303 	and.w	r3, r3, #3
 800be98:	f002 0203 	and.w	r2, r2, #3
 800be9c:	bf58      	it	pl
 800be9e:	4253      	negpl	r3, r2
 800bea0:	011b      	lsls	r3, r3, #4
 800bea2:	4a5c      	ldr	r2, [pc, #368]	; (800c014 <mip_driver_stm32_init+0x1d4>)
 800bea4:	4413      	add	r3, r2
 800bea6:	4619      	mov	r1, r3
    s_rxdesc[i][3] =
 800bea8:	4a5a      	ldr	r2, [pc, #360]	; (800c014 <mip_driver_stm32_init+0x1d4>)
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	011b      	lsls	r3, r3, #4
 800beae:	4413      	add	r3, r2
 800beb0:	330c      	adds	r3, #12
 800beb2:	6019      	str	r1, [r3, #0]
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	3301      	adds	r3, #1
 800beb8:	617b      	str	r3, [r7, #20]
 800beba:	697b      	ldr	r3, [r7, #20]
 800bebc:	2b03      	cmp	r3, #3
 800bebe:	ddc9      	ble.n	800be54 <mip_driver_stm32_init+0x14>
  }

  // Init TX descriptors
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 800bec0:	2300      	movs	r3, #0
 800bec2:	613b      	str	r3, [r7, #16]
 800bec4:	e023      	b.n	800bf0e <mip_driver_stm32_init+0xce>
    s_txdesc[i][2] = (uint32_t) (uintptr_t) s_txbuf[i];  // Buf pointer
 800bec6:	693b      	ldr	r3, [r7, #16]
 800bec8:	f240 6204 	movw	r2, #1540	; 0x604
 800becc:	fb02 f303 	mul.w	r3, r2, r3
 800bed0:	4a52      	ldr	r2, [pc, #328]	; (800c01c <mip_driver_stm32_init+0x1dc>)
 800bed2:	4413      	add	r3, r2
 800bed4:	4619      	mov	r1, r3
 800bed6:	4a52      	ldr	r2, [pc, #328]	; (800c020 <mip_driver_stm32_init+0x1e0>)
 800bed8:	693b      	ldr	r3, [r7, #16]
 800beda:	011b      	lsls	r3, r3, #4
 800bedc:	4413      	add	r3, r2
 800bede:	3308      	adds	r3, #8
 800bee0:	6019      	str	r1, [r3, #0]
    s_txdesc[i][3] =
        (uint32_t) (uintptr_t) s_txdesc[(i + 1) % ETH_DESC_CNT];  // Chain
 800bee2:	693b      	ldr	r3, [r7, #16]
 800bee4:	3301      	adds	r3, #1
 800bee6:	425a      	negs	r2, r3
 800bee8:	f003 0303 	and.w	r3, r3, #3
 800beec:	f002 0203 	and.w	r2, r2, #3
 800bef0:	bf58      	it	pl
 800bef2:	4253      	negpl	r3, r2
 800bef4:	011b      	lsls	r3, r3, #4
 800bef6:	4a4a      	ldr	r2, [pc, #296]	; (800c020 <mip_driver_stm32_init+0x1e0>)
 800bef8:	4413      	add	r3, r2
 800befa:	4619      	mov	r1, r3
    s_txdesc[i][3] =
 800befc:	4a48      	ldr	r2, [pc, #288]	; (800c020 <mip_driver_stm32_init+0x1e0>)
 800befe:	693b      	ldr	r3, [r7, #16]
 800bf00:	011b      	lsls	r3, r3, #4
 800bf02:	4413      	add	r3, r2
 800bf04:	330c      	adds	r3, #12
 800bf06:	6019      	str	r1, [r3, #0]
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 800bf08:	693b      	ldr	r3, [r7, #16]
 800bf0a:	3301      	adds	r3, #1
 800bf0c:	613b      	str	r3, [r7, #16]
 800bf0e:	693b      	ldr	r3, [r7, #16]
 800bf10:	2b03      	cmp	r3, #3
 800bf12:	ddd8      	ble.n	800bec6 <mip_driver_stm32_init+0x86>
  }

  ETH->DMABMR |= BIT(0);                        // Software reset
 800bf14:	4b43      	ldr	r3, [pc, #268]	; (800c024 <mip_driver_stm32_init+0x1e4>)
 800bf16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	4a41      	ldr	r2, [pc, #260]	; (800c024 <mip_driver_stm32_init+0x1e4>)
 800bf1e:	f043 0301 	orr.w	r3, r3, #1
 800bf22:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bf26:	6013      	str	r3, [r2, #0]
  while ((ETH->DMABMR & BIT(0)) != 0) spin(1);  // Wait until done
 800bf28:	e002      	b.n	800bf30 <mip_driver_stm32_init+0xf0>
 800bf2a:	2001      	movs	r0, #1
 800bf2c:	f7ff fe10 	bl	800bb50 <spin>
 800bf30:	4b3c      	ldr	r3, [pc, #240]	; (800c024 <mip_driver_stm32_init+0x1e4>)
 800bf32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	f003 0301 	and.w	r3, r3, #1
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d1f4      	bne.n	800bf2a <mip_driver_stm32_init+0xea>

  // Set MDC clock divider. If user told us the value, use it. Otherwise, guess
  int cr = (d == NULL || d->mdc_cr < 0) ? guess_mdc_cr() : d->mdc_cr;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d003      	beq.n	800bf4e <mip_driver_stm32_init+0x10e>
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	da03      	bge.n	800bf56 <mip_driver_stm32_init+0x116>
 800bf4e:	f7ff fefb 	bl	800bd48 <guess_mdc_cr>
 800bf52:	4603      	mov	r3, r0
 800bf54:	e001      	b.n	800bf5a <mip_driver_stm32_init+0x11a>
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	60bb      	str	r3, [r7, #8]
  ETH->MACMIIAR = ((uint32_t)cr & 7) << 2;
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	009b      	lsls	r3, r3, #2
 800bf60:	4a30      	ldr	r2, [pc, #192]	; (800c024 <mip_driver_stm32_init+0x1e4>)
 800bf62:	f003 031c 	and.w	r3, r3, #28
 800bf66:	6113      	str	r3, [r2, #16]

  // NOTE(cpq): we do not use extended descriptor bit 7, and do not use
  // hardware checksum. Therefore, descriptor size is 4, not 8
  // ETH->DMABMR = BIT(13) | BIT(16) | BIT(22) | BIT(23) | BIT(25);
  ETH->MACIMR = BIT(3) | BIT(9);                    // Mask timestamp & PMT IT
 800bf68:	4b2e      	ldr	r3, [pc, #184]	; (800c024 <mip_driver_stm32_init+0x1e4>)
 800bf6a:	f44f 7202 	mov.w	r2, #520	; 0x208
 800bf6e:	63da      	str	r2, [r3, #60]	; 0x3c
  ETH->MACFCR = BIT(7);                             // Disable zero quarta pause
 800bf70:	4b2c      	ldr	r3, [pc, #176]	; (800c024 <mip_driver_stm32_init+0x1e4>)
 800bf72:	2280      	movs	r2, #128	; 0x80
 800bf74:	619a      	str	r2, [r3, #24]
  ETH->MACFFR = BIT(31);                            // Receive all
 800bf76:	4b2b      	ldr	r3, [pc, #172]	; (800c024 <mip_driver_stm32_init+0x1e4>)
 800bf78:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bf7c:	605a      	str	r2, [r3, #4]
  eth_write_phy(PHY_ADDR, PHY_BCR, BIT(15));        // Reset PHY
 800bf7e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800bf82:	2100      	movs	r1, #0
 800bf84:	2000      	movs	r0, #0
 800bf86:	f7ff fe25 	bl	800bbd4 <eth_write_phy>
  eth_write_phy(PHY_ADDR, PHY_BCR, BIT(12));        // Set autonegotiation
 800bf8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800bf8e:	2100      	movs	r1, #0
 800bf90:	2000      	movs	r0, #0
 800bf92:	f7ff fe1f 	bl	800bbd4 <eth_write_phy>
  ETH->DMARDLAR = (uint32_t) (uintptr_t) s_rxdesc;  // RX descriptors
 800bf96:	4a23      	ldr	r2, [pc, #140]	; (800c024 <mip_driver_stm32_init+0x1e4>)
 800bf98:	4b1e      	ldr	r3, [pc, #120]	; (800c014 <mip_driver_stm32_init+0x1d4>)
 800bf9a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bf9e:	60d3      	str	r3, [r2, #12]
  ETH->DMATDLAR = (uint32_t) (uintptr_t) s_txdesc;  // RX descriptors
 800bfa0:	4a20      	ldr	r2, [pc, #128]	; (800c024 <mip_driver_stm32_init+0x1e4>)
 800bfa2:	4b1f      	ldr	r3, [pc, #124]	; (800c020 <mip_driver_stm32_init+0x1e0>)
 800bfa4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bfa8:	6113      	str	r3, [r2, #16]
  ETH->DMAIER = BIT(6) | BIT(16);                   // RIE, NISE
 800bfaa:	4b1e      	ldr	r3, [pc, #120]	; (800c024 <mip_driver_stm32_init+0x1e4>)
 800bfac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfb0:	461a      	mov	r2, r3
 800bfb2:	4b1d      	ldr	r3, [pc, #116]	; (800c028 <mip_driver_stm32_init+0x1e8>)
 800bfb4:	61d3      	str	r3, [r2, #28]
  ETH->MACCR = BIT(2) | BIT(3) | BIT(11) | BIT(14);    // RE, TE, Duplex, Fast
 800bfb6:	4b1b      	ldr	r3, [pc, #108]	; (800c024 <mip_driver_stm32_init+0x1e4>)
 800bfb8:	f644 020c 	movw	r2, #18444	; 0x480c
 800bfbc:	601a      	str	r2, [r3, #0]
  ETH->DMAOMR = BIT(1) | BIT(13) | BIT(21) | BIT(25);  // SR, ST, TSF, RSF
 800bfbe:	4b19      	ldr	r3, [pc, #100]	; (800c024 <mip_driver_stm32_init+0x1e4>)
 800bfc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfc4:	461a      	mov	r2, r3
 800bfc6:	4b19      	ldr	r3, [pc, #100]	; (800c02c <mip_driver_stm32_init+0x1ec>)
 800bfc8:	6193      	str	r3, [r2, #24]

  // MAC address filtering
  ETH->MACA0HR = ((uint32_t) mac[5] << 8U) | mac[4];
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	3305      	adds	r3, #5
 800bfce:	781b      	ldrb	r3, [r3, #0]
 800bfd0:	021b      	lsls	r3, r3, #8
 800bfd2:	687a      	ldr	r2, [r7, #4]
 800bfd4:	3204      	adds	r2, #4
 800bfd6:	7812      	ldrb	r2, [r2, #0]
 800bfd8:	4611      	mov	r1, r2
 800bfda:	4a12      	ldr	r2, [pc, #72]	; (800c024 <mip_driver_stm32_init+0x1e4>)
 800bfdc:	430b      	orrs	r3, r1
 800bfde:	6413      	str	r3, [r2, #64]	; 0x40
  ETH->MACA0LR = (uint32_t) (mac[3] << 24) | ((uint32_t) mac[2] << 16) |
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	3303      	adds	r3, #3
 800bfe4:	781b      	ldrb	r3, [r3, #0]
 800bfe6:	061b      	lsls	r3, r3, #24
 800bfe8:	461a      	mov	r2, r3
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	3302      	adds	r3, #2
 800bfee:	781b      	ldrb	r3, [r3, #0]
 800bff0:	041b      	lsls	r3, r3, #16
 800bff2:	431a      	orrs	r2, r3
                 ((uint32_t) mac[1] << 8) | mac[0];
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	3301      	adds	r3, #1
 800bff8:	781b      	ldrb	r3, [r3, #0]
 800bffa:	021b      	lsls	r3, r3, #8
  ETH->MACA0LR = (uint32_t) (mac[3] << 24) | ((uint32_t) mac[2] << 16) |
 800bffc:	4313      	orrs	r3, r2
                 ((uint32_t) mac[1] << 8) | mac[0];
 800bffe:	687a      	ldr	r2, [r7, #4]
 800c000:	7812      	ldrb	r2, [r2, #0]
 800c002:	4611      	mov	r1, r2
  ETH->MACA0LR = (uint32_t) (mac[3] << 24) | ((uint32_t) mac[2] << 16) |
 800c004:	4a07      	ldr	r2, [pc, #28]	; (800c024 <mip_driver_stm32_init+0x1e4>)
                 ((uint32_t) mac[1] << 8) | mac[0];
 800c006:	430b      	orrs	r3, r1
  ETH->MACA0LR = (uint32_t) (mac[3] << 24) | ((uint32_t) mac[2] << 16) |
 800c008:	6453      	str	r3, [r2, #68]	; 0x44
  return true;
 800c00a:	2301      	movs	r3, #1
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	3718      	adds	r7, #24
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}
 800c014:	200005d0 	.word	0x200005d0
 800c018:	20000650 	.word	0x20000650
 800c01c:	20001e60 	.word	0x20001e60
 800c020:	20000610 	.word	0x20000610
 800c024:	40028000 	.word	0x40028000
 800c028:	00010040 	.word	0x00010040
 800c02c:	02202002 	.word	0x02202002

0800c030 <mip_driver_stm32_setrx>:

static void mip_driver_stm32_setrx(void (*rx)(void *, size_t, void *),
                                   void *rxdata) {
 800c030:	b480      	push	{r7}
 800c032:	b083      	sub	sp, #12
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
 800c038:	6039      	str	r1, [r7, #0]
  s_rx = rx;
 800c03a:	4a06      	ldr	r2, [pc, #24]	; (800c054 <mip_driver_stm32_setrx+0x24>)
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	6013      	str	r3, [r2, #0]
  s_rxdata = rxdata;
 800c040:	4a05      	ldr	r2, [pc, #20]	; (800c058 <mip_driver_stm32_setrx+0x28>)
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	6013      	str	r3, [r2, #0]
}
 800c046:	bf00      	nop
 800c048:	370c      	adds	r7, #12
 800c04a:	46bd      	mov	sp, r7
 800c04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c050:	4770      	bx	lr
 800c052:	bf00      	nop
 800c054:	20003670 	.word	0x20003670
 800c058:	20003674 	.word	0x20003674

0800c05c <mip_driver_stm32_tx>:

static uint32_t s_txno;
static size_t mip_driver_stm32_tx(const void *buf, size_t len, void *userdata) {
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b086      	sub	sp, #24
 800c060:	af00      	add	r7, sp, #0
 800c062:	60f8      	str	r0, [r7, #12]
 800c064:	60b9      	str	r1, [r7, #8]
 800c066:	607a      	str	r2, [r7, #4]
  if (len > sizeof(s_txbuf[s_txno])) {
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	f240 6204 	movw	r2, #1540	; 0x604
 800c06e:	4293      	cmp	r3, r2
 800c070:	d908      	bls.n	800c084 <mip_driver_stm32_tx+0x28>
    printf("%s: frame too big, %ld\n", __func__, (long) len);
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	461a      	mov	r2, r3
 800c076:	4941      	ldr	r1, [pc, #260]	; (800c17c <mip_driver_stm32_tx+0x120>)
 800c078:	4841      	ldr	r0, [pc, #260]	; (800c180 <mip_driver_stm32_tx+0x124>)
 800c07a:	f006 fc83 	bl	8012984 <iprintf>
    len = 0;  // Frame is too big
 800c07e:	2300      	movs	r3, #0
 800c080:	60bb      	str	r3, [r7, #8]
 800c082:	e044      	b.n	800c10e <mip_driver_stm32_tx+0xb2>
  } else if ((s_txdesc[s_txno][0] & BIT(31))) {
 800c084:	4b3f      	ldr	r3, [pc, #252]	; (800c184 <mip_driver_stm32_tx+0x128>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	4a3f      	ldr	r2, [pc, #252]	; (800c188 <mip_driver_stm32_tx+0x12c>)
 800c08a:	011b      	lsls	r3, r3, #4
 800c08c:	4413      	add	r3, r2
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	2b00      	cmp	r3, #0
 800c092:	da06      	bge.n	800c0a2 <mip_driver_stm32_tx+0x46>
    printf("%s: no free descr\n", __func__);
 800c094:	4939      	ldr	r1, [pc, #228]	; (800c17c <mip_driver_stm32_tx+0x120>)
 800c096:	483d      	ldr	r0, [pc, #244]	; (800c18c <mip_driver_stm32_tx+0x130>)
 800c098:	f006 fc74 	bl	8012984 <iprintf>
    len = 0;  // All descriptors are busy, fail
 800c09c:	2300      	movs	r3, #0
 800c09e:	60bb      	str	r3, [r7, #8]
 800c0a0:	e035      	b.n	800c10e <mip_driver_stm32_tx+0xb2>
  } else {
    memcpy(s_txbuf[s_txno], buf, len);     // Copy data
 800c0a2:	4b38      	ldr	r3, [pc, #224]	; (800c184 <mip_driver_stm32_tx+0x128>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	f240 6204 	movw	r2, #1540	; 0x604
 800c0aa:	fb02 f303 	mul.w	r3, r2, r3
 800c0ae:	4a38      	ldr	r2, [pc, #224]	; (800c190 <mip_driver_stm32_tx+0x134>)
 800c0b0:	4413      	add	r3, r2
 800c0b2:	68ba      	ldr	r2, [r7, #8]
 800c0b4:	68f9      	ldr	r1, [r7, #12]
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f006 fb3e 	bl	8012738 <memcpy>
    s_txdesc[s_txno][1] = (uint32_t) len;  // Set data len
 800c0bc:	4b31      	ldr	r3, [pc, #196]	; (800c184 <mip_driver_stm32_tx+0x128>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	4a31      	ldr	r2, [pc, #196]	; (800c188 <mip_driver_stm32_tx+0x12c>)
 800c0c2:	011b      	lsls	r3, r3, #4
 800c0c4:	4413      	add	r3, r2
 800c0c6:	3304      	adds	r3, #4
 800c0c8:	68ba      	ldr	r2, [r7, #8]
 800c0ca:	601a      	str	r2, [r3, #0]
    s_txdesc[s_txno][0] = BIT(20) | BIT(28) | BIT(29) | BIT(30);  // Chain,FS,LS
 800c0cc:	4b2d      	ldr	r3, [pc, #180]	; (800c184 <mip_driver_stm32_tx+0x128>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	4a2d      	ldr	r2, [pc, #180]	; (800c188 <mip_driver_stm32_tx+0x12c>)
 800c0d2:	011b      	lsls	r3, r3, #4
 800c0d4:	4413      	add	r3, r2
 800c0d6:	4a2f      	ldr	r2, [pc, #188]	; (800c194 <mip_driver_stm32_tx+0x138>)
 800c0d8:	601a      	str	r2, [r3, #0]
    s_txdesc[s_txno][0] |= BIT(31);  // Set OWN bit - let DMA take over
 800c0da:	4b2a      	ldr	r3, [pc, #168]	; (800c184 <mip_driver_stm32_tx+0x128>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	4a2a      	ldr	r2, [pc, #168]	; (800c188 <mip_driver_stm32_tx+0x12c>)
 800c0e0:	011b      	lsls	r3, r3, #4
 800c0e2:	4413      	add	r3, r2
 800c0e4:	681a      	ldr	r2, [r3, #0]
 800c0e6:	4b27      	ldr	r3, [pc, #156]	; (800c184 <mip_driver_stm32_tx+0x128>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800c0ee:	4926      	ldr	r1, [pc, #152]	; (800c188 <mip_driver_stm32_tx+0x12c>)
 800c0f0:	011b      	lsls	r3, r3, #4
 800c0f2:	440b      	add	r3, r1
 800c0f4:	601a      	str	r2, [r3, #0]
    if (++s_txno >= ETH_DESC_CNT) s_txno = 0;
 800c0f6:	4b23      	ldr	r3, [pc, #140]	; (800c184 <mip_driver_stm32_tx+0x128>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	3301      	adds	r3, #1
 800c0fc:	4a21      	ldr	r2, [pc, #132]	; (800c184 <mip_driver_stm32_tx+0x128>)
 800c0fe:	6013      	str	r3, [r2, #0]
 800c100:	4b20      	ldr	r3, [pc, #128]	; (800c184 <mip_driver_stm32_tx+0x128>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	2b03      	cmp	r3, #3
 800c106:	d902      	bls.n	800c10e <mip_driver_stm32_tx+0xb2>
 800c108:	4b1e      	ldr	r3, [pc, #120]	; (800c184 <mip_driver_stm32_tx+0x128>)
 800c10a:	2200      	movs	r2, #0
 800c10c:	601a      	str	r2, [r3, #0]
  }
  uint32_t sr = ETH->DMASR;
 800c10e:	4b22      	ldr	r3, [pc, #136]	; (800c198 <mip_driver_stm32_tx+0x13c>)
 800c110:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c114:	695b      	ldr	r3, [r3, #20]
 800c116:	617b      	str	r3, [r7, #20]
  if (sr & BIT(2)) ETH->DMASR = BIT(2), ETH->DMATPDR = 0;  // Resume
 800c118:	697b      	ldr	r3, [r7, #20]
 800c11a:	f003 0304 	and.w	r3, r3, #4
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d00b      	beq.n	800c13a <mip_driver_stm32_tx+0xde>
 800c122:	4b1d      	ldr	r3, [pc, #116]	; (800c198 <mip_driver_stm32_tx+0x13c>)
 800c124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c128:	461a      	mov	r2, r3
 800c12a:	2304      	movs	r3, #4
 800c12c:	6153      	str	r3, [r2, #20]
 800c12e:	4b1a      	ldr	r3, [pc, #104]	; (800c198 <mip_driver_stm32_tx+0x13c>)
 800c130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c134:	461a      	mov	r2, r3
 800c136:	2300      	movs	r3, #0
 800c138:	6053      	str	r3, [r2, #4]
  if (sr & BIT(5)) ETH->DMASR = BIT(5), ETH->DMATPDR = 0;  // if busy
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	f003 0320 	and.w	r3, r3, #32
 800c140:	2b00      	cmp	r3, #0
 800c142:	d00b      	beq.n	800c15c <mip_driver_stm32_tx+0x100>
 800c144:	4b14      	ldr	r3, [pc, #80]	; (800c198 <mip_driver_stm32_tx+0x13c>)
 800c146:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c14a:	461a      	mov	r2, r3
 800c14c:	2320      	movs	r3, #32
 800c14e:	6153      	str	r3, [r2, #20]
 800c150:	4b11      	ldr	r3, [pc, #68]	; (800c198 <mip_driver_stm32_tx+0x13c>)
 800c152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c156:	461a      	mov	r2, r3
 800c158:	2300      	movs	r3, #0
 800c15a:	6053      	str	r3, [r2, #4]
  if (len == 0) printf("E: D0 %lx SR %lx\n", (long) s_txdesc[0][0], (long) sr);
 800c15c:	68bb      	ldr	r3, [r7, #8]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d107      	bne.n	800c172 <mip_driver_stm32_tx+0x116>
 800c162:	4b09      	ldr	r3, [pc, #36]	; (800c188 <mip_driver_stm32_tx+0x12c>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	4619      	mov	r1, r3
 800c168:	697b      	ldr	r3, [r7, #20]
 800c16a:	461a      	mov	r2, r3
 800c16c:	480b      	ldr	r0, [pc, #44]	; (800c19c <mip_driver_stm32_tx+0x140>)
 800c16e:	f006 fc09 	bl	8012984 <iprintf>
  return len;
 800c172:	68bb      	ldr	r3, [r7, #8]
  (void) userdata;
}
 800c174:	4618      	mov	r0, r3
 800c176:	3718      	adds	r7, #24
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}
 800c17c:	08015778 	.word	0x08015778
 800c180:	08015058 	.word	0x08015058
 800c184:	20003678 	.word	0x20003678
 800c188:	20000610 	.word	0x20000610
 800c18c:	08015070 	.word	0x08015070
 800c190:	20001e60 	.word	0x20001e60
 800c194:	70100000 	.word	0x70100000
 800c198:	40028000 	.word	0x40028000
 800c19c:	08015084 	.word	0x08015084

0800c1a0 <mip_driver_stm32_up>:

static bool mip_driver_stm32_up(void *userdata) {
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b084      	sub	sp, #16
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
  uint32_t bsr = eth_read_phy(PHY_ADDR, PHY_BSR);
 800c1a8:	2101      	movs	r1, #1
 800c1aa:	2000      	movs	r0, #0
 800c1ac:	f7ff fce2 	bl	800bb74 <eth_read_phy>
 800c1b0:	60f8      	str	r0, [r7, #12]
  (void) userdata;
  return bsr & BIT(2) ? 1 : 0;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	089b      	lsrs	r3, r3, #2
 800c1b6:	f003 0301 	and.w	r3, r3, #1
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	bf14      	ite	ne
 800c1be:	2301      	movne	r3, #1
 800c1c0:	2300      	moveq	r3, #0
 800c1c2:	b2db      	uxtb	r3, r3
}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	3710      	adds	r7, #16
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}

0800c1cc <ETH_IRQHandler>:

void ETH_IRQHandler(void);
void ETH_IRQHandler(void) {
 800c1cc:	b590      	push	{r4, r7, lr}
 800c1ce:	b085      	sub	sp, #20
 800c1d0:	af00      	add	r7, sp, #0
  qp_mark(QP_IRQTRIGGERED, 0);
  volatile uint32_t sr = ETH->DMASR;
 800c1d2:	4b2d      	ldr	r3, [pc, #180]	; (800c288 <ETH_IRQHandler+0xbc>)
 800c1d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1d8:	695b      	ldr	r3, [r3, #20]
 800c1da:	607b      	str	r3, [r7, #4]
  if (sr & BIT(6)) {  // Frame received, loop
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d039      	beq.n	800c25a <ETH_IRQHandler+0x8e>
    for (uint32_t i = 0; i < ETH_DESC_CNT; i++) {
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	60fb      	str	r3, [r7, #12]
 800c1ea:	e033      	b.n	800c254 <ETH_IRQHandler+0x88>
      if (s_rxdesc[i][0] & BIT(31)) continue;
 800c1ec:	4a27      	ldr	r2, [pc, #156]	; (800c28c <ETH_IRQHandler+0xc0>)
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	011b      	lsls	r3, r3, #4
 800c1f2:	4413      	add	r3, r2
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	db28      	blt.n	800c24c <ETH_IRQHandler+0x80>
      uint32_t len = ((s_rxdesc[i][0] >> 16) & (BIT(14) - 1));
 800c1fa:	4a24      	ldr	r2, [pc, #144]	; (800c28c <ETH_IRQHandler+0xc0>)
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	011b      	lsls	r3, r3, #4
 800c200:	4413      	add	r3, r2
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	0c1b      	lsrs	r3, r3, #16
 800c206:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c20a:	60bb      	str	r3, [r7, #8]
      //    printf("%lx %lu %lx %lx\n", i, len, s_rxdesc[i][0], sr);
      if (s_rx != NULL) s_rx(s_rxbuf[i], len > 4 ? len - 4 : len, s_rxdata);
 800c20c:	4b20      	ldr	r3, [pc, #128]	; (800c290 <ETH_IRQHandler+0xc4>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d013      	beq.n	800c23c <ETH_IRQHandler+0x70>
 800c214:	4b1e      	ldr	r3, [pc, #120]	; (800c290 <ETH_IRQHandler+0xc4>)
 800c216:	681c      	ldr	r4, [r3, #0]
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	f240 6204 	movw	r2, #1540	; 0x604
 800c21e:	fb02 f303 	mul.w	r3, r2, r3
 800c222:	4a1c      	ldr	r2, [pc, #112]	; (800c294 <ETH_IRQHandler+0xc8>)
 800c224:	1898      	adds	r0, r3, r2
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	2b04      	cmp	r3, #4
 800c22a:	d902      	bls.n	800c232 <ETH_IRQHandler+0x66>
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	3b04      	subs	r3, #4
 800c230:	e000      	b.n	800c234 <ETH_IRQHandler+0x68>
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	4a18      	ldr	r2, [pc, #96]	; (800c298 <ETH_IRQHandler+0xcc>)
 800c236:	6812      	ldr	r2, [r2, #0]
 800c238:	4619      	mov	r1, r3
 800c23a:	47a0      	blx	r4
      s_rxdesc[i][0] = BIT(31);
 800c23c:	4a13      	ldr	r2, [pc, #76]	; (800c28c <ETH_IRQHandler+0xc0>)
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	011b      	lsls	r3, r3, #4
 800c242:	4413      	add	r3, r2
 800c244:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c248:	601a      	str	r2, [r3, #0]
 800c24a:	e000      	b.n	800c24e <ETH_IRQHandler+0x82>
      if (s_rxdesc[i][0] & BIT(31)) continue;
 800c24c:	bf00      	nop
    for (uint32_t i = 0; i < ETH_DESC_CNT; i++) {
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	3301      	adds	r3, #1
 800c252:	60fb      	str	r3, [r7, #12]
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	2b03      	cmp	r3, #3
 800c258:	d9c8      	bls.n	800c1ec <ETH_IRQHandler+0x20>
    }
  }
  if (sr & BIT(7)) ETH->DMARPDR = 0;     // Resume RX
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c260:	2b00      	cmp	r3, #0
 800c262:	d005      	beq.n	800c270 <ETH_IRQHandler+0xa4>
 800c264:	4b08      	ldr	r3, [pc, #32]	; (800c288 <ETH_IRQHandler+0xbc>)
 800c266:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c26a:	461a      	mov	r2, r3
 800c26c:	2300      	movs	r3, #0
 800c26e:	6093      	str	r3, [r2, #8]
  ETH->DMASR = sr & ~(BIT(2) | BIT(7));  // Clear status
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	4a05      	ldr	r2, [pc, #20]	; (800c288 <ETH_IRQHandler+0xbc>)
 800c274:	f023 0384 	bic.w	r3, r3, #132	; 0x84
 800c278:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c27c:	6153      	str	r3, [r2, #20]
}
 800c27e:	bf00      	nop
 800c280:	3714      	adds	r7, #20
 800c282:	46bd      	mov	sp, r7
 800c284:	bd90      	pop	{r4, r7, pc}
 800c286:	bf00      	nop
 800c288:	40028000 	.word	0x40028000
 800c28c:	200005d0 	.word	0x200005d0
 800c290:	20003670 	.word	0x20003670
 800c294:	20000650 	.word	0x20000650
 800c298:	20003674 	.word	0x20003674

0800c29c <q_copyin>:
  struct udp *udp;
  struct dhcp *dhcp;
};

static void q_copyin(struct queue *q, const uint8_t *buf, size_t len,
                     size_t head) {
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b086      	sub	sp, #24
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	60f8      	str	r0, [r7, #12]
 800c2a4:	60b9      	str	r1, [r7, #8]
 800c2a6:	607a      	str	r2, [r7, #4]
 800c2a8:	603b      	str	r3, [r7, #0]
  size_t left = q->len - head;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	685a      	ldr	r2, [r3, #4]
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	1ad3      	subs	r3, r2, r3
 800c2b2:	617b      	str	r3, [r7, #20]
  memcpy(&q->buf[head], buf, left < len ? left : len);
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	681a      	ldr	r2, [r3, #0]
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	18d0      	adds	r0, r2, r3
 800c2bc:	687a      	ldr	r2, [r7, #4]
 800c2be:	697b      	ldr	r3, [r7, #20]
 800c2c0:	4293      	cmp	r3, r2
 800c2c2:	bf28      	it	cs
 800c2c4:	4613      	movcs	r3, r2
 800c2c6:	461a      	mov	r2, r3
 800c2c8:	68b9      	ldr	r1, [r7, #8]
 800c2ca:	f006 fa35 	bl	8012738 <memcpy>
  if (left < len) memcpy(q->buf, &buf[left], len - left);
 800c2ce:	697a      	ldr	r2, [r7, #20]
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	d20a      	bcs.n	800c2ec <q_copyin+0x50>
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	6818      	ldr	r0, [r3, #0]
 800c2da:	68ba      	ldr	r2, [r7, #8]
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	18d1      	adds	r1, r2, r3
 800c2e0:	687a      	ldr	r2, [r7, #4]
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	1ad3      	subs	r3, r2, r3
 800c2e6:	461a      	mov	r2, r3
 800c2e8:	f006 fa26 	bl	8012738 <memcpy>
}
 800c2ec:	bf00      	nop
 800c2ee:	3718      	adds	r7, #24
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd80      	pop	{r7, pc}

0800c2f4 <q_copyout>:

static void q_copyout(struct queue *q, uint8_t *buf, size_t len, size_t tail) {
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b086      	sub	sp, #24
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	60f8      	str	r0, [r7, #12]
 800c2fc:	60b9      	str	r1, [r7, #8]
 800c2fe:	607a      	str	r2, [r7, #4]
 800c300:	603b      	str	r3, [r7, #0]
  size_t left = q->len - tail;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	685a      	ldr	r2, [r3, #4]
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	1ad3      	subs	r3, r2, r3
 800c30a:	617b      	str	r3, [r7, #20]
  memcpy(buf, &q->buf[tail], left < len ? left : len);
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	681a      	ldr	r2, [r3, #0]
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	18d1      	adds	r1, r2, r3
 800c314:	687a      	ldr	r2, [r7, #4]
 800c316:	697b      	ldr	r3, [r7, #20]
 800c318:	4293      	cmp	r3, r2
 800c31a:	bf28      	it	cs
 800c31c:	4613      	movcs	r3, r2
 800c31e:	461a      	mov	r2, r3
 800c320:	68b8      	ldr	r0, [r7, #8]
 800c322:	f006 fa09 	bl	8012738 <memcpy>
  if (left < len) memcpy(&buf[left], q->buf, len - left);
 800c326:	697a      	ldr	r2, [r7, #20]
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	429a      	cmp	r2, r3
 800c32c:	d20a      	bcs.n	800c344 <q_copyout+0x50>
 800c32e:	68ba      	ldr	r2, [r7, #8]
 800c330:	697b      	ldr	r3, [r7, #20]
 800c332:	18d0      	adds	r0, r2, r3
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	6819      	ldr	r1, [r3, #0]
 800c338:	687a      	ldr	r2, [r7, #4]
 800c33a:	697b      	ldr	r3, [r7, #20]
 800c33c:	1ad3      	subs	r3, r2, r3
 800c33e:	461a      	mov	r2, r3
 800c340:	f006 f9fa 	bl	8012738 <memcpy>
}
 800c344:	bf00      	nop
 800c346:	3718      	adds	r7, #24
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}

0800c34c <q_write>:

static bool q_write(struct queue *q, const void *buf, size_t len) {
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b086      	sub	sp, #24
 800c350:	af00      	add	r7, sp, #0
 800c352:	60f8      	str	r0, [r7, #12]
 800c354:	60b9      	str	r1, [r7, #8]
 800c356:	607a      	str	r2, [r7, #4]
  bool success = false;
 800c358:	2300      	movs	r3, #0
 800c35a:	75fb      	strb	r3, [r7, #23]
  size_t left = (q->len - q->head + q->tail - 1) % q->len;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	685a      	ldr	r2, [r3, #4]
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	68db      	ldr	r3, [r3, #12]
 800c364:	1ad2      	subs	r2, r2, r3
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	689b      	ldr	r3, [r3, #8]
 800c36a:	4413      	add	r3, r2
 800c36c:	3b01      	subs	r3, #1
 800c36e:	68fa      	ldr	r2, [r7, #12]
 800c370:	6852      	ldr	r2, [r2, #4]
 800c372:	fbb3 f1f2 	udiv	r1, r3, r2
 800c376:	fb01 f202 	mul.w	r2, r1, r2
 800c37a:	1a9b      	subs	r3, r3, r2
 800c37c:	613b      	str	r3, [r7, #16]
  if (len + sizeof(size_t) <= left) {
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	3304      	adds	r3, #4
 800c382:	693a      	ldr	r2, [r7, #16]
 800c384:	429a      	cmp	r2, r3
 800c386:	d326      	bcc.n	800c3d6 <q_write+0x8a>
    q_copyin(q, (uint8_t *) &len, sizeof(len), q->head);
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	68db      	ldr	r3, [r3, #12]
 800c38c:	1d39      	adds	r1, r7, #4
 800c38e:	2204      	movs	r2, #4
 800c390:	68f8      	ldr	r0, [r7, #12]
 800c392:	f7ff ff83 	bl	800c29c <q_copyin>
    q_copyin(q, (uint8_t *) buf, len, (q->head + sizeof(size_t)) % q->len);
 800c396:	6878      	ldr	r0, [r7, #4]
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	68db      	ldr	r3, [r3, #12]
 800c39c:	3304      	adds	r3, #4
 800c39e:	68fa      	ldr	r2, [r7, #12]
 800c3a0:	6852      	ldr	r2, [r2, #4]
 800c3a2:	fbb3 f1f2 	udiv	r1, r3, r2
 800c3a6:	fb01 f202 	mul.w	r2, r1, r2
 800c3aa:	1a9b      	subs	r3, r3, r2
 800c3ac:	4602      	mov	r2, r0
 800c3ae:	68b9      	ldr	r1, [r7, #8]
 800c3b0:	68f8      	ldr	r0, [r7, #12]
 800c3b2:	f7ff ff73 	bl	800c29c <q_copyin>
    q->head = (q->head + sizeof(len) + len) % q->len;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	68da      	ldr	r2, [r3, #12]
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	4413      	add	r3, r2
 800c3be:	3304      	adds	r3, #4
 800c3c0:	68fa      	ldr	r2, [r7, #12]
 800c3c2:	6852      	ldr	r2, [r2, #4]
 800c3c4:	fbb3 f1f2 	udiv	r1, r3, r2
 800c3c8:	fb01 f202 	mul.w	r2, r1, r2
 800c3cc:	1a9a      	subs	r2, r3, r2
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	60da      	str	r2, [r3, #12]
    success = true;
 800c3d2:	2301      	movs	r3, #1
 800c3d4:	75fb      	strb	r3, [r7, #23]
  }
  return success;
 800c3d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3718      	adds	r7, #24
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}

0800c3e0 <q_avail>:

static inline size_t q_space(struct queue *q) {
  return q->tail > q->head ? q->tail - q->head : q->tail + (q->len - q->head);
}

static inline size_t q_avail(struct queue *q) {
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b084      	sub	sp, #16
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
  size_t n = 0;
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	60fb      	str	r3, [r7, #12]
  if (q->tail != q->head) q_copyout(q, (uint8_t *) &n, sizeof(n), q->tail);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	689a      	ldr	r2, [r3, #8]
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	68db      	ldr	r3, [r3, #12]
 800c3f4:	429a      	cmp	r2, r3
 800c3f6:	d007      	beq.n	800c408 <q_avail+0x28>
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	689b      	ldr	r3, [r3, #8]
 800c3fc:	f107 010c 	add.w	r1, r7, #12
 800c400:	2204      	movs	r2, #4
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f7ff ff76 	bl	800c2f4 <q_copyout>
  return n;
 800c408:	68fb      	ldr	r3, [r7, #12]
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	3710      	adds	r7, #16
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}

0800c412 <q_read>:

static size_t q_read(struct queue *q, void *buf) {
 800c412:	b580      	push	{r7, lr}
 800c414:	b084      	sub	sp, #16
 800c416:	af00      	add	r7, sp, #0
 800c418:	6078      	str	r0, [r7, #4]
 800c41a:	6039      	str	r1, [r7, #0]
  size_t n = q_avail(q);
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	f7ff ffdf 	bl	800c3e0 <q_avail>
 800c422:	60f8      	str	r0, [r7, #12]
  if (n > 0) {
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d01c      	beq.n	800c464 <q_read+0x52>
    q_copyout(q, (uint8_t *) buf, n, (q->tail + sizeof(n)) % q->len);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	689b      	ldr	r3, [r3, #8]
 800c42e:	3304      	adds	r3, #4
 800c430:	687a      	ldr	r2, [r7, #4]
 800c432:	6852      	ldr	r2, [r2, #4]
 800c434:	fbb3 f1f2 	udiv	r1, r3, r2
 800c438:	fb01 f202 	mul.w	r2, r1, r2
 800c43c:	1a9b      	subs	r3, r3, r2
 800c43e:	68fa      	ldr	r2, [r7, #12]
 800c440:	6839      	ldr	r1, [r7, #0]
 800c442:	6878      	ldr	r0, [r7, #4]
 800c444:	f7ff ff56 	bl	800c2f4 <q_copyout>
    q->tail = (q->tail + sizeof(n) + n) % q->len;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	689a      	ldr	r2, [r3, #8]
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	4413      	add	r3, r2
 800c450:	3304      	adds	r3, #4
 800c452:	687a      	ldr	r2, [r7, #4]
 800c454:	6852      	ldr	r2, [r2, #4]
 800c456:	fbb3 f1f2 	udiv	r1, r3, r2
 800c45a:	fb01 f202 	mul.w	r2, r1, r2
 800c45e:	1a9a      	subs	r2, r3, r2
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	609a      	str	r2, [r3, #8]
  }
  return n;
 800c464:	68fb      	ldr	r3, [r7, #12]
}
 800c466:	4618      	mov	r0, r3
 800c468:	3710      	adds	r7, #16
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}

0800c46e <mkstr>:

static struct str mkstr(void *buf, size_t len) {
 800c46e:	b480      	push	{r7}
 800c470:	b087      	sub	sp, #28
 800c472:	af00      	add	r7, sp, #0
 800c474:	60f8      	str	r0, [r7, #12]
 800c476:	60b9      	str	r1, [r7, #8]
 800c478:	607a      	str	r2, [r7, #4]
  struct str str = {(uint8_t *) buf, len};
 800c47a:	68bb      	ldr	r3, [r7, #8]
 800c47c:	613b      	str	r3, [r7, #16]
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	617b      	str	r3, [r7, #20]
  return str;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	461a      	mov	r2, r3
 800c486:	f107 0310 	add.w	r3, r7, #16
 800c48a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c48e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800c492:	68f8      	ldr	r0, [r7, #12]
 800c494:	371c      	adds	r7, #28
 800c496:	46bd      	mov	sp, r7
 800c498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49c:	4770      	bx	lr

0800c49e <mkpay>:

static void mkpay(struct pkt *pkt, void *p) {
 800c49e:	b590      	push	{r4, r7, lr}
 800c4a0:	b085      	sub	sp, #20
 800c4a2:	af00      	add	r7, sp, #0
 800c4a4:	60f8      	str	r0, [r7, #12]
 800c4a6:	60b9      	str	r1, [r7, #8]
  pkt->pay = mkstr(p, (size_t) (&pkt->raw.buf[pkt->raw.len] - (uint8_t *) p));
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	681a      	ldr	r2, [r3, #0]
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	685b      	ldr	r3, [r3, #4]
 800c4b0:	441a      	add	r2, r3
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	1ad3      	subs	r3, r2, r3
 800c4b6:	461a      	mov	r2, r3
 800c4b8:	68fc      	ldr	r4, [r7, #12]
 800c4ba:	463b      	mov	r3, r7
 800c4bc:	68b9      	ldr	r1, [r7, #8]
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f7ff ffd5 	bl	800c46e <mkstr>
 800c4c4:	f104 0308 	add.w	r3, r4, #8
 800c4c8:	463a      	mov	r2, r7
 800c4ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c4ce:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800c4d2:	bf00      	nop
 800c4d4:	3714      	adds	r7, #20
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	bd90      	pop	{r4, r7, pc}

0800c4da <csumup>:

static uint32_t csumup(uint32_t sum, const void *buf, size_t len) {
 800c4da:	b480      	push	{r7}
 800c4dc:	b087      	sub	sp, #28
 800c4de:	af00      	add	r7, sp, #0
 800c4e0:	60f8      	str	r0, [r7, #12]
 800c4e2:	60b9      	str	r1, [r7, #8]
 800c4e4:	607a      	str	r2, [r7, #4]
  const uint8_t *p = (const uint8_t *) buf;
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	613b      	str	r3, [r7, #16]
  for (size_t i = 0; i < len; i++) sum += i & 1 ? p[i] : (uint32_t) (p[i] << 8);
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	617b      	str	r3, [r7, #20]
 800c4ee:	e016      	b.n	800c51e <csumup+0x44>
 800c4f0:	697b      	ldr	r3, [r7, #20]
 800c4f2:	f003 0301 	and.w	r3, r3, #1
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d005      	beq.n	800c506 <csumup+0x2c>
 800c4fa:	693a      	ldr	r2, [r7, #16]
 800c4fc:	697b      	ldr	r3, [r7, #20]
 800c4fe:	4413      	add	r3, r2
 800c500:	781b      	ldrb	r3, [r3, #0]
 800c502:	461a      	mov	r2, r3
 800c504:	e005      	b.n	800c512 <csumup+0x38>
 800c506:	693a      	ldr	r2, [r7, #16]
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	4413      	add	r3, r2
 800c50c:	781b      	ldrb	r3, [r3, #0]
 800c50e:	021b      	lsls	r3, r3, #8
 800c510:	461a      	mov	r2, r3
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	4413      	add	r3, r2
 800c516:	60fb      	str	r3, [r7, #12]
 800c518:	697b      	ldr	r3, [r7, #20]
 800c51a:	3301      	adds	r3, #1
 800c51c:	617b      	str	r3, [r7, #20]
 800c51e:	697a      	ldr	r2, [r7, #20]
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	429a      	cmp	r2, r3
 800c524:	d3e4      	bcc.n	800c4f0 <csumup+0x16>
  return sum;
 800c526:	68fb      	ldr	r3, [r7, #12]
}
 800c528:	4618      	mov	r0, r3
 800c52a:	371c      	adds	r7, #28
 800c52c:	46bd      	mov	sp, r7
 800c52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c532:	4770      	bx	lr

0800c534 <csumfin>:

static uint16_t csumfin(uint32_t sum) {
 800c534:	b580      	push	{r7, lr}
 800c536:	b082      	sub	sp, #8
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
  while (sum >> 16) sum = (sum & 0xffff) + (sum >> 16);
 800c53c:	e005      	b.n	800c54a <csumfin+0x16>
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	b29a      	uxth	r2, r3
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	0c1b      	lsrs	r3, r3, #16
 800c546:	4413      	add	r3, r2
 800c548:	607b      	str	r3, [r7, #4]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	0c1b      	lsrs	r3, r3, #16
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d1f5      	bne.n	800c53e <csumfin+0xa>
  return mg_htons(~sum & 0xffff);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	b29b      	uxth	r3, r3
 800c556:	43db      	mvns	r3, r3
 800c558:	b29b      	uxth	r3, r3
 800c55a:	4618      	mov	r0, r3
 800c55c:	f7fe fe26 	bl	800b1ac <mg_ntohs>
 800c560:	4603      	mov	r3, r0
}
 800c562:	4618      	mov	r0, r3
 800c564:	3708      	adds	r7, #8
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}

0800c56a <ipcsum>:

static uint16_t ipcsum(const void *buf, size_t len) {
 800c56a:	b580      	push	{r7, lr}
 800c56c:	b084      	sub	sp, #16
 800c56e:	af00      	add	r7, sp, #0
 800c570:	6078      	str	r0, [r7, #4]
 800c572:	6039      	str	r1, [r7, #0]
  uint32_t sum = csumup(0, buf, len);
 800c574:	683a      	ldr	r2, [r7, #0]
 800c576:	6879      	ldr	r1, [r7, #4]
 800c578:	2000      	movs	r0, #0
 800c57a:	f7ff ffae 	bl	800c4da <csumup>
 800c57e:	60f8      	str	r0, [r7, #12]
  return csumfin(sum);
 800c580:	68f8      	ldr	r0, [r7, #12]
 800c582:	f7ff ffd7 	bl	800c534 <csumfin>
 800c586:	4603      	mov	r3, r0
}
 800c588:	4618      	mov	r0, r3
 800c58a:	3710      	adds	r7, #16
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}

0800c590 <arp_cache_init>:
// the last entry in the list with a new IP/MAC.
// ARP cache format: | prev | next | Entry0 | Entry1 | .... | EntryN |
// ARP entry format: | prev | next | IP (4bytes) | MAC (6bytes) |
// prev and next are 1-byte offsets in the cache, so cache size is max 256 bytes
// ARP entry size is 12 bytes
static void arp_cache_init(uint8_t *p, int n, int size) {
 800c590:	b480      	push	{r7}
 800c592:	b087      	sub	sp, #28
 800c594:	af00      	add	r7, sp, #0
 800c596:	60f8      	str	r0, [r7, #12]
 800c598:	60b9      	str	r1, [r7, #8]
 800c59a:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < n; i++) p[2 + i * size] = (uint8_t) (2 + (i - 1) * size);
 800c59c:	2300      	movs	r3, #0
 800c59e:	617b      	str	r3, [r7, #20]
 800c5a0:	e015      	b.n	800c5ce <arp_cache_init+0x3e>
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	3b01      	subs	r3, #1
 800c5a6:	b2da      	uxtb	r2, r3
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	b2db      	uxtb	r3, r3
 800c5ac:	fb12 f303 	smulbb	r3, r2, r3
 800c5b0:	b2da      	uxtb	r2, r3
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	6879      	ldr	r1, [r7, #4]
 800c5b6:	fb01 f303 	mul.w	r3, r1, r3
 800c5ba:	3302      	adds	r3, #2
 800c5bc:	4619      	mov	r1, r3
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	440b      	add	r3, r1
 800c5c2:	3202      	adds	r2, #2
 800c5c4:	b2d2      	uxtb	r2, r2
 800c5c6:	701a      	strb	r2, [r3, #0]
 800c5c8:	697b      	ldr	r3, [r7, #20]
 800c5ca:	3301      	adds	r3, #1
 800c5cc:	617b      	str	r3, [r7, #20]
 800c5ce:	697a      	ldr	r2, [r7, #20]
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	429a      	cmp	r2, r3
 800c5d4:	dbe5      	blt.n	800c5a2 <arp_cache_init+0x12>
  for (int i = 0; i < n; i++) p[3 + i * size] = (uint8_t) (2 + (i + 1) * size);
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	613b      	str	r3, [r7, #16]
 800c5da:	e015      	b.n	800c608 <arp_cache_init+0x78>
 800c5dc:	693b      	ldr	r3, [r7, #16]
 800c5de:	3301      	adds	r3, #1
 800c5e0:	b2da      	uxtb	r2, r3
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	b2db      	uxtb	r3, r3
 800c5e6:	fb12 f303 	smulbb	r3, r2, r3
 800c5ea:	b2da      	uxtb	r2, r3
 800c5ec:	693b      	ldr	r3, [r7, #16]
 800c5ee:	6879      	ldr	r1, [r7, #4]
 800c5f0:	fb01 f303 	mul.w	r3, r1, r3
 800c5f4:	3303      	adds	r3, #3
 800c5f6:	4619      	mov	r1, r3
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	440b      	add	r3, r1
 800c5fc:	3202      	adds	r2, #2
 800c5fe:	b2d2      	uxtb	r2, r2
 800c600:	701a      	strb	r2, [r3, #0]
 800c602:	693b      	ldr	r3, [r7, #16]
 800c604:	3301      	adds	r3, #1
 800c606:	613b      	str	r3, [r7, #16]
 800c608:	693a      	ldr	r2, [r7, #16]
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	429a      	cmp	r2, r3
 800c60e:	dbe5      	blt.n	800c5dc <arp_cache_init+0x4c>
  p[0] = p[2] = (uint8_t) (2 + (n - 1) * size);
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	3b01      	subs	r3, #1
 800c614:	b2da      	uxtb	r2, r3
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	b2db      	uxtb	r3, r3
 800c61a:	fb12 f303 	smulbb	r3, r2, r3
 800c61e:	b2da      	uxtb	r2, r3
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	3302      	adds	r3, #2
 800c624:	3202      	adds	r2, #2
 800c626:	b2d2      	uxtb	r2, r2
 800c628:	701a      	strb	r2, [r3, #0]
 800c62a:	781a      	ldrb	r2, [r3, #0]
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	701a      	strb	r2, [r3, #0]
  p[1] = p[3 + (n - 1) * size] = 2;
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	3b01      	subs	r3, #1
 800c634:	687a      	ldr	r2, [r7, #4]
 800c636:	fb02 f303 	mul.w	r3, r2, r3
 800c63a:	3303      	adds	r3, #3
 800c63c:	461a      	mov	r2, r3
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	4413      	add	r3, r2
 800c642:	2202      	movs	r2, #2
 800c644:	701a      	strb	r2, [r3, #0]
 800c646:	68fa      	ldr	r2, [r7, #12]
 800c648:	3201      	adds	r2, #1
 800c64a:	781b      	ldrb	r3, [r3, #0]
 800c64c:	7013      	strb	r3, [r2, #0]
}
 800c64e:	bf00      	nop
 800c650:	371c      	adds	r7, #28
 800c652:	46bd      	mov	sp, r7
 800c654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c658:	4770      	bx	lr

0800c65a <arp_cache_find>:
             p[j + 11]));
  }
}
#endif

static uint8_t *arp_cache_find(struct mip_if *ifp, uint32_t ip) {
 800c65a:	b580      	push	{r7, lr}
 800c65c:	b084      	sub	sp, #16
 800c65e:	af00      	add	r7, sp, #0
 800c660:	6078      	str	r0, [r7, #4]
 800c662:	6039      	str	r1, [r7, #0]
  uint8_t *p = ifp->arp_cache;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	3350      	adds	r3, #80	; 0x50
 800c668:	60bb      	str	r3, [r7, #8]
  if (ip == 0 || ip == 0xffffffffU) return NULL;
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d003      	beq.n	800c678 <arp_cache_find+0x1e>
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c676:	d101      	bne.n	800c67c <arp_cache_find+0x22>
 800c678:	2300      	movs	r3, #0
 800c67a:	e02d      	b.n	800c6d8 <arp_cache_find+0x7e>
  for (uint8_t i = 0, j = p[1]; i < MIP_ARP_ENTRIES; i++, j = p[j + 1]) {
 800c67c:	2300      	movs	r3, #0
 800c67e:	73fb      	strb	r3, [r7, #15]
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	785b      	ldrb	r3, [r3, #1]
 800c684:	73bb      	strb	r3, [r7, #14]
 800c686:	e023      	b.n	800c6d0 <arp_cache_find+0x76>
    if (memcmp(p + j + 2, &ip, sizeof(ip)) == 0) {
 800c688:	7bbb      	ldrb	r3, [r7, #14]
 800c68a:	3302      	adds	r3, #2
 800c68c:	68ba      	ldr	r2, [r7, #8]
 800c68e:	4413      	add	r3, r2
 800c690:	4639      	mov	r1, r7
 800c692:	2204      	movs	r2, #4
 800c694:	4618      	mov	r0, r3
 800c696:	f006 f83f 	bl	8012718 <memcmp>
 800c69a:	4603      	mov	r3, r0
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d10e      	bne.n	800c6be <arp_cache_find+0x64>
      p[1] = j, p[0] = p[j];  // Found entry! Point list head to us
 800c6a0:	68bb      	ldr	r3, [r7, #8]
 800c6a2:	3301      	adds	r3, #1
 800c6a4:	7bba      	ldrb	r2, [r7, #14]
 800c6a6:	701a      	strb	r2, [r3, #0]
 800c6a8:	7bbb      	ldrb	r3, [r7, #14]
 800c6aa:	68ba      	ldr	r2, [r7, #8]
 800c6ac:	4413      	add	r3, r2
 800c6ae:	781a      	ldrb	r2, [r3, #0]
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	701a      	strb	r2, [r3, #0]
      // MG_DEBUG(("ARP find: %#lx @ %x:%x:%x:%x:%x:%x", (long) ip, p[j + 6],
      //          p[j + 7], p[j + 8], p[j + 9], p[j + 10], p[j + 11]));
      return p + j + 6;  // And return MAC address
 800c6b4:	7bbb      	ldrb	r3, [r7, #14]
 800c6b6:	3306      	adds	r3, #6
 800c6b8:	68ba      	ldr	r2, [r7, #8]
 800c6ba:	4413      	add	r3, r2
 800c6bc:	e00c      	b.n	800c6d8 <arp_cache_find+0x7e>
  for (uint8_t i = 0, j = p[1]; i < MIP_ARP_ENTRIES; i++, j = p[j + 1]) {
 800c6be:	7bfb      	ldrb	r3, [r7, #15]
 800c6c0:	3301      	adds	r3, #1
 800c6c2:	73fb      	strb	r3, [r7, #15]
 800c6c4:	7bbb      	ldrb	r3, [r7, #14]
 800c6c6:	3301      	adds	r3, #1
 800c6c8:	68ba      	ldr	r2, [r7, #8]
 800c6ca:	4413      	add	r3, r2
 800c6cc:	781b      	ldrb	r3, [r3, #0]
 800c6ce:	73bb      	strb	r3, [r7, #14]
 800c6d0:	7bfb      	ldrb	r3, [r7, #15]
 800c6d2:	2b04      	cmp	r3, #4
 800c6d4:	d9d8      	bls.n	800c688 <arp_cache_find+0x2e>
    }
  }
  return NULL;
 800c6d6:	2300      	movs	r3, #0
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	3710      	adds	r7, #16
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}

0800c6e0 <arp_cache_add>:

static void arp_cache_add(struct mip_if *ifp, uint32_t ip, uint8_t mac[6]) {
 800c6e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6e2:	b08b      	sub	sp, #44	; 0x2c
 800c6e4:	af04      	add	r7, sp, #16
 800c6e6:	60f8      	str	r0, [r7, #12]
 800c6e8:	60b9      	str	r1, [r7, #8]
 800c6ea:	607a      	str	r2, [r7, #4]
  uint8_t *p = ifp->arp_cache;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	3350      	adds	r3, #80	; 0x50
 800c6f0:	617b      	str	r3, [r7, #20]
  if (ip == 0 || ip == ~0U) return;             // Bad IP
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d05b      	beq.n	800c7b0 <arp_cache_add+0xd0>
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6fe:	d057      	beq.n	800c7b0 <arp_cache_add+0xd0>
  if (arp_cache_find(ifp, ip) != NULL) return;  // Already exists, do nothing
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	4619      	mov	r1, r3
 800c704:	68f8      	ldr	r0, [r7, #12]
 800c706:	f7ff ffa8 	bl	800c65a <arp_cache_find>
 800c70a:	4603      	mov	r3, r0
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d151      	bne.n	800c7b4 <arp_cache_add+0xd4>
  memcpy(p + p[0] + 2, &ip, sizeof(ip));  // Replace last entry: IP address
 800c710:	697b      	ldr	r3, [r7, #20]
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	3302      	adds	r3, #2
 800c716:	697a      	ldr	r2, [r7, #20]
 800c718:	4413      	add	r3, r2
 800c71a:	68ba      	ldr	r2, [r7, #8]
 800c71c:	601a      	str	r2, [r3, #0]
  memcpy(p + p[0] + 6, mac, 6);           // And MAC address
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	781b      	ldrb	r3, [r3, #0]
 800c722:	3306      	adds	r3, #6
 800c724:	697a      	ldr	r2, [r7, #20]
 800c726:	4413      	add	r3, r2
 800c728:	2206      	movs	r2, #6
 800c72a:	6879      	ldr	r1, [r7, #4]
 800c72c:	4618      	mov	r0, r3
 800c72e:	f006 f803 	bl	8012738 <memcpy>
  p[1] = p[0], p[0] = p[p[1]];            // Point list head to us
 800c732:	697b      	ldr	r3, [r7, #20]
 800c734:	3301      	adds	r3, #1
 800c736:	697a      	ldr	r2, [r7, #20]
 800c738:	7812      	ldrb	r2, [r2, #0]
 800c73a:	701a      	strb	r2, [r3, #0]
 800c73c:	697b      	ldr	r3, [r7, #20]
 800c73e:	3301      	adds	r3, #1
 800c740:	781b      	ldrb	r3, [r3, #0]
 800c742:	461a      	mov	r2, r3
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	4413      	add	r3, r2
 800c748:	781a      	ldrb	r2, [r3, #0]
 800c74a:	697b      	ldr	r3, [r7, #20]
 800c74c:	701a      	strb	r2, [r3, #0]
  MG_DEBUG(("ARP cache: added %#lx @ %x:%x:%x:%x:%x:%x", (long) mg_htonl(ip),
 800c74e:	4b1b      	ldr	r3, [pc, #108]	; (800c7bc <arp_cache_add+0xdc>)
 800c750:	f641 12b9 	movw	r2, #6585	; 0x19b9
 800c754:	491a      	ldr	r1, [pc, #104]	; (800c7c0 <arp_cache_add+0xe0>)
 800c756:	2003      	movs	r0, #3
 800c758:	f7fa fca4 	bl	80070a4 <mg_log_prefix>
 800c75c:	4603      	mov	r3, r0
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d029      	beq.n	800c7b6 <arp_cache_add+0xd6>
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	4618      	mov	r0, r3
 800c766:	f7fe fd08 	bl	800b17a <mg_ntohl>
 800c76a:	4603      	mov	r3, r0
 800c76c:	461c      	mov	r4, r3
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	781b      	ldrb	r3, [r3, #0]
 800c772:	461d      	mov	r5, r3
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	3301      	adds	r3, #1
 800c778:	781b      	ldrb	r3, [r3, #0]
 800c77a:	461e      	mov	r6, r3
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	3302      	adds	r3, #2
 800c780:	781b      	ldrb	r3, [r3, #0]
 800c782:	461a      	mov	r2, r3
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	3303      	adds	r3, #3
 800c788:	781b      	ldrb	r3, [r3, #0]
 800c78a:	4619      	mov	r1, r3
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	3304      	adds	r3, #4
 800c790:	781b      	ldrb	r3, [r3, #0]
 800c792:	4618      	mov	r0, r3
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	3305      	adds	r3, #5
 800c798:	781b      	ldrb	r3, [r3, #0]
 800c79a:	9303      	str	r3, [sp, #12]
 800c79c:	9002      	str	r0, [sp, #8]
 800c79e:	9101      	str	r1, [sp, #4]
 800c7a0:	9200      	str	r2, [sp, #0]
 800c7a2:	4633      	mov	r3, r6
 800c7a4:	462a      	mov	r2, r5
 800c7a6:	4621      	mov	r1, r4
 800c7a8:	4806      	ldr	r0, [pc, #24]	; (800c7c4 <arp_cache_add+0xe4>)
 800c7aa:	f7fa fcd5 	bl	8007158 <mg_log>
 800c7ae:	e002      	b.n	800c7b6 <arp_cache_add+0xd6>
  if (ip == 0 || ip == ~0U) return;             // Bad IP
 800c7b0:	bf00      	nop
 800c7b2:	e000      	b.n	800c7b6 <arp_cache_add+0xd6>
  if (arp_cache_find(ifp, ip) != NULL) return;  // Already exists, do nothing
 800c7b4:	bf00      	nop
            mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]));
}
 800c7b6:	371c      	adds	r7, #28
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7bc:	0801578c 	.word	0x0801578c
 800c7c0:	08013b30 	.word	0x08013b30
 800c7c4:	08015098 	.word	0x08015098

0800c7c8 <ether_output>:

static size_t ether_output(struct mip_if *ifp, size_t len) {
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b082      	sub	sp, #8
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
 800c7d0:	6039      	str	r1, [r7, #0]
  // size_t min = 64;  // Pad short frames to 64 bytes (minimum Ethernet size)
  // if (len < min) memset(ifp->tx.buf + len, 0, min - len), len = min;
  // mg_hexdump(ifp->tx.buf, len);
  return ifp->driver->tx(ifp->tx.buf, len, ifp->driver_data);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7d6:	685b      	ldr	r3, [r3, #4]
 800c7d8:	687a      	ldr	r2, [r7, #4]
 800c7da:	69d0      	ldr	r0, [r2, #28]
 800c7dc:	687a      	ldr	r2, [r7, #4]
 800c7de:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c7e0:	6839      	ldr	r1, [r7, #0]
 800c7e2:	4798      	blx	r3
 800c7e4:	4603      	mov	r3, r0
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	3708      	adds	r7, #8
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}

0800c7ee <arp_ask>:

static void arp_ask(struct mip_if *ifp, uint32_t ip) {
 800c7ee:	b580      	push	{r7, lr}
 800c7f0:	b084      	sub	sp, #16
 800c7f2:	af00      	add	r7, sp, #0
 800c7f4:	6078      	str	r0, [r7, #4]
 800c7f6:	6039      	str	r1, [r7, #0]
  struct eth *eth = (struct eth *) ifp->tx.buf;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	69db      	ldr	r3, [r3, #28]
 800c7fc:	60fb      	str	r3, [r7, #12]
  struct arp *arp = (struct arp *) (eth + 1);
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	330e      	adds	r3, #14
 800c802:	60bb      	str	r3, [r7, #8]
  memset(eth->dst, 255, sizeof(eth->dst));
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	2206      	movs	r2, #6
 800c808:	21ff      	movs	r1, #255	; 0xff
 800c80a:	4618      	mov	r0, r3
 800c80c:	f005 ffbc 	bl	8012788 <memset>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	3306      	adds	r3, #6
 800c814:	6879      	ldr	r1, [r7, #4]
 800c816:	2206      	movs	r2, #6
 800c818:	4618      	mov	r0, r3
 800c81a:	f005 ff8d 	bl	8012738 <memcpy>
  eth->type = mg_htons(0x806);
 800c81e:	f640 0006 	movw	r0, #2054	; 0x806
 800c822:	f7fe fcc3 	bl	800b1ac <mg_ntohs>
 800c826:	4603      	mov	r3, r0
 800c828:	461a      	mov	r2, r3
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	819a      	strh	r2, [r3, #12]
  memset(arp, 0, sizeof(*arp));
 800c82e:	221c      	movs	r2, #28
 800c830:	2100      	movs	r1, #0
 800c832:	68b8      	ldr	r0, [r7, #8]
 800c834:	f005 ffa8 	bl	8012788 <memset>
  arp->fmt = mg_htons(1), arp->pro = mg_htons(0x800), arp->hlen = 6,
 800c838:	2001      	movs	r0, #1
 800c83a:	f7fe fcb7 	bl	800b1ac <mg_ntohs>
 800c83e:	4603      	mov	r3, r0
 800c840:	461a      	mov	r2, r3
 800c842:	68bb      	ldr	r3, [r7, #8]
 800c844:	801a      	strh	r2, [r3, #0]
 800c846:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c84a:	f7fe fcaf 	bl	800b1ac <mg_ntohs>
 800c84e:	4603      	mov	r3, r0
 800c850:	461a      	mov	r2, r3
 800c852:	68bb      	ldr	r3, [r7, #8]
 800c854:	805a      	strh	r2, [r3, #2]
 800c856:	68bb      	ldr	r3, [r7, #8]
 800c858:	2206      	movs	r2, #6
 800c85a:	711a      	strb	r2, [r3, #4]
  arp->plen = 4;
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	2204      	movs	r2, #4
 800c860:	715a      	strb	r2, [r3, #5]
  arp->op = mg_htons(1), arp->tpa = ip, arp->spa = ifp->ip;
 800c862:	2001      	movs	r0, #1
 800c864:	f7fe fca2 	bl	800b1ac <mg_ntohs>
 800c868:	4603      	mov	r3, r0
 800c86a:	461a      	mov	r2, r3
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	80da      	strh	r2, [r3, #6]
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	683a      	ldr	r2, [r7, #0]
 800c874:	619a      	str	r2, [r3, #24]
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	689a      	ldr	r2, [r3, #8]
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	f8c3 200e 	str.w	r2, [r3, #14]
  memcpy(arp->sha, ifp->mac, sizeof(arp->sha));
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	3308      	adds	r3, #8
 800c884:	6879      	ldr	r1, [r7, #4]
 800c886:	2206      	movs	r2, #6
 800c888:	4618      	mov	r0, r3
 800c88a:	f005 ff55 	bl	8012738 <memcpy>
  ether_output(ifp, PDIFF(eth, arp + 1));
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	f103 021c 	add.w	r2, r3, #28
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	1ad3      	subs	r3, r2, r3
 800c898:	4619      	mov	r1, r3
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	f7ff ff94 	bl	800c7c8 <ether_output>
}
 800c8a0:	bf00      	nop
 800c8a2:	3710      	adds	r7, #16
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}

0800c8a8 <mg_print_ipv4>:

static size_t mg_print_ipv4(mg_pfn_t fn, void *fn_data, va_list *ap) {
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b08a      	sub	sp, #40	; 0x28
 800c8ac:	af04      	add	r7, sp, #16
 800c8ae:	60f8      	str	r0, [r7, #12]
 800c8b0:	60b9      	str	r1, [r7, #8]
 800c8b2:	607a      	str	r2, [r7, #4]
  uint32_t ip = mg_ntohl(va_arg(*ap, uint32_t));
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	1d19      	adds	r1, r3, #4
 800c8ba:	687a      	ldr	r2, [r7, #4]
 800c8bc:	6011      	str	r1, [r2, #0]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f7fe fc5a 	bl	800b17a <mg_ntohl>
 800c8c6:	6178      	str	r0, [r7, #20]
  return mg_xprintf(fn, fn_data, "%d.%d.%d.%d", ip >> 24, (ip >> 16) & 255,
 800c8c8:	697b      	ldr	r3, [r7, #20]
 800c8ca:	0e18      	lsrs	r0, r3, #24
 800c8cc:	697b      	ldr	r3, [r7, #20]
 800c8ce:	0c1b      	lsrs	r3, r3, #16
 800c8d0:	b2db      	uxtb	r3, r3
                    (ip >> 8) & 255, ip & 255);
 800c8d2:	697a      	ldr	r2, [r7, #20]
 800c8d4:	0a12      	lsrs	r2, r2, #8
  return mg_xprintf(fn, fn_data, "%d.%d.%d.%d", ip >> 24, (ip >> 16) & 255,
 800c8d6:	b2d2      	uxtb	r2, r2
 800c8d8:	6979      	ldr	r1, [r7, #20]
 800c8da:	b2c9      	uxtb	r1, r1
 800c8dc:	9102      	str	r1, [sp, #8]
 800c8de:	9201      	str	r2, [sp, #4]
 800c8e0:	9300      	str	r3, [sp, #0]
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	4a04      	ldr	r2, [pc, #16]	; (800c8f8 <mg_print_ipv4+0x50>)
 800c8e6:	68b9      	ldr	r1, [r7, #8]
 800c8e8:	68f8      	ldr	r0, [r7, #12]
 800c8ea:	f7f5 fdd2 	bl	8002492 <mg_xprintf>
 800c8ee:	4603      	mov	r3, r0
}
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	3718      	adds	r7, #24
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}
 800c8f8:	08014b80 	.word	0x08014b80

0800c8fc <onstatechange>:

static void onstatechange(struct mip_if *ifp) {
 800c8fc:	b5b0      	push	{r4, r5, r7, lr}
 800c8fe:	b082      	sub	sp, #8
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
  if (ifp->state == MIP_STATE_READY) {
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800c90a:	2b02      	cmp	r3, #2
 800c90c:	d148      	bne.n	800c9a0 <onstatechange+0xa4>
    MG_INFO(("READY, IP: %M", mg_print_ipv4, ifp->ip));
 800c90e:	4b39      	ldr	r3, [pc, #228]	; (800c9f4 <onstatechange+0xf8>)
 800c910:	f641 12da 	movw	r2, #6618	; 0x19da
 800c914:	4938      	ldr	r1, [pc, #224]	; (800c9f8 <onstatechange+0xfc>)
 800c916:	2002      	movs	r0, #2
 800c918:	f7fa fbc4 	bl	80070a4 <mg_log_prefix>
 800c91c:	4603      	mov	r3, r0
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d006      	beq.n	800c930 <onstatechange+0x34>
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	689b      	ldr	r3, [r3, #8]
 800c926:	461a      	mov	r2, r3
 800c928:	4934      	ldr	r1, [pc, #208]	; (800c9fc <onstatechange+0x100>)
 800c92a:	4835      	ldr	r0, [pc, #212]	; (800ca00 <onstatechange+0x104>)
 800c92c:	f7fa fc14 	bl	8007158 <mg_log>
    MG_INFO(("       GW: %M", mg_print_ipv4, ifp->gw));
 800c930:	4b30      	ldr	r3, [pc, #192]	; (800c9f4 <onstatechange+0xf8>)
 800c932:	f641 12db 	movw	r2, #6619	; 0x19db
 800c936:	4930      	ldr	r1, [pc, #192]	; (800c9f8 <onstatechange+0xfc>)
 800c938:	2002      	movs	r0, #2
 800c93a:	f7fa fbb3 	bl	80070a4 <mg_log_prefix>
 800c93e:	4603      	mov	r3, r0
 800c940:	2b00      	cmp	r3, #0
 800c942:	d006      	beq.n	800c952 <onstatechange+0x56>
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	691b      	ldr	r3, [r3, #16]
 800c948:	461a      	mov	r2, r3
 800c94a:	492c      	ldr	r1, [pc, #176]	; (800c9fc <onstatechange+0x100>)
 800c94c:	482d      	ldr	r0, [pc, #180]	; (800ca04 <onstatechange+0x108>)
 800c94e:	f7fa fc03 	bl	8007158 <mg_log>
    MG_INFO(("       Lease: %lld sec", (ifp->lease_expire - ifp->now) / 1000));
 800c952:	4b28      	ldr	r3, [pc, #160]	; (800c9f4 <onstatechange+0xf8>)
 800c954:	f641 12dc 	movw	r2, #6620	; 0x19dc
 800c958:	4927      	ldr	r1, [pc, #156]	; (800c9f8 <onstatechange+0xfc>)
 800c95a:	2002      	movs	r0, #2
 800c95c:	f7fa fba2 	bl	80070a4 <mg_log_prefix>
 800c960:	4603      	mov	r3, r0
 800c962:	2b00      	cmp	r3, #0
 800c964:	d015      	beq.n	800c992 <onstatechange+0x96>
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800c972:	1a84      	subs	r4, r0, r2
 800c974:	eb61 0503 	sbc.w	r5, r1, r3
 800c978:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c97c:	f04f 0300 	mov.w	r3, #0
 800c980:	4620      	mov	r0, r4
 800c982:	4629      	mov	r1, r5
 800c984:	f7f4 f994 	bl	8000cb0 <__aeabi_uldivmod>
 800c988:	4602      	mov	r2, r0
 800c98a:	460b      	mov	r3, r1
 800c98c:	481e      	ldr	r0, [pc, #120]	; (800ca08 <onstatechange+0x10c>)
 800c98e:	f7fa fbe3 	bl	8007158 <mg_log>
    arp_ask(ifp, ifp->gw);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	691b      	ldr	r3, [r3, #16]
 800c996:	4619      	mov	r1, r3
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	f7ff ff28 	bl	800c7ee <arp_ask>
  } else if (ifp->state == MIP_STATE_UP) {
    MG_ERROR(("Link up"));
  } else if (ifp->state == MIP_STATE_DOWN) {
    MG_ERROR(("Link down"));
  }
}
 800c99e:	e024      	b.n	800c9ea <onstatechange+0xee>
  } else if (ifp->state == MIP_STATE_UP) {
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800c9a6:	2b01      	cmp	r3, #1
 800c9a8:	d10d      	bne.n	800c9c6 <onstatechange+0xca>
    MG_ERROR(("Link up"));
 800c9aa:	4b12      	ldr	r3, [pc, #72]	; (800c9f4 <onstatechange+0xf8>)
 800c9ac:	f641 12df 	movw	r2, #6623	; 0x19df
 800c9b0:	4911      	ldr	r1, [pc, #68]	; (800c9f8 <onstatechange+0xfc>)
 800c9b2:	2001      	movs	r0, #1
 800c9b4:	f7fa fb76 	bl	80070a4 <mg_log_prefix>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d015      	beq.n	800c9ea <onstatechange+0xee>
 800c9be:	4813      	ldr	r0, [pc, #76]	; (800ca0c <onstatechange+0x110>)
 800c9c0:	f7fa fbca 	bl	8007158 <mg_log>
}
 800c9c4:	e011      	b.n	800c9ea <onstatechange+0xee>
  } else if (ifp->state == MIP_STATE_DOWN) {
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d10c      	bne.n	800c9ea <onstatechange+0xee>
    MG_ERROR(("Link down"));
 800c9d0:	4b08      	ldr	r3, [pc, #32]	; (800c9f4 <onstatechange+0xf8>)
 800c9d2:	f641 12e1 	movw	r2, #6625	; 0x19e1
 800c9d6:	4908      	ldr	r1, [pc, #32]	; (800c9f8 <onstatechange+0xfc>)
 800c9d8:	2001      	movs	r0, #1
 800c9da:	f7fa fb63 	bl	80070a4 <mg_log_prefix>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d002      	beq.n	800c9ea <onstatechange+0xee>
 800c9e4:	480a      	ldr	r0, [pc, #40]	; (800ca10 <onstatechange+0x114>)
 800c9e6:	f7fa fbb7 	bl	8007158 <mg_log>
}
 800c9ea:	bf00      	nop
 800c9ec:	3708      	adds	r7, #8
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bdb0      	pop	{r4, r5, r7, pc}
 800c9f2:	bf00      	nop
 800c9f4:	0801579c 	.word	0x0801579c
 800c9f8:	08013b30 	.word	0x08013b30
 800c9fc:	0800c8a9 	.word	0x0800c8a9
 800ca00:	080150c4 	.word	0x080150c4
 800ca04:	080150d4 	.word	0x080150d4
 800ca08:	080150e4 	.word	0x080150e4
 800ca0c:	080150fc 	.word	0x080150fc
 800ca10:	08015104 	.word	0x08015104

0800ca14 <tx_ip>:

static struct ip *tx_ip(struct mip_if *ifp, uint8_t proto, uint32_t ip_src,
                        uint32_t ip_dst, size_t plen) {
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b088      	sub	sp, #32
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	60f8      	str	r0, [r7, #12]
 800ca1c:	607a      	str	r2, [r7, #4]
 800ca1e:	603b      	str	r3, [r7, #0]
 800ca20:	460b      	mov	r3, r1
 800ca22:	72fb      	strb	r3, [r7, #11]
  struct eth *eth = (struct eth *) ifp->tx.buf;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	69db      	ldr	r3, [r3, #28]
 800ca28:	61bb      	str	r3, [r7, #24]
  struct ip *ip = (struct ip *) (eth + 1);
 800ca2a:	69bb      	ldr	r3, [r7, #24]
 800ca2c:	330e      	adds	r3, #14
 800ca2e:	617b      	str	r3, [r7, #20]
  uint8_t *mac = arp_cache_find(ifp, ip_dst);  // Dst IP in ARP cache ?
 800ca30:	6839      	ldr	r1, [r7, #0]
 800ca32:	68f8      	ldr	r0, [r7, #12]
 800ca34:	f7ff fe11 	bl	800c65a <arp_cache_find>
 800ca38:	61f8      	str	r0, [r7, #28]
  if (!mac && (ip_dst & ifp->mask)) arp_ask(ifp, ip_dst);  // Same net, lookup
 800ca3a:	69fb      	ldr	r3, [r7, #28]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d109      	bne.n	800ca54 <tx_ip+0x40>
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	68da      	ldr	r2, [r3, #12]
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	4013      	ands	r3, r2
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d003      	beq.n	800ca54 <tx_ip+0x40>
 800ca4c:	6839      	ldr	r1, [r7, #0]
 800ca4e:	68f8      	ldr	r0, [r7, #12]
 800ca50:	f7ff fecd 	bl	800c7ee <arp_ask>
  if (!mac) mac = arp_cache_find(ifp, ifp->gw);            // Use gateway MAC
 800ca54:	69fb      	ldr	r3, [r7, #28]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d106      	bne.n	800ca68 <tx_ip+0x54>
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	691b      	ldr	r3, [r3, #16]
 800ca5e:	4619      	mov	r1, r3
 800ca60:	68f8      	ldr	r0, [r7, #12]
 800ca62:	f7ff fdfa 	bl	800c65a <arp_cache_find>
 800ca66:	61f8      	str	r0, [r7, #28]
  if (mac) memcpy(eth->dst, mac, sizeof(eth->dst));        // Found? Use it
 800ca68:	69fb      	ldr	r3, [r7, #28]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d005      	beq.n	800ca7a <tx_ip+0x66>
 800ca6e:	69bb      	ldr	r3, [r7, #24]
 800ca70:	2206      	movs	r2, #6
 800ca72:	69f9      	ldr	r1, [r7, #28]
 800ca74:	4618      	mov	r0, r3
 800ca76:	f005 fe5f 	bl	8012738 <memcpy>
  if (!mac) memset(eth->dst, 255, sizeof(eth->dst));       // No? Use broadcast
 800ca7a:	69fb      	ldr	r3, [r7, #28]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d105      	bne.n	800ca8c <tx_ip+0x78>
 800ca80:	69bb      	ldr	r3, [r7, #24]
 800ca82:	2206      	movs	r2, #6
 800ca84:	21ff      	movs	r1, #255	; 0xff
 800ca86:	4618      	mov	r0, r3
 800ca88:	f005 fe7e 	bl	8012788 <memset>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));  // TODO(cpq): ARP lookup
 800ca8c:	69bb      	ldr	r3, [r7, #24]
 800ca8e:	3306      	adds	r3, #6
 800ca90:	68f9      	ldr	r1, [r7, #12]
 800ca92:	2206      	movs	r2, #6
 800ca94:	4618      	mov	r0, r3
 800ca96:	f005 fe4f 	bl	8012738 <memcpy>
  eth->type = mg_htons(0x800);
 800ca9a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800ca9e:	f7fe fb85 	bl	800b1ac <mg_ntohs>
 800caa2:	4603      	mov	r3, r0
 800caa4:	461a      	mov	r2, r3
 800caa6:	69bb      	ldr	r3, [r7, #24]
 800caa8:	819a      	strh	r2, [r3, #12]
  memset(ip, 0, sizeof(*ip));
 800caaa:	2214      	movs	r2, #20
 800caac:	2100      	movs	r1, #0
 800caae:	6978      	ldr	r0, [r7, #20]
 800cab0:	f005 fe6a 	bl	8012788 <memset>
  ip->ver = 0x45;   // Version 4, header length 5 words
 800cab4:	697b      	ldr	r3, [r7, #20]
 800cab6:	2245      	movs	r2, #69	; 0x45
 800cab8:	701a      	strb	r2, [r3, #0]
  ip->frag = 0x40;  // Don't fragment
 800caba:	697b      	ldr	r3, [r7, #20]
 800cabc:	2200      	movs	r2, #0
 800cabe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cac2:	719a      	strb	r2, [r3, #6]
 800cac4:	2200      	movs	r2, #0
 800cac6:	71da      	strb	r2, [r3, #7]
  ip->len = mg_htons((uint16_t) (sizeof(*ip) + plen));
 800cac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caca:	b29b      	uxth	r3, r3
 800cacc:	3314      	adds	r3, #20
 800cace:	b29b      	uxth	r3, r3
 800cad0:	4618      	mov	r0, r3
 800cad2:	f7fe fb6b 	bl	800b1ac <mg_ntohs>
 800cad6:	4603      	mov	r3, r0
 800cad8:	461a      	mov	r2, r3
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	805a      	strh	r2, [r3, #2]
  ip->ttl = 64;
 800cade:	697b      	ldr	r3, [r7, #20]
 800cae0:	2240      	movs	r2, #64	; 0x40
 800cae2:	721a      	strb	r2, [r3, #8]
  ip->proto = proto;
 800cae4:	697b      	ldr	r3, [r7, #20]
 800cae6:	7afa      	ldrb	r2, [r7, #11]
 800cae8:	725a      	strb	r2, [r3, #9]
  ip->src = ip_src;
 800caea:	697b      	ldr	r3, [r7, #20]
 800caec:	687a      	ldr	r2, [r7, #4]
 800caee:	60da      	str	r2, [r3, #12]
  ip->dst = ip_dst;
 800caf0:	697b      	ldr	r3, [r7, #20]
 800caf2:	683a      	ldr	r2, [r7, #0]
 800caf4:	611a      	str	r2, [r3, #16]
  ip->csum = ipcsum(ip, sizeof(*ip));
 800caf6:	2114      	movs	r1, #20
 800caf8:	6978      	ldr	r0, [r7, #20]
 800cafa:	f7ff fd36 	bl	800c56a <ipcsum>
 800cafe:	4603      	mov	r3, r0
 800cb00:	461a      	mov	r2, r3
 800cb02:	697b      	ldr	r3, [r7, #20]
 800cb04:	815a      	strh	r2, [r3, #10]
  return ip;
 800cb06:	697b      	ldr	r3, [r7, #20]
}
 800cb08:	4618      	mov	r0, r3
 800cb0a:	3720      	adds	r7, #32
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}

0800cb10 <tx_udp>:

static void tx_udp(struct mip_if *ifp, uint32_t ip_src, uint16_t sport,
                   uint32_t ip_dst, uint16_t dport, const void *buf,
                   size_t len) {
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b08a      	sub	sp, #40	; 0x28
 800cb14:	af02      	add	r7, sp, #8
 800cb16:	60f8      	str	r0, [r7, #12]
 800cb18:	60b9      	str	r1, [r7, #8]
 800cb1a:	603b      	str	r3, [r7, #0]
 800cb1c:	4613      	mov	r3, r2
 800cb1e:	80fb      	strh	r3, [r7, #6]
  struct ip *ip = tx_ip(ifp, 17, ip_src, ip_dst, len + sizeof(struct udp));
 800cb20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb22:	3308      	adds	r3, #8
 800cb24:	9300      	str	r3, [sp, #0]
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	68ba      	ldr	r2, [r7, #8]
 800cb2a:	2111      	movs	r1, #17
 800cb2c:	68f8      	ldr	r0, [r7, #12]
 800cb2e:	f7ff ff71 	bl	800ca14 <tx_ip>
 800cb32:	61f8      	str	r0, [r7, #28]
  struct udp *udp = (struct udp *) (ip + 1);
 800cb34:	69fb      	ldr	r3, [r7, #28]
 800cb36:	3314      	adds	r3, #20
 800cb38:	61bb      	str	r3, [r7, #24]
  // MG_DEBUG(("UDP XX LEN %d %d", (int) len, (int) ifp->tx.len));
  udp->sport = sport;
 800cb3a:	69bb      	ldr	r3, [r7, #24]
 800cb3c:	88fa      	ldrh	r2, [r7, #6]
 800cb3e:	801a      	strh	r2, [r3, #0]
  udp->dport = dport;
 800cb40:	69bb      	ldr	r3, [r7, #24]
 800cb42:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800cb44:	805a      	strh	r2, [r3, #2]
  udp->len = mg_htons((uint16_t) (sizeof(*udp) + len));
 800cb46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb48:	b29b      	uxth	r3, r3
 800cb4a:	3308      	adds	r3, #8
 800cb4c:	b29b      	uxth	r3, r3
 800cb4e:	4618      	mov	r0, r3
 800cb50:	f7fe fb2c 	bl	800b1ac <mg_ntohs>
 800cb54:	4603      	mov	r3, r0
 800cb56:	461a      	mov	r2, r3
 800cb58:	69bb      	ldr	r3, [r7, #24]
 800cb5a:	809a      	strh	r2, [r3, #4]
  udp->csum = 0;
 800cb5c:	69bb      	ldr	r3, [r7, #24]
 800cb5e:	2200      	movs	r2, #0
 800cb60:	719a      	strb	r2, [r3, #6]
 800cb62:	2200      	movs	r2, #0
 800cb64:	71da      	strb	r2, [r3, #7]
  uint32_t cs = csumup(0, udp, sizeof(*udp));
 800cb66:	2208      	movs	r2, #8
 800cb68:	69b9      	ldr	r1, [r7, #24]
 800cb6a:	2000      	movs	r0, #0
 800cb6c:	f7ff fcb5 	bl	800c4da <csumup>
 800cb70:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, buf, len);
 800cb72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cb76:	6978      	ldr	r0, [r7, #20]
 800cb78:	f7ff fcaf 	bl	800c4da <csumup>
 800cb7c:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 800cb7e:	69fb      	ldr	r3, [r7, #28]
 800cb80:	330c      	adds	r3, #12
 800cb82:	2204      	movs	r2, #4
 800cb84:	4619      	mov	r1, r3
 800cb86:	6978      	ldr	r0, [r7, #20]
 800cb88:	f7ff fca7 	bl	800c4da <csumup>
 800cb8c:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 800cb8e:	69fb      	ldr	r3, [r7, #28]
 800cb90:	3310      	adds	r3, #16
 800cb92:	2204      	movs	r2, #4
 800cb94:	4619      	mov	r1, r3
 800cb96:	6978      	ldr	r0, [r7, #20]
 800cb98:	f7ff fc9f 	bl	800c4da <csumup>
 800cb9c:	6178      	str	r0, [r7, #20]
  cs += (uint32_t) (ip->proto + sizeof(*udp) + len);
 800cb9e:	69fb      	ldr	r3, [r7, #28]
 800cba0:	7a5b      	ldrb	r3, [r3, #9]
 800cba2:	461a      	mov	r2, r3
 800cba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba6:	441a      	add	r2, r3
 800cba8:	697b      	ldr	r3, [r7, #20]
 800cbaa:	4413      	add	r3, r2
 800cbac:	3308      	adds	r3, #8
 800cbae:	617b      	str	r3, [r7, #20]
  udp->csum = csumfin(cs);
 800cbb0:	6978      	ldr	r0, [r7, #20]
 800cbb2:	f7ff fcbf 	bl	800c534 <csumfin>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	461a      	mov	r2, r3
 800cbba:	69bb      	ldr	r3, [r7, #24]
 800cbbc:	80da      	strh	r2, [r3, #6]
  memmove(udp + 1, buf, len);
 800cbbe:	69bb      	ldr	r3, [r7, #24]
 800cbc0:	3308      	adds	r3, #8
 800cbc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	f005 fdc4 	bl	8012754 <memmove>
  // MG_DEBUG(("UDP LEN %d %d", (int) len, (int) ifp->frame_len));
  ether_output(ifp, sizeof(struct eth) + sizeof(*ip) + sizeof(*udp) + len);
 800cbcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbce:	332a      	adds	r3, #42	; 0x2a
 800cbd0:	4619      	mov	r1, r3
 800cbd2:	68f8      	ldr	r0, [r7, #12]
 800cbd4:	f7ff fdf8 	bl	800c7c8 <ether_output>
}
 800cbd8:	bf00      	nop
 800cbda:	3720      	adds	r7, #32
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}

0800cbe0 <tx_dhcp>:

static void tx_dhcp(struct mip_if *ifp, uint32_t src, uint32_t dst,
                    uint8_t *opts, size_t optslen) {
 800cbe0:	b5b0      	push	{r4, r5, r7, lr}
 800cbe2:	b0cc      	sub	sp, #304	; 0x130
 800cbe4:	af04      	add	r7, sp, #16
 800cbe6:	f507 7490 	add.w	r4, r7, #288	; 0x120
 800cbea:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 800cbee:	6020      	str	r0, [r4, #0]
 800cbf0:	f507 7090 	add.w	r0, r7, #288	; 0x120
 800cbf4:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 800cbf8:	6001      	str	r1, [r0, #0]
 800cbfa:	f507 7190 	add.w	r1, r7, #288	; 0x120
 800cbfe:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 800cc02:	600a      	str	r2, [r1, #0]
 800cc04:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800cc08:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 800cc0c:	6013      	str	r3, [r2, #0]
  struct dhcp dhcp = {1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 800cc0e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800cc12:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800cc16:	4a30      	ldr	r2, [pc, #192]	; (800ccd8 <tx_dhcp+0xf8>)
 800cc18:	4618      	mov	r0, r3
 800cc1a:	4611      	mov	r1, r2
 800cc1c:	f44f 7388 	mov.w	r3, #272	; 0x110
 800cc20:	461a      	mov	r2, r3
 800cc22:	f005 fd89 	bl	8012738 <memcpy>
  dhcp.magic = mg_htonl(0x63825363);
 800cc26:	482d      	ldr	r0, [pc, #180]	; (800ccdc <tx_dhcp+0xfc>)
 800cc28:	f7fe faa7 	bl	800b17a <mg_ntohl>
 800cc2c:	4602      	mov	r2, r0
 800cc2e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800cc32:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800cc36:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  memcpy(&dhcp.hwaddr, ifp->mac, sizeof(ifp->mac));
 800cc3a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800cc3e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800cc42:	6819      	ldr	r1, [r3, #0]
 800cc44:	f107 0310 	add.w	r3, r7, #16
 800cc48:	331c      	adds	r3, #28
 800cc4a:	2206      	movs	r2, #6
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	f005 fd73 	bl	8012738 <memcpy>
  memcpy(&dhcp.xid, ifp->mac + 2, sizeof(dhcp.xid));
 800cc52:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800cc56:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	3302      	adds	r3, #2
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	461a      	mov	r2, r3
 800cc62:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800cc66:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800cc6a:	605a      	str	r2, [r3, #4]
  memcpy(&dhcp.options, opts, optslen);
 800cc6c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800cc70:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800cc74:	f107 0210 	add.w	r2, r7, #16
 800cc78:	f102 00f0 	add.w	r0, r2, #240	; 0xf0
 800cc7c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800cc80:	6819      	ldr	r1, [r3, #0]
 800cc82:	f005 fd59 	bl	8012738 <memcpy>
  tx_udp(ifp, src, mg_htons(68), dst, mg_htons(67), &dhcp, sizeof(dhcp));
 800cc86:	2044      	movs	r0, #68	; 0x44
 800cc88:	f7fe fa90 	bl	800b1ac <mg_ntohs>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	461d      	mov	r5, r3
 800cc90:	2043      	movs	r0, #67	; 0x43
 800cc92:	f7fe fa8b 	bl	800b1ac <mg_ntohs>
 800cc96:	4603      	mov	r3, r0
 800cc98:	461c      	mov	r4, r3
 800cc9a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800cc9e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800cca2:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800cca6:	f5a2 718c 	sub.w	r1, r2, #280	; 0x118
 800ccaa:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800ccae:	f5a2 708a 	sub.w	r0, r2, #276	; 0x114
 800ccb2:	f44f 7288 	mov.w	r2, #272	; 0x110
 800ccb6:	9202      	str	r2, [sp, #8]
 800ccb8:	f107 0210 	add.w	r2, r7, #16
 800ccbc:	9201      	str	r2, [sp, #4]
 800ccbe:	9400      	str	r4, [sp, #0]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	462a      	mov	r2, r5
 800ccc4:	6809      	ldr	r1, [r1, #0]
 800ccc6:	6800      	ldr	r0, [r0, #0]
 800ccc8:	f7ff ff22 	bl	800cb10 <tx_udp>
}
 800cccc:	bf00      	nop
 800ccce:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bdb0      	pop	{r4, r5, r7, pc}
 800ccd6:	bf00      	nop
 800ccd8:	08015110 	.word	0x08015110
 800ccdc:	63825363 	.word	0x63825363

0800cce0 <tx_dhcp_request>:

static void tx_dhcp_request(struct mip_if *ifp, uint32_t src, uint32_t dst) {
 800cce0:	b5b0      	push	{r4, r5, r7, lr}
 800cce2:	b08e      	sub	sp, #56	; 0x38
 800cce4:	af02      	add	r7, sp, #8
 800cce6:	60f8      	str	r0, [r7, #12]
 800cce8:	60b9      	str	r1, [r7, #8]
 800ccea:	607a      	str	r2, [r7, #4]
  uint8_t opts[] = {
 800ccec:	4b10      	ldr	r3, [pc, #64]	; (800cd30 <tx_dhcp_request+0x50>)
 800ccee:	f107 0414 	add.w	r4, r7, #20
 800ccf2:	461d      	mov	r5, r3
 800ccf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ccf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ccf8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ccfc:	c403      	stmia	r4!, {r0, r1}
 800ccfe:	7022      	strb	r2, [r4, #0]
      12, 3, 'm', 'i', 'p',     // Host name: "mip"
      54, 4, 0,   0,   0,   0,  // DHCP server ID
      50, 4, 0,   0,   0,   0,  // Requested IP
      255                       // End of options
  };
  memcpy(opts + 14, &dst, sizeof(dst));
 800cd00:	f107 0314 	add.w	r3, r7, #20
 800cd04:	330e      	adds	r3, #14
 800cd06:	687a      	ldr	r2, [r7, #4]
 800cd08:	601a      	str	r2, [r3, #0]
  memcpy(opts + 20, &src, sizeof(src));
 800cd0a:	f107 0314 	add.w	r3, r7, #20
 800cd0e:	3314      	adds	r3, #20
 800cd10:	68ba      	ldr	r2, [r7, #8]
 800cd12:	601a      	str	r2, [r3, #0]
  tx_dhcp(ifp, src, dst, opts, sizeof(opts));
 800cd14:	68b9      	ldr	r1, [r7, #8]
 800cd16:	687a      	ldr	r2, [r7, #4]
 800cd18:	f107 0314 	add.w	r3, r7, #20
 800cd1c:	2019      	movs	r0, #25
 800cd1e:	9000      	str	r0, [sp, #0]
 800cd20:	68f8      	ldr	r0, [r7, #12]
 800cd22:	f7ff ff5d 	bl	800cbe0 <tx_dhcp>
}
 800cd26:	bf00      	nop
 800cd28:	3730      	adds	r7, #48	; 0x30
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bdb0      	pop	{r4, r5, r7, pc}
 800cd2e:	bf00      	nop
 800cd30:	08015220 	.word	0x08015220

0800cd34 <tx_dhcp_discover>:

static void tx_dhcp_discover(struct mip_if *ifp) {
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b086      	sub	sp, #24
 800cd38:	af02      	add	r7, sp, #8
 800cd3a:	6078      	str	r0, [r7, #4]
  uint8_t opts[] = {
 800cd3c:	4a10      	ldr	r2, [pc, #64]	; (800cd80 <tx_dhcp_discover+0x4c>)
 800cd3e:	f107 0308 	add.w	r3, r7, #8
 800cd42:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cd46:	e883 0003 	stmia.w	r3, {r0, r1}
      53, 1, 1,     // Type: DHCP discover
      55, 2, 1, 3,  // Parameters: ip, mask
      255           // End of options
  };
  tx_dhcp(ifp, 0, 0xffffffff, opts, sizeof(opts));
 800cd4a:	f107 0308 	add.w	r3, r7, #8
 800cd4e:	2208      	movs	r2, #8
 800cd50:	9200      	str	r2, [sp, #0]
 800cd52:	f04f 32ff 	mov.w	r2, #4294967295
 800cd56:	2100      	movs	r1, #0
 800cd58:	6878      	ldr	r0, [r7, #4]
 800cd5a:	f7ff ff41 	bl	800cbe0 <tx_dhcp>
  MG_DEBUG(("DHCP discover sent"));
 800cd5e:	4b09      	ldr	r3, [pc, #36]	; (800cd84 <tx_dhcp_discover+0x50>)
 800cd60:	f641 2230 	movw	r2, #6704	; 0x1a30
 800cd64:	4908      	ldr	r1, [pc, #32]	; (800cd88 <tx_dhcp_discover+0x54>)
 800cd66:	2003      	movs	r0, #3
 800cd68:	f7fa f99c 	bl	80070a4 <mg_log_prefix>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d002      	beq.n	800cd78 <tx_dhcp_discover+0x44>
 800cd72:	4806      	ldr	r0, [pc, #24]	; (800cd8c <tx_dhcp_discover+0x58>)
 800cd74:	f7fa f9f0 	bl	8007158 <mg_log>
}
 800cd78:	bf00      	nop
 800cd7a:	3710      	adds	r7, #16
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}
 800cd80:	08015250 	.word	0x08015250
 800cd84:	080157ac 	.word	0x080157ac
 800cd88:	08013b30 	.word	0x08013b30
 800cd8c:	0801523c 	.word	0x0801523c

0800cd90 <rx_arp>:

static void rx_arp(struct mip_if *ifp, struct pkt *pkt) {
 800cd90:	b5b0      	push	{r4, r5, r7, lr}
 800cd92:	b084      	sub	sp, #16
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
 800cd98:	6039      	str	r1, [r7, #0]
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	699b      	ldr	r3, [r3, #24]
 800cd9e:	88db      	ldrh	r3, [r3, #6]
 800cda0:	b29c      	uxth	r4, r3
 800cda2:	2001      	movs	r0, #1
 800cda4:	f7fe fa02 	bl	800b1ac <mg_ntohs>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	429c      	cmp	r4, r3
 800cdac:	f040 8091 	bne.w	800ced2 <rx_arp+0x142>
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	699b      	ldr	r3, [r3, #24]
 800cdb4:	699a      	ldr	r2, [r3, #24]
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	689b      	ldr	r3, [r3, #8]
 800cdba:	429a      	cmp	r2, r3
 800cdbc:	f040 8089 	bne.w	800ced2 <rx_arp+0x142>
    // ARP request. Make a response, then send
    struct eth *eth = (struct eth *) ifp->tx.buf;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	69db      	ldr	r3, [r3, #28]
 800cdc4:	60fb      	str	r3, [r7, #12]
    struct arp *arp = (struct arp *) (eth + 1);
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	330e      	adds	r3, #14
 800cdca:	60bb      	str	r3, [r7, #8]
    MG_DEBUG(("ARP op %d %#x %#x", mg_htons(arp->op), arp->spa, arp->tpa));
 800cdcc:	4b53      	ldr	r3, [pc, #332]	; (800cf1c <rx_arp+0x18c>)
 800cdce:	f641 2238 	movw	r2, #6712	; 0x1a38
 800cdd2:	4953      	ldr	r1, [pc, #332]	; (800cf20 <rx_arp+0x190>)
 800cdd4:	2003      	movs	r0, #3
 800cdd6:	f7fa f965 	bl	80070a4 <mg_log_prefix>
 800cdda:	4603      	mov	r3, r0
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d00f      	beq.n	800ce00 <rx_arp+0x70>
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	88db      	ldrh	r3, [r3, #6]
 800cde4:	b29b      	uxth	r3, r3
 800cde6:	4618      	mov	r0, r3
 800cde8:	f7fe f9e0 	bl	800b1ac <mg_ntohs>
 800cdec:	4603      	mov	r3, r0
 800cdee:	4619      	mov	r1, r3
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	f8d3 200e 	ldr.w	r2, [r3, #14]
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	699b      	ldr	r3, [r3, #24]
 800cdfa:	484a      	ldr	r0, [pc, #296]	; (800cf24 <rx_arp+0x194>)
 800cdfc:	f7fa f9ac 	bl	8007158 <mg_log>
    memcpy(eth->dst, pkt->eth->src, sizeof(eth->dst));
 800ce00:	68f8      	ldr	r0, [r7, #12]
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	691b      	ldr	r3, [r3, #16]
 800ce06:	3306      	adds	r3, #6
 800ce08:	2206      	movs	r2, #6
 800ce0a:	4619      	mov	r1, r3
 800ce0c:	f005 fc94 	bl	8012738 <memcpy>
    memcpy(eth->src, ifp->mac, sizeof(eth->src));
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	3306      	adds	r3, #6
 800ce14:	6879      	ldr	r1, [r7, #4]
 800ce16:	2206      	movs	r2, #6
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f005 fc8d 	bl	8012738 <memcpy>
    eth->type = mg_htons(0x806);
 800ce1e:	f640 0006 	movw	r0, #2054	; 0x806
 800ce22:	f7fe f9c3 	bl	800b1ac <mg_ntohs>
 800ce26:	4603      	mov	r3, r0
 800ce28:	461a      	mov	r2, r3
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	819a      	strh	r2, [r3, #12]
    *arp = *pkt->arp;
 800ce2e:	683b      	ldr	r3, [r7, #0]
 800ce30:	699a      	ldr	r2, [r3, #24]
 800ce32:	68bb      	ldr	r3, [r7, #8]
 800ce34:	6814      	ldr	r4, [r2, #0]
 800ce36:	6850      	ldr	r0, [r2, #4]
 800ce38:	6891      	ldr	r1, [r2, #8]
 800ce3a:	68d5      	ldr	r5, [r2, #12]
 800ce3c:	601c      	str	r4, [r3, #0]
 800ce3e:	6058      	str	r0, [r3, #4]
 800ce40:	6099      	str	r1, [r3, #8]
 800ce42:	60dd      	str	r5, [r3, #12]
 800ce44:	6914      	ldr	r4, [r2, #16]
 800ce46:	6950      	ldr	r0, [r2, #20]
 800ce48:	6991      	ldr	r1, [r2, #24]
 800ce4a:	611c      	str	r4, [r3, #16]
 800ce4c:	6158      	str	r0, [r3, #20]
 800ce4e:	6199      	str	r1, [r3, #24]
    arp->op = mg_htons(2);
 800ce50:	2002      	movs	r0, #2
 800ce52:	f7fe f9ab 	bl	800b1ac <mg_ntohs>
 800ce56:	4603      	mov	r3, r0
 800ce58:	461a      	mov	r2, r3
 800ce5a:	68bb      	ldr	r3, [r7, #8]
 800ce5c:	80da      	strh	r2, [r3, #6]
    memcpy(arp->tha, pkt->arp->sha, sizeof(pkt->arp->tha));
 800ce5e:	68bb      	ldr	r3, [r7, #8]
 800ce60:	f103 0012 	add.w	r0, r3, #18
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	699b      	ldr	r3, [r3, #24]
 800ce68:	3308      	adds	r3, #8
 800ce6a:	2206      	movs	r2, #6
 800ce6c:	4619      	mov	r1, r3
 800ce6e:	f005 fc63 	bl	8012738 <memcpy>
    memcpy(arp->sha, ifp->mac, sizeof(pkt->arp->sha));
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	3308      	adds	r3, #8
 800ce76:	6879      	ldr	r1, [r7, #4]
 800ce78:	2206      	movs	r2, #6
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f005 fc5c 	bl	8012738 <memcpy>
    arp->tpa = pkt->arp->spa;
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	699b      	ldr	r3, [r3, #24]
 800ce84:	f8d3 200e 	ldr.w	r2, [r3, #14]
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	619a      	str	r2, [r3, #24]
    arp->spa = ifp->ip;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	689a      	ldr	r2, [r3, #8]
 800ce90:	68bb      	ldr	r3, [r7, #8]
 800ce92:	f8c3 200e 	str.w	r2, [r3, #14]
    MG_DEBUG(("ARP response: we're %#lx", (long) mg_ntohl(ifp->ip)));
 800ce96:	4b21      	ldr	r3, [pc, #132]	; (800cf1c <rx_arp+0x18c>)
 800ce98:	f641 2242 	movw	r2, #6722	; 0x1a42
 800ce9c:	4920      	ldr	r1, [pc, #128]	; (800cf20 <rx_arp+0x190>)
 800ce9e:	2003      	movs	r0, #3
 800cea0:	f7fa f900 	bl	80070a4 <mg_log_prefix>
 800cea4:	4603      	mov	r3, r0
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d009      	beq.n	800cebe <rx_arp+0x12e>
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	689b      	ldr	r3, [r3, #8]
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f7fe f963 	bl	800b17a <mg_ntohl>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	4619      	mov	r1, r3
 800ceb8:	481b      	ldr	r0, [pc, #108]	; (800cf28 <rx_arp+0x198>)
 800ceba:	f7fa f94d 	bl	8007158 <mg_log>
    ether_output(ifp, PDIFF(eth, arp + 1));
 800cebe:	68bb      	ldr	r3, [r7, #8]
 800cec0:	f103 021c 	add.w	r2, r3, #28
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	1ad3      	subs	r3, r2, r3
 800cec8:	4619      	mov	r1, r3
 800ceca:	6878      	ldr	r0, [r7, #4]
 800cecc:	f7ff fc7c 	bl	800c7c8 <ether_output>
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 800ced0:	e021      	b.n	800cf16 <rx_arp+0x186>
  } else if (pkt->arp->op == mg_htons(2)) {
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	699b      	ldr	r3, [r3, #24]
 800ced6:	88db      	ldrh	r3, [r3, #6]
 800ced8:	b29c      	uxth	r4, r3
 800ceda:	2002      	movs	r0, #2
 800cedc:	f7fe f966 	bl	800b1ac <mg_ntohs>
 800cee0:	4603      	mov	r3, r0
 800cee2:	429c      	cmp	r4, r3
 800cee4:	d117      	bne.n	800cf16 <rx_arp+0x186>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	699b      	ldr	r3, [r3, #24]
 800ceea:	3312      	adds	r3, #18
 800ceec:	6879      	ldr	r1, [r7, #4]
 800ceee:	2206      	movs	r2, #6
 800cef0:	4618      	mov	r0, r3
 800cef2:	f005 fc11 	bl	8012718 <memcmp>
 800cef6:	4603      	mov	r3, r0
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d10b      	bne.n	800cf14 <rx_arp+0x184>
    // MG_INFO(("ARP RESPONSE"));
    arp_cache_add(ifp, pkt->arp->spa, pkt->arp->sha);
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	699b      	ldr	r3, [r3, #24]
 800cf00:	f8d3 100e 	ldr.w	r1, [r3, #14]
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	699b      	ldr	r3, [r3, #24]
 800cf08:	3308      	adds	r3, #8
 800cf0a:	461a      	mov	r2, r3
 800cf0c:	6878      	ldr	r0, [r7, #4]
 800cf0e:	f7ff fbe7 	bl	800c6e0 <arp_cache_add>
 800cf12:	e000      	b.n	800cf16 <rx_arp+0x186>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 800cf14:	bf00      	nop
  }
}
 800cf16:	3710      	adds	r7, #16
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bdb0      	pop	{r4, r5, r7, pc}
 800cf1c:	080157c0 	.word	0x080157c0
 800cf20:	08013b30 	.word	0x08013b30
 800cf24:	08015258 	.word	0x08015258
 800cf28:	0801526c 	.word	0x0801526c

0800cf2c <rx_icmp>:

static void rx_icmp(struct mip_if *ifp, struct pkt *pkt) {
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b08a      	sub	sp, #40	; 0x28
 800cf30:	af02      	add	r7, sp, #8
 800cf32:	6078      	str	r0, [r7, #4]
 800cf34:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("ICMP %d", (int) len));
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf3a:	781b      	ldrb	r3, [r3, #0]
 800cf3c:	2b08      	cmp	r3, #8
 800cf3e:	d149      	bne.n	800cfd4 <rx_icmp+0xa8>
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	69db      	ldr	r3, [r3, #28]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d045      	beq.n	800cfd4 <rx_icmp+0xa8>
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	69db      	ldr	r3, [r3, #28]
 800cf4c:	691a      	ldr	r2, [r3, #16]
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	689b      	ldr	r3, [r3, #8]
 800cf52:	429a      	cmp	r2, r3
 800cf54:	d13e      	bne.n	800cfd4 <rx_icmp+0xa8>
    size_t hlen = sizeof(struct eth) + sizeof(struct ip) + sizeof(struct icmp);
 800cf56:	2326      	movs	r3, #38	; 0x26
 800cf58:	61bb      	str	r3, [r7, #24]
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6a1a      	ldr	r2, [r3, #32]
 800cf5e:	69bb      	ldr	r3, [r7, #24]
 800cf60:	1ad3      	subs	r3, r2, r3
 800cf62:	617b      	str	r3, [r7, #20]
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	68db      	ldr	r3, [r3, #12]
 800cf68:	61fb      	str	r3, [r7, #28]
    if (plen > space) plen = space;
 800cf6a:	69fa      	ldr	r2, [r7, #28]
 800cf6c:	697b      	ldr	r3, [r7, #20]
 800cf6e:	429a      	cmp	r2, r3
 800cf70:	d901      	bls.n	800cf76 <rx_icmp+0x4a>
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	61fb      	str	r3, [r7, #28]
    struct ip *ip =
        tx_ip(ifp, 1, ifp->ip, pkt->ip->src, sizeof(struct icmp) + plen);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	689a      	ldr	r2, [r3, #8]
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	69db      	ldr	r3, [r3, #28]
 800cf7e:	68d9      	ldr	r1, [r3, #12]
 800cf80:	69fb      	ldr	r3, [r7, #28]
 800cf82:	3304      	adds	r3, #4
 800cf84:	9300      	str	r3, [sp, #0]
 800cf86:	460b      	mov	r3, r1
 800cf88:	2101      	movs	r1, #1
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	f7ff fd42 	bl	800ca14 <tx_ip>
 800cf90:	6138      	str	r0, [r7, #16]
    struct icmp *icmp = (struct icmp *) (ip + 1);
 800cf92:	693b      	ldr	r3, [r7, #16]
 800cf94:	3314      	adds	r3, #20
 800cf96:	60fb      	str	r3, [r7, #12]
    memset(icmp, 0, sizeof(*icmp));        // Set csum to 0
 800cf98:	2204      	movs	r2, #4
 800cf9a:	2100      	movs	r1, #0
 800cf9c:	68f8      	ldr	r0, [r7, #12]
 800cf9e:	f005 fbf3 	bl	8012788 <memset>
    memcpy(icmp + 1, pkt->pay.buf, plen);  // Copy RX payload to TX
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	1d18      	adds	r0, r3, #4
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	689b      	ldr	r3, [r3, #8]
 800cfaa:	69fa      	ldr	r2, [r7, #28]
 800cfac:	4619      	mov	r1, r3
 800cfae:	f005 fbc3 	bl	8012738 <memcpy>
    icmp->csum = ipcsum(icmp, sizeof(*icmp) + plen);
 800cfb2:	69fb      	ldr	r3, [r7, #28]
 800cfb4:	3304      	adds	r3, #4
 800cfb6:	4619      	mov	r1, r3
 800cfb8:	68f8      	ldr	r0, [r7, #12]
 800cfba:	f7ff fad6 	bl	800c56a <ipcsum>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	461a      	mov	r2, r3
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	805a      	strh	r2, [r3, #2]
    ether_output(ifp, hlen + plen);
 800cfc6:	69ba      	ldr	r2, [r7, #24]
 800cfc8:	69fb      	ldr	r3, [r7, #28]
 800cfca:	4413      	add	r3, r2
 800cfcc:	4619      	mov	r1, r3
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f7ff fbfa 	bl	800c7c8 <ether_output>
  }
}
 800cfd4:	bf00      	nop
 800cfd6:	3720      	adds	r7, #32
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}

0800cfdc <rx_dhcp>:

static void rx_dhcp(struct mip_if *ifp, struct pkt *pkt) {
 800cfdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cfe0:	b088      	sub	sp, #32
 800cfe2:	af00      	add	r7, sp, #0
 800cfe4:	6078      	str	r0, [r7, #4]
 800cfe6:	6039      	str	r1, [r7, #0]
  uint32_t ip = 0, gw = 0, mask = 0;
 800cfe8:	2300      	movs	r3, #0
 800cfea:	61fb      	str	r3, [r7, #28]
 800cfec:	2300      	movs	r3, #0
 800cfee:	613b      	str	r3, [r7, #16]
 800cff0:	2300      	movs	r3, #0
 800cff2:	60fb      	str	r3, [r7, #12]
  uint8_t *p = pkt->dhcp->options, *end = &pkt->raw.buf[pkt->raw.len];
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cff8:	33f0      	adds	r3, #240	; 0xf0
 800cffa:	61bb      	str	r3, [r7, #24]
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	681a      	ldr	r2, [r3, #0]
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	685b      	ldr	r3, [r3, #4]
 800d004:	4413      	add	r3, r2
 800d006:	617b      	str	r3, [r7, #20]
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d00c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800d010:	697a      	ldr	r2, [r7, #20]
 800d012:	429a      	cmp	r2, r3
 800d014:	f0c0 8095 	bcc.w	800d142 <rx_dhcp+0x166>
  while (p + 1 < end && p[0] != 255) {  // Parse options
 800d018:	e05a      	b.n	800d0d0 <rx_dhcp+0xf4>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 800d01a:	69bb      	ldr	r3, [r7, #24]
 800d01c:	781b      	ldrb	r3, [r3, #0]
 800d01e:	2b01      	cmp	r3, #1
 800d020:	d10e      	bne.n	800d040 <rx_dhcp+0x64>
 800d022:	69bb      	ldr	r3, [r7, #24]
 800d024:	3301      	adds	r3, #1
 800d026:	781b      	ldrb	r3, [r3, #0]
 800d028:	2b04      	cmp	r3, #4
 800d02a:	d109      	bne.n	800d040 <rx_dhcp+0x64>
 800d02c:	69bb      	ldr	r3, [r7, #24]
 800d02e:	3306      	adds	r3, #6
 800d030:	697a      	ldr	r2, [r7, #20]
 800d032:	429a      	cmp	r2, r3
 800d034:	d904      	bls.n	800d040 <rx_dhcp+0x64>
      memcpy(&mask, p + 2, sizeof(mask));
 800d036:	69bb      	ldr	r3, [r7, #24]
 800d038:	3302      	adds	r3, #2
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	60fb      	str	r3, [r7, #12]
 800d03e:	e040      	b.n	800d0c2 <rx_dhcp+0xe6>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 800d040:	69bb      	ldr	r3, [r7, #24]
 800d042:	781b      	ldrb	r3, [r3, #0]
 800d044:	2b03      	cmp	r3, #3
 800d046:	d112      	bne.n	800d06e <rx_dhcp+0x92>
 800d048:	69bb      	ldr	r3, [r7, #24]
 800d04a:	3301      	adds	r3, #1
 800d04c:	781b      	ldrb	r3, [r3, #0]
 800d04e:	2b04      	cmp	r3, #4
 800d050:	d10d      	bne.n	800d06e <rx_dhcp+0x92>
 800d052:	69bb      	ldr	r3, [r7, #24]
 800d054:	3306      	adds	r3, #6
 800d056:	697a      	ldr	r2, [r7, #20]
 800d058:	429a      	cmp	r2, r3
 800d05a:	d908      	bls.n	800d06e <rx_dhcp+0x92>
      memcpy(&gw, p + 2, sizeof(gw));
 800d05c:	69bb      	ldr	r3, [r7, #24]
 800d05e:	3302      	adds	r3, #2
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	613b      	str	r3, [r7, #16]
      ip = pkt->dhcp->yiaddr;
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d068:	691b      	ldr	r3, [r3, #16]
 800d06a:	61fb      	str	r3, [r7, #28]
 800d06c:	e029      	b.n	800d0c2 <rx_dhcp+0xe6>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 800d06e:	69bb      	ldr	r3, [r7, #24]
 800d070:	781b      	ldrb	r3, [r3, #0]
 800d072:	2b33      	cmp	r3, #51	; 0x33
 800d074:	d125      	bne.n	800d0c2 <rx_dhcp+0xe6>
 800d076:	69bb      	ldr	r3, [r7, #24]
 800d078:	3301      	adds	r3, #1
 800d07a:	781b      	ldrb	r3, [r3, #0]
 800d07c:	2b04      	cmp	r3, #4
 800d07e:	d120      	bne.n	800d0c2 <rx_dhcp+0xe6>
 800d080:	69bb      	ldr	r3, [r7, #24]
 800d082:	3306      	adds	r3, #6
 800d084:	697a      	ldr	r2, [r7, #20]
 800d086:	429a      	cmp	r2, r3
 800d088:	d91b      	bls.n	800d0c2 <rx_dhcp+0xe6>
      uint32_t lease = 0;
 800d08a:	2300      	movs	r3, #0
 800d08c:	60bb      	str	r3, [r7, #8]
      memcpy(&lease, p + 2, sizeof(lease));
 800d08e:	69bb      	ldr	r3, [r7, #24]
 800d090:	3302      	adds	r3, #2
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	60bb      	str	r3, [r7, #8]
      ifp->lease_expire = ifp->now + mg_ntohl(lease) * 1000;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f7fe f86b 	bl	800b17a <mg_ntohl>
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d0aa:	fb02 f303 	mul.w	r3, r2, r3
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	4698      	mov	r8, r3
 800d0b2:	4691      	mov	r9, r2
 800d0b4:	eb14 0a08 	adds.w	sl, r4, r8
 800d0b8:	eb45 0b09 	adc.w	fp, r5, r9
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	e9c3 ab12 	strd	sl, fp, [r3, #72]	; 0x48
    }
    p += p[1] + 2;
 800d0c2:	69bb      	ldr	r3, [r7, #24]
 800d0c4:	3301      	adds	r3, #1
 800d0c6:	781b      	ldrb	r3, [r3, #0]
 800d0c8:	3302      	adds	r3, #2
 800d0ca:	69ba      	ldr	r2, [r7, #24]
 800d0cc:	4413      	add	r3, r2
 800d0ce:	61bb      	str	r3, [r7, #24]
  while (p + 1 < end && p[0] != 255) {  // Parse options
 800d0d0:	69bb      	ldr	r3, [r7, #24]
 800d0d2:	3301      	adds	r3, #1
 800d0d4:	697a      	ldr	r2, [r7, #20]
 800d0d6:	429a      	cmp	r2, r3
 800d0d8:	d903      	bls.n	800d0e2 <rx_dhcp+0x106>
 800d0da:	69bb      	ldr	r3, [r7, #24]
 800d0dc:	781b      	ldrb	r3, [r3, #0]
 800d0de:	2bff      	cmp	r3, #255	; 0xff
 800d0e0:	d19b      	bne.n	800d01a <rx_dhcp+0x3e>
  }
  if (ip && mask && gw && ifp->ip == 0) {
 800d0e2:	69fb      	ldr	r3, [r7, #28]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d02d      	beq.n	800d144 <rx_dhcp+0x168>
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d02a      	beq.n	800d144 <rx_dhcp+0x168>
 800d0ee:	693b      	ldr	r3, [r7, #16]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d027      	beq.n	800d144 <rx_dhcp+0x168>
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	689b      	ldr	r3, [r3, #8]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d123      	bne.n	800d144 <rx_dhcp+0x168>
    arp_cache_add(ifp, pkt->dhcp->siaddr, ((struct eth *) pkt->raw.buf)->src);
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d100:	6959      	ldr	r1, [r3, #20]
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	3306      	adds	r3, #6
 800d108:	461a      	mov	r2, r3
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	f7ff fae8 	bl	800c6e0 <arp_cache_add>
    ifp->ip = ip, ifp->gw = gw, ifp->mask = mask;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	69fa      	ldr	r2, [r7, #28]
 800d114:	609a      	str	r2, [r3, #8]
 800d116:	693a      	ldr	r2, [r7, #16]
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	611a      	str	r2, [r3, #16]
 800d11c:	68fa      	ldr	r2, [r7, #12]
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	60da      	str	r2, [r3, #12]
    ifp->state = MIP_STATE_READY;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	2202      	movs	r2, #2
 800d126:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
    onstatechange(ifp);
 800d12a:	6878      	ldr	r0, [r7, #4]
 800d12c:	f7ff fbe6 	bl	800c8fc <onstatechange>
    tx_dhcp_request(ifp, ip, pkt->dhcp->siaddr);
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d134:	695b      	ldr	r3, [r3, #20]
 800d136:	461a      	mov	r2, r3
 800d138:	69f9      	ldr	r1, [r7, #28]
 800d13a:	6878      	ldr	r0, [r7, #4]
 800d13c:	f7ff fdd0 	bl	800cce0 <tx_dhcp_request>
 800d140:	e000      	b.n	800d144 <rx_dhcp+0x168>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800d142:	bf00      	nop
  }
}
 800d144:	3720      	adds	r7, #32
 800d146:	46bd      	mov	sp, r7
 800d148:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d14c <getpeer>:

static struct mg_connection *getpeer(struct mg_mgr *mgr, struct pkt *pkt,
                                     bool lsn) {
 800d14c:	b480      	push	{r7}
 800d14e:	b087      	sub	sp, #28
 800d150:	af00      	add	r7, sp, #0
 800d152:	60f8      	str	r0, [r7, #12]
 800d154:	60b9      	str	r1, [r7, #8]
 800d156:	4613      	mov	r3, r2
 800d158:	71fb      	strb	r3, [r7, #7]
  struct mg_connection *c = NULL;
 800d15a:	2300      	movs	r3, #0
 800d15c:	617b      	str	r3, [r7, #20]
  for (c = mgr->conns; c != NULL; c = c->next) {
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	617b      	str	r3, [r7, #20]
 800d164:	e03e      	b.n	800d1e4 <getpeer+0x98>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 800d166:	697b      	ldr	r3, [r7, #20]
 800d168:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800d16c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d170:	b2db      	uxtb	r3, r3
 800d172:	2b00      	cmp	r3, #0
 800d174:	d00b      	beq.n	800d18e <getpeer+0x42>
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d007      	beq.n	800d18e <getpeer+0x42>
 800d17e:	697b      	ldr	r3, [r7, #20]
 800d180:	891a      	ldrh	r2, [r3, #8]
 800d182:	68bb      	ldr	r3, [r7, #8]
 800d184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d186:	885b      	ldrh	r3, [r3, #2]
 800d188:	b29b      	uxth	r3, r3
 800d18a:	429a      	cmp	r2, r3
 800d18c:	d02e      	beq.n	800d1ec <getpeer+0xa0>
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 800d18e:	697b      	ldr	r3, [r7, #20]
 800d190:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800d194:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d198:	b2db      	uxtb	r3, r3
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d11f      	bne.n	800d1de <getpeer+0x92>
 800d19e:	68bb      	ldr	r3, [r7, #8]
 800d1a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d01b      	beq.n	800d1de <getpeer+0x92>
 800d1a6:	697b      	ldr	r3, [r7, #20]
 800d1a8:	891a      	ldrh	r2, [r3, #8]
 800d1aa:	68bb      	ldr	r3, [r7, #8]
 800d1ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1ae:	885b      	ldrh	r3, [r3, #2]
 800d1b0:	b29b      	uxth	r3, r3
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	d113      	bne.n	800d1de <getpeer+0x92>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 800d1b6:	697b      	ldr	r3, [r7, #20]
 800d1b8:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800d1bc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800d1c0:	b2db      	uxtb	r3, r3
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 800d1c2:	79fa      	ldrb	r2, [r7, #7]
 800d1c4:	429a      	cmp	r2, r3
 800d1c6:	d10a      	bne.n	800d1de <getpeer+0x92>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 800d1c8:	79fb      	ldrb	r3, [r7, #7]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d10f      	bne.n	800d1ee <getpeer+0xa2>
 800d1ce:	697b      	ldr	r3, [r7, #20]
 800d1d0:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1d6:	881b      	ldrh	r3, [r3, #0]
 800d1d8:	b29b      	uxth	r3, r3
 800d1da:	429a      	cmp	r2, r3
 800d1dc:	d007      	beq.n	800d1ee <getpeer+0xa2>
  for (c = mgr->conns; c != NULL; c = c->next) {
 800d1de:	697b      	ldr	r3, [r7, #20]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	617b      	str	r3, [r7, #20]
 800d1e4:	697b      	ldr	r3, [r7, #20]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d1bd      	bne.n	800d166 <getpeer+0x1a>
 800d1ea:	e000      	b.n	800d1ee <getpeer+0xa2>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 800d1ec:	bf00      	nop
      break;
  }
  return c;
 800d1ee:	697b      	ldr	r3, [r7, #20]
}
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	371c      	adds	r7, #28
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fa:	4770      	bx	lr

0800d1fc <rx_udp>:

static void rx_udp(struct mip_if *ifp, struct pkt *pkt) {
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b084      	sub	sp, #16
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
 800d204:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, true);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d20a:	2201      	movs	r2, #1
 800d20c:	6839      	ldr	r1, [r7, #0]
 800d20e:	4618      	mov	r0, r3
 800d210:	f7ff ff9c 	bl	800d14c <getpeer>
 800d214:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d04d      	beq.n	800d2b8 <rx_udp+0xbc>
    // No UDP listener on this port. Should send ICMP, but keep silent.
  } else if (c != NULL) {
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d04a      	beq.n	800d2b8 <rx_udp+0xbc>
    c->rem.port = pkt->udp->sport;
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d226:	881b      	ldrh	r3, [r3, #0]
 800d228:	b29a      	uxth	r2, r3
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	849a      	strh	r2, [r3, #36]	; 0x24
    c->rem.ip = pkt->ip->src;
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	69db      	ldr	r3, [r3, #28]
 800d232:	68da      	ldr	r2, [r3, #12]
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	629a      	str	r2, [r3, #40]	; 0x28
    if (c->recv.len >= MG_MAX_RECV_SIZE) {
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d23c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d240:	d304      	bcc.n	800d24c <rx_udp+0x50>
      mg_error(c, "max_recv_buf_size reached");
 800d242:	491f      	ldr	r1, [pc, #124]	; (800d2c0 <rx_udp+0xc4>)
 800d244:	68f8      	ldr	r0, [r7, #12]
 800d246:	f7f5 f83d 	bl	80022c4 <mg_error>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
      c->recv.len += pkt->pay.len;
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 800d24a:	e035      	b.n	800d2b8 <rx_udp+0xbc>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d254:	1ad2      	subs	r2, r2, r3
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	68db      	ldr	r3, [r3, #12]
 800d25a:	429a      	cmp	r2, r3
 800d25c:	d212      	bcs.n	800d284 <rx_udp+0x88>
               !mg_iobuf_resize(&c->recv, c->recv.len + pkt->pay.len)) {
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	68db      	ldr	r3, [r3, #12]
 800d26c:	4413      	add	r3, r2
 800d26e:	4619      	mov	r1, r3
 800d270:	f7f9 f820 	bl	80062b4 <mg_iobuf_resize>
 800d274:	4603      	mov	r3, r0
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 800d276:	2b00      	cmp	r3, #0
 800d278:	d104      	bne.n	800d284 <rx_udp+0x88>
      mg_error(c, "oom");
 800d27a:	4912      	ldr	r1, [pc, #72]	; (800d2c4 <rx_udp+0xc8>)
 800d27c:	68f8      	ldr	r0, [r7, #12]
 800d27e:	f7f5 f821 	bl	80022c4 <mg_error>
}
 800d282:	e019      	b.n	800d2b8 <rx_udp+0xbc>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d28c:	18d0      	adds	r0, r2, r3
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	6899      	ldr	r1, [r3, #8]
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	68db      	ldr	r3, [r3, #12]
 800d296:	461a      	mov	r2, r3
 800d298:	f005 fa4e 	bl	8012738 <memcpy>
      c->recv.len += pkt->pay.len;
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	68db      	ldr	r3, [r3, #12]
 800d2a4:	441a      	add	r2, r3
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	651a      	str	r2, [r3, #80]	; 0x50
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	330c      	adds	r3, #12
 800d2ae:	461a      	mov	r2, r3
 800d2b0:	2107      	movs	r1, #7
 800d2b2:	68f8      	ldr	r0, [r7, #12]
 800d2b4:	f7f4 ffe4 	bl	8002280 <mg_call>
}
 800d2b8:	bf00      	nop
 800d2ba:	3710      	adds	r7, #16
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	bd80      	pop	{r7, pc}
 800d2c0:	08015288 	.word	0x08015288
 800d2c4:	080152a4 	.word	0x080152a4

0800d2c8 <tx_tcp>:

static size_t tx_tcp(struct mip_if *ifp, uint32_t dst_ip, uint8_t flags,
                     uint16_t sport, uint16_t dport, uint32_t seq, uint32_t ack,
                     const void *buf, size_t len) {
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b08c      	sub	sp, #48	; 0x30
 800d2cc:	af02      	add	r7, sp, #8
 800d2ce:	60f8      	str	r0, [r7, #12]
 800d2d0:	60b9      	str	r1, [r7, #8]
 800d2d2:	4611      	mov	r1, r2
 800d2d4:	461a      	mov	r2, r3
 800d2d6:	460b      	mov	r3, r1
 800d2d8:	71fb      	strb	r3, [r7, #7]
 800d2da:	4613      	mov	r3, r2
 800d2dc:	80bb      	strh	r3, [r7, #4]
  struct ip *ip = tx_ip(ifp, 6, ifp->ip, dst_ip, sizeof(struct tcp) + len);
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	689a      	ldr	r2, [r3, #8]
 800d2e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2e4:	3314      	adds	r3, #20
 800d2e6:	9300      	str	r3, [sp, #0]
 800d2e8:	68bb      	ldr	r3, [r7, #8]
 800d2ea:	2106      	movs	r1, #6
 800d2ec:	68f8      	ldr	r0, [r7, #12]
 800d2ee:	f7ff fb91 	bl	800ca14 <tx_ip>
 800d2f2:	6278      	str	r0, [r7, #36]	; 0x24
  struct tcp *tcp = (struct tcp *) (ip + 1);
 800d2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2f6:	3314      	adds	r3, #20
 800d2f8:	623b      	str	r3, [r7, #32]
  memset(tcp, 0, sizeof(*tcp));
 800d2fa:	2214      	movs	r2, #20
 800d2fc:	2100      	movs	r1, #0
 800d2fe:	6a38      	ldr	r0, [r7, #32]
 800d300:	f005 fa42 	bl	8012788 <memset>
  memmove(tcp + 1, buf, len);
 800d304:	6a3b      	ldr	r3, [r7, #32]
 800d306:	3314      	adds	r3, #20
 800d308:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d30a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d30c:	4618      	mov	r0, r3
 800d30e:	f005 fa21 	bl	8012754 <memmove>
  tcp->sport = sport;
 800d312:	6a3b      	ldr	r3, [r7, #32]
 800d314:	88ba      	ldrh	r2, [r7, #4]
 800d316:	801a      	strh	r2, [r3, #0]
  tcp->dport = dport;
 800d318:	6a3b      	ldr	r3, [r7, #32]
 800d31a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800d31c:	805a      	strh	r2, [r3, #2]
  tcp->seq = seq;
 800d31e:	6a3b      	ldr	r3, [r7, #32]
 800d320:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d322:	605a      	str	r2, [r3, #4]
  tcp->ack = ack;
 800d324:	6a3b      	ldr	r3, [r7, #32]
 800d326:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d328:	609a      	str	r2, [r3, #8]
  tcp->flags = flags;
 800d32a:	6a3b      	ldr	r3, [r7, #32]
 800d32c:	79fa      	ldrb	r2, [r7, #7]
 800d32e:	735a      	strb	r2, [r3, #13]
  tcp->win = mg_htons(8192);
 800d330:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800d334:	f7fd ff3a 	bl	800b1ac <mg_ntohs>
 800d338:	4603      	mov	r3, r0
 800d33a:	461a      	mov	r2, r3
 800d33c:	6a3b      	ldr	r3, [r7, #32]
 800d33e:	81da      	strh	r2, [r3, #14]
  tcp->off = (uint8_t) (sizeof(*tcp) / 4 << 4);
 800d340:	6a3b      	ldr	r3, [r7, #32]
 800d342:	2250      	movs	r2, #80	; 0x50
 800d344:	731a      	strb	r2, [r3, #12]
  uint32_t cs = 0;
 800d346:	2300      	movs	r3, #0
 800d348:	61fb      	str	r3, [r7, #28]
  uint16_t n = (uint16_t) (sizeof(*tcp) + len);
 800d34a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d34c:	b29b      	uxth	r3, r3
 800d34e:	3314      	adds	r3, #20
 800d350:	837b      	strh	r3, [r7, #26]
  uint8_t pseudo[] = {0, ip->proto, (uint8_t) (n >> 8), (uint8_t) (n & 255)};
 800d352:	2300      	movs	r3, #0
 800d354:	753b      	strb	r3, [r7, #20]
 800d356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d358:	7a5b      	ldrb	r3, [r3, #9]
 800d35a:	757b      	strb	r3, [r7, #21]
 800d35c:	8b7b      	ldrh	r3, [r7, #26]
 800d35e:	0a1b      	lsrs	r3, r3, #8
 800d360:	b29b      	uxth	r3, r3
 800d362:	b2db      	uxtb	r3, r3
 800d364:	75bb      	strb	r3, [r7, #22]
 800d366:	8b7b      	ldrh	r3, [r7, #26]
 800d368:	b2db      	uxtb	r3, r3
 800d36a:	75fb      	strb	r3, [r7, #23]
  cs = csumup(cs, tcp, n);
 800d36c:	8b7b      	ldrh	r3, [r7, #26]
 800d36e:	461a      	mov	r2, r3
 800d370:	6a39      	ldr	r1, [r7, #32]
 800d372:	69f8      	ldr	r0, [r7, #28]
 800d374:	f7ff f8b1 	bl	800c4da <csumup>
 800d378:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 800d37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d37c:	330c      	adds	r3, #12
 800d37e:	2204      	movs	r2, #4
 800d380:	4619      	mov	r1, r3
 800d382:	69f8      	ldr	r0, [r7, #28]
 800d384:	f7ff f8a9 	bl	800c4da <csumup>
 800d388:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 800d38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d38c:	3310      	adds	r3, #16
 800d38e:	2204      	movs	r2, #4
 800d390:	4619      	mov	r1, r3
 800d392:	69f8      	ldr	r0, [r7, #28]
 800d394:	f7ff f8a1 	bl	800c4da <csumup>
 800d398:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, pseudo, sizeof(pseudo));
 800d39a:	f107 0314 	add.w	r3, r7, #20
 800d39e:	2204      	movs	r2, #4
 800d3a0:	4619      	mov	r1, r3
 800d3a2:	69f8      	ldr	r0, [r7, #28]
 800d3a4:	f7ff f899 	bl	800c4da <csumup>
 800d3a8:	61f8      	str	r0, [r7, #28]
  tcp->csum = csumfin(cs);
 800d3aa:	69f8      	ldr	r0, [r7, #28]
 800d3ac:	f7ff f8c2 	bl	800c534 <csumfin>
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	461a      	mov	r2, r3
 800d3b4:	6a3b      	ldr	r3, [r7, #32]
 800d3b6:	821a      	strh	r2, [r3, #16]
  return ether_output(ifp, PDIFF(ifp->tx.buf, tcp + 1) + len);
 800d3b8:	6a3b      	ldr	r3, [r7, #32]
 800d3ba:	f103 0214 	add.w	r2, r3, #20
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	69db      	ldr	r3, [r3, #28]
 800d3c2:	1ad3      	subs	r3, r2, r3
 800d3c4:	461a      	mov	r2, r3
 800d3c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3c8:	4413      	add	r3, r2
 800d3ca:	4619      	mov	r1, r3
 800d3cc:	68f8      	ldr	r0, [r7, #12]
 800d3ce:	f7ff f9fb 	bl	800c7c8 <ether_output>
 800d3d2:	4603      	mov	r3, r0
}
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	3728      	adds	r7, #40	; 0x28
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bd80      	pop	{r7, pc}

0800d3dc <tx_tcp_pkt>:

static size_t tx_tcp_pkt(struct mip_if *ifp, struct pkt *pkt, uint8_t flags,
                         uint32_t seq, const void *buf, size_t len) {
 800d3dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3de:	b08d      	sub	sp, #52	; 0x34
 800d3e0:	af06      	add	r7, sp, #24
 800d3e2:	60f8      	str	r0, [r7, #12]
 800d3e4:	60b9      	str	r1, [r7, #8]
 800d3e6:	603b      	str	r3, [r7, #0]
 800d3e8:	4613      	mov	r3, r2
 800d3ea:	71fb      	strb	r3, [r7, #7]
  uint32_t delta = (pkt->tcp->flags & (TH_SYN | TH_FIN)) ? 1 : 0;
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3f0:	7b5b      	ldrb	r3, [r3, #13]
 800d3f2:	f003 0303 	and.w	r3, r3, #3
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	bf14      	ite	ne
 800d3fa:	2301      	movne	r3, #1
 800d3fc:	2300      	moveq	r3, #0
 800d3fe:	b2db      	uxtb	r3, r3
 800d400:	617b      	str	r3, [r7, #20]
  return tx_tcp(ifp, pkt->ip->src, flags, pkt->tcp->dport, pkt->tcp->sport, seq,
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	69db      	ldr	r3, [r3, #28]
 800d406:	68dd      	ldr	r5, [r3, #12]
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d40c:	885b      	ldrh	r3, [r3, #2]
 800d40e:	b29e      	uxth	r6, r3
 800d410:	68bb      	ldr	r3, [r7, #8]
 800d412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d414:	881b      	ldrh	r3, [r3, #0]
 800d416:	b29c      	uxth	r4, r3
                mg_htonl(mg_ntohl(pkt->tcp->seq) + delta), buf, len);
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d41c:	685b      	ldr	r3, [r3, #4]
 800d41e:	4618      	mov	r0, r3
 800d420:	f7fd feab 	bl	800b17a <mg_ntohl>
 800d424:	4602      	mov	r2, r0
  return tx_tcp(ifp, pkt->ip->src, flags, pkt->tcp->dport, pkt->tcp->sport, seq,
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	4413      	add	r3, r2
 800d42a:	4618      	mov	r0, r3
 800d42c:	f7fd fea5 	bl	800b17a <mg_ntohl>
 800d430:	4601      	mov	r1, r0
 800d432:	79fa      	ldrb	r2, [r7, #7]
 800d434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d436:	9304      	str	r3, [sp, #16]
 800d438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d43a:	9303      	str	r3, [sp, #12]
 800d43c:	9102      	str	r1, [sp, #8]
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	9301      	str	r3, [sp, #4]
 800d442:	9400      	str	r4, [sp, #0]
 800d444:	4633      	mov	r3, r6
 800d446:	4629      	mov	r1, r5
 800d448:	68f8      	ldr	r0, [r7, #12]
 800d44a:	f7ff ff3d 	bl	800d2c8 <tx_tcp>
 800d44e:	4603      	mov	r3, r0
}
 800d450:	4618      	mov	r0, r3
 800d452:	371c      	adds	r7, #28
 800d454:	46bd      	mov	sp, r7
 800d456:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d458 <accept_conn>:

static struct mg_connection *accept_conn(struct mg_connection *lsn,
                                         struct pkt *pkt) {
 800d458:	b5b0      	push	{r4, r5, r7, lr}
 800d45a:	b084      	sub	sp, #16
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
 800d460:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = mg_alloc_conn(lsn->mgr);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	685b      	ldr	r3, [r3, #4]
 800d466:	4618      	mov	r0, r3
 800d468:	f7fa ff33 	bl	80082d2 <mg_alloc_conn>
 800d46c:	60f8      	str	r0, [r7, #12]
  struct connstate *s = (struct connstate *) (c + 1);
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	33b4      	adds	r3, #180	; 0xb4
 800d472:	60bb      	str	r3, [r7, #8]
  s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq);
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d478:	689b      	ldr	r3, [r3, #8]
 800d47a:	4618      	mov	r0, r3
 800d47c:	f7fd fe7d 	bl	800b17a <mg_ntohl>
 800d480:	4602      	mov	r2, r0
 800d482:	68bb      	ldr	r3, [r7, #8]
 800d484:	601a      	str	r2, [r3, #0]
 800d486:	683b      	ldr	r3, [r7, #0]
 800d488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d48a:	685b      	ldr	r3, [r3, #4]
 800d48c:	4618      	mov	r0, r3
 800d48e:	f7fd fe74 	bl	800b17a <mg_ntohl>
 800d492:	4602      	mov	r2, r0
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	605a      	str	r2, [r3, #4]
  s->timer = ((struct mip_if *) c->mgr->priv)->now + MIP_TCP_KEEPALIVE_MS;
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	685b      	ldr	r3, [r3, #4]
 800d49c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d49e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800d4a2:	f64a 71c8 	movw	r1, #45000	; 0xafc8
 800d4a6:	1854      	adds	r4, r2, r1
 800d4a8:	f143 0500 	adc.w	r5, r3, #0
 800d4ac:	68bb      	ldr	r3, [r7, #8]
 800d4ae:	e9c3 4502 	strd	r4, r5, [r3, #8]
  c->rem.ip = pkt->ip->src;
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	69db      	ldr	r3, [r3, #28]
 800d4b6:	68da      	ldr	r2, [r3, #12]
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	629a      	str	r2, [r3, #40]	; 0x28
  c->rem.port = pkt->tcp->sport;
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4c0:	881b      	ldrh	r3, [r3, #0]
 800d4c2:	b29a      	uxth	r2, r3
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	849a      	strh	r2, [r3, #36]	; 0x24
  MG_DEBUG(("%lu accepted %lx:%hx", c->id, mg_ntohl(c->rem.ip), c->rem.port));
 800d4c8:	4b2f      	ldr	r3, [pc, #188]	; (800d588 <accept_conn+0x130>)
 800d4ca:	f641 22bd 	movw	r2, #6845	; 0x1abd
 800d4ce:	492f      	ldr	r1, [pc, #188]	; (800d58c <accept_conn+0x134>)
 800d4d0:	2003      	movs	r0, #3
 800d4d2:	f7f9 fde7 	bl	80070a4 <mg_log_prefix>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d00d      	beq.n	800d4f8 <accept_conn+0xa0>
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f7fd fe48 	bl	800b17a <mg_ntohl>
 800d4ea:	4602      	mov	r2, r0
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d4f0:	4621      	mov	r1, r4
 800d4f2:	4827      	ldr	r0, [pc, #156]	; (800d590 <accept_conn+0x138>)
 800d4f4:	f7f9 fe30 	bl	8007158 <mg_log>
  LIST_ADD_HEAD(struct mg_connection, &lsn->mgr->conns, c);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	685b      	ldr	r3, [r3, #4]
 800d4fc:	681a      	ldr	r2, [r3, #0]
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	601a      	str	r2, [r3, #0]
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	685b      	ldr	r3, [r3, #4]
 800d506:	68fa      	ldr	r2, [r7, #12]
 800d508:	601a      	str	r2, [r3, #0]
  c->is_accepted = 1;
 800d50a:	68fa      	ldr	r2, [r7, #12]
 800d50c:	f892 30b0 	ldrb.w	r3, [r2, #176]	; 0xb0
 800d510:	f043 0304 	orr.w	r3, r3, #4
 800d514:	f882 30b0 	strb.w	r3, [r2, #176]	; 0xb0
  c->is_hexdumping = lsn->is_hexdumping;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800d51e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800d522:	b2d9      	uxtb	r1, r3
 800d524:	68fa      	ldr	r2, [r7, #12]
 800d526:	f892 30b1 	ldrb.w	r3, [r2, #177]	; 0xb1
 800d52a:	f361 0382 	bfi	r3, r1, #2, #1
 800d52e:	f882 30b1 	strb.w	r3, [r2, #177]	; 0xb1
  c->pfn = lsn->pfn;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	671a      	str	r2, [r3, #112]	; 0x70
  c->loc = lsn->loc;
 800d53a:	68fa      	ldr	r2, [r7, #12]
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f102 0408 	add.w	r4, r2, #8
 800d542:	f103 0508 	add.w	r5, r3, #8
 800d546:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d548:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d54a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d54e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  c->pfn_data = lsn->pfn_data;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	675a      	str	r2, [r3, #116]	; 0x74
  c->fn = lsn->fn;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	669a      	str	r2, [r3, #104]	; 0x68
  c->fn_data = lsn->fn_data;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	66da      	str	r2, [r3, #108]	; 0x6c
  mg_call(c, MG_EV_OPEN, NULL);
 800d56a:	2200      	movs	r2, #0
 800d56c:	2101      	movs	r1, #1
 800d56e:	68f8      	ldr	r0, [r7, #12]
 800d570:	f7f4 fe86 	bl	8002280 <mg_call>
  mg_call(c, MG_EV_ACCEPT, NULL);
 800d574:	2200      	movs	r2, #0
 800d576:	2105      	movs	r1, #5
 800d578:	68f8      	ldr	r0, [r7, #12]
 800d57a:	f7f4 fe81 	bl	8002280 <mg_call>
  return c;
 800d57e:	68fb      	ldr	r3, [r7, #12]
}
 800d580:	4618      	mov	r0, r3
 800d582:	3710      	adds	r7, #16
 800d584:	46bd      	mov	sp, r7
 800d586:	bdb0      	pop	{r4, r5, r7, pc}
 800d588:	080157c8 	.word	0x080157c8
 800d58c:	08013b30 	.word	0x08013b30
 800d590:	080152a8 	.word	0x080152a8

0800d594 <settmout>:

static void settmout(struct mg_connection *c, uint8_t type) {
 800d594:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800d598:	b088      	sub	sp, #32
 800d59a:	af02      	add	r7, sp, #8
 800d59c:	6078      	str	r0, [r7, #4]
 800d59e:	460b      	mov	r3, r1
 800d5a0:	70fb      	strb	r3, [r7, #3]
  struct mip_if *ifp = (struct mip_if *) c->mgr->priv;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	685b      	ldr	r3, [r3, #4]
 800d5a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5a8:	617b      	str	r3, [r7, #20]
  struct connstate *s = (struct connstate *) (c + 1);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	33b4      	adds	r3, #180	; 0xb4
 800d5ae:	613b      	str	r3, [r7, #16]
  unsigned n = type == MIP_TTYPE_ACK ? MIP_TCP_ACK_MS : MIP_TCP_KEEPALIVE_MS;
 800d5b0:	78fb      	ldrb	r3, [r7, #3]
 800d5b2:	2b01      	cmp	r3, #1
 800d5b4:	d101      	bne.n	800d5ba <settmout+0x26>
 800d5b6:	2396      	movs	r3, #150	; 0x96
 800d5b8:	e001      	b.n	800d5be <settmout+0x2a>
 800d5ba:	f64a 73c8 	movw	r3, #45000	; 0xafc8
 800d5be:	60fb      	str	r3, [r7, #12]
  s->timer = ifp->now + n;
 800d5c0:	697b      	ldr	r3, [r7, #20]
 800d5c2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800d5c6:	68f9      	ldr	r1, [r7, #12]
 800d5c8:	2000      	movs	r0, #0
 800d5ca:	460c      	mov	r4, r1
 800d5cc:	4605      	mov	r5, r0
 800d5ce:	eb12 0804 	adds.w	r8, r2, r4
 800d5d2:	eb43 0905 	adc.w	r9, r3, r5
 800d5d6:	693b      	ldr	r3, [r7, #16]
 800d5d8:	e9c3 8902 	strd	r8, r9, [r3, #8]
  s->ttype = type;
 800d5dc:	693b      	ldr	r3, [r7, #16]
 800d5de:	78fa      	ldrb	r2, [r7, #3]
 800d5e0:	759a      	strb	r2, [r3, #22]
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 800d5e2:	4b0d      	ldr	r3, [pc, #52]	; (800d618 <settmout+0x84>)
 800d5e4:	f641 22d1 	movw	r2, #6865	; 0x1ad1
 800d5e8:	490c      	ldr	r1, [pc, #48]	; (800d61c <settmout+0x88>)
 800d5ea:	2004      	movs	r0, #4
 800d5ec:	f7f9 fd5a 	bl	80070a4 <mg_log_prefix>
 800d5f0:	4603      	mov	r3, r0
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d00b      	beq.n	800d60e <settmout+0x7a>
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800d5fa:	78f8      	ldrb	r0, [r7, #3]
 800d5fc:	693b      	ldr	r3, [r7, #16]
 800d5fe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d602:	e9cd 2300 	strd	r2, r3, [sp]
 800d606:	4602      	mov	r2, r0
 800d608:	4805      	ldr	r0, [pc, #20]	; (800d620 <settmout+0x8c>)
 800d60a:	f7f9 fda5 	bl	8007158 <mg_log>
}
 800d60e:	bf00      	nop
 800d610:	3718      	adds	r7, #24
 800d612:	46bd      	mov	sp, r7
 800d614:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800d618:	080157d4 	.word	0x080157d4
 800d61c:	08013b30 	.word	0x08013b30
 800d620:	080152c0 	.word	0x080152c0

0800d624 <mg_io_send>:

long mg_io_send(struct mg_connection *c, const void *buf, size_t len) {
 800d624:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d626:	b08f      	sub	sp, #60	; 0x3c
 800d628:	af06      	add	r7, sp, #24
 800d62a:	60f8      	str	r0, [r7, #12]
 800d62c:	60b9      	str	r1, [r7, #8]
 800d62e:	607a      	str	r2, [r7, #4]
  struct mip_if *ifp = (struct mip_if *) c->mgr->priv;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	685b      	ldr	r3, [r3, #4]
 800d634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d636:	61fb      	str	r3, [r7, #28]
  struct connstate *s = (struct connstate *) (c + 1);
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	33b4      	adds	r3, #180	; 0xb4
 800d63c:	61bb      	str	r3, [r7, #24]
  size_t max_headers_len = 14 + 24 /* max IP */ + 60 /* max TCP */;
 800d63e:	2362      	movs	r3, #98	; 0x62
 800d640:	617b      	str	r3, [r7, #20]
  if (len + max_headers_len > ifp->tx.len) len = ifp->tx.len - max_headers_len;
 800d642:	687a      	ldr	r2, [r7, #4]
 800d644:	697b      	ldr	r3, [r7, #20]
 800d646:	441a      	add	r2, r3
 800d648:	69fb      	ldr	r3, [r7, #28]
 800d64a:	6a1b      	ldr	r3, [r3, #32]
 800d64c:	429a      	cmp	r2, r3
 800d64e:	d904      	bls.n	800d65a <mg_io_send+0x36>
 800d650:	69fb      	ldr	r3, [r7, #28]
 800d652:	6a1a      	ldr	r2, [r3, #32]
 800d654:	697b      	ldr	r3, [r7, #20]
 800d656:	1ad3      	subs	r3, r2, r3
 800d658:	607b      	str	r3, [r7, #4]
  if (tx_tcp(ifp, c->rem.ip, TH_PUSH | TH_ACK, c->loc.port, c->rem.port,
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	891e      	ldrh	r6, [r3, #8]
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
 800d666:	69bb      	ldr	r3, [r7, #24]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	4618      	mov	r0, r3
 800d66c:	f7fd fd85 	bl	800b17a <mg_ntohl>
 800d670:	6038      	str	r0, [r7, #0]
 800d672:	69bb      	ldr	r3, [r7, #24]
 800d674:	685b      	ldr	r3, [r3, #4]
 800d676:	4618      	mov	r0, r3
 800d678:	f7fd fd7f 	bl	800b17a <mg_ntohl>
 800d67c:	4602      	mov	r2, r0
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	9304      	str	r3, [sp, #16]
 800d682:	68bb      	ldr	r3, [r7, #8]
 800d684:	9303      	str	r3, [sp, #12]
 800d686:	9202      	str	r2, [sp, #8]
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	9301      	str	r3, [sp, #4]
 800d68c:	9400      	str	r4, [sp, #0]
 800d68e:	4633      	mov	r3, r6
 800d690:	2218      	movs	r2, #24
 800d692:	4629      	mov	r1, r5
 800d694:	69f8      	ldr	r0, [r7, #28]
 800d696:	f7ff fe17 	bl	800d2c8 <tx_tcp>
 800d69a:	4603      	mov	r3, r0
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d00e      	beq.n	800d6be <mg_io_send+0x9a>
             mg_htonl(s->seq), mg_htonl(s->ack), buf, len) > 0) {
    s->seq += (uint32_t) len;
 800d6a0:	69bb      	ldr	r3, [r7, #24]
 800d6a2:	681a      	ldr	r2, [r3, #0]
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	441a      	add	r2, r3
 800d6a8:	69bb      	ldr	r3, [r7, #24]
 800d6aa:	601a      	str	r2, [r3, #0]
    if (s->ttype == MIP_TTYPE_KEEPALIVE) settmout(c, MIP_TTYPE_KEEPALIVE);
 800d6ac:	69bb      	ldr	r3, [r7, #24]
 800d6ae:	7d9b      	ldrb	r3, [r3, #22]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d107      	bne.n	800d6c4 <mg_io_send+0xa0>
 800d6b4:	2100      	movs	r1, #0
 800d6b6:	68f8      	ldr	r0, [r7, #12]
 800d6b8:	f7ff ff6c 	bl	800d594 <settmout>
 800d6bc:	e002      	b.n	800d6c4 <mg_io_send+0xa0>
  } else {
    return MG_IO_ERR;
 800d6be:	f04f 33ff 	mov.w	r3, #4294967295
 800d6c2:	e000      	b.n	800d6c6 <mg_io_send+0xa2>
  }
  return (long) len;
 800d6c4:	687b      	ldr	r3, [r7, #4]
}
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	3724      	adds	r7, #36	; 0x24
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800d6d0 <read_conn>:
  mg_iobuf_del(&s->raw, 0, len);
  MG_DEBUG(("%lu", len));
  return (long) len;
}

static void read_conn(struct mg_connection *c, struct pkt *pkt) {
 800d6d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6d4:	b08e      	sub	sp, #56	; 0x38
 800d6d6:	af06      	add	r7, sp, #24
 800d6d8:	60f8      	str	r0, [r7, #12]
 800d6da:	60b9      	str	r1, [r7, #8]
  struct connstate *s = (struct connstate *) (c + 1);
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	33b4      	adds	r3, #180	; 0xb4
 800d6e0:	61fb      	str	r3, [r7, #28]
  struct mg_iobuf *io = c->is_tls ? &s->raw : &c->recv;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800d6e8:	f003 0320 	and.w	r3, r3, #32
 800d6ec:	b2db      	uxtb	r3, r3
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d002      	beq.n	800d6f8 <read_conn+0x28>
 800d6f2:	69fb      	ldr	r3, [r7, #28]
 800d6f4:	3318      	adds	r3, #24
 800d6f6:	e001      	b.n	800d6fc <read_conn+0x2c>
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	3348      	adds	r3, #72	; 0x48
 800d6fc:	61bb      	str	r3, [r7, #24]
  uint32_t seq = mg_ntohl(pkt->tcp->seq);
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d702:	685b      	ldr	r3, [r3, #4]
 800d704:	4618      	mov	r0, r3
 800d706:	f7fd fd38 	bl	800b17a <mg_ntohl>
 800d70a:	6178      	str	r0, [r7, #20]
  s->raw.align = c->recv.align;
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d710:	69fb      	ldr	r3, [r7, #28]
 800d712:	625a      	str	r2, [r3, #36]	; 0x24
  if (pkt->tcp->flags & TH_FIN) {
 800d714:	68bb      	ldr	r3, [r7, #8]
 800d716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d718:	7b5b      	ldrb	r3, [r3, #13]
 800d71a:	f003 0301 	and.w	r3, r3, #1
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d01a      	beq.n	800d758 <read_conn+0x88>
    s->ack = mg_htonl(pkt->tcp->seq) + 1, s->seq = mg_htonl(pkt->tcp->ack);
 800d722:	68bb      	ldr	r3, [r7, #8]
 800d724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d726:	685b      	ldr	r3, [r3, #4]
 800d728:	4618      	mov	r0, r3
 800d72a:	f7fd fd26 	bl	800b17a <mg_ntohl>
 800d72e:	4603      	mov	r3, r0
 800d730:	1c5a      	adds	r2, r3, #1
 800d732:	69fb      	ldr	r3, [r7, #28]
 800d734:	605a      	str	r2, [r3, #4]
 800d736:	68bb      	ldr	r3, [r7, #8]
 800d738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d73a:	689b      	ldr	r3, [r3, #8]
 800d73c:	4618      	mov	r0, r3
 800d73e:	f7fd fd1c 	bl	800b17a <mg_ntohl>
 800d742:	4602      	mov	r2, r0
 800d744:	69fb      	ldr	r3, [r7, #28]
 800d746:	601a      	str	r2, [r3, #0]
    c->is_closing = 1;
 800d748:	68fa      	ldr	r2, [r7, #12]
 800d74a:	f892 30b1 	ldrb.w	r3, [r2, #177]	; 0xb1
 800d74e:	f043 0310 	orr.w	r3, r3, #16
 800d752:	f882 30b1 	strb.w	r3, [r2, #177]	; 0xb1
    } else {
      // Plain text connection, data is already in c->recv, trigger MG_EV_READ
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 800d756:	e0f7      	b.n	800d948 <read_conn+0x278>
  } else if (pkt->pay.len == 0) {
 800d758:	68bb      	ldr	r3, [r7, #8]
 800d75a:	68db      	ldr	r3, [r3, #12]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	f000 80f3 	beq.w	800d948 <read_conn+0x278>
  } else if (seq != s->ack) {
 800d762:	69fb      	ldr	r3, [r7, #28]
 800d764:	685b      	ldr	r3, [r3, #4]
 800d766:	697a      	ldr	r2, [r7, #20]
 800d768:	429a      	cmp	r2, r3
 800d76a:	d007      	beq.n	800d77c <read_conn+0xac>
    mg_error(c, "SEQ != ACK: %x %x", seq, s->ack);
 800d76c:	69fb      	ldr	r3, [r7, #28]
 800d76e:	685b      	ldr	r3, [r3, #4]
 800d770:	697a      	ldr	r2, [r7, #20]
 800d772:	4978      	ldr	r1, [pc, #480]	; (800d954 <read_conn+0x284>)
 800d774:	68f8      	ldr	r0, [r7, #12]
 800d776:	f7f4 fda5 	bl	80022c4 <mg_error>
}
 800d77a:	e0e5      	b.n	800d948 <read_conn+0x278>
  } else if (io->size - io->len < pkt->pay.len &&
 800d77c:	69bb      	ldr	r3, [r7, #24]
 800d77e:	685a      	ldr	r2, [r3, #4]
 800d780:	69bb      	ldr	r3, [r7, #24]
 800d782:	689b      	ldr	r3, [r3, #8]
 800d784:	1ad2      	subs	r2, r2, r3
 800d786:	68bb      	ldr	r3, [r7, #8]
 800d788:	68db      	ldr	r3, [r3, #12]
 800d78a:	429a      	cmp	r2, r3
 800d78c:	d210      	bcs.n	800d7b0 <read_conn+0xe0>
             !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 800d78e:	69bb      	ldr	r3, [r7, #24]
 800d790:	689a      	ldr	r2, [r3, #8]
 800d792:	68bb      	ldr	r3, [r7, #8]
 800d794:	68db      	ldr	r3, [r3, #12]
 800d796:	4413      	add	r3, r2
 800d798:	4619      	mov	r1, r3
 800d79a:	69b8      	ldr	r0, [r7, #24]
 800d79c:	f7f8 fd8a 	bl	80062b4 <mg_iobuf_resize>
 800d7a0:	4603      	mov	r3, r0
  } else if (io->size - io->len < pkt->pay.len &&
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d104      	bne.n	800d7b0 <read_conn+0xe0>
    mg_error(c, "oom");
 800d7a6:	496c      	ldr	r1, [pc, #432]	; (800d958 <read_conn+0x288>)
 800d7a8:	68f8      	ldr	r0, [r7, #12]
 800d7aa:	f7f4 fd8b 	bl	80022c4 <mg_error>
 800d7ae:	e0cb      	b.n	800d948 <read_conn+0x278>
    memcpy(&io->buf[io->len], pkt->pay.buf, pkt->pay.len);
 800d7b0:	69bb      	ldr	r3, [r7, #24]
 800d7b2:	681a      	ldr	r2, [r3, #0]
 800d7b4:	69bb      	ldr	r3, [r7, #24]
 800d7b6:	689b      	ldr	r3, [r3, #8]
 800d7b8:	18d0      	adds	r0, r2, r3
 800d7ba:	68bb      	ldr	r3, [r7, #8]
 800d7bc:	6899      	ldr	r1, [r3, #8]
 800d7be:	68bb      	ldr	r3, [r7, #8]
 800d7c0:	68db      	ldr	r3, [r3, #12]
 800d7c2:	461a      	mov	r2, r3
 800d7c4:	f004 ffb8 	bl	8012738 <memcpy>
    io->len += pkt->pay.len;
 800d7c8:	69bb      	ldr	r3, [r7, #24]
 800d7ca:	689a      	ldr	r2, [r3, #8]
 800d7cc:	68bb      	ldr	r3, [r7, #8]
 800d7ce:	68db      	ldr	r3, [r3, #12]
 800d7d0:	441a      	add	r2, r3
 800d7d2:	69bb      	ldr	r3, [r7, #24]
 800d7d4:	609a      	str	r2, [r3, #8]
    MG_DEBUG(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 800d7d6:	4b61      	ldr	r3, [pc, #388]	; (800d95c <read_conn+0x28c>)
 800d7d8:	f641 3207 	movw	r2, #6919	; 0x1b07
 800d7dc:	4960      	ldr	r1, [pc, #384]	; (800d960 <read_conn+0x290>)
 800d7de:	2003      	movs	r0, #3
 800d7e0:	f7f9 fc60 	bl	80070a4 <mg_log_prefix>
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d00e      	beq.n	800d808 <read_conn+0x138>
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7f2:	685b      	ldr	r3, [r3, #4]
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	f7fd fcc0 	bl	800b17a <mg_ntohl>
 800d7fa:	4602      	mov	r2, r0
 800d7fc:	69fb      	ldr	r3, [r7, #28]
 800d7fe:	685b      	ldr	r3, [r3, #4]
 800d800:	4621      	mov	r1, r4
 800d802:	4858      	ldr	r0, [pc, #352]	; (800d964 <read_conn+0x294>)
 800d804:	f7f9 fca8 	bl	8007158 <mg_log>
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 800d808:	68bb      	ldr	r3, [r7, #8]
 800d80a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d80c:	685b      	ldr	r3, [r3, #4]
 800d80e:	4618      	mov	r0, r3
 800d810:	f7fd fcb3 	bl	800b17a <mg_ntohl>
 800d814:	4602      	mov	r2, r0
 800d816:	68bb      	ldr	r3, [r7, #8]
 800d818:	68db      	ldr	r3, [r3, #12]
 800d81a:	441a      	add	r2, r3
 800d81c:	69fb      	ldr	r3, [r7, #28]
 800d81e:	605a      	str	r2, [r3, #4]
    MG_DEBUG(("  imm ACK", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 800d820:	4b4e      	ldr	r3, [pc, #312]	; (800d95c <read_conn+0x28c>)
 800d822:	f641 320b 	movw	r2, #6923	; 0x1b0b
 800d826:	494e      	ldr	r1, [pc, #312]	; (800d960 <read_conn+0x290>)
 800d828:	2003      	movs	r0, #3
 800d82a:	f7f9 fc3b 	bl	80070a4 <mg_log_prefix>
 800d82e:	4603      	mov	r3, r0
 800d830:	2b00      	cmp	r3, #0
 800d832:	d00e      	beq.n	800d852 <read_conn+0x182>
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800d838:	68bb      	ldr	r3, [r7, #8]
 800d83a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d83c:	685b      	ldr	r3, [r3, #4]
 800d83e:	4618      	mov	r0, r3
 800d840:	f7fd fc9b 	bl	800b17a <mg_ntohl>
 800d844:	4602      	mov	r2, r0
 800d846:	69fb      	ldr	r3, [r7, #28]
 800d848:	685b      	ldr	r3, [r3, #4]
 800d84a:	4621      	mov	r1, r4
 800d84c:	4846      	ldr	r0, [pc, #280]	; (800d968 <read_conn+0x298>)
 800d84e:	f7f9 fc83 	bl	8007158 <mg_log>
    tx_tcp((struct mip_if *) c->mgr->priv, c->rem.ip, TH_ACK, c->loc.port,
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	685b      	ldr	r3, [r3, #4]
 800d856:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
 800d866:	69fb      	ldr	r3, [r7, #28]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	4618      	mov	r0, r3
 800d86c:	f7fd fc85 	bl	800b17a <mg_ntohl>
 800d870:	6078      	str	r0, [r7, #4]
 800d872:	69fb      	ldr	r3, [r7, #28]
 800d874:	685b      	ldr	r3, [r3, #4]
 800d876:	4618      	mov	r0, r3
 800d878:	f7fd fc7f 	bl	800b17a <mg_ntohl>
 800d87c:	4603      	mov	r3, r0
 800d87e:	2200      	movs	r2, #0
 800d880:	9204      	str	r2, [sp, #16]
 800d882:	4a3a      	ldr	r2, [pc, #232]	; (800d96c <read_conn+0x29c>)
 800d884:	9203      	str	r2, [sp, #12]
 800d886:	9302      	str	r3, [sp, #8]
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	9301      	str	r3, [sp, #4]
 800d88c:	9400      	str	r4, [sp, #0]
 800d88e:	4643      	mov	r3, r8
 800d890:	2210      	movs	r2, #16
 800d892:	4631      	mov	r1, r6
 800d894:	4628      	mov	r0, r5
 800d896:	f7ff fd17 	bl	800d2c8 <tx_tcp>
    if (c->is_tls) {
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800d8a0:	f003 0320 	and.w	r3, r3, #32
 800d8a4:	b2db      	uxtb	r3, r3
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d046      	beq.n	800d938 <read_conn+0x268>
      io = &c->recv;
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	3348      	adds	r3, #72	; 0x48
 800d8ae:	61bb      	str	r3, [r7, #24]
      if (io->size - io->len < pkt->pay.len &&
 800d8b0:	69bb      	ldr	r3, [r7, #24]
 800d8b2:	685a      	ldr	r2, [r3, #4]
 800d8b4:	69bb      	ldr	r3, [r7, #24]
 800d8b6:	689b      	ldr	r3, [r3, #8]
 800d8b8:	1ad2      	subs	r2, r2, r3
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	68db      	ldr	r3, [r3, #12]
 800d8be:	429a      	cmp	r2, r3
 800d8c0:	d210      	bcs.n	800d8e4 <read_conn+0x214>
          !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 800d8c2:	69bb      	ldr	r3, [r7, #24]
 800d8c4:	689a      	ldr	r2, [r3, #8]
 800d8c6:	68bb      	ldr	r3, [r7, #8]
 800d8c8:	68db      	ldr	r3, [r3, #12]
 800d8ca:	4413      	add	r3, r2
 800d8cc:	4619      	mov	r1, r3
 800d8ce:	69b8      	ldr	r0, [r7, #24]
 800d8d0:	f7f8 fcf0 	bl	80062b4 <mg_iobuf_resize>
 800d8d4:	4603      	mov	r3, r0
      if (io->size - io->len < pkt->pay.len &&
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d104      	bne.n	800d8e4 <read_conn+0x214>
        mg_error(c, "oom");
 800d8da:	491f      	ldr	r1, [pc, #124]	; (800d958 <read_conn+0x288>)
 800d8dc:	68f8      	ldr	r0, [r7, #12]
 800d8de:	f7f4 fcf1 	bl	80022c4 <mg_error>
 800d8e2:	e031      	b.n	800d948 <read_conn+0x278>
        long n = mg_tls_recv(c, &io->buf[io->len], io->size - io->len);
 800d8e4:	69bb      	ldr	r3, [r7, #24]
 800d8e6:	681a      	ldr	r2, [r3, #0]
 800d8e8:	69bb      	ldr	r3, [r7, #24]
 800d8ea:	689b      	ldr	r3, [r3, #8]
 800d8ec:	18d1      	adds	r1, r2, r3
 800d8ee:	69bb      	ldr	r3, [r7, #24]
 800d8f0:	685a      	ldr	r2, [r3, #4]
 800d8f2:	69bb      	ldr	r3, [r7, #24]
 800d8f4:	689b      	ldr	r3, [r3, #8]
 800d8f6:	1ad3      	subs	r3, r2, r3
 800d8f8:	461a      	mov	r2, r3
 800d8fa:	68f8      	ldr	r0, [r7, #12]
 800d8fc:	f7fd fa94 	bl	800ae28 <mg_tls_recv>
 800d900:	4603      	mov	r3, r0
 800d902:	613b      	str	r3, [r7, #16]
        if (n == MG_IO_ERR) {
 800d904:	693b      	ldr	r3, [r7, #16]
 800d906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d90a:	d104      	bne.n	800d916 <read_conn+0x246>
          mg_error(c, "TLS recv error");
 800d90c:	4918      	ldr	r1, [pc, #96]	; (800d970 <read_conn+0x2a0>)
 800d90e:	68f8      	ldr	r0, [r7, #12]
 800d910:	f7f4 fcd8 	bl	80022c4 <mg_error>
}
 800d914:	e018      	b.n	800d948 <read_conn+0x278>
        } else if (n > 0) {
 800d916:	693b      	ldr	r3, [r7, #16]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	dd15      	ble.n	800d948 <read_conn+0x278>
          io->len += (size_t) n;
 800d91c:	69bb      	ldr	r3, [r7, #24]
 800d91e:	689b      	ldr	r3, [r3, #8]
 800d920:	693a      	ldr	r2, [r7, #16]
 800d922:	441a      	add	r2, r3
 800d924:	69bb      	ldr	r3, [r7, #24]
 800d926:	609a      	str	r2, [r3, #8]
          mg_call(c, MG_EV_READ, &n);
 800d928:	f107 0310 	add.w	r3, r7, #16
 800d92c:	461a      	mov	r2, r3
 800d92e:	2107      	movs	r1, #7
 800d930:	68f8      	ldr	r0, [r7, #12]
 800d932:	f7f4 fca5 	bl	8002280 <mg_call>
}
 800d936:	e007      	b.n	800d948 <read_conn+0x278>
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 800d938:	68bb      	ldr	r3, [r7, #8]
 800d93a:	330c      	adds	r3, #12
 800d93c:	461a      	mov	r2, r3
 800d93e:	2107      	movs	r1, #7
 800d940:	68f8      	ldr	r0, [r7, #12]
 800d942:	f7f4 fc9d 	bl	8002280 <mg_call>
}
 800d946:	e7ff      	b.n	800d948 <read_conn+0x278>
 800d948:	bf00      	nop
 800d94a:	3720      	adds	r7, #32
 800d94c:	46bd      	mov	sp, r7
 800d94e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d952:	bf00      	nop
 800d954:	080152d0 	.word	0x080152d0
 800d958:	080152a4 	.word	0x080152a4
 800d95c:	080157e0 	.word	0x080157e0
 800d960:	08013b30 	.word	0x08013b30
 800d964:	080152e4 	.word	0x080152e4
 800d968:	080152f8 	.word	0x080152f8
 800d96c:	08013e70 	.word	0x08013e70
 800d970:	08015304 	.word	0x08015304

0800d974 <rx_tcp>:

static void rx_tcp(struct mip_if *ifp, struct pkt *pkt) {
 800d974:	b590      	push	{r4, r7, lr}
 800d976:	b089      	sub	sp, #36	; 0x24
 800d978:	af02      	add	r7, sp, #8
 800d97a:	6078      	str	r0, [r7, #4]
 800d97c:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d982:	2200      	movs	r2, #0
 800d984:	6839      	ldr	r1, [r7, #0]
 800d986:	4618      	mov	r0, r3
 800d988:	f7ff fbe0 	bl	800d14c <getpeer>
 800d98c:	6178      	str	r0, [r7, #20]
  struct connstate *s = (struct connstate *) (c + 1);
 800d98e:	697b      	ldr	r3, [r7, #20]
 800d990:	33b4      	adds	r3, #180	; 0xb4
 800d992:	613b      	str	r3, [r7, #16]

  if (c != NULL && s->ttype == MIP_TTYPE_KEEPALIVE) {
 800d994:	697b      	ldr	r3, [r7, #20]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d00a      	beq.n	800d9b0 <rx_tcp+0x3c>
 800d99a:	693b      	ldr	r3, [r7, #16]
 800d99c:	7d9b      	ldrb	r3, [r3, #22]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d106      	bne.n	800d9b0 <rx_tcp+0x3c>
    s->tmiss = 0;                      // Reset missed keep-alive counter
 800d9a2:	693b      	ldr	r3, [r7, #16]
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	75da      	strb	r2, [r3, #23]
    settmout(c, MIP_TTYPE_KEEPALIVE);  // Advance keep-alive timer
 800d9a8:	2100      	movs	r1, #0
 800d9aa:	6978      	ldr	r0, [r7, #20]
 800d9ac:	f7ff fdf2 	bl	800d594 <settmout>
  }
#if 0
  MG_INFO(("%lu %hhu %d", c ? c->id : 0, pkt->tcp->flags, (int) pkt->pay.len));
#endif
  if (c != NULL && c->is_connecting && pkt->tcp->flags & (TH_SYN | TH_ACK)) {
 800d9b0:	697b      	ldr	r3, [r7, #20]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d03a      	beq.n	800da2c <rx_tcp+0xb8>
 800d9b6:	697b      	ldr	r3, [r7, #20]
 800d9b8:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800d9bc:	f003 0310 	and.w	r3, r3, #16
 800d9c0:	b2db      	uxtb	r3, r3
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d032      	beq.n	800da2c <rx_tcp+0xb8>
 800d9c6:	683b      	ldr	r3, [r7, #0]
 800d9c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9ca:	7b5b      	ldrb	r3, [r3, #13]
 800d9cc:	f003 0312 	and.w	r3, r3, #18
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d02b      	beq.n	800da2c <rx_tcp+0xb8>
    s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq) + 1;
 800d9d4:	683b      	ldr	r3, [r7, #0]
 800d9d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9d8:	689b      	ldr	r3, [r3, #8]
 800d9da:	4618      	mov	r0, r3
 800d9dc:	f7fd fbcd 	bl	800b17a <mg_ntohl>
 800d9e0:	4602      	mov	r2, r0
 800d9e2:	693b      	ldr	r3, [r7, #16]
 800d9e4:	601a      	str	r2, [r3, #0]
 800d9e6:	683b      	ldr	r3, [r7, #0]
 800d9e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9ea:	685b      	ldr	r3, [r3, #4]
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	f7fd fbc4 	bl	800b17a <mg_ntohl>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	1c5a      	adds	r2, r3, #1
 800d9f6:	693b      	ldr	r3, [r7, #16]
 800d9f8:	605a      	str	r2, [r3, #4]
    tx_tcp_pkt(ifp, pkt, TH_ACK, pkt->tcp->ack, NULL, 0);
 800d9fa:	683b      	ldr	r3, [r7, #0]
 800d9fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9fe:	689b      	ldr	r3, [r3, #8]
 800da00:	2200      	movs	r2, #0
 800da02:	9201      	str	r2, [sp, #4]
 800da04:	2200      	movs	r2, #0
 800da06:	9200      	str	r2, [sp, #0]
 800da08:	2210      	movs	r2, #16
 800da0a:	6839      	ldr	r1, [r7, #0]
 800da0c:	6878      	ldr	r0, [r7, #4]
 800da0e:	f7ff fce5 	bl	800d3dc <tx_tcp_pkt>
    c->is_connecting = 0;             // Client connected
 800da12:	697a      	ldr	r2, [r7, #20]
 800da14:	f892 30b0 	ldrb.w	r3, [r2, #176]	; 0xb0
 800da18:	f36f 1304 	bfc	r3, #4, #1
 800da1c:	f882 30b0 	strb.w	r3, [r2, #176]	; 0xb0
    mg_call(c, MG_EV_CONNECT, NULL);  // Let user know
 800da20:	2200      	movs	r2, #0
 800da22:	2104      	movs	r1, #4
 800da24:	6978      	ldr	r0, [r7, #20]
 800da26:	f7f4 fc2b 	bl	8002280 <mg_call>
 800da2a:	e080      	b.n	800db2e <rx_tcp+0x1ba>
  } else if (c != NULL && c->is_connecting) {
 800da2c:	697b      	ldr	r3, [r7, #20]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d014      	beq.n	800da5c <rx_tcp+0xe8>
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800da38:	f003 0310 	and.w	r3, r3, #16
 800da3c:	b2db      	uxtb	r3, r3
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d00c      	beq.n	800da5c <rx_tcp+0xe8>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da46:	689b      	ldr	r3, [r3, #8]
 800da48:	2200      	movs	r2, #0
 800da4a:	9201      	str	r2, [sp, #4]
 800da4c:	2200      	movs	r2, #0
 800da4e:	9200      	str	r2, [sp, #0]
 800da50:	2214      	movs	r2, #20
 800da52:	6839      	ldr	r1, [r7, #0]
 800da54:	6878      	ldr	r0, [r7, #4]
 800da56:	f7ff fcc1 	bl	800d3dc <tx_tcp_pkt>
 800da5a:	e068      	b.n	800db2e <rx_tcp+0x1ba>
  } else if (c != NULL) {
 800da5c:	697b      	ldr	r3, [r7, #20]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d004      	beq.n	800da6c <rx_tcp+0xf8>
    MG_DEBUG(("%lu %d %lx:%hu -> %lx:%hu", c->id, (int) pkt->raw.len,
              mg_ntohl(pkt->ip->src), mg_ntohs(pkt->tcp->sport),
              mg_ntohl(pkt->ip->dst), mg_ntohs(pkt->tcp->dport)));
    mg_hexdump(pkt->pay.buf, pkt->pay.len);
#endif
    read_conn(c, pkt);
 800da62:	6839      	ldr	r1, [r7, #0]
 800da64:	6978      	ldr	r0, [r7, #20]
 800da66:	f7ff fe33 	bl	800d6d0 <read_conn>
  } else if (mg_htonl(pkt->tcp->ack) == mg_htons(pkt->tcp->sport) + 1U) {
    accept_conn(c, pkt);
  } else {
    // MG_DEBUG(("dropped silently.."));
  }
}
 800da6a:	e060      	b.n	800db2e <rx_tcp+0x1ba>
  } else if ((c = getpeer(ifp->mgr, pkt, true)) == NULL) {
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da70:	2201      	movs	r2, #1
 800da72:	6839      	ldr	r1, [r7, #0]
 800da74:	4618      	mov	r0, r3
 800da76:	f7ff fb69 	bl	800d14c <getpeer>
 800da7a:	6178      	str	r0, [r7, #20]
 800da7c:	697b      	ldr	r3, [r7, #20]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d10c      	bne.n	800da9c <rx_tcp+0x128>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da86:	689b      	ldr	r3, [r3, #8]
 800da88:	2200      	movs	r2, #0
 800da8a:	9201      	str	r2, [sp, #4]
 800da8c:	2200      	movs	r2, #0
 800da8e:	9200      	str	r2, [sp, #0]
 800da90:	2214      	movs	r2, #20
 800da92:	6839      	ldr	r1, [r7, #0]
 800da94:	6878      	ldr	r0, [r7, #4]
 800da96:	f7ff fca1 	bl	800d3dc <tx_tcp_pkt>
}
 800da9a:	e048      	b.n	800db2e <rx_tcp+0x1ba>
  } else if (pkt->tcp->flags & TH_SYN) {
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daa0:	7b5b      	ldrb	r3, [r3, #13]
 800daa2:	f003 0302 	and.w	r3, r3, #2
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d016      	beq.n	800dad8 <rx_tcp+0x164>
    uint32_t isn = mg_htonl((uint32_t) mg_ntohs(pkt->tcp->sport));
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daae:	881b      	ldrh	r3, [r3, #0]
 800dab0:	b29b      	uxth	r3, r3
 800dab2:	4618      	mov	r0, r3
 800dab4:	f7fd fb7a 	bl	800b1ac <mg_ntohs>
 800dab8:	4603      	mov	r3, r0
 800daba:	4618      	mov	r0, r3
 800dabc:	f7fd fb5d 	bl	800b17a <mg_ntohl>
 800dac0:	60f8      	str	r0, [r7, #12]
    tx_tcp_pkt(ifp, pkt, TH_SYN | TH_ACK, isn, NULL, 0);
 800dac2:	2300      	movs	r3, #0
 800dac4:	9301      	str	r3, [sp, #4]
 800dac6:	2300      	movs	r3, #0
 800dac8:	9300      	str	r3, [sp, #0]
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	2212      	movs	r2, #18
 800dace:	6839      	ldr	r1, [r7, #0]
 800dad0:	6878      	ldr	r0, [r7, #4]
 800dad2:	f7ff fc83 	bl	800d3dc <tx_tcp_pkt>
}
 800dad6:	e02a      	b.n	800db2e <rx_tcp+0x1ba>
  } else if (pkt->tcp->flags & TH_FIN) {
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dadc:	7b5b      	ldrb	r3, [r3, #13]
 800dade:	f003 0301 	and.w	r3, r3, #1
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d00c      	beq.n	800db00 <rx_tcp+0x18c>
    tx_tcp_pkt(ifp, pkt, TH_FIN | TH_ACK, pkt->tcp->ack, NULL, 0);
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daea:	689b      	ldr	r3, [r3, #8]
 800daec:	2200      	movs	r2, #0
 800daee:	9201      	str	r2, [sp, #4]
 800daf0:	2200      	movs	r2, #0
 800daf2:	9200      	str	r2, [sp, #0]
 800daf4:	2211      	movs	r2, #17
 800daf6:	6839      	ldr	r1, [r7, #0]
 800daf8:	6878      	ldr	r0, [r7, #4]
 800dafa:	f7ff fc6f 	bl	800d3dc <tx_tcp_pkt>
}
 800dafe:	e016      	b.n	800db2e <rx_tcp+0x1ba>
  } else if (mg_htonl(pkt->tcp->ack) == mg_htons(pkt->tcp->sport) + 1U) {
 800db00:	683b      	ldr	r3, [r7, #0]
 800db02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db04:	689b      	ldr	r3, [r3, #8]
 800db06:	4618      	mov	r0, r3
 800db08:	f7fd fb37 	bl	800b17a <mg_ntohl>
 800db0c:	4604      	mov	r4, r0
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db12:	881b      	ldrh	r3, [r3, #0]
 800db14:	b29b      	uxth	r3, r3
 800db16:	4618      	mov	r0, r3
 800db18:	f7fd fb48 	bl	800b1ac <mg_ntohs>
 800db1c:	4603      	mov	r3, r0
 800db1e:	3301      	adds	r3, #1
 800db20:	429c      	cmp	r4, r3
 800db22:	d104      	bne.n	800db2e <rx_tcp+0x1ba>
    accept_conn(c, pkt);
 800db24:	6839      	ldr	r1, [r7, #0]
 800db26:	6978      	ldr	r0, [r7, #20]
 800db28:	f7ff fc96 	bl	800d458 <accept_conn>
}
 800db2c:	e7ff      	b.n	800db2e <rx_tcp+0x1ba>
 800db2e:	bf00      	nop
 800db30:	371c      	adds	r7, #28
 800db32:	46bd      	mov	sp, r7
 800db34:	bd90      	pop	{r4, r7, pc}

0800db36 <rx_ip>:

static void rx_ip(struct mip_if *ifp, struct pkt *pkt) {
 800db36:	b590      	push	{r4, r7, lr}
 800db38:	b085      	sub	sp, #20
 800db3a:	af00      	add	r7, sp, #0
 800db3c:	6078      	str	r0, [r7, #4]
 800db3e:	6039      	str	r1, [r7, #0]
  //  MG_DEBUG(("IP %d", (int) pkt->pay.len));
  if (pkt->ip->proto == 1) {
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	69db      	ldr	r3, [r3, #28]
 800db44:	7a5b      	ldrb	r3, [r3, #9]
 800db46:	2b01      	cmp	r3, #1
 800db48:	d115      	bne.n	800db76 <rx_ip+0x40>
    pkt->icmp = (struct icmp *) (pkt->ip + 1);
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	69db      	ldr	r3, [r3, #28]
 800db4e:	f103 0214 	add.w	r2, r3, #20
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	625a      	str	r2, [r3, #36]	; 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	68db      	ldr	r3, [r3, #12]
 800db5a:	2b03      	cmp	r3, #3
 800db5c:	d97b      	bls.n	800dc56 <rx_ip+0x120>
    mkpay(pkt, pkt->icmp + 1);
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db62:	3304      	adds	r3, #4
 800db64:	4619      	mov	r1, r3
 800db66:	6838      	ldr	r0, [r7, #0]
 800db68:	f7fe fc99 	bl	800c49e <mkpay>
    rx_icmp(ifp, pkt);
 800db6c:	6839      	ldr	r1, [r7, #0]
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	f7ff f9dc 	bl	800cf2c <rx_icmp>
 800db74:	e074      	b.n	800dc60 <rx_ip+0x12a>
  } else if (pkt->ip->proto == 17) {
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	69db      	ldr	r3, [r3, #28]
 800db7a:	7a5b      	ldrb	r3, [r3, #9]
 800db7c:	2b11      	cmp	r3, #17
 800db7e:	d132      	bne.n	800dbe6 <rx_ip+0xb0>
    pkt->udp = (struct udp *) (pkt->ip + 1);
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	69db      	ldr	r3, [r3, #28]
 800db84:	f103 0214 	add.w	r2, r3, #20
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	62da      	str	r2, [r3, #44]	; 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	68db      	ldr	r3, [r3, #12]
 800db90:	2b07      	cmp	r3, #7
 800db92:	d962      	bls.n	800dc5a <rx_ip+0x124>
    // MG_DEBUG(("  UDP %u %u -> %u", len, mg_htons(udp->sport),
    // mg_htons(udp->dport)));
    mkpay(pkt, pkt->udp + 1);
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db98:	3308      	adds	r3, #8
 800db9a:	4619      	mov	r1, r3
 800db9c:	6838      	ldr	r0, [r7, #0]
 800db9e:	f7fe fc7e 	bl	800c49e <mkpay>
    if (pkt->udp->dport == mg_htons(68)) {
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dba6:	885b      	ldrh	r3, [r3, #2]
 800dba8:	b29c      	uxth	r4, r3
 800dbaa:	2044      	movs	r0, #68	; 0x44
 800dbac:	f7fd fafe 	bl	800b1ac <mg_ntohs>
 800dbb0:	4603      	mov	r3, r0
 800dbb2:	429c      	cmp	r4, r3
 800dbb4:	d112      	bne.n	800dbdc <rx_ip+0xa6>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 800dbb6:	683b      	ldr	r3, [r7, #0]
 800dbb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbba:	f103 0208 	add.w	r2, r3, #8
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	631a      	str	r2, [r3, #48]	; 0x30
      mkpay(pkt, pkt->dhcp + 1);
 800dbc2:	683b      	ldr	r3, [r7, #0]
 800dbc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbc6:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800dbca:	4619      	mov	r1, r3
 800dbcc:	6838      	ldr	r0, [r7, #0]
 800dbce:	f7fe fc66 	bl	800c49e <mkpay>
      rx_dhcp(ifp, pkt);
 800dbd2:	6839      	ldr	r1, [r7, #0]
 800dbd4:	6878      	ldr	r0, [r7, #4]
 800dbd6:	f7ff fa01 	bl	800cfdc <rx_dhcp>
 800dbda:	e041      	b.n	800dc60 <rx_ip+0x12a>
    } else {
      rx_udp(ifp, pkt);
 800dbdc:	6839      	ldr	r1, [r7, #0]
 800dbde:	6878      	ldr	r0, [r7, #4]
 800dbe0:	f7ff fb0c 	bl	800d1fc <rx_udp>
 800dbe4:	e03c      	b.n	800dc60 <rx_ip+0x12a>
    }
  } else if (pkt->ip->proto == 6) {
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	69db      	ldr	r3, [r3, #28]
 800dbea:	7a5b      	ldrb	r3, [r3, #9]
 800dbec:	2b06      	cmp	r3, #6
 800dbee:	d137      	bne.n	800dc60 <rx_ip+0x12a>
    pkt->tcp = (struct tcp *) (pkt->ip + 1);
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	69db      	ldr	r3, [r3, #28]
 800dbf4:	f103 0214 	add.w	r2, r3, #20
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	629a      	str	r2, [r3, #40]	; 0x28
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	68db      	ldr	r3, [r3, #12]
 800dc00:	2b13      	cmp	r3, #19
 800dc02:	d92c      	bls.n	800dc5e <rx_ip+0x128>
    mkpay(pkt, pkt->tcp + 1);
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc08:	3314      	adds	r3, #20
 800dc0a:	4619      	mov	r1, r3
 800dc0c:	6838      	ldr	r0, [r7, #0]
 800dc0e:	f7fe fc46 	bl	800c49e <mkpay>
    uint16_t iplen = mg_ntohs(pkt->ip->len);
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	69db      	ldr	r3, [r3, #28]
 800dc16:	885b      	ldrh	r3, [r3, #2]
 800dc18:	b29b      	uxth	r3, r3
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	f7fd fac6 	bl	800b1ac <mg_ntohs>
 800dc20:	4603      	mov	r3, r0
 800dc22:	81fb      	strh	r3, [r7, #14]
    uint16_t off = (uint16_t) (sizeof(*pkt->ip) + ((pkt->tcp->off >> 4) * 4U));
 800dc24:	683b      	ldr	r3, [r7, #0]
 800dc26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc28:	7b1b      	ldrb	r3, [r3, #12]
 800dc2a:	091b      	lsrs	r3, r3, #4
 800dc2c:	b2db      	uxtb	r3, r3
 800dc2e:	b29b      	uxth	r3, r3
 800dc30:	3305      	adds	r3, #5
 800dc32:	b29b      	uxth	r3, r3
 800dc34:	009b      	lsls	r3, r3, #2
 800dc36:	81bb      	strh	r3, [r7, #12]
    if (iplen >= off) pkt->pay.len = (size_t) (iplen - off);
 800dc38:	89fa      	ldrh	r2, [r7, #14]
 800dc3a:	89bb      	ldrh	r3, [r7, #12]
 800dc3c:	429a      	cmp	r2, r3
 800dc3e:	d305      	bcc.n	800dc4c <rx_ip+0x116>
 800dc40:	89fa      	ldrh	r2, [r7, #14]
 800dc42:	89bb      	ldrh	r3, [r7, #12]
 800dc44:	1ad3      	subs	r3, r2, r3
 800dc46:	461a      	mov	r2, r3
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	60da      	str	r2, [r3, #12]
    rx_tcp(ifp, pkt);
 800dc4c:	6839      	ldr	r1, [r7, #0]
 800dc4e:	6878      	ldr	r0, [r7, #4]
 800dc50:	f7ff fe90 	bl	800d974 <rx_tcp>
 800dc54:	e004      	b.n	800dc60 <rx_ip+0x12a>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800dc56:	bf00      	nop
 800dc58:	e002      	b.n	800dc60 <rx_ip+0x12a>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800dc5a:	bf00      	nop
 800dc5c:	e000      	b.n	800dc60 <rx_ip+0x12a>
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 800dc5e:	bf00      	nop
  }
}
 800dc60:	3714      	adds	r7, #20
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd90      	pop	{r4, r7, pc}

0800dc66 <rx_ip6>:

static void rx_ip6(struct mip_if *ifp, struct pkt *pkt) {
 800dc66:	b580      	push	{r7, lr}
 800dc68:	b082      	sub	sp, #8
 800dc6a:	af00      	add	r7, sp, #0
 800dc6c:	6078      	str	r0, [r7, #4]
 800dc6e:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("IP %d", (int) len));
  if (pkt->ip6->proto == 1 || pkt->ip6->proto == 58) {
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	6a1b      	ldr	r3, [r3, #32]
 800dc74:	799b      	ldrb	r3, [r3, #6]
 800dc76:	2b01      	cmp	r3, #1
 800dc78:	d004      	beq.n	800dc84 <rx_ip6+0x1e>
 800dc7a:	683b      	ldr	r3, [r7, #0]
 800dc7c:	6a1b      	ldr	r3, [r3, #32]
 800dc7e:	799b      	ldrb	r3, [r3, #6]
 800dc80:	2b3a      	cmp	r3, #58	; 0x3a
 800dc82:	d115      	bne.n	800dcb0 <rx_ip6+0x4a>
    pkt->icmp = (struct icmp *) (pkt->ip6 + 1);
 800dc84:	683b      	ldr	r3, [r7, #0]
 800dc86:	6a1b      	ldr	r3, [r3, #32]
 800dc88:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	625a      	str	r2, [r3, #36]	; 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	68db      	ldr	r3, [r3, #12]
 800dc94:	2b03      	cmp	r3, #3
 800dc96:	d922      	bls.n	800dcde <rx_ip6+0x78>
    mkpay(pkt, pkt->icmp + 1);
 800dc98:	683b      	ldr	r3, [r7, #0]
 800dc9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc9c:	3304      	adds	r3, #4
 800dc9e:	4619      	mov	r1, r3
 800dca0:	6838      	ldr	r0, [r7, #0]
 800dca2:	f7fe fbfc 	bl	800c49e <mkpay>
    rx_icmp(ifp, pkt);
 800dca6:	6839      	ldr	r1, [r7, #0]
 800dca8:	6878      	ldr	r0, [r7, #4]
 800dcaa:	f7ff f93f 	bl	800cf2c <rx_icmp>
 800dcae:	e019      	b.n	800dce4 <rx_ip6+0x7e>
  } else if (pkt->ip6->proto == 17) {
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	6a1b      	ldr	r3, [r3, #32]
 800dcb4:	799b      	ldrb	r3, [r3, #6]
 800dcb6:	2b11      	cmp	r3, #17
 800dcb8:	d114      	bne.n	800dce4 <rx_ip6+0x7e>
    pkt->udp = (struct udp *) (pkt->ip6 + 1);
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	6a1b      	ldr	r3, [r3, #32]
 800dcbe:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800dcc2:	683b      	ldr	r3, [r7, #0]
 800dcc4:	62da      	str	r2, [r3, #44]	; 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800dcc6:	683b      	ldr	r3, [r7, #0]
 800dcc8:	68db      	ldr	r3, [r3, #12]
 800dcca:	2b07      	cmp	r3, #7
 800dccc:	d909      	bls.n	800dce2 <rx_ip6+0x7c>
    // MG_DEBUG(("  UDP %u %u -> %u", len, mg_htons(udp->sport),
    // mg_htons(udp->dport)));
    mkpay(pkt, pkt->udp + 1);
 800dcce:	683b      	ldr	r3, [r7, #0]
 800dcd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcd2:	3308      	adds	r3, #8
 800dcd4:	4619      	mov	r1, r3
 800dcd6:	6838      	ldr	r0, [r7, #0]
 800dcd8:	f7fe fbe1 	bl	800c49e <mkpay>
 800dcdc:	e002      	b.n	800dce4 <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800dcde:	bf00      	nop
 800dce0:	e000      	b.n	800dce4 <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800dce2:	bf00      	nop
  }
}
 800dce4:	3708      	adds	r7, #8
 800dce6:	46bd      	mov	sp, r7
 800dce8:	bd80      	pop	{r7, pc}
	...

0800dcec <mip_rx>:

static void mip_rx(struct mip_if *ifp, void *buf, size_t len) {
 800dcec:	b590      	push	{r4, r7, lr}
 800dcee:	b095      	sub	sp, #84	; 0x54
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	60f8      	str	r0, [r7, #12]
 800dcf4:	60b9      	str	r1, [r7, #8]
 800dcf6:	607a      	str	r2, [r7, #4]
  const uint8_t broadcast[] = {255, 255, 255, 255, 255, 255};
 800dcf8:	4a65      	ldr	r2, [pc, #404]	; (800de90 <mip_rx+0x1a4>)
 800dcfa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dcfe:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dd02:	6018      	str	r0, [r3, #0]
 800dd04:	3304      	adds	r3, #4
 800dd06:	8019      	strh	r1, [r3, #0]
  // struct pkt pkt = {.raw = {.buf = (uint8_t *) buf, .len = len}};
  struct pkt pkt;
  memset(&pkt, 0, sizeof(pkt));
 800dd08:	f107 0314 	add.w	r3, r7, #20
 800dd0c:	2234      	movs	r2, #52	; 0x34
 800dd0e:	2100      	movs	r1, #0
 800dd10:	4618      	mov	r0, r3
 800dd12:	f004 fd39 	bl	8012788 <memset>
  pkt.raw.buf = (uint8_t *) buf;
 800dd16:	68bb      	ldr	r3, [r7, #8]
 800dd18:	617b      	str	r3, [r7, #20]
  pkt.raw.len = len;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	61bb      	str	r3, [r7, #24]
  pkt.eth = (struct eth *) buf;
 800dd1e:	68bb      	ldr	r3, [r7, #8]
 800dd20:	627b      	str	r3, [r7, #36]	; 0x24
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 800dd22:	69bb      	ldr	r3, [r7, #24]
 800dd24:	2b0d      	cmp	r3, #13
 800dd26:	f240 80a4 	bls.w	800de72 <mip_rx+0x186>
  if (memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 800dd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	2206      	movs	r2, #6
 800dd32:	4619      	mov	r1, r3
 800dd34:	f004 fcf0 	bl	8012718 <memcmp>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d00b      	beq.n	800dd56 <mip_rx+0x6a>
      memcmp(pkt.eth->dst, broadcast, sizeof(pkt.eth->dst)) != 0) {
 800dd3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd40:	4618      	mov	r0, r3
 800dd42:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dd46:	2206      	movs	r2, #6
 800dd48:	4619      	mov	r1, r3
 800dd4a:	f004 fce5 	bl	8012718 <memcmp>
 800dd4e:	4603      	mov	r3, r0
  if (memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	f040 8099 	bne.w	800de88 <mip_rx+0x19c>
    // Not for us. Drop silently
  } else if (pkt.eth->type == mg_htons(0x806)) {
 800dd56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd58:	899b      	ldrh	r3, [r3, #12]
 800dd5a:	b29c      	uxth	r4, r3
 800dd5c:	f640 0006 	movw	r0, #2054	; 0x806
 800dd60:	f7fd fa24 	bl	800b1ac <mg_ntohs>
 800dd64:	4603      	mov	r3, r0
 800dd66:	429c      	cmp	r4, r3
 800dd68:	d10c      	bne.n	800dd84 <mip_rx+0x98>
    pkt.arp = (struct arp *) (pkt.eth + 1);
 800dd6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd6c:	330e      	adds	r3, #14
 800dd6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 800dd70:	69bb      	ldr	r3, [r7, #24]
 800dd72:	2b29      	cmp	r3, #41	; 0x29
 800dd74:	d97f      	bls.n	800de76 <mip_rx+0x18a>
    rx_arp(ifp, &pkt);
 800dd76:	f107 0314 	add.w	r3, r7, #20
 800dd7a:	4619      	mov	r1, r3
 800dd7c:	68f8      	ldr	r0, [r7, #12]
 800dd7e:	f7ff f807 	bl	800cd90 <rx_arp>
 800dd82:	e081      	b.n	800de88 <mip_rx+0x19c>
  } else if (pkt.eth->type == mg_htons(0x86dd)) {
 800dd84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd86:	899b      	ldrh	r3, [r3, #12]
 800dd88:	b29c      	uxth	r4, r3
 800dd8a:	f248 60dd 	movw	r0, #34525	; 0x86dd
 800dd8e:	f7fd fa0d 	bl	800b1ac <mg_ntohs>
 800dd92:	4603      	mov	r3, r0
 800dd94:	429c      	cmp	r4, r3
 800dd96:	d11b      	bne.n	800ddd0 <mip_rx+0xe4>
    pkt.ip6 = (struct ip6 *) (pkt.eth + 1);
 800dd98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd9a:	330e      	adds	r3, #14
 800dd9c:	637b      	str	r3, [r7, #52]	; 0x34
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 800dd9e:	69bb      	ldr	r3, [r7, #24]
 800dda0:	2b35      	cmp	r3, #53	; 0x35
 800dda2:	d96a      	bls.n	800de7a <mip_rx+0x18e>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 800dda4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dda6:	781b      	ldrb	r3, [r3, #0]
 800dda8:	091b      	lsrs	r3, r3, #4
 800ddaa:	b2db      	uxtb	r3, r3
 800ddac:	2b06      	cmp	r3, #6
 800ddae:	d166      	bne.n	800de7e <mip_rx+0x192>
    mkpay(&pkt, pkt.ip6 + 1);
 800ddb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddb2:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800ddb6:	f107 0314 	add.w	r3, r7, #20
 800ddba:	4611      	mov	r1, r2
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	f7fe fb6e 	bl	800c49e <mkpay>
    rx_ip6(ifp, &pkt);
 800ddc2:	f107 0314 	add.w	r3, r7, #20
 800ddc6:	4619      	mov	r1, r3
 800ddc8:	68f8      	ldr	r0, [r7, #12]
 800ddca:	f7ff ff4c 	bl	800dc66 <rx_ip6>
 800ddce:	e05b      	b.n	800de88 <mip_rx+0x19c>
  } else if (pkt.eth->type == mg_htons(0x800)) {
 800ddd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd2:	899b      	ldrh	r3, [r3, #12]
 800ddd4:	b29c      	uxth	r4, r3
 800ddd6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800ddda:	f7fd f9e7 	bl	800b1ac <mg_ntohs>
 800ddde:	4603      	mov	r3, r0
 800dde0:	429c      	cmp	r4, r3
 800dde2:	d130      	bne.n	800de46 <mip_rx+0x15a>
    pkt.ip = (struct ip *) (pkt.eth + 1);
 800dde4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dde6:	330e      	adds	r3, #14
 800dde8:	633b      	str	r3, [r7, #48]	; 0x30
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800ddea:	69bb      	ldr	r3, [r7, #24]
 800ddec:	2b21      	cmp	r3, #33	; 0x21
 800ddee:	d948      	bls.n	800de82 <mip_rx+0x196>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 800ddf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddf2:	781b      	ldrb	r3, [r3, #0]
 800ddf4:	091b      	lsrs	r3, r3, #4
 800ddf6:	b2db      	uxtb	r3, r3
 800ddf8:	2b04      	cmp	r3, #4
 800ddfa:	d144      	bne.n	800de86 <mip_rx+0x19a>
    // Truncate frame to what IP header tells us
    if ((size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth) < pkt.raw.len) {
 800ddfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddfe:	885b      	ldrh	r3, [r3, #2]
 800de00:	b29b      	uxth	r3, r3
 800de02:	4618      	mov	r0, r3
 800de04:	f7fd f9d2 	bl	800b1ac <mg_ntohs>
 800de08:	4603      	mov	r3, r0
 800de0a:	f103 020e 	add.w	r2, r3, #14
 800de0e:	69bb      	ldr	r3, [r7, #24]
 800de10:	429a      	cmp	r2, r3
 800de12:	d208      	bcs.n	800de26 <mip_rx+0x13a>
      pkt.raw.len = (size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth);
 800de14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de16:	885b      	ldrh	r3, [r3, #2]
 800de18:	b29b      	uxth	r3, r3
 800de1a:	4618      	mov	r0, r3
 800de1c:	f7fd f9c6 	bl	800b1ac <mg_ntohs>
 800de20:	4603      	mov	r3, r0
 800de22:	330e      	adds	r3, #14
 800de24:	61bb      	str	r3, [r7, #24]
    }
    mkpay(&pkt, pkt.ip + 1);
 800de26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de28:	f103 0214 	add.w	r2, r3, #20
 800de2c:	f107 0314 	add.w	r3, r7, #20
 800de30:	4611      	mov	r1, r2
 800de32:	4618      	mov	r0, r3
 800de34:	f7fe fb33 	bl	800c49e <mkpay>
    rx_ip(ifp, &pkt);
 800de38:	f107 0314 	add.w	r3, r7, #20
 800de3c:	4619      	mov	r1, r3
 800de3e:	68f8      	ldr	r0, [r7, #12]
 800de40:	f7ff fe79 	bl	800db36 <rx_ip>
 800de44:	e020      	b.n	800de88 <mip_rx+0x19c>
  } else {
    MG_DEBUG(("  Unknown eth type %x", mg_htons(pkt.eth->type)));
 800de46:	4b13      	ldr	r3, [pc, #76]	; (800de94 <mip_rx+0x1a8>)
 800de48:	f641 32a4 	movw	r2, #7076	; 0x1ba4
 800de4c:	4912      	ldr	r1, [pc, #72]	; (800de98 <mip_rx+0x1ac>)
 800de4e:	2003      	movs	r0, #3
 800de50:	f7f9 f928 	bl	80070a4 <mg_log_prefix>
 800de54:	4603      	mov	r3, r0
 800de56:	2b00      	cmp	r3, #0
 800de58:	d016      	beq.n	800de88 <mip_rx+0x19c>
 800de5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de5c:	899b      	ldrh	r3, [r3, #12]
 800de5e:	b29b      	uxth	r3, r3
 800de60:	4618      	mov	r0, r3
 800de62:	f7fd f9a3 	bl	800b1ac <mg_ntohs>
 800de66:	4603      	mov	r3, r0
 800de68:	4619      	mov	r1, r3
 800de6a:	480c      	ldr	r0, [pc, #48]	; (800de9c <mip_rx+0x1b0>)
 800de6c:	f7f9 f974 	bl	8007158 <mg_log>
 800de70:	e00a      	b.n	800de88 <mip_rx+0x19c>
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 800de72:	bf00      	nop
 800de74:	e008      	b.n	800de88 <mip_rx+0x19c>
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 800de76:	bf00      	nop
 800de78:	e006      	b.n	800de88 <mip_rx+0x19c>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 800de7a:	bf00      	nop
 800de7c:	e004      	b.n	800de88 <mip_rx+0x19c>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 800de7e:	bf00      	nop
 800de80:	e002      	b.n	800de88 <mip_rx+0x19c>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800de82:	bf00      	nop
 800de84:	e000      	b.n	800de88 <mip_rx+0x19c>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 800de86:	bf00      	nop
  }
}
 800de88:	3754      	adds	r7, #84	; 0x54
 800de8a:	46bd      	mov	sp, r7
 800de8c:	bd90      	pop	{r4, r7, pc}
 800de8e:	bf00      	nop
 800de90:	0801532c 	.word	0x0801532c
 800de94:	080157ec 	.word	0x080157ec
 800de98:	08013b30 	.word	0x08013b30
 800de9c:	08015314 	.word	0x08015314

0800dea0 <mip_poll>:

static void mip_poll(struct mip_if *ifp, uint64_t uptime_ms) {
 800dea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dea2:	b08f      	sub	sp, #60	; 0x3c
 800dea4:	af06      	add	r7, sp, #24
 800dea6:	60f8      	str	r0, [r7, #12]
 800dea8:	e9c7 2300 	strd	r2, r3, [r7]
  if (ifp == NULL || ifp->driver == NULL) return;
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	f000 8168 	beq.w	800e184 <mip_poll+0x2e4>
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800deb8:	2b00      	cmp	r3, #0
 800deba:	f000 8163 	beq.w	800e184 <mip_poll+0x2e4>
  bool expired_1000ms = mg_timer_expired(&ifp->timer_1000ms, 1000, uptime_ms);
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800dec4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dec8:	e9cd 2300 	strd	r2, r3, [sp]
 800decc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ded0:	f04f 0300 	mov.w	r3, #0
 800ded4:	4608      	mov	r0, r1
 800ded6:	f7fc feb7 	bl	800ac48 <mg_timer_expired>
 800deda:	4603      	mov	r3, r0
 800dedc:	76fb      	strb	r3, [r7, #27]
  ifp->now = uptime_ms;
 800dede:	68f9      	ldr	r1, [r7, #12]
 800dee0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dee4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

  // Handle physical interface up/down status
  if (expired_1000ms && ifp->driver->up) {
 800dee8:	7efb      	ldrb	r3, [r7, #27]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d03d      	beq.n	800df6a <mip_poll+0xca>
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800def2:	68db      	ldr	r3, [r3, #12]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d038      	beq.n	800df6a <mip_poll+0xca>
    bool up = ifp->driver->up(ifp->driver_data);
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800defc:	68db      	ldr	r3, [r3, #12]
 800defe:	68fa      	ldr	r2, [r7, #12]
 800df00:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800df02:	4610      	mov	r0, r2
 800df04:	4798      	blx	r3
 800df06:	4603      	mov	r3, r0
 800df08:	76bb      	strb	r3, [r7, #26]
    bool current = ifp->state != MIP_STATE_DOWN;
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800df10:	2b00      	cmp	r3, #0
 800df12:	bf14      	ite	ne
 800df14:	2301      	movne	r3, #1
 800df16:	2300      	moveq	r3, #0
 800df18:	767b      	strb	r3, [r7, #25]
    if (up != current) {
 800df1a:	7eba      	ldrb	r2, [r7, #26]
 800df1c:	7e7b      	ldrb	r3, [r7, #25]
 800df1e:	429a      	cmp	r2, r3
 800df20:	d023      	beq.n	800df6a <mip_poll+0xca>
      ifp->state = up == false     ? MIP_STATE_DOWN
 800df22:	7ebb      	ldrb	r3, [r7, #26]
 800df24:	f083 0301 	eor.w	r3, r3, #1
 800df28:	b2db      	uxtb	r3, r3
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d001      	beq.n	800df32 <mip_poll+0x92>
 800df2e:	2300      	movs	r3, #0
 800df30:	e007      	b.n	800df42 <mip_poll+0xa2>
                   : ifp->use_dhcp ? MIP_STATE_UP
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
      ifp->state = up == false     ? MIP_STATE_DOWN
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d001      	beq.n	800df40 <mip_poll+0xa0>
 800df3c:	2301      	movs	r3, #1
 800df3e:	e000      	b.n	800df42 <mip_poll+0xa2>
 800df40:	2302      	movs	r3, #2
 800df42:	68fa      	ldr	r2, [r7, #12]
 800df44:	f882 3092 	strb.w	r3, [r2, #146]	; 0x92
                                   : MIP_STATE_READY;
      if (!up && ifp->use_dhcp) ifp->ip = 0;
 800df48:	7ebb      	ldrb	r3, [r7, #26]
 800df4a:	f083 0301 	eor.w	r3, r3, #1
 800df4e:	b2db      	uxtb	r3, r3
 800df50:	2b00      	cmp	r3, #0
 800df52:	d007      	beq.n	800df64 <mip_poll+0xc4>
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d002      	beq.n	800df64 <mip_poll+0xc4>
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	2200      	movs	r2, #0
 800df62:	609a      	str	r2, [r3, #8]
      onstatechange(ifp);
 800df64:	68f8      	ldr	r0, [r7, #12]
 800df66:	f7fe fcc9 	bl	800c8fc <onstatechange>
    }
  }
  if (ifp->state == MIP_STATE_DOWN) return;
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800df70:	2b00      	cmp	r3, #0
 800df72:	f000 8109 	beq.w	800e188 <mip_poll+0x2e8>
  // if (expired_1000ms) arp_cache_dump(ifp->arp_cache);

  if (ifp->ip == 0 && expired_1000ms) {
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	689b      	ldr	r3, [r3, #8]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d106      	bne.n	800df8c <mip_poll+0xec>
 800df7e:	7efb      	ldrb	r3, [r7, #27]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d003      	beq.n	800df8c <mip_poll+0xec>
    tx_dhcp_discover(ifp);  // If IP not configured, send DHCP
 800df84:	68f8      	ldr	r0, [r7, #12]
 800df86:	f7fe fed5 	bl	800cd34 <tx_dhcp_discover>
 800df8a:	e019      	b.n	800dfc0 <mip_poll+0x120>
  } else if (ifp->use_dhcp == false && expired_1000ms &&
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800df92:	f083 0301 	eor.w	r3, r3, #1
 800df96:	b2db      	uxtb	r3, r3
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d011      	beq.n	800dfc0 <mip_poll+0x120>
 800df9c:	7efb      	ldrb	r3, [r7, #27]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d00e      	beq.n	800dfc0 <mip_poll+0x120>
             arp_cache_find(ifp, ifp->gw) == NULL) {
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	691b      	ldr	r3, [r3, #16]
 800dfa6:	4619      	mov	r1, r3
 800dfa8:	68f8      	ldr	r0, [r7, #12]
 800dfaa:	f7fe fb56 	bl	800c65a <arp_cache_find>
 800dfae:	4603      	mov	r3, r0
  } else if (ifp->use_dhcp == false && expired_1000ms &&
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d105      	bne.n	800dfc0 <mip_poll+0x120>
    arp_ask(ifp, ifp->gw);  // If GW's MAC address in not in ARP cache
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	691b      	ldr	r3, [r3, #16]
 800dfb8:	4619      	mov	r1, r3
 800dfba:	68f8      	ldr	r0, [r7, #12]
 800dfbc:	f7fe fc17 	bl	800c7ee <arp_ask>
  }

  // Read data from the network
  for (;;) {
    size_t len = ifp->queue.len > 0 ? q_read(&ifp->queue, ifp->rx.buf)
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
                                    : ifp->driver->rx(ifp->rx.buf, ifp->rx.len,
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d00a      	beq.n	800dfe0 <mip_poll+0x140>
    size_t len = ifp->queue.len > 0 ? q_read(&ifp->queue, ifp->rx.buf)
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	f103 0294 	add.w	r2, r3, #148	; 0x94
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	695b      	ldr	r3, [r3, #20]
 800dfd4:	4619      	mov	r1, r3
 800dfd6:	4610      	mov	r0, r2
 800dfd8:	f7fe fa1b 	bl	800c412 <q_read>
 800dfdc:	4603      	mov	r3, r0
 800dfde:	e00a      	b.n	800dff6 <mip_poll+0x156>
                                    : ifp->driver->rx(ifp->rx.buf, ifp->rx.len,
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfe4:	689b      	ldr	r3, [r3, #8]
 800dfe6:	68fa      	ldr	r2, [r7, #12]
 800dfe8:	6950      	ldr	r0, [r2, #20]
 800dfea:	68fa      	ldr	r2, [r7, #12]
 800dfec:	6991      	ldr	r1, [r2, #24]
 800dfee:	68fa      	ldr	r2, [r7, #12]
 800dff0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800dff2:	4798      	blx	r3
 800dff4:	4603      	mov	r3, r0
    size_t len = ifp->queue.len > 0 ? q_read(&ifp->queue, ifp->rx.buf)
 800dff6:	617b      	str	r3, [r7, #20]
                                                      ifp->driver_data);
    if (len == 0) break;
 800dff8:	697b      	ldr	r3, [r7, #20]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d007      	beq.n	800e00e <mip_poll+0x16e>
    qp_mark(QP_FRAMEPOPPED, (int) q_space(&ifp->queue));
    mip_rx(ifp, ifp->rx.buf, len);
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	695b      	ldr	r3, [r3, #20]
 800e002:	697a      	ldr	r2, [r7, #20]
 800e004:	4619      	mov	r1, r3
 800e006:	68f8      	ldr	r0, [r7, #12]
 800e008:	f7ff fe70 	bl	800dcec <mip_rx>
  for (;;) {
 800e00c:	e7d8      	b.n	800dfc0 <mip_poll+0x120>
    if (len == 0) break;
 800e00e:	bf00      	nop
    qp_mark(QP_FRAMEDONE, (int) q_space(&ifp->queue));
  }

  // Process timeouts
  for (struct mg_connection *c = ifp->mgr->conns; c != NULL; c = c->next) {
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	61fb      	str	r3, [r7, #28]
 800e018:	e0af      	b.n	800e17a <mip_poll+0x2da>
    if (c->is_udp || c->is_listening) continue;
 800e01a:	69fb      	ldr	r3, [r7, #28]
 800e01c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800e020:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e024:	b2db      	uxtb	r3, r3
 800e026:	2b00      	cmp	r3, #0
 800e028:	f040 80a1 	bne.w	800e16e <mip_poll+0x2ce>
 800e02c:	69fb      	ldr	r3, [r7, #28]
 800e02e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800e032:	f003 0301 	and.w	r3, r3, #1
 800e036:	b2db      	uxtb	r3, r3
 800e038:	2b00      	cmp	r3, #0
 800e03a:	f040 8098 	bne.w	800e16e <mip_poll+0x2ce>
    if (c->is_connecting || c->is_resolving) continue;
 800e03e:	69fb      	ldr	r3, [r7, #28]
 800e040:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800e044:	f003 0310 	and.w	r3, r3, #16
 800e048:	b2db      	uxtb	r3, r3
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	f040 8091 	bne.w	800e172 <mip_poll+0x2d2>
 800e050:	69fb      	ldr	r3, [r7, #28]
 800e052:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800e056:	f003 0308 	and.w	r3, r3, #8
 800e05a:	b2db      	uxtb	r3, r3
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	f040 8088 	bne.w	800e172 <mip_poll+0x2d2>
    struct connstate *s = (struct connstate *) (c + 1);
 800e062:	69fb      	ldr	r3, [r7, #28]
 800e064:	33b4      	adds	r3, #180	; 0xb4
 800e066:	613b      	str	r3, [r7, #16]
    if (uptime_ms > s->timer) {
 800e068:	693b      	ldr	r3, [r7, #16]
 800e06a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800e06e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e072:	4290      	cmp	r0, r2
 800e074:	eb71 0303 	sbcs.w	r3, r1, r3
 800e078:	d27c      	bcs.n	800e174 <mip_poll+0x2d4>
      if (s->ttype == MIP_TTYPE_ACK) {
 800e07a:	693b      	ldr	r3, [r7, #16]
 800e07c:	7d9b      	ldrb	r3, [r3, #22]
 800e07e:	2b01      	cmp	r3, #1
 800e080:	d133      	bne.n	800e0ea <mip_poll+0x24a>
        MG_DEBUG(("%lu ack %x %x", c->id, s->seq, s->ack));
 800e082:	4b43      	ldr	r3, [pc, #268]	; (800e190 <mip_poll+0x2f0>)
 800e084:	f641 32d5 	movw	r2, #7125	; 0x1bd5
 800e088:	4942      	ldr	r1, [pc, #264]	; (800e194 <mip_poll+0x2f4>)
 800e08a:	2003      	movs	r0, #3
 800e08c:	f7f9 f80a 	bl	80070a4 <mg_log_prefix>
 800e090:	4603      	mov	r3, r0
 800e092:	2b00      	cmp	r3, #0
 800e094:	d008      	beq.n	800e0a8 <mip_poll+0x208>
 800e096:	69fb      	ldr	r3, [r7, #28]
 800e098:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800e09a:	693b      	ldr	r3, [r7, #16]
 800e09c:	681a      	ldr	r2, [r3, #0]
 800e09e:	693b      	ldr	r3, [r7, #16]
 800e0a0:	685b      	ldr	r3, [r3, #4]
 800e0a2:	483d      	ldr	r0, [pc, #244]	; (800e198 <mip_poll+0x2f8>)
 800e0a4:	f7f9 f858 	bl	8007158 <mg_log>
        tx_tcp(ifp, c->rem.ip, TH_ACK, c->loc.port, c->rem.port,
 800e0a8:	69fb      	ldr	r3, [r7, #28]
 800e0aa:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800e0ac:	69fb      	ldr	r3, [r7, #28]
 800e0ae:	891e      	ldrh	r6, [r3, #8]
 800e0b0:	69fb      	ldr	r3, [r7, #28]
 800e0b2:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
 800e0b4:	693b      	ldr	r3, [r7, #16]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	f7fd f85e 	bl	800b17a <mg_ntohl>
 800e0be:	60b8      	str	r0, [r7, #8]
 800e0c0:	693b      	ldr	r3, [r7, #16]
 800e0c2:	685b      	ldr	r3, [r3, #4]
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f7fd f858 	bl	800b17a <mg_ntohl>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	9204      	str	r2, [sp, #16]
 800e0d0:	4a32      	ldr	r2, [pc, #200]	; (800e19c <mip_poll+0x2fc>)
 800e0d2:	9203      	str	r2, [sp, #12]
 800e0d4:	9302      	str	r3, [sp, #8]
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	9301      	str	r3, [sp, #4]
 800e0da:	9400      	str	r4, [sp, #0]
 800e0dc:	4633      	mov	r3, r6
 800e0de:	2210      	movs	r2, #16
 800e0e0:	4629      	mov	r1, r5
 800e0e2:	68f8      	ldr	r0, [r7, #12]
 800e0e4:	f7ff f8f0 	bl	800d2c8 <tx_tcp>
 800e0e8:	e03c      	b.n	800e164 <mip_poll+0x2c4>
               mg_htonl(s->seq), mg_htonl(s->ack), "", 0);
      } else {
        MG_DEBUG(("%lu keepalive", c->id));
 800e0ea:	4b29      	ldr	r3, [pc, #164]	; (800e190 <mip_poll+0x2f0>)
 800e0ec:	f641 32d9 	movw	r2, #7129	; 0x1bd9
 800e0f0:	4928      	ldr	r1, [pc, #160]	; (800e194 <mip_poll+0x2f4>)
 800e0f2:	2003      	movs	r0, #3
 800e0f4:	f7f8 ffd6 	bl	80070a4 <mg_log_prefix>
 800e0f8:	4603      	mov	r3, r0
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d005      	beq.n	800e10a <mip_poll+0x26a>
 800e0fe:	69fb      	ldr	r3, [r7, #28]
 800e100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e102:	4619      	mov	r1, r3
 800e104:	4826      	ldr	r0, [pc, #152]	; (800e1a0 <mip_poll+0x300>)
 800e106:	f7f9 f827 	bl	8007158 <mg_log>
        tx_tcp(ifp, c->rem.ip, TH_ACK, c->loc.port, c->rem.port,
 800e10a:	69fb      	ldr	r3, [r7, #28]
 800e10c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800e10e:	69fb      	ldr	r3, [r7, #28]
 800e110:	891e      	ldrh	r6, [r3, #8]
 800e112:	69fb      	ldr	r3, [r7, #28]
 800e114:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
               mg_htonl(s->seq - 1), mg_htonl(s->ack), "", 0);
 800e116:	693b      	ldr	r3, [r7, #16]
 800e118:	681b      	ldr	r3, [r3, #0]
        tx_tcp(ifp, c->rem.ip, TH_ACK, c->loc.port, c->rem.port,
 800e11a:	3b01      	subs	r3, #1
 800e11c:	4618      	mov	r0, r3
 800e11e:	f7fd f82c 	bl	800b17a <mg_ntohl>
 800e122:	60b8      	str	r0, [r7, #8]
 800e124:	693b      	ldr	r3, [r7, #16]
 800e126:	685b      	ldr	r3, [r3, #4]
 800e128:	4618      	mov	r0, r3
 800e12a:	f7fd f826 	bl	800b17a <mg_ntohl>
 800e12e:	4603      	mov	r3, r0
 800e130:	2200      	movs	r2, #0
 800e132:	9204      	str	r2, [sp, #16]
 800e134:	4a19      	ldr	r2, [pc, #100]	; (800e19c <mip_poll+0x2fc>)
 800e136:	9203      	str	r2, [sp, #12]
 800e138:	9302      	str	r3, [sp, #8]
 800e13a:	68bb      	ldr	r3, [r7, #8]
 800e13c:	9301      	str	r3, [sp, #4]
 800e13e:	9400      	str	r4, [sp, #0]
 800e140:	4633      	mov	r3, r6
 800e142:	2210      	movs	r2, #16
 800e144:	4629      	mov	r1, r5
 800e146:	68f8      	ldr	r0, [r7, #12]
 800e148:	f7ff f8be 	bl	800d2c8 <tx_tcp>
        if (s->tmiss++ > 2) mg_error(c, "keepalive");
 800e14c:	693b      	ldr	r3, [r7, #16]
 800e14e:	7ddb      	ldrb	r3, [r3, #23]
 800e150:	1c5a      	adds	r2, r3, #1
 800e152:	b2d1      	uxtb	r1, r2
 800e154:	693a      	ldr	r2, [r7, #16]
 800e156:	75d1      	strb	r1, [r2, #23]
 800e158:	2b02      	cmp	r3, #2
 800e15a:	d903      	bls.n	800e164 <mip_poll+0x2c4>
 800e15c:	4911      	ldr	r1, [pc, #68]	; (800e1a4 <mip_poll+0x304>)
 800e15e:	69f8      	ldr	r0, [r7, #28]
 800e160:	f7f4 f8b0 	bl	80022c4 <mg_error>
      }
      settmout(c, MIP_TTYPE_KEEPALIVE);
 800e164:	2100      	movs	r1, #0
 800e166:	69f8      	ldr	r0, [r7, #28]
 800e168:	f7ff fa14 	bl	800d594 <settmout>
 800e16c:	e002      	b.n	800e174 <mip_poll+0x2d4>
    if (c->is_udp || c->is_listening) continue;
 800e16e:	bf00      	nop
 800e170:	e000      	b.n	800e174 <mip_poll+0x2d4>
    if (c->is_connecting || c->is_resolving) continue;
 800e172:	bf00      	nop
  for (struct mg_connection *c = ifp->mgr->conns; c != NULL; c = c->next) {
 800e174:	69fb      	ldr	r3, [r7, #28]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	61fb      	str	r3, [r7, #28]
 800e17a:	69fb      	ldr	r3, [r7, #28]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	f47f af4c 	bne.w	800e01a <mip_poll+0x17a>
 800e182:	e002      	b.n	800e18a <mip_poll+0x2ea>
  if (ifp == NULL || ifp->driver == NULL) return;
 800e184:	bf00      	nop
 800e186:	e000      	b.n	800e18a <mip_poll+0x2ea>
  if (ifp->state == MIP_STATE_DOWN) return;
 800e188:	bf00      	nop
    }
  }
#ifdef MIP_QPROFILE
  qp_log();
#endif
}
 800e18a:	3724      	adds	r7, #36	; 0x24
 800e18c:	46bd      	mov	sp, r7
 800e18e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e190:	080157f4 	.word	0x080157f4
 800e194:	08013b30 	.word	0x08013b30
 800e198:	08015334 	.word	0x08015334
 800e19c:	08013e70 	.word	0x08013e70
 800e1a0:	08015344 	.word	0x08015344
 800e1a4:	08015354 	.word	0x08015354

0800e1a8 <on_rx>:

// This function executes in interrupt context, thus it should copy data
// somewhere fast. Note that newlib's malloc is not thread safe, thus use
// our lock-free queue with preallocated buffer to copy data and return asap
static void on_rx(void *buf, size_t len, void *userdata) {
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b086      	sub	sp, #24
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	60f8      	str	r0, [r7, #12]
 800e1b0:	60b9      	str	r1, [r7, #8]
 800e1b2:	607a      	str	r2, [r7, #4]
  struct mip_if *ifp = (struct mip_if *) userdata;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	617b      	str	r3, [r7, #20]
  if (q_write(&ifp->queue, buf, len)) {
 800e1b8:	697b      	ldr	r3, [r7, #20]
 800e1ba:	3394      	adds	r3, #148	; 0x94
 800e1bc:	68ba      	ldr	r2, [r7, #8]
 800e1be:	68f9      	ldr	r1, [r7, #12]
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	f7fe f8c3 	bl	800c34c <q_write>
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d116      	bne.n	800e1fa <on_rx+0x52>
    qp_mark(QP_FRAMEPUSHED, (int) q_space(&ifp->queue));
  } else {
    ifp->dropped++;
 800e1cc:	697b      	ldr	r3, [r7, #20]
 800e1ce:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800e1d2:	3301      	adds	r3, #1
 800e1d4:	b29a      	uxth	r2, r3
 800e1d6:	697b      	ldr	r3, [r7, #20]
 800e1d8:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
    qp_mark(QP_FRAMEDROPPED, ifp->dropped);
    MG_ERROR(("dropped %d", (int) len));
 800e1dc:	4b09      	ldr	r3, [pc, #36]	; (800e204 <on_rx+0x5c>)
 800e1de:	f641 32f0 	movw	r2, #7152	; 0x1bf0
 800e1e2:	4909      	ldr	r1, [pc, #36]	; (800e208 <on_rx+0x60>)
 800e1e4:	2001      	movs	r0, #1
 800e1e6:	f7f8 ff5d 	bl	80070a4 <mg_log_prefix>
 800e1ea:	4603      	mov	r3, r0
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d004      	beq.n	800e1fa <on_rx+0x52>
 800e1f0:	68bb      	ldr	r3, [r7, #8]
 800e1f2:	4619      	mov	r1, r3
 800e1f4:	4805      	ldr	r0, [pc, #20]	; (800e20c <on_rx+0x64>)
 800e1f6:	f7f8 ffaf 	bl	8007158 <mg_log>
  }
}
 800e1fa:	bf00      	nop
 800e1fc:	3718      	adds	r7, #24
 800e1fe:	46bd      	mov	sp, r7
 800e200:	bd80      	pop	{r7, pc}
 800e202:	bf00      	nop
 800e204:	08015800 	.word	0x08015800
 800e208:	08013b30 	.word	0x08013b30
 800e20c:	08015360 	.word	0x08015360

0800e210 <if_init>:

static void if_init(struct mip_if *ifp, struct mg_mgr *mgr,
                    struct mip_cfg *ipcfg, struct mip_driver *driver,
                    void *driver_data, size_t maxpktsize, size_t qlen) {
 800e210:	b580      	push	{r7, lr}
 800e212:	b084      	sub	sp, #16
 800e214:	af00      	add	r7, sp, #0
 800e216:	60f8      	str	r0, [r7, #12]
 800e218:	60b9      	str	r1, [r7, #8]
 800e21a:	607a      	str	r2, [r7, #4]
 800e21c:	603b      	str	r3, [r7, #0]
  memcpy(ifp->mac, ipcfg->mac, sizeof(ifp->mac));
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	6879      	ldr	r1, [r7, #4]
 800e222:	2206      	movs	r2, #6
 800e224:	4618      	mov	r0, r3
 800e226:	f004 fa87 	bl	8012738 <memcpy>
  ifp->use_dhcp = ipcfg->ip == 0;
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	689b      	ldr	r3, [r3, #8]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	bf0c      	ite	eq
 800e232:	2301      	moveq	r3, #1
 800e234:	2300      	movne	r3, #0
 800e236:	b2da      	uxtb	r2, r3
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ifp->ip = ipcfg->ip, ifp->mask = ipcfg->mask, ifp->gw = ipcfg->gw;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	689a      	ldr	r2, [r3, #8]
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	609a      	str	r2, [r3, #8]
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	68da      	ldr	r2, [r3, #12]
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	60da      	str	r2, [r3, #12]
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	691a      	ldr	r2, [r3, #16]
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	611a      	str	r2, [r3, #16]
  ifp->rx.buf = (uint8_t *) (ifp + 1), ifp->rx.len = maxpktsize;
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	615a      	str	r2, [r3, #20]
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	69fa      	ldr	r2, [r7, #28]
 800e264:	619a      	str	r2, [r3, #24]
  ifp->tx.buf = ifp->rx.buf + maxpktsize, ifp->tx.len = maxpktsize;
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	695a      	ldr	r2, [r3, #20]
 800e26a:	69fb      	ldr	r3, [r7, #28]
 800e26c:	441a      	add	r2, r3
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	61da      	str	r2, [r3, #28]
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	69fa      	ldr	r2, [r7, #28]
 800e276:	621a      	str	r2, [r3, #32]
  ifp->driver = driver;
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	683a      	ldr	r2, [r7, #0]
 800e27c:	629a      	str	r2, [r3, #40]	; 0x28
  ifp->driver_data = driver_data;
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	69ba      	ldr	r2, [r7, #24]
 800e282:	62da      	str	r2, [r3, #44]	; 0x2c
  ifp->mgr = mgr;
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	68ba      	ldr	r2, [r7, #8]
 800e288:	631a      	str	r2, [r3, #48]	; 0x30
  ifp->queue.buf = ifp->tx.buf + maxpktsize;
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	69da      	ldr	r2, [r3, #28]
 800e28e:	69fb      	ldr	r3, [r7, #28]
 800e290:	441a      	add	r2, r3
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  ifp->queue.len = qlen;
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	6a3a      	ldr	r2, [r7, #32]
 800e29c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  ifp->timer_1000ms = mg_millis();
 800e2a0:	f7f2 febe 	bl	8001020 <mg_millis>
 800e2a4:	4602      	mov	r2, r0
 800e2a6:	460b      	mov	r3, r1
 800e2a8:	68f9      	ldr	r1, [r7, #12]
 800e2aa:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
  arp_cache_init(ifp->arp_cache, MIP_ARP_ENTRIES, 12);
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	3350      	adds	r3, #80	; 0x50
 800e2b2:	220c      	movs	r2, #12
 800e2b4:	2105      	movs	r1, #5
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	f7fe f96a 	bl	800c590 <arp_cache_init>
  if (driver->setrx) driver->setrx(on_rx, ifp);
 800e2bc:	683b      	ldr	r3, [r7, #0]
 800e2be:	691b      	ldr	r3, [r3, #16]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d004      	beq.n	800e2ce <if_init+0xbe>
 800e2c4:	683b      	ldr	r3, [r7, #0]
 800e2c6:	691b      	ldr	r3, [r3, #16]
 800e2c8:	68f9      	ldr	r1, [r7, #12]
 800e2ca:	4806      	ldr	r0, [pc, #24]	; (800e2e4 <if_init+0xd4>)
 800e2cc:	4798      	blx	r3
  mgr->priv = ifp;
 800e2ce:	68bb      	ldr	r3, [r7, #8]
 800e2d0:	68fa      	ldr	r2, [r7, #12]
 800e2d2:	639a      	str	r2, [r3, #56]	; 0x38
  mgr->extraconnsize = sizeof(struct connstate);
 800e2d4:	68bb      	ldr	r3, [r7, #8]
 800e2d6:	2228      	movs	r2, #40	; 0x28
 800e2d8:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef MIP_QPROFILE
  qp_init();
#endif
}
 800e2da:	bf00      	nop
 800e2dc:	3710      	adds	r7, #16
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bd80      	pop	{r7, pc}
 800e2e2:	bf00      	nop
 800e2e4:	0800e1a9 	.word	0x0800e1a9

0800e2e8 <mip_init>:

void mip_init(struct mg_mgr *mgr, struct mip_cfg *ipcfg,
              struct mip_driver *driver, void *driver_data) {
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b08c      	sub	sp, #48	; 0x30
 800e2ec:	af04      	add	r7, sp, #16
 800e2ee:	60f8      	str	r0, [r7, #12]
 800e2f0:	60b9      	str	r1, [r7, #8]
 800e2f2:	607a      	str	r2, [r7, #4]
 800e2f4:	603b      	str	r3, [r7, #0]
  if (driver->init && !driver->init(ipcfg->mac, driver_data)) {
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d019      	beq.n	800e332 <mip_init+0x4a>
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	68ba      	ldr	r2, [r7, #8]
 800e304:	6839      	ldr	r1, [r7, #0]
 800e306:	4610      	mov	r0, r2
 800e308:	4798      	blx	r3
 800e30a:	4603      	mov	r3, r0
 800e30c:	f083 0301 	eor.w	r3, r3, #1
 800e310:	b2db      	uxtb	r3, r3
 800e312:	2b00      	cmp	r3, #0
 800e314:	d00d      	beq.n	800e332 <mip_init+0x4a>
    MG_ERROR(("driver init failed"));
 800e316:	4b1b      	ldr	r3, [pc, #108]	; (800e384 <mip_init+0x9c>)
 800e318:	f641 420e 	movw	r2, #7182	; 0x1c0e
 800e31c:	491a      	ldr	r1, [pc, #104]	; (800e388 <mip_init+0xa0>)
 800e31e:	2001      	movs	r0, #1
 800e320:	f7f8 fec0 	bl	80070a4 <mg_log_prefix>
 800e324:	4603      	mov	r3, r0
 800e326:	2b00      	cmp	r3, #0
 800e328:	d027      	beq.n	800e37a <mip_init+0x92>
 800e32a:	4818      	ldr	r0, [pc, #96]	; (800e38c <mip_init+0xa4>)
 800e32c:	f7f8 ff14 	bl	8007158 <mg_log>
 800e330:	e023      	b.n	800e37a <mip_init+0x92>
  } else {
    size_t maxpktsize = 1540, qlen = driver->setrx ? MIP_QSIZE : 0;
 800e332:	f240 6304 	movw	r3, #1540	; 0x604
 800e336:	61fb      	str	r3, [r7, #28]
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	691b      	ldr	r3, [r3, #16]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d002      	beq.n	800e346 <mip_init+0x5e>
 800e340:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e344:	e000      	b.n	800e348 <mip_init+0x60>
 800e346:	2300      	movs	r3, #0
 800e348:	61bb      	str	r3, [r7, #24]
    struct mip_if *ifp =
        (struct mip_if *) calloc(1, sizeof(*ifp) + 2 * maxpktsize + qlen);
 800e34a:	69fb      	ldr	r3, [r7, #28]
 800e34c:	3354      	adds	r3, #84	; 0x54
 800e34e:	005a      	lsls	r2, r3, #1
 800e350:	69bb      	ldr	r3, [r7, #24]
 800e352:	4413      	add	r3, r2
 800e354:	4619      	mov	r1, r3
 800e356:	2001      	movs	r0, #1
 800e358:	f004 f99c 	bl	8012694 <calloc>
 800e35c:	4603      	mov	r3, r0
 800e35e:	617b      	str	r3, [r7, #20]
    if_init(ifp, mgr, ipcfg, driver, driver_data, maxpktsize, qlen);
 800e360:	69bb      	ldr	r3, [r7, #24]
 800e362:	9302      	str	r3, [sp, #8]
 800e364:	69fb      	ldr	r3, [r7, #28]
 800e366:	9301      	str	r3, [sp, #4]
 800e368:	683b      	ldr	r3, [r7, #0]
 800e36a:	9300      	str	r3, [sp, #0]
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	68ba      	ldr	r2, [r7, #8]
 800e370:	68f9      	ldr	r1, [r7, #12]
 800e372:	6978      	ldr	r0, [r7, #20]
 800e374:	f7ff ff4c 	bl	800e210 <if_init>
  }
}
 800e378:	bf00      	nop
 800e37a:	bf00      	nop
 800e37c:	3720      	adds	r7, #32
 800e37e:	46bd      	mov	sp, r7
 800e380:	bd80      	pop	{r7, pc}
 800e382:	bf00      	nop
 800e384:	08015808 	.word	0x08015808
 800e388:	08013b30 	.word	0x08013b30
 800e38c:	0801536c 	.word	0x0801536c

0800e390 <mg_connect_resolved>:
  c += (a ^ b) % (0xffffU - MIP_ETHEMERAL_PORT);
  return c;
}
#endif

void mg_connect_resolved(struct mg_connection *c) {
 800e390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e394:	b08a      	sub	sp, #40	; 0x28
 800e396:	af06      	add	r7, sp, #24
 800e398:	6078      	str	r0, [r7, #4]
  struct mip_if *ifp = (struct mip_if *) c->mgr->priv;
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	685b      	ldr	r3, [r3, #4]
 800e39e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3a0:	60fb      	str	r3, [r7, #12]
  c->is_resolving = 0;
 800e3a2:	687a      	ldr	r2, [r7, #4]
 800e3a4:	f892 30b0 	ldrb.w	r3, [r2, #176]	; 0xb0
 800e3a8:	f36f 03c3 	bfc	r3, #3, #1
 800e3ac:	f882 30b0 	strb.w	r3, [r2, #176]	; 0xb0
  if (ifp->eport < MIP_ETHEMERAL_PORT) ifp->eport = MIP_ETHEMERAL_PORT;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 800e3b6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e3ba:	d204      	bcs.n	800e3c6 <mg_connect_resolved+0x36>
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800e3c2:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
  c->loc.ip = ifp->ip;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	689a      	ldr	r2, [r3, #8]
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	60da      	str	r2, [r3, #12]
  c->loc.port = mg_htons(ifp->eport++);
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 800e3d4:	1c5a      	adds	r2, r3, #1
 800e3d6:	b291      	uxth	r1, r2
 800e3d8:	68fa      	ldr	r2, [r7, #12]
 800e3da:	f8a2 108e 	strh.w	r1, [r2, #142]	; 0x8e
 800e3de:	4618      	mov	r0, r3
 800e3e0:	f7fc fee4 	bl	800b1ac <mg_ntohs>
 800e3e4:	4603      	mov	r3, r0
 800e3e6:	461a      	mov	r2, r3
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	811a      	strh	r2, [r3, #8]
  MG_DEBUG(("%lu %08lx:%hu->%08lx:%hu", c->id, mg_ntohl(c->loc.ip),
 800e3ec:	4b34      	ldr	r3, [pc, #208]	; (800e4c0 <mg_connect_resolved+0x130>)
 800e3ee:	f641 422c 	movw	r2, #7212	; 0x1c2c
 800e3f2:	4934      	ldr	r1, [pc, #208]	; (800e4c4 <mg_connect_resolved+0x134>)
 800e3f4:	2003      	movs	r0, #3
 800e3f6:	f7f8 fe55 	bl	80070a4 <mg_log_prefix>
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d022      	beq.n	800e446 <mg_connect_resolved+0xb6>
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	68db      	ldr	r3, [r3, #12]
 800e408:	4618      	mov	r0, r3
 800e40a:	f7fc feb6 	bl	800b17a <mg_ntohl>
 800e40e:	4606      	mov	r6, r0
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	891b      	ldrh	r3, [r3, #8]
 800e414:	4618      	mov	r0, r3
 800e416:	f7fc fec9 	bl	800b1ac <mg_ntohs>
 800e41a:	4603      	mov	r3, r0
 800e41c:	4698      	mov	r8, r3
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e422:	4618      	mov	r0, r3
 800e424:	f7fc fea9 	bl	800b17a <mg_ntohl>
 800e428:	4605      	mov	r5, r0
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e42e:	4618      	mov	r0, r3
 800e430:	f7fc febc 	bl	800b1ac <mg_ntohs>
 800e434:	4603      	mov	r3, r0
 800e436:	9301      	str	r3, [sp, #4]
 800e438:	9500      	str	r5, [sp, #0]
 800e43a:	4643      	mov	r3, r8
 800e43c:	4632      	mov	r2, r6
 800e43e:	4621      	mov	r1, r4
 800e440:	4821      	ldr	r0, [pc, #132]	; (800e4c8 <mg_connect_resolved+0x138>)
 800e442:	f7f8 fe89 	bl	8007158 <mg_log>
            mg_ntohs(c->loc.port), mg_ntohl(c->rem.ip), mg_ntohs(c->rem.port)));
  mg_call(c, MG_EV_RESOLVE, NULL);
 800e446:	2200      	movs	r2, #0
 800e448:	2103      	movs	r1, #3
 800e44a:	6878      	ldr	r0, [r7, #4]
 800e44c:	f7f3 ff18 	bl	8002280 <mg_call>
  if (c->is_udp) {
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800e456:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e45a:	b2db      	uxtb	r3, r3
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d005      	beq.n	800e46c <mg_connect_resolved+0xdc>
    mg_call(c, MG_EV_CONNECT, NULL);
 800e460:	2200      	movs	r2, #0
 800e462:	2104      	movs	r1, #4
 800e464:	6878      	ldr	r0, [r7, #4]
 800e466:	f7f3 ff0b 	bl	8002280 <mg_call>
  } else {
    uint32_t isn = mg_htonl((uint32_t) mg_ntohs(c->loc.port));
    tx_tcp(ifp, c->rem.ip, TH_SYN, c->loc.port, c->rem.port, isn, 0, NULL, 0);
    c->is_connecting = 1;
  }
}
 800e46a:	e024      	b.n	800e4b6 <mg_connect_resolved+0x126>
    uint32_t isn = mg_htonl((uint32_t) mg_ntohs(c->loc.port));
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	891b      	ldrh	r3, [r3, #8]
 800e470:	4618      	mov	r0, r3
 800e472:	f7fc fe9b 	bl	800b1ac <mg_ntohs>
 800e476:	4603      	mov	r3, r0
 800e478:	4618      	mov	r0, r3
 800e47a:	f7fc fe7e 	bl	800b17a <mg_ntohl>
 800e47e:	60b8      	str	r0, [r7, #8]
    tx_tcp(ifp, c->rem.ip, TH_SYN, c->loc.port, c->rem.port, isn, 0, NULL, 0);
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	8918      	ldrh	r0, [r3, #8]
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e48c:	2200      	movs	r2, #0
 800e48e:	9204      	str	r2, [sp, #16]
 800e490:	2200      	movs	r2, #0
 800e492:	9203      	str	r2, [sp, #12]
 800e494:	2200      	movs	r2, #0
 800e496:	9202      	str	r2, [sp, #8]
 800e498:	68ba      	ldr	r2, [r7, #8]
 800e49a:	9201      	str	r2, [sp, #4]
 800e49c:	9300      	str	r3, [sp, #0]
 800e49e:	4603      	mov	r3, r0
 800e4a0:	2202      	movs	r2, #2
 800e4a2:	68f8      	ldr	r0, [r7, #12]
 800e4a4:	f7fe ff10 	bl	800d2c8 <tx_tcp>
    c->is_connecting = 1;
 800e4a8:	687a      	ldr	r2, [r7, #4]
 800e4aa:	f892 30b0 	ldrb.w	r3, [r2, #176]	; 0xb0
 800e4ae:	f043 0310 	orr.w	r3, r3, #16
 800e4b2:	f882 30b0 	strb.w	r3, [r2, #176]	; 0xb0
}
 800e4b6:	bf00      	nop
 800e4b8:	3710      	adds	r7, #16
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4c0:	08015814 	.word	0x08015814
 800e4c4:	08013b30 	.word	0x08013b30
 800e4c8:	08015390 	.word	0x08015390

0800e4cc <mg_open_listener>:

bool mg_open_listener(struct mg_connection *c, const char *url) {
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b082      	sub	sp, #8
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
 800e4d4:	6039      	str	r1, [r7, #0]
  c->loc.port = mg_htons(mg_url_port(url));
 800e4d6:	6838      	ldr	r0, [r7, #0]
 800e4d8:	f7fc fdca 	bl	800b070 <mg_url_port>
 800e4dc:	4603      	mov	r3, r0
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f7fc fe64 	bl	800b1ac <mg_ntohs>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	461a      	mov	r2, r3
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	811a      	strh	r2, [r3, #8]
  return true;
 800e4ec:	2301      	movs	r3, #1
}
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	3708      	adds	r7, #8
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	bd80      	pop	{r7, pc}

0800e4f6 <write_conn>:

static void write_conn(struct mg_connection *c) {
 800e4f6:	b580      	push	{r7, lr}
 800e4f8:	b084      	sub	sp, #16
 800e4fa:	af00      	add	r7, sp, #0
 800e4fc:	6078      	str	r0, [r7, #4]
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800e504:	f003 0320 	and.w	r3, r3, #32
 800e508:	b2db      	uxtb	r3, r3
                       : mg_io_send(c, c->send.buf, c->send.len);
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d009      	beq.n	800e522 <write_conn+0x2c>
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e516:	461a      	mov	r2, r3
 800e518:	6878      	ldr	r0, [r7, #4]
 800e51a:	f7fc fc9e 	bl	800ae5a <mg_tls_send>
 800e51e:	4603      	mov	r3, r0
 800e520:	e008      	b.n	800e534 <write_conn+0x3e>
                       : mg_io_send(c, c->send.buf, c->send.len);
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e52a:	461a      	mov	r2, r3
 800e52c:	6878      	ldr	r0, [r7, #4]
 800e52e:	f7ff f879 	bl	800d624 <mg_io_send>
 800e532:	4603      	mov	r3, r0
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 800e534:	60fb      	str	r3, [r7, #12]
  if (len > 0) {
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	dd0d      	ble.n	800e558 <write_conn+0x62>
    mg_iobuf_del(&c->send, 0, (size_t) len);
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	3358      	adds	r3, #88	; 0x58
 800e540:	68fa      	ldr	r2, [r7, #12]
 800e542:	2100      	movs	r1, #0
 800e544:	4618      	mov	r0, r3
 800e546:	f7f7 ff91 	bl	800646c <mg_iobuf_del>
    mg_call(c, MG_EV_WRITE, &len);
 800e54a:	f107 030c 	add.w	r3, r7, #12
 800e54e:	461a      	mov	r2, r3
 800e550:	2108      	movs	r1, #8
 800e552:	6878      	ldr	r0, [r7, #4]
 800e554:	f7f3 fe94 	bl	8002280 <mg_call>
  }
}
 800e558:	bf00      	nop
 800e55a:	3710      	adds	r7, #16
 800e55c:	46bd      	mov	sp, r7
 800e55e:	bd80      	pop	{r7, pc}

0800e560 <close_conn>:

static void close_conn(struct mg_connection *c) {
 800e560:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e562:	b08b      	sub	sp, #44	; 0x2c
 800e564:	af06      	add	r7, sp, #24
 800e566:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	33b4      	adds	r3, #180	; 0xb4
 800e56c:	60fb      	str	r3, [r7, #12]
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	3318      	adds	r3, #24
 800e572:	4618      	mov	r0, r3
 800e574:	f7f7 ffc5 	bl	8006502 <mg_iobuf_free>
  if (c->is_udp == false && c->is_listening == false) {   // For TCP conns,
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800e57e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e582:	b2db      	uxtb	r3, r3
 800e584:	2b00      	cmp	r3, #0
 800e586:	d12b      	bne.n	800e5e0 <close_conn+0x80>
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800e58e:	f003 0301 	and.w	r3, r3, #1
 800e592:	b2db      	uxtb	r3, r3
 800e594:	2b00      	cmp	r3, #0
 800e596:	d123      	bne.n	800e5e0 <close_conn+0x80>
    struct mip_if *ifp = (struct mip_if *) c->mgr->priv;  // send TCP FIN
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	685b      	ldr	r3, [r3, #4]
 800e59c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e59e:	60bb      	str	r3, [r7, #8]
    tx_tcp(ifp, c->rem.ip, TH_FIN | TH_ACK, c->loc.port, c->rem.port,
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	891e      	ldrh	r6, [r3, #8]
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	f7fc fde2 	bl	800b17a <mg_ntohl>
 800e5b6:	6038      	str	r0, [r7, #0]
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	685b      	ldr	r3, [r3, #4]
 800e5bc:	4618      	mov	r0, r3
 800e5be:	f7fc fddc 	bl	800b17a <mg_ntohl>
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	9204      	str	r2, [sp, #16]
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	9203      	str	r2, [sp, #12]
 800e5cc:	9302      	str	r3, [sp, #8]
 800e5ce:	683b      	ldr	r3, [r7, #0]
 800e5d0:	9301      	str	r3, [sp, #4]
 800e5d2:	9400      	str	r4, [sp, #0]
 800e5d4:	4633      	mov	r3, r6
 800e5d6:	2211      	movs	r2, #17
 800e5d8:	4629      	mov	r1, r5
 800e5da:	68b8      	ldr	r0, [r7, #8]
 800e5dc:	f7fe fe74 	bl	800d2c8 <tx_tcp>
           mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
  }
  mg_close_conn(c);
 800e5e0:	6878      	ldr	r0, [r7, #4]
 800e5e2:	f7f9 fe9f 	bl	8008324 <mg_close_conn>
}
 800e5e6:	bf00      	nop
 800e5e8:	3714      	adds	r7, #20
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e5ee <can_write>:

static bool can_write(struct mg_connection *c) {
 800e5ee:	b480      	push	{r7}
 800e5f0:	b083      	sub	sp, #12
 800e5f2:	af00      	add	r7, sp, #0
 800e5f4:	6078      	str	r0, [r7, #4]
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800e5fc:	f003 0310 	and.w	r3, r3, #16
 800e600:	b2db      	uxtb	r3, r3
 800e602:	2b00      	cmp	r3, #0
 800e604:	d115      	bne.n	800e632 <can_write+0x44>
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800e60c:	f003 0308 	and.w	r3, r3, #8
 800e610:	b2db      	uxtb	r3, r3
 800e612:	2b00      	cmp	r3, #0
 800e614:	d10d      	bne.n	800e632 <can_write+0x44>
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d009      	beq.n	800e632 <can_write+0x44>
         c->is_tls_hs == 0;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800e624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e628:	b2db      	uxtb	r3, r3
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d101      	bne.n	800e632 <can_write+0x44>
 800e62e:	2301      	movs	r3, #1
 800e630:	e000      	b.n	800e634 <can_write+0x46>
 800e632:	2300      	movs	r3, #0
 800e634:	f003 0301 	and.w	r3, r3, #1
 800e638:	b2db      	uxtb	r3, r3
}
 800e63a:	4618      	mov	r0, r3
 800e63c:	370c      	adds	r7, #12
 800e63e:	46bd      	mov	sp, r7
 800e640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e644:	4770      	bx	lr

0800e646 <mg_mgr_poll>:

void mg_mgr_poll(struct mg_mgr *mgr, int ms) {
 800e646:	b580      	push	{r7, lr}
 800e648:	b088      	sub	sp, #32
 800e64a:	af00      	add	r7, sp, #0
 800e64c:	6078      	str	r0, [r7, #4]
 800e64e:	6039      	str	r1, [r7, #0]
  struct mg_connection *c, *tmp;
  uint64_t now = mg_millis();
 800e650:	f7f2 fce6 	bl	8001020 <mg_millis>
 800e654:	e9c7 0104 	strd	r0, r1, [r7, #16]
  mip_poll((struct mip_if *) mgr->priv, now);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800e65c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e660:	4608      	mov	r0, r1
 800e662:	f7ff fc1d 	bl	800dea0 <mip_poll>
  mg_timer_poll(&mgr->timers, now);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e66c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e670:	4608      	mov	r0, r1
 800e672:	f7fc fb4d 	bl	800ad10 <mg_timer_poll>
  for (c = mgr->conns; c != NULL; c = tmp) {
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	61fb      	str	r3, [r7, #28]
 800e67c:	e036      	b.n	800e6ec <mg_mgr_poll+0xa6>
    tmp = c->next;
 800e67e:	69fb      	ldr	r3, [r7, #28]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	60fb      	str	r3, [r7, #12]
    if (c->is_tls_hs) mg_tls_handshake(c);
 800e684:	69fb      	ldr	r3, [r7, #28]
 800e686:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800e68a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e68e:	b2db      	uxtb	r3, r3
 800e690:	2b00      	cmp	r3, #0
 800e692:	d002      	beq.n	800e69a <mg_mgr_poll+0x54>
 800e694:	69f8      	ldr	r0, [r7, #28]
 800e696:	f7fc fbb3 	bl	800ae00 <mg_tls_handshake>
    if (can_write(c)) write_conn(c);
 800e69a:	69f8      	ldr	r0, [r7, #28]
 800e69c:	f7ff ffa7 	bl	800e5ee <can_write>
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d002      	beq.n	800e6ac <mg_mgr_poll+0x66>
 800e6a6:	69f8      	ldr	r0, [r7, #28]
 800e6a8:	f7ff ff25 	bl	800e4f6 <write_conn>
    if (c->is_draining && c->send.len == 0) c->is_closing = 1;
 800e6ac:	69fb      	ldr	r3, [r7, #28]
 800e6ae:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800e6b2:	f003 0308 	and.w	r3, r3, #8
 800e6b6:	b2db      	uxtb	r3, r3
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d00a      	beq.n	800e6d2 <mg_mgr_poll+0x8c>
 800e6bc:	69fb      	ldr	r3, [r7, #28]
 800e6be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d106      	bne.n	800e6d2 <mg_mgr_poll+0x8c>
 800e6c4:	69fa      	ldr	r2, [r7, #28]
 800e6c6:	f892 30b1 	ldrb.w	r3, [r2, #177]	; 0xb1
 800e6ca:	f043 0310 	orr.w	r3, r3, #16
 800e6ce:	f882 30b1 	strb.w	r3, [r2, #177]	; 0xb1
    if (c->is_closing) close_conn(c);
 800e6d2:	69fb      	ldr	r3, [r7, #28]
 800e6d4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800e6d8:	f003 0310 	and.w	r3, r3, #16
 800e6dc:	b2db      	uxtb	r3, r3
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d002      	beq.n	800e6e8 <mg_mgr_poll+0xa2>
 800e6e2:	69f8      	ldr	r0, [r7, #28]
 800e6e4:	f7ff ff3c 	bl	800e560 <close_conn>
  for (c = mgr->conns; c != NULL; c = tmp) {
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	61fb      	str	r3, [r7, #28]
 800e6ec:	69fb      	ldr	r3, [r7, #28]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d1c5      	bne.n	800e67e <mg_mgr_poll+0x38>
  }
  (void) ms;
}
 800e6f2:	bf00      	nop
 800e6f4:	bf00      	nop
 800e6f6:	3720      	adds	r7, #32
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	bd80      	pop	{r7, pc}

0800e6fc <mg_send>:

bool mg_send(struct mg_connection *c, const void *buf, size_t len) {
 800e6fc:	b590      	push	{r4, r7, lr}
 800e6fe:	b08b      	sub	sp, #44	; 0x2c
 800e700:	af04      	add	r7, sp, #16
 800e702:	60f8      	str	r0, [r7, #12]
 800e704:	60b9      	str	r1, [r7, #8]
 800e706:	607a      	str	r2, [r7, #4]
  struct mip_if *ifp = (struct mip_if *) c->mgr->priv;
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	685b      	ldr	r3, [r3, #4]
 800e70c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e70e:	613b      	str	r3, [r7, #16]
  bool res = false;
 800e710:	2300      	movs	r3, #0
 800e712:	75fb      	strb	r3, [r7, #23]
  if (ifp->ip == 0 || ifp->state != MIP_STATE_READY) {
 800e714:	693b      	ldr	r3, [r7, #16]
 800e716:	689b      	ldr	r3, [r3, #8]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d004      	beq.n	800e726 <mg_send+0x2a>
 800e71c:	693b      	ldr	r3, [r7, #16]
 800e71e:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800e722:	2b02      	cmp	r3, #2
 800e724:	d004      	beq.n	800e730 <mg_send+0x34>
    mg_error(c, "net down");
 800e726:	491b      	ldr	r1, [pc, #108]	; (800e794 <mg_send+0x98>)
 800e728:	68f8      	ldr	r0, [r7, #12]
 800e72a:	f7f3 fdcb 	bl	80022c4 <mg_error>
 800e72e:	e02b      	b.n	800e788 <mg_send+0x8c>
  } else if (c->is_udp) {
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800e736:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e73a:	b2db      	uxtb	r3, r3
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d014      	beq.n	800e76a <mg_send+0x6e>
    tx_udp(ifp, ifp->ip, c->loc.port, c->rem.ip, c->rem.port, buf, len);
 800e740:	693b      	ldr	r3, [r7, #16]
 800e742:	6899      	ldr	r1, [r3, #8]
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	8918      	ldrh	r0, [r3, #8]
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e750:	687a      	ldr	r2, [r7, #4]
 800e752:	9202      	str	r2, [sp, #8]
 800e754:	68ba      	ldr	r2, [r7, #8]
 800e756:	9201      	str	r2, [sp, #4]
 800e758:	9300      	str	r3, [sp, #0]
 800e75a:	4623      	mov	r3, r4
 800e75c:	4602      	mov	r2, r0
 800e75e:	6938      	ldr	r0, [r7, #16]
 800e760:	f7fe f9d6 	bl	800cb10 <tx_udp>
    res = true;
 800e764:	2301      	movs	r3, #1
 800e766:	75fb      	strb	r3, [r7, #23]
 800e768:	e00e      	b.n	800e788 <mg_send+0x8c>
  } else {
    res = mg_iobuf_add(&c->send, c->send.len, buf, len);
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	68ba      	ldr	r2, [r7, #8]
 800e778:	f7f7 fe26 	bl	80063c8 <mg_iobuf_add>
 800e77c:	4603      	mov	r3, r0
 800e77e:	2b00      	cmp	r3, #0
 800e780:	bf14      	ite	ne
 800e782:	2301      	movne	r3, #1
 800e784:	2300      	moveq	r3, #0
 800e786:	75fb      	strb	r3, [r7, #23]
  }
  return res;
 800e788:	7dfb      	ldrb	r3, [r7, #23]
}
 800e78a:	4618      	mov	r0, r3
 800e78c:	371c      	adds	r7, #28
 800e78e:	46bd      	mov	sp, r7
 800e790:	bd90      	pop	{r4, r7, pc}
 800e792:	bf00      	nop
 800e794:	080153ac 	.word	0x080153ac

0800e798 <ourtime>:

static time_t s_boot_timestamp = 0;               // Updated by SNTP
static struct mg_connection *s_sntp_conn = NULL;  // SNTP connection

// Define a system time alternative
time_t ourtime(time_t *tp) {
 800e798:	b5b0      	push	{r4, r5, r7, lr}
 800e79a:	b084      	sub	sp, #16
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
  time_t t = s_boot_timestamp + (time_t) (mg_millis() / 1000);
 800e7a0:	f7f2 fc3e 	bl	8001020 <mg_millis>
 800e7a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e7a8:	f04f 0300 	mov.w	r3, #0
 800e7ac:	f7f2 fa80 	bl	8000cb0 <__aeabi_uldivmod>
 800e7b0:	4602      	mov	r2, r0
 800e7b2:	460b      	mov	r3, r1
 800e7b4:	4610      	mov	r0, r2
 800e7b6:	4619      	mov	r1, r3
 800e7b8:	4b0b      	ldr	r3, [pc, #44]	; (800e7e8 <ourtime+0x50>)
 800e7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7be:	1884      	adds	r4, r0, r2
 800e7c0:	eb41 0503 	adc.w	r5, r1, r3
 800e7c4:	e9c7 4502 	strd	r4, r5, [r7, #8]
  if (tp != NULL) *tp = t;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d004      	beq.n	800e7d8 <ourtime+0x40>
 800e7ce:	6879      	ldr	r1, [r7, #4]
 800e7d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e7d4:	e9c1 2300 	strd	r2, r3, [r1]
  return t;
 800e7d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 800e7dc:	4610      	mov	r0, r2
 800e7de:	4619      	mov	r1, r3
 800e7e0:	3710      	adds	r7, #16
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bdb0      	pop	{r4, r5, r7, pc}
 800e7e6:	bf00      	nop
 800e7e8:	20003680 	.word	0x20003680

0800e7ec <update_config>:

static struct mg_connection *s_mqtt = NULL;  // MQTT connection
static bool s_connected = false;             // MQTT connection established

// Try to update a single configuration value
static void update_config(struct mg_str *body, const char *name, char **value) {
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b0c4      	sub	sp, #272	; 0x110
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e7f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e7fa:	6018      	str	r0, [r3, #0]
 800e7fc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e800:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e804:	6019      	str	r1, [r3, #0]
 800e806:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e80a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800e80e:	601a      	str	r2, [r3, #0]
  char buf[256];
  if (mg_http_get_var(body, name, buf, sizeof(buf)) > 0) {
 800e810:	f107 0210 	add.w	r2, r7, #16
 800e814:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e818:	f5a3 7184 	sub.w	r1, r3, #264	; 0x108
 800e81c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e820:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 800e824:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e828:	6809      	ldr	r1, [r1, #0]
 800e82a:	6800      	ldr	r0, [r0, #0]
 800e82c:	f7f5 fb17 	bl	8003e5e <mg_http_get_var>
 800e830:	4603      	mov	r3, r0
 800e832:	2b00      	cmp	r3, #0
 800e834:	dd15      	ble.n	800e862 <update_config+0x76>
    free(*value);
 800e836:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e83a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	4618      	mov	r0, r3
 800e844:	f003 ff60 	bl	8012708 <free>
    *value = strdup(buf);
 800e848:	f107 0310 	add.w	r3, r7, #16
 800e84c:	4618      	mov	r0, r3
 800e84e:	f004 f96d 	bl	8012b2c <strdup>
 800e852:	4603      	mov	r3, r0
 800e854:	461a      	mov	r2, r3
 800e856:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e85a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	601a      	str	r2, [r3, #0]
  }
}
 800e862:	bf00      	nop
 800e864:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800e868:	46bd      	mov	sp, r7
 800e86a:	bd80      	pop	{r7, pc}

0800e86c <getuser>:

// Parse HTTP requests, return authenticated user or NULL
static struct user *getuser(struct mg_http_message *hm) {
 800e86c:	b580      	push	{r7, lr}
 800e86e:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 800e872:	af02      	add	r7, sp, #8
 800e874:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800e878:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800e87c:	6018      	str	r0, [r3, #0]
      {"user2", "pass2", "user2_token"},
      {NULL, NULL, NULL},
  };
  char user[256], pass[256];
  struct user *u;
  mg_http_creds(hm, user, sizeof(user), pass, sizeof(pass));
 800e87e:	f107 030c 	add.w	r3, r7, #12
 800e882:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 800e886:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800e88a:	f5a2 7003 	sub.w	r0, r2, #524	; 0x20c
 800e88e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e892:	9200      	str	r2, [sp, #0]
 800e894:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e898:	6800      	ldr	r0, [r0, #0]
 800e89a:	f7f6 ffc1 	bl	8005820 <mg_http_creds>
  if (user[0] != '\0' && pass[0] != '\0') {
 800e89e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800e8a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e8a6:	781b      	ldrb	r3, [r3, #0]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d030      	beq.n	800e90e <getuser+0xa2>
 800e8ac:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800e8b0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800e8b4:	781b      	ldrb	r3, [r3, #0]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d029      	beq.n	800e90e <getuser+0xa2>
    // Both user and password is set, search by user/password
    for (u = users; u->name != NULL; u++)
 800e8ba:	4b2a      	ldr	r3, [pc, #168]	; (800e964 <getuser+0xf8>)
 800e8bc:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800e8c0:	e01f      	b.n	800e902 <getuser+0x96>
      if (strcmp(user, u->name) == 0 && strcmp(pass, u->pass) == 0) return u;
 800e8c2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800e8c6:	681a      	ldr	r2, [r3, #0]
 800e8c8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800e8cc:	4611      	mov	r1, r2
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	f7f1 fcee 	bl	80002b0 <strcmp>
 800e8d4:	4603      	mov	r3, r0
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d10e      	bne.n	800e8f8 <getuser+0x8c>
 800e8da:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800e8de:	685a      	ldr	r2, [r3, #4]
 800e8e0:	f107 030c 	add.w	r3, r7, #12
 800e8e4:	4611      	mov	r1, r2
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	f7f1 fce2 	bl	80002b0 <strcmp>
 800e8ec:	4603      	mov	r3, r0
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d102      	bne.n	800e8f8 <getuser+0x8c>
 800e8f2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800e8f6:	e02f      	b.n	800e958 <getuser+0xec>
    for (u = users; u->name != NULL; u++)
 800e8f8:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800e8fc:	330c      	adds	r3, #12
 800e8fe:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800e902:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d1da      	bne.n	800e8c2 <getuser+0x56>
  if (user[0] != '\0' && pass[0] != '\0') {
 800e90c:	e023      	b.n	800e956 <getuser+0xea>
  } else if (user[0] == '\0') {
 800e90e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800e912:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e916:	781b      	ldrb	r3, [r3, #0]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d11c      	bne.n	800e956 <getuser+0xea>
    // Only password is set, search by token
    for (u = users; u->name != NULL; u++)
 800e91c:	4b11      	ldr	r3, [pc, #68]	; (800e964 <getuser+0xf8>)
 800e91e:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800e922:	e013      	b.n	800e94c <getuser+0xe0>
      if (strcmp(pass, u->token) == 0) return u;
 800e924:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800e928:	689a      	ldr	r2, [r3, #8]
 800e92a:	f107 030c 	add.w	r3, r7, #12
 800e92e:	4611      	mov	r1, r2
 800e930:	4618      	mov	r0, r3
 800e932:	f7f1 fcbd 	bl	80002b0 <strcmp>
 800e936:	4603      	mov	r3, r0
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d102      	bne.n	800e942 <getuser+0xd6>
 800e93c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800e940:	e00a      	b.n	800e958 <getuser+0xec>
    for (u = users; u->name != NULL; u++)
 800e942:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800e946:	330c      	adds	r3, #12
 800e948:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800e94c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d1e6      	bne.n	800e924 <getuser+0xb8>
  }
  return NULL;
 800e956:	2300      	movs	r3, #0
}
 800e958:	4618      	mov	r0, r3
 800e95a:	f507 7704 	add.w	r7, r7, #528	; 0x210
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd80      	pop	{r7, pc}
 800e962:	bf00      	nop
 800e964:	20000254 	.word	0x20000254

0800e968 <send_notification>:

// Notify all config watchers about the config change
static void send_notification(struct mg_mgr *mgr, const char *fmt, ...) {
 800e968:	b40e      	push	{r1, r2, r3}
 800e96a:	b580      	push	{r7, lr}
 800e96c:	b085      	sub	sp, #20
 800e96e:	af00      	add	r7, sp, #0
 800e970:	6078      	str	r0, [r7, #4]
  struct mg_connection *c;
  for (c = mgr->conns; c != NULL; c = c->next) {
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	60fb      	str	r3, [r7, #12]
 800e978:	e011      	b.n	800e99e <send_notification+0x36>
    if (c->label[0] == 'W') {
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800e980:	2b57      	cmp	r3, #87	; 0x57
 800e982:	d109      	bne.n	800e998 <send_notification+0x30>
      va_list ap;
      va_start(ap, fmt);
 800e984:	f107 0320 	add.w	r3, r7, #32
 800e988:	60bb      	str	r3, [r7, #8]
      mg_ws_vprintf(c, WEBSOCKET_OP_TEXT, fmt, &ap);
 800e98a:	f107 0308 	add.w	r3, r7, #8
 800e98e:	69fa      	ldr	r2, [r7, #28]
 800e990:	2101      	movs	r1, #1
 800e992:	68f8      	ldr	r0, [r7, #12]
 800e994:	f7fc fc22 	bl	800b1dc <mg_ws_vprintf>
  for (c = mgr->conns; c != NULL; c = c->next) {
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	60fb      	str	r3, [r7, #12]
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d1ea      	bne.n	800e97a <send_notification+0x12>
      va_end(ap);
    }
  }
}
 800e9a4:	bf00      	nop
 800e9a6:	bf00      	nop
 800e9a8:	3714      	adds	r7, #20
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e9b0:	b003      	add	sp, #12
 800e9b2:	4770      	bx	lr
 800e9b4:	0000      	movs	r0, r0
	...

0800e9b8 <timer_metrics_fn>:

// Send simulated metrics data to the dashboard, for chart rendering
static void timer_metrics_fn(void *param) {
 800e9b8:	b590      	push	{r4, r7, lr}
 800e9ba:	b087      	sub	sp, #28
 800e9bc:	af04      	add	r7, sp, #16
 800e9be:	6078      	str	r0, [r7, #4]
  send_notification(param, "{%Q:%Q,%Q:[%lu, %d]}", "name", "metrics", "data",
                    (unsigned long) ourtime(NULL),
 800e9c0:	2000      	movs	r0, #0
 800e9c2:	f7ff fee9 	bl	800e798 <ourtime>
 800e9c6:	4602      	mov	r2, r0
 800e9c8:	460b      	mov	r3, r1
  send_notification(param, "{%Q:%Q,%Q:[%lu, %d]}", "name", "metrics", "data",
 800e9ca:	4614      	mov	r4, r2
                    10 + (int) ((double) rand() * 10 / RAND_MAX));
 800e9cc:	f004 f808 	bl	80129e0 <rand>
 800e9d0:	4603      	mov	r3, r0
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	f7f1 fdd0 	bl	8000578 <__aeabi_i2d>
 800e9d8:	f04f 0200 	mov.w	r2, #0
 800e9dc:	4b12      	ldr	r3, [pc, #72]	; (800ea28 <timer_metrics_fn+0x70>)
 800e9de:	f7f1 fe35 	bl	800064c <__aeabi_dmul>
 800e9e2:	4602      	mov	r2, r0
 800e9e4:	460b      	mov	r3, r1
 800e9e6:	4610      	mov	r0, r2
 800e9e8:	4619      	mov	r1, r3
 800e9ea:	a30d      	add	r3, pc, #52	; (adr r3, 800ea20 <timer_metrics_fn+0x68>)
 800e9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9f0:	f7f1 ff56 	bl	80008a0 <__aeabi_ddiv>
 800e9f4:	4602      	mov	r2, r0
 800e9f6:	460b      	mov	r3, r1
 800e9f8:	4610      	mov	r0, r2
 800e9fa:	4619      	mov	r1, r3
 800e9fc:	f7f2 f8c0 	bl	8000b80 <__aeabi_d2iz>
 800ea00:	4603      	mov	r3, r0
  send_notification(param, "{%Q:%Q,%Q:[%lu, %d]}", "name", "metrics", "data",
 800ea02:	330a      	adds	r3, #10
 800ea04:	9302      	str	r3, [sp, #8]
 800ea06:	9401      	str	r4, [sp, #4]
 800ea08:	4b08      	ldr	r3, [pc, #32]	; (800ea2c <timer_metrics_fn+0x74>)
 800ea0a:	9300      	str	r3, [sp, #0]
 800ea0c:	4b08      	ldr	r3, [pc, #32]	; (800ea30 <timer_metrics_fn+0x78>)
 800ea0e:	4a09      	ldr	r2, [pc, #36]	; (800ea34 <timer_metrics_fn+0x7c>)
 800ea10:	4909      	ldr	r1, [pc, #36]	; (800ea38 <timer_metrics_fn+0x80>)
 800ea12:	6878      	ldr	r0, [r7, #4]
 800ea14:	f7ff ffa8 	bl	800e968 <send_notification>
}
 800ea18:	bf00      	nop
 800ea1a:	370c      	adds	r7, #12
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd90      	pop	{r4, r7, pc}
 800ea20:	ffc00000 	.word	0xffc00000
 800ea24:	41dfffff 	.word	0x41dfffff
 800ea28:	40240000 	.word	0x40240000
 800ea2c:	080153e0 	.word	0x080153e0
 800ea30:	080153b8 	.word	0x080153b8
 800ea34:	080153c0 	.word	0x080153c0
 800ea38:	080153c8 	.word	0x080153c8

0800ea3c <mqtt_fn>:

// MQTT event handler function
static void mqtt_fn(struct mg_connection *c, int ev, void *ev_data, void *fnd) {
 800ea3c:	b5b0      	push	{r4, r5, r7, lr}
 800ea3e:	b09a      	sub	sp, #104	; 0x68
 800ea40:	af0a      	add	r7, sp, #40	; 0x28
 800ea42:	60f8      	str	r0, [r7, #12]
 800ea44:	60b9      	str	r1, [r7, #8]
 800ea46:	607a      	str	r2, [r7, #4]
 800ea48:	603b      	str	r3, [r7, #0]
  if (ev == MG_EV_CONNECT && mg_url_is_ssl(s_config.url)) {
 800ea4a:	68bb      	ldr	r3, [r7, #8]
 800ea4c:	2b04      	cmp	r3, #4
 800ea4e:	d120      	bne.n	800ea92 <mqtt_fn+0x56>
 800ea50:	4b50      	ldr	r3, [pc, #320]	; (800eb94 <mqtt_fn+0x158>)
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	4618      	mov	r0, r3
 800ea56:	f7fc fa19 	bl	800ae8c <mg_url_is_ssl>
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d018      	beq.n	800ea92 <mqtt_fn+0x56>
    struct mg_tls_opts opts = {.ca = "ca.pem",
 800ea60:	f107 0310 	add.w	r3, r7, #16
 800ea64:	2220      	movs	r2, #32
 800ea66:	2100      	movs	r1, #0
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f003 fe8d 	bl	8012788 <memset>
 800ea6e:	4b4a      	ldr	r3, [pc, #296]	; (800eb98 <mqtt_fn+0x15c>)
 800ea70:	613b      	str	r3, [r7, #16]
                               .srvname = mg_url_host(s_config.url)};
 800ea72:	4b48      	ldr	r3, [pc, #288]	; (800eb94 <mqtt_fn+0x158>)
 800ea74:	681a      	ldr	r2, [r3, #0]
 800ea76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ea7a:	4611      	mov	r1, r2
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	f7fc fac4 	bl	800b00a <mg_url_host>
    mg_tls_init(c, &opts);
 800ea82:	f107 0310 	add.w	r3, r7, #16
 800ea86:	4619      	mov	r1, r3
 800ea88:	68f8      	ldr	r0, [r7, #12]
 800ea8a:	f7fc f9a9 	bl	800ade0 <mg_tls_init>
  if (ev == MG_EV_CONNECT && mg_url_is_ssl(s_config.url)) {
 800ea8e:	bf00      	nop
      s_connected = false;
      send_notification(c->mgr, "{%Q:%Q,%Q:null}", "name", "config", "data");
    }
  }
  (void) fnd;
}
 800ea90:	e07c      	b.n	800eb8c <mqtt_fn+0x150>
  } else if (ev == MG_EV_MQTT_OPEN) {
 800ea92:	68bb      	ldr	r3, [r7, #8]
 800ea94:	2b11      	cmp	r3, #17
 800ea96:	d124      	bne.n	800eae2 <mqtt_fn+0xa6>
    s_connected = true;
 800ea98:	4b40      	ldr	r3, [pc, #256]	; (800eb9c <mqtt_fn+0x160>)
 800ea9a:	2201      	movs	r2, #1
 800ea9c:	701a      	strb	r2, [r3, #0]
    c->is_hexdumping = 1;
 800ea9e:	68fa      	ldr	r2, [r7, #12]
 800eaa0:	f892 30b1 	ldrb.w	r3, [r2, #177]	; 0xb1
 800eaa4:	f043 0304 	orr.w	r3, r3, #4
 800eaa8:	f882 30b1 	strb.w	r3, [r2, #177]	; 0xb1
    mg_mqtt_sub(s_mqtt, mg_str(s_config.sub), 2);
 800eaac:	4b3c      	ldr	r3, [pc, #240]	; (800eba0 <mqtt_fn+0x164>)
 800eaae:	681c      	ldr	r4, [r3, #0]
 800eab0:	4b38      	ldr	r3, [pc, #224]	; (800eb94 <mqtt_fn+0x158>)
 800eab2:	689a      	ldr	r2, [r3, #8]
 800eab4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800eab8:	4611      	mov	r1, r2
 800eaba:	4618      	mov	r0, r3
 800eabc:	f7fb fbee 	bl	800a29c <mg_str_s>
 800eac0:	2302      	movs	r3, #2
 800eac2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800eac6:	ca06      	ldmia	r2, {r1, r2}
 800eac8:	4620      	mov	r0, r4
 800eaca:	f7f8 fe7d 	bl	80077c8 <mg_mqtt_sub>
    send_notification(c->mgr, "{%Q:%Q,%Q:null}", "name", "config", "data");
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	6858      	ldr	r0, [r3, #4]
 800ead2:	4b34      	ldr	r3, [pc, #208]	; (800eba4 <mqtt_fn+0x168>)
 800ead4:	9300      	str	r3, [sp, #0]
 800ead6:	4b34      	ldr	r3, [pc, #208]	; (800eba8 <mqtt_fn+0x16c>)
 800ead8:	4a34      	ldr	r2, [pc, #208]	; (800ebac <mqtt_fn+0x170>)
 800eada:	4935      	ldr	r1, [pc, #212]	; (800ebb0 <mqtt_fn+0x174>)
 800eadc:	f7ff ff44 	bl	800e968 <send_notification>
}
 800eae0:	e054      	b.n	800eb8c <mqtt_fn+0x150>
  } else if (ev == MG_EV_MQTT_MSG) {
 800eae2:	68bb      	ldr	r3, [r7, #8]
 800eae4:	2b10      	cmp	r3, #16
 800eae6:	d122      	bne.n	800eb2e <mqtt_fn+0xf2>
    struct mg_mqtt_message *mm = ev_data;
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	63bb      	str	r3, [r7, #56]	; 0x38
    send_notification(c->mgr, "{%Q:%Q,%Q:{%Q: %.*Q, %Q: %.*Q, %Q: %d}}", "name",
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	6858      	ldr	r0, [r3, #4]
                      "message", "data", "topic", (int) mm->topic.len,
 800eaf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaf2:	685b      	ldr	r3, [r3, #4]
    send_notification(c->mgr, "{%Q:%Q,%Q:{%Q: %.*Q, %Q: %.*Q, %Q: %d}}", "name",
 800eaf4:	461c      	mov	r4, r3
 800eaf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaf8:	681b      	ldr	r3, [r3, #0]
                      mm->topic.ptr, "data", (int) mm->data.len, mm->data.ptr,
 800eafa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eafc:	68d2      	ldr	r2, [r2, #12]
    send_notification(c->mgr, "{%Q:%Q,%Q:{%Q: %.*Q, %Q: %.*Q, %Q: %d}}", "name",
 800eafe:	4615      	mov	r5, r2
 800eb00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eb02:	6892      	ldr	r2, [r2, #8]
                      "qos", (int) mm->qos);
 800eb04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800eb06:	7ec9      	ldrb	r1, [r1, #27]
    send_notification(c->mgr, "{%Q:%Q,%Q:{%Q: %.*Q, %Q: %.*Q, %Q: %d}}", "name",
 800eb08:	9108      	str	r1, [sp, #32]
 800eb0a:	492a      	ldr	r1, [pc, #168]	; (800ebb4 <mqtt_fn+0x178>)
 800eb0c:	9107      	str	r1, [sp, #28]
 800eb0e:	9206      	str	r2, [sp, #24]
 800eb10:	9505      	str	r5, [sp, #20]
 800eb12:	4a24      	ldr	r2, [pc, #144]	; (800eba4 <mqtt_fn+0x168>)
 800eb14:	9204      	str	r2, [sp, #16]
 800eb16:	9303      	str	r3, [sp, #12]
 800eb18:	9402      	str	r4, [sp, #8]
 800eb1a:	4b27      	ldr	r3, [pc, #156]	; (800ebb8 <mqtt_fn+0x17c>)
 800eb1c:	9301      	str	r3, [sp, #4]
 800eb1e:	4b21      	ldr	r3, [pc, #132]	; (800eba4 <mqtt_fn+0x168>)
 800eb20:	9300      	str	r3, [sp, #0]
 800eb22:	4b26      	ldr	r3, [pc, #152]	; (800ebbc <mqtt_fn+0x180>)
 800eb24:	4a21      	ldr	r2, [pc, #132]	; (800ebac <mqtt_fn+0x170>)
 800eb26:	4926      	ldr	r1, [pc, #152]	; (800ebc0 <mqtt_fn+0x184>)
 800eb28:	f7ff ff1e 	bl	800e968 <send_notification>
}
 800eb2c:	e02e      	b.n	800eb8c <mqtt_fn+0x150>
  } else if (ev == MG_EV_MQTT_CMD) {
 800eb2e:	68bb      	ldr	r3, [r7, #8]
 800eb30:	2b0f      	cmp	r3, #15
 800eb32:	d115      	bne.n	800eb60 <mqtt_fn+0x124>
    struct mg_mqtt_message *mm = (struct mg_mqtt_message *) ev_data;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	63fb      	str	r3, [r7, #60]	; 0x3c
    MG_DEBUG(("%lu cmd %d qos %d", c->id, mm->cmd, mm->qos));
 800eb38:	4b22      	ldr	r3, [pc, #136]	; (800ebc4 <mqtt_fn+0x188>)
 800eb3a:	2274      	movs	r2, #116	; 0x74
 800eb3c:	4922      	ldr	r1, [pc, #136]	; (800ebc8 <mqtt_fn+0x18c>)
 800eb3e:	2003      	movs	r0, #3
 800eb40:	f7f8 fab0 	bl	80070a4 <mg_log_prefix>
 800eb44:	4603      	mov	r3, r0
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d020      	beq.n	800eb8c <mqtt_fn+0x150>
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800eb4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb50:	7e9b      	ldrb	r3, [r3, #26]
 800eb52:	461a      	mov	r2, r3
 800eb54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb56:	7edb      	ldrb	r3, [r3, #27]
 800eb58:	481c      	ldr	r0, [pc, #112]	; (800ebcc <mqtt_fn+0x190>)
 800eb5a:	f7f8 fafd 	bl	8007158 <mg_log>
}
 800eb5e:	e015      	b.n	800eb8c <mqtt_fn+0x150>
  } else if (ev == MG_EV_CLOSE) {
 800eb60:	68bb      	ldr	r3, [r7, #8]
 800eb62:	2b09      	cmp	r3, #9
 800eb64:	d112      	bne.n	800eb8c <mqtt_fn+0x150>
    s_mqtt = NULL;
 800eb66:	4b0e      	ldr	r3, [pc, #56]	; (800eba0 <mqtt_fn+0x164>)
 800eb68:	2200      	movs	r2, #0
 800eb6a:	601a      	str	r2, [r3, #0]
    if (s_connected) {
 800eb6c:	4b0b      	ldr	r3, [pc, #44]	; (800eb9c <mqtt_fn+0x160>)
 800eb6e:	781b      	ldrb	r3, [r3, #0]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d00b      	beq.n	800eb8c <mqtt_fn+0x150>
      s_connected = false;
 800eb74:	4b09      	ldr	r3, [pc, #36]	; (800eb9c <mqtt_fn+0x160>)
 800eb76:	2200      	movs	r2, #0
 800eb78:	701a      	strb	r2, [r3, #0]
      send_notification(c->mgr, "{%Q:%Q,%Q:null}", "name", "config", "data");
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	6858      	ldr	r0, [r3, #4]
 800eb7e:	4b09      	ldr	r3, [pc, #36]	; (800eba4 <mqtt_fn+0x168>)
 800eb80:	9300      	str	r3, [sp, #0]
 800eb82:	4b09      	ldr	r3, [pc, #36]	; (800eba8 <mqtt_fn+0x16c>)
 800eb84:	4a09      	ldr	r2, [pc, #36]	; (800ebac <mqtt_fn+0x170>)
 800eb86:	490a      	ldr	r1, [pc, #40]	; (800ebb0 <mqtt_fn+0x174>)
 800eb88:	f7ff feee 	bl	800e968 <send_notification>
}
 800eb8c:	bf00      	nop
 800eb8e:	3740      	adds	r7, #64	; 0x40
 800eb90:	46bd      	mov	sp, r7
 800eb92:	bdb0      	pop	{r4, r5, r7, pc}
 800eb94:	2000368c 	.word	0x2000368c
 800eb98:	080153e8 	.word	0x080153e8
 800eb9c:	2000369c 	.word	0x2000369c
 800eba0:	20003698 	.word	0x20003698
 800eba4:	080153e0 	.word	0x080153e0
 800eba8:	080153f0 	.word	0x080153f0
 800ebac:	080153c0 	.word	0x080153c0
 800ebb0:	080153f8 	.word	0x080153f8
 800ebb4:	08015438 	.word	0x08015438
 800ebb8:	0801543c 	.word	0x0801543c
 800ebbc:	08015408 	.word	0x08015408
 800ebc0:	08015410 	.word	0x08015410
 800ebc4:	08015828 	.word	0x08015828
 800ebc8:	08015444 	.word	0x08015444
 800ebcc:	08015458 	.word	0x08015458

0800ebd0 <timer_mqtt_fn>:

// Keep MQTT connection open - reconnect if closed
static void timer_mqtt_fn(void *param) {
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b092      	sub	sp, #72	; 0x48
 800ebd4:	af02      	add	r7, sp, #8
 800ebd6:	6078      	str	r0, [r7, #4]
  struct mg_mgr *mgr = (struct mg_mgr *) param;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (s_mqtt == NULL) {
 800ebdc:	4b0d      	ldr	r3, [pc, #52]	; (800ec14 <timer_mqtt_fn+0x44>)
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d113      	bne.n	800ec0c <timer_mqtt_fn+0x3c>
    struct mg_mqtt_opts opts = {0};
 800ebe4:	f107 030c 	add.w	r3, r7, #12
 800ebe8:	2230      	movs	r2, #48	; 0x30
 800ebea:	2100      	movs	r1, #0
 800ebec:	4618      	mov	r0, r3
 800ebee:	f003 fdcb 	bl	8012788 <memset>
    s_mqtt = mg_mqtt_connect(mgr, s_config.url, &opts, mqtt_fn, NULL);
 800ebf2:	4b09      	ldr	r3, [pc, #36]	; (800ec18 <timer_mqtt_fn+0x48>)
 800ebf4:	6819      	ldr	r1, [r3, #0]
 800ebf6:	f107 020c 	add.w	r2, r7, #12
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	9300      	str	r3, [sp, #0]
 800ebfe:	4b07      	ldr	r3, [pc, #28]	; (800ec1c <timer_mqtt_fn+0x4c>)
 800ec00:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ec02:	f7f9 f845 	bl	8007c90 <mg_mqtt_connect>
 800ec06:	4603      	mov	r3, r0
 800ec08:	4a02      	ldr	r2, [pc, #8]	; (800ec14 <timer_mqtt_fn+0x44>)
 800ec0a:	6013      	str	r3, [r2, #0]
  }
}
 800ec0c:	bf00      	nop
 800ec0e:	3740      	adds	r7, #64	; 0x40
 800ec10:	46bd      	mov	sp, r7
 800ec12:	bd80      	pop	{r7, pc}
 800ec14:	20003698 	.word	0x20003698
 800ec18:	2000368c 	.word	0x2000368c
 800ec1c:	0800ea3d 	.word	0x0800ea3d

0800ec20 <sfn>:

// SNTP connection event handler. When we get a response from an SNTP server,
// adjust s_boot_timestamp. We'll get a valid time from that point on
static void sfn(struct mg_connection *c, int ev, void *ev_data, void *fn_data) {
 800ec20:	b5b0      	push	{r4, r5, r7, lr}
 800ec22:	b086      	sub	sp, #24
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	60f8      	str	r0, [r7, #12]
 800ec28:	60b9      	str	r1, [r7, #8]
 800ec2a:	607a      	str	r2, [r7, #4]
 800ec2c:	603b      	str	r3, [r7, #0]
  if (ev == MG_EV_SNTP_TIME) {
 800ec2e:	68bb      	ldr	r3, [r7, #8]
 800ec30:	2b12      	cmp	r3, #18
 800ec32:	d120      	bne.n	800ec76 <sfn+0x56>
    uint64_t t = *(uint64_t *) ev_data;
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec3a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    s_boot_timestamp = (time_t) ((t - mg_millis()) / 1000);
 800ec3e:	f7f2 f9ef 	bl	8001020 <mg_millis>
 800ec42:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ec46:	1a14      	subs	r4, r2, r0
 800ec48:	eb63 0501 	sbc.w	r5, r3, r1
 800ec4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ec50:	f04f 0300 	mov.w	r3, #0
 800ec54:	4620      	mov	r0, r4
 800ec56:	4629      	mov	r1, r5
 800ec58:	f7f2 f82a 	bl	8000cb0 <__aeabi_uldivmod>
 800ec5c:	4602      	mov	r2, r0
 800ec5e:	460b      	mov	r3, r1
 800ec60:	490a      	ldr	r1, [pc, #40]	; (800ec8c <sfn+0x6c>)
 800ec62:	e9c1 2300 	strd	r2, r3, [r1]
    c->is_closing = 1;
 800ec66:	68fa      	ldr	r2, [r7, #12]
 800ec68:	f892 30b1 	ldrb.w	r3, [r2, #177]	; 0xb1
 800ec6c:	f043 0310 	orr.w	r3, r3, #16
 800ec70:	f882 30b1 	strb.w	r3, [r2, #177]	; 0xb1
  } else if (ev == MG_EV_CLOSE) {
    s_sntp_conn = NULL;
  }
  (void) fn_data;
}
 800ec74:	e005      	b.n	800ec82 <sfn+0x62>
  } else if (ev == MG_EV_CLOSE) {
 800ec76:	68bb      	ldr	r3, [r7, #8]
 800ec78:	2b09      	cmp	r3, #9
 800ec7a:	d102      	bne.n	800ec82 <sfn+0x62>
    s_sntp_conn = NULL;
 800ec7c:	4b04      	ldr	r3, [pc, #16]	; (800ec90 <sfn+0x70>)
 800ec7e:	2200      	movs	r2, #0
 800ec80:	601a      	str	r2, [r3, #0]
}
 800ec82:	bf00      	nop
 800ec84:	3718      	adds	r7, #24
 800ec86:	46bd      	mov	sp, r7
 800ec88:	bdb0      	pop	{r4, r5, r7, pc}
 800ec8a:	bf00      	nop
 800ec8c:	20003680 	.word	0x20003680
 800ec90:	20003688 	.word	0x20003688

0800ec94 <timer_sntp_fn>:

static void timer_sntp_fn(void *param) {  // SNTP timer function. Sync up time
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b084      	sub	sp, #16
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
  struct mg_mgr *mgr = (struct mg_mgr *) param;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	60fb      	str	r3, [r7, #12]
  if (s_sntp_conn == NULL && s_boot_timestamp == 0) {
 800eca0:	4b0a      	ldr	r3, [pc, #40]	; (800eccc <timer_sntp_fn+0x38>)
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d10d      	bne.n	800ecc4 <timer_sntp_fn+0x30>
 800eca8:	4b09      	ldr	r3, [pc, #36]	; (800ecd0 <timer_sntp_fn+0x3c>)
 800ecaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecae:	4313      	orrs	r3, r2
 800ecb0:	d108      	bne.n	800ecc4 <timer_sntp_fn+0x30>
    s_sntp_conn = mg_sntp_connect(mgr, NULL, sfn, NULL);
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	4a07      	ldr	r2, [pc, #28]	; (800ecd4 <timer_sntp_fn+0x40>)
 800ecb6:	2100      	movs	r1, #0
 800ecb8:	68f8      	ldr	r0, [r7, #12]
 800ecba:	f7fb fab7 	bl	800a22c <mg_sntp_connect>
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	4a02      	ldr	r2, [pc, #8]	; (800eccc <timer_sntp_fn+0x38>)
 800ecc2:	6013      	str	r3, [r2, #0]
  }
}
 800ecc4:	bf00      	nop
 800ecc6:	3710      	adds	r7, #16
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	bd80      	pop	{r7, pc}
 800eccc:	20003688 	.word	0x20003688
 800ecd0:	20003680 	.word	0x20003680
 800ecd4:	0800ec21 	.word	0x0800ec21

0800ecd8 <device_dashboard_fn>:

// HTTP request handler function
void device_dashboard_fn(struct mg_connection *c, int ev, void *ev_data,
                         void *fn_data) {
 800ecd8:	b5b0      	push	{r4, r5, r7, lr}
 800ecda:	b0da      	sub	sp, #360	; 0x168
 800ecdc:	af08      	add	r7, sp, #32
 800ecde:	f507 74a4 	add.w	r4, r7, #328	; 0x148
 800ece2:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
 800ece6:	6020      	str	r0, [r4, #0]
 800ece8:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 800ecec:	f5a0 70a0 	sub.w	r0, r0, #320	; 0x140
 800ecf0:	6001      	str	r1, [r0, #0]
 800ecf2:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 800ecf6:	f5a1 71a2 	sub.w	r1, r1, #324	; 0x144
 800ecfa:	600a      	str	r2, [r1, #0]
 800ecfc:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800ed00:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 800ed04:	6013      	str	r3, [r2, #0]
  if (ev == MG_EV_OPEN && c->is_listening) {
 800ed06:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ed0a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	2b01      	cmp	r3, #1
 800ed12:	d169      	bne.n	800ede8 <device_dashboard_fn+0x110>
 800ed14:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ed18:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800ed22:	f003 0301 	and.w	r3, r3, #1
 800ed26:	b2db      	uxtb	r3, r3
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d05d      	beq.n	800ede8 <device_dashboard_fn+0x110>
    mg_timer_add(c->mgr, 1000, MG_TIMER_REPEAT, timer_metrics_fn, c->mgr);
 800ed2c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ed30:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	6859      	ldr	r1, [r3, #4]
 800ed38:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ed3c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	685b      	ldr	r3, [r3, #4]
 800ed44:	9302      	str	r3, [sp, #8]
 800ed46:	4b9f      	ldr	r3, [pc, #636]	; (800efc4 <device_dashboard_fn+0x2ec>)
 800ed48:	9301      	str	r3, [sp, #4]
 800ed4a:	2301      	movs	r3, #1
 800ed4c:	9300      	str	r3, [sp, #0]
 800ed4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ed52:	f04f 0300 	mov.w	r3, #0
 800ed56:	4608      	mov	r0, r1
 800ed58:	f7f9 fc60 	bl	800861c <mg_timer_add>
    mg_timer_add(c->mgr, 1000, MG_TIMER_REPEAT, timer_mqtt_fn, c->mgr);
 800ed5c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ed60:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	6859      	ldr	r1, [r3, #4]
 800ed68:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ed6c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	685b      	ldr	r3, [r3, #4]
 800ed74:	9302      	str	r3, [sp, #8]
 800ed76:	4b94      	ldr	r3, [pc, #592]	; (800efc8 <device_dashboard_fn+0x2f0>)
 800ed78:	9301      	str	r3, [sp, #4]
 800ed7a:	2301      	movs	r3, #1
 800ed7c:	9300      	str	r3, [sp, #0]
 800ed7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ed82:	f04f 0300 	mov.w	r3, #0
 800ed86:	4608      	mov	r0, r1
 800ed88:	f7f9 fc48 	bl	800861c <mg_timer_add>
    mg_timer_add(c->mgr, 1000, MG_TIMER_REPEAT, timer_sntp_fn, c->mgr);
 800ed8c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ed90:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	6859      	ldr	r1, [r3, #4]
 800ed98:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ed9c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	685b      	ldr	r3, [r3, #4]
 800eda4:	9302      	str	r3, [sp, #8]
 800eda6:	4b89      	ldr	r3, [pc, #548]	; (800efcc <device_dashboard_fn+0x2f4>)
 800eda8:	9301      	str	r3, [sp, #4]
 800edaa:	2301      	movs	r3, #1
 800edac:	9300      	str	r3, [sp, #0]
 800edae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800edb2:	f04f 0300 	mov.w	r3, #0
 800edb6:	4608      	mov	r0, r1
 800edb8:	f7f9 fc30 	bl	800861c <mg_timer_add>
    s_config.url = strdup(MQTT_SERVER);
 800edbc:	4884      	ldr	r0, [pc, #528]	; (800efd0 <device_dashboard_fn+0x2f8>)
 800edbe:	f003 feb5 	bl	8012b2c <strdup>
 800edc2:	4603      	mov	r3, r0
 800edc4:	461a      	mov	r2, r3
 800edc6:	4b83      	ldr	r3, [pc, #524]	; (800efd4 <device_dashboard_fn+0x2fc>)
 800edc8:	601a      	str	r2, [r3, #0]
    s_config.pub = strdup(MQTT_PUBLISH_TOPIC);
 800edca:	4883      	ldr	r0, [pc, #524]	; (800efd8 <device_dashboard_fn+0x300>)
 800edcc:	f003 feae 	bl	8012b2c <strdup>
 800edd0:	4603      	mov	r3, r0
 800edd2:	461a      	mov	r2, r3
 800edd4:	4b7f      	ldr	r3, [pc, #508]	; (800efd4 <device_dashboard_fn+0x2fc>)
 800edd6:	605a      	str	r2, [r3, #4]
    s_config.sub = strdup(MQTT_SUBSCRIBE_TOPIC);
 800edd8:	4880      	ldr	r0, [pc, #512]	; (800efdc <device_dashboard_fn+0x304>)
 800edda:	f003 fea7 	bl	8012b2c <strdup>
 800edde:	4603      	mov	r3, r0
 800ede0:	461a      	mov	r2, r3
 800ede2:	4b7c      	ldr	r3, [pc, #496]	; (800efd4 <device_dashboard_fn+0x2fc>)
 800ede4:	609a      	str	r2, [r3, #8]
    }
    MG_DEBUG(("%lu %.*s %.*s -> %.*s", c->id, (int) hm->method.len,
              hm->method.ptr, (int) hm->uri.len, hm->uri.ptr, (int) 3,
              &c->send.buf[9]));
  }
}
 800ede6:	e1fc      	b.n	800f1e2 <device_dashboard_fn+0x50a>
  } else if (ev == MG_EV_HTTP_MSG) {
 800ede8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800edec:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	2b0a      	cmp	r3, #10
 800edf4:	f040 81f5 	bne.w	800f1e2 <device_dashboard_fn+0x50a>
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 800edf8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800edfc:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    struct user *u = getuser(hm);
 800ee06:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 800ee0a:	f7ff fd2f 	bl	800e86c <getuser>
 800ee0e:	f8c7 0140 	str.w	r0, [r7, #320]	; 0x140
    if (mg_http_match_uri(hm, "/api/hi")) {
 800ee12:	4973      	ldr	r1, [pc, #460]	; (800efe0 <device_dashboard_fn+0x308>)
 800ee14:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 800ee18:	f7f6 fedd 	bl	8005bd6 <mg_http_match_uri>
 800ee1c:	4603      	mov	r3, r0
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d00a      	beq.n	800ee38 <device_dashboard_fn+0x160>
      mg_http_reply(c, 200, "", "hi\n");  // Testing endpoint
 800ee22:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ee26:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 800ee2a:	4b6e      	ldr	r3, [pc, #440]	; (800efe4 <device_dashboard_fn+0x30c>)
 800ee2c:	4a6e      	ldr	r2, [pc, #440]	; (800efe8 <device_dashboard_fn+0x310>)
 800ee2e:	21c8      	movs	r1, #200	; 0xc8
 800ee30:	6800      	ldr	r0, [r0, #0]
 800ee32:	f7f5 fc19 	bl	8004668 <mg_http_reply>
 800ee36:	e1a6      	b.n	800f186 <device_dashboard_fn+0x4ae>
    } else if (mg_http_match_uri(hm, "/api/debug")) {
 800ee38:	496c      	ldr	r1, [pc, #432]	; (800efec <device_dashboard_fn+0x314>)
 800ee3a:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 800ee3e:	f7f6 feca 	bl	8005bd6 <mg_http_match_uri>
 800ee42:	4603      	mov	r3, r0
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d01c      	beq.n	800ee82 <device_dashboard_fn+0x1aa>
      int level = mg_json_get_long(hm->body, "$.level", MG_LL_DEBUG);
 800ee48:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800ee4c:	2303      	movs	r3, #3
 800ee4e:	4a68      	ldr	r2, [pc, #416]	; (800eff0 <device_dashboard_fn+0x318>)
 800ee50:	f501 7100 	add.w	r1, r1, #512	; 0x200
 800ee54:	c903      	ldmia	r1, {r0, r1}
 800ee56:	f7f8 f8a2 	bl	8006f9e <mg_json_get_long>
 800ee5a:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
      mg_log_set(level);
 800ee5e:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800ee62:	f7f8 f8fd 	bl	8007060 <mg_log_set>
      mg_http_reply(c, 200, "", "Debug level set to %d\n", level);
 800ee66:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ee6a:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 800ee6e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800ee72:	9300      	str	r3, [sp, #0]
 800ee74:	4b5f      	ldr	r3, [pc, #380]	; (800eff4 <device_dashboard_fn+0x31c>)
 800ee76:	4a5c      	ldr	r2, [pc, #368]	; (800efe8 <device_dashboard_fn+0x310>)
 800ee78:	21c8      	movs	r1, #200	; 0xc8
 800ee7a:	6800      	ldr	r0, [r0, #0]
 800ee7c:	f7f5 fbf4 	bl	8004668 <mg_http_reply>
 800ee80:	e181      	b.n	800f186 <device_dashboard_fn+0x4ae>
    } else if (u == NULL && mg_http_match_uri(hm, "/api/#")) {
 800ee82:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d113      	bne.n	800eeb2 <device_dashboard_fn+0x1da>
 800ee8a:	495b      	ldr	r1, [pc, #364]	; (800eff8 <device_dashboard_fn+0x320>)
 800ee8c:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 800ee90:	f7f6 fea1 	bl	8005bd6 <mg_http_match_uri>
 800ee94:	4603      	mov	r3, r0
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d00b      	beq.n	800eeb2 <device_dashboard_fn+0x1da>
      mg_http_reply(c, 403, "", "Denied\n");
 800ee9a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ee9e:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 800eea2:	4b56      	ldr	r3, [pc, #344]	; (800effc <device_dashboard_fn+0x324>)
 800eea4:	4a50      	ldr	r2, [pc, #320]	; (800efe8 <device_dashboard_fn+0x310>)
 800eea6:	f240 1193 	movw	r1, #403	; 0x193
 800eeaa:	6800      	ldr	r0, [r0, #0]
 800eeac:	f7f5 fbdc 	bl	8004668 <mg_http_reply>
 800eeb0:	e169      	b.n	800f186 <device_dashboard_fn+0x4ae>
    } else if (mg_http_match_uri(hm, "/api/config/get")) {
 800eeb2:	4953      	ldr	r1, [pc, #332]	; (800f000 <device_dashboard_fn+0x328>)
 800eeb4:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 800eeb8:	f7f6 fe8d 	bl	8005bd6 <mg_http_match_uri>
 800eebc:	4603      	mov	r3, r0
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d023      	beq.n	800ef0a <device_dashboard_fn+0x232>
      mg_http_reply(c, 200, NULL, "{%Q:%Q,%Q:%Q,%Q:%Q,%Q:%s}\n", "url",
 800eec2:	4b44      	ldr	r3, [pc, #272]	; (800efd4 <device_dashboard_fn+0x2fc>)
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	4a43      	ldr	r2, [pc, #268]	; (800efd4 <device_dashboard_fn+0x2fc>)
 800eec8:	6852      	ldr	r2, [r2, #4]
 800eeca:	4942      	ldr	r1, [pc, #264]	; (800efd4 <device_dashboard_fn+0x2fc>)
 800eecc:	6889      	ldr	r1, [r1, #8]
                    "connected", s_connected ? "true" : "false");
 800eece:	484d      	ldr	r0, [pc, #308]	; (800f004 <device_dashboard_fn+0x32c>)
 800eed0:	7800      	ldrb	r0, [r0, #0]
      mg_http_reply(c, 200, NULL, "{%Q:%Q,%Q:%Q,%Q:%Q,%Q:%s}\n", "url",
 800eed2:	2800      	cmp	r0, #0
 800eed4:	d001      	beq.n	800eeda <device_dashboard_fn+0x202>
 800eed6:	4c4c      	ldr	r4, [pc, #304]	; (800f008 <device_dashboard_fn+0x330>)
 800eed8:	e000      	b.n	800eedc <device_dashboard_fn+0x204>
 800eeda:	4c4c      	ldr	r4, [pc, #304]	; (800f00c <device_dashboard_fn+0x334>)
 800eedc:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 800eee0:	f5a0 709e 	sub.w	r0, r0, #316	; 0x13c
 800eee4:	9407      	str	r4, [sp, #28]
 800eee6:	4c4a      	ldr	r4, [pc, #296]	; (800f010 <device_dashboard_fn+0x338>)
 800eee8:	9406      	str	r4, [sp, #24]
 800eeea:	9105      	str	r1, [sp, #20]
 800eeec:	4949      	ldr	r1, [pc, #292]	; (800f014 <device_dashboard_fn+0x33c>)
 800eeee:	9104      	str	r1, [sp, #16]
 800eef0:	9203      	str	r2, [sp, #12]
 800eef2:	4a49      	ldr	r2, [pc, #292]	; (800f018 <device_dashboard_fn+0x340>)
 800eef4:	9202      	str	r2, [sp, #8]
 800eef6:	9301      	str	r3, [sp, #4]
 800eef8:	4b48      	ldr	r3, [pc, #288]	; (800f01c <device_dashboard_fn+0x344>)
 800eefa:	9300      	str	r3, [sp, #0]
 800eefc:	4b48      	ldr	r3, [pc, #288]	; (800f020 <device_dashboard_fn+0x348>)
 800eefe:	2200      	movs	r2, #0
 800ef00:	21c8      	movs	r1, #200	; 0xc8
 800ef02:	6800      	ldr	r0, [r0, #0]
 800ef04:	f7f5 fbb0 	bl	8004668 <mg_http_reply>
 800ef08:	e13d      	b.n	800f186 <device_dashboard_fn+0x4ae>
    } else if (mg_http_match_uri(hm, "/api/config/set")) {
 800ef0a:	4946      	ldr	r1, [pc, #280]	; (800f024 <device_dashboard_fn+0x34c>)
 800ef0c:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 800ef10:	f7f6 fe61 	bl	8005bd6 <mg_http_match_uri>
 800ef14:	4603      	mov	r3, r0
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	f000 8098 	beq.w	800f04c <device_dashboard_fn+0x374>
      if (strcmp(u->name, "admin") == 0) {
 800ef1c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	4941      	ldr	r1, [pc, #260]	; (800f028 <device_dashboard_fn+0x350>)
 800ef24:	4618      	mov	r0, r3
 800ef26:	f7f1 f9c3 	bl	80002b0 <strcmp>
 800ef2a:	4603      	mov	r3, r0
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d13d      	bne.n	800efac <device_dashboard_fn+0x2d4>
        update_config(&hm->body, "url", &s_config.url);
 800ef30:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800ef34:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ef38:	4a26      	ldr	r2, [pc, #152]	; (800efd4 <device_dashboard_fn+0x2fc>)
 800ef3a:	4938      	ldr	r1, [pc, #224]	; (800f01c <device_dashboard_fn+0x344>)
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	f7ff fc55 	bl	800e7ec <update_config>
        update_config(&hm->body, "pub", &s_config.pub);
 800ef42:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800ef46:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ef4a:	4a38      	ldr	r2, [pc, #224]	; (800f02c <device_dashboard_fn+0x354>)
 800ef4c:	4932      	ldr	r1, [pc, #200]	; (800f018 <device_dashboard_fn+0x340>)
 800ef4e:	4618      	mov	r0, r3
 800ef50:	f7ff fc4c 	bl	800e7ec <update_config>
        update_config(&hm->body, "sub", &s_config.sub);
 800ef54:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800ef58:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ef5c:	4a34      	ldr	r2, [pc, #208]	; (800f030 <device_dashboard_fn+0x358>)
 800ef5e:	492d      	ldr	r1, [pc, #180]	; (800f014 <device_dashboard_fn+0x33c>)
 800ef60:	4618      	mov	r0, r3
 800ef62:	f7ff fc43 	bl	800e7ec <update_config>
        if (s_mqtt) s_mqtt->is_closing = 1;  // Ask to disconnect from MQTT
 800ef66:	4b33      	ldr	r3, [pc, #204]	; (800f034 <device_dashboard_fn+0x35c>)
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d007      	beq.n	800ef7e <device_dashboard_fn+0x2a6>
 800ef6e:	4b31      	ldr	r3, [pc, #196]	; (800f034 <device_dashboard_fn+0x35c>)
 800ef70:	681a      	ldr	r2, [r3, #0]
 800ef72:	f892 30b1 	ldrb.w	r3, [r2, #177]	; 0xb1
 800ef76:	f043 0310 	orr.w	r3, r3, #16
 800ef7a:	f882 30b1 	strb.w	r3, [r2, #177]	; 0xb1
        send_notification(fn_data, "{%Q:%Q,%Q:null}", "name", "config", "data");
 800ef7e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ef82:	f5a3 70a4 	sub.w	r0, r3, #328	; 0x148
 800ef86:	4b2c      	ldr	r3, [pc, #176]	; (800f038 <device_dashboard_fn+0x360>)
 800ef88:	9300      	str	r3, [sp, #0]
 800ef8a:	4b2c      	ldr	r3, [pc, #176]	; (800f03c <device_dashboard_fn+0x364>)
 800ef8c:	4a2c      	ldr	r2, [pc, #176]	; (800f040 <device_dashboard_fn+0x368>)
 800ef8e:	492d      	ldr	r1, [pc, #180]	; (800f044 <device_dashboard_fn+0x36c>)
 800ef90:	6800      	ldr	r0, [r0, #0]
 800ef92:	f7ff fce9 	bl	800e968 <send_notification>
        mg_http_reply(c, 200, "", "ok\n");
 800ef96:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ef9a:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 800ef9e:	4b2a      	ldr	r3, [pc, #168]	; (800f048 <device_dashboard_fn+0x370>)
 800efa0:	4a11      	ldr	r2, [pc, #68]	; (800efe8 <device_dashboard_fn+0x310>)
 800efa2:	21c8      	movs	r1, #200	; 0xc8
 800efa4:	6800      	ldr	r0, [r0, #0]
 800efa6:	f7f5 fb5f 	bl	8004668 <mg_http_reply>
 800efaa:	e0ec      	b.n	800f186 <device_dashboard_fn+0x4ae>
        mg_http_reply(c, 403, "", "Denied\n");
 800efac:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800efb0:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 800efb4:	4b11      	ldr	r3, [pc, #68]	; (800effc <device_dashboard_fn+0x324>)
 800efb6:	4a0c      	ldr	r2, [pc, #48]	; (800efe8 <device_dashboard_fn+0x310>)
 800efb8:	f240 1193 	movw	r1, #403	; 0x193
 800efbc:	6800      	ldr	r0, [r0, #0]
 800efbe:	f7f5 fb53 	bl	8004668 <mg_http_reply>
 800efc2:	e0e0      	b.n	800f186 <device_dashboard_fn+0x4ae>
 800efc4:	0800e9b9 	.word	0x0800e9b9
 800efc8:	0800ebd1 	.word	0x0800ebd1
 800efcc:	0800ec95 	.word	0x0800ec95
 800efd0:	0801546c 	.word	0x0801546c
 800efd4:	2000368c 	.word	0x2000368c
 800efd8:	08015488 	.word	0x08015488
 800efdc:	0801548c 	.word	0x0801548c
 800efe0:	08015494 	.word	0x08015494
 800efe4:	0801549c 	.word	0x0801549c
 800efe8:	080154a0 	.word	0x080154a0
 800efec:	080154a4 	.word	0x080154a4
 800eff0:	080154b0 	.word	0x080154b0
 800eff4:	080154b8 	.word	0x080154b8
 800eff8:	080154d0 	.word	0x080154d0
 800effc:	080154d8 	.word	0x080154d8
 800f000:	080154e0 	.word	0x080154e0
 800f004:	2000369c 	.word	0x2000369c
 800f008:	080154f0 	.word	0x080154f0
 800f00c:	080154f8 	.word	0x080154f8
 800f010:	0801551c 	.word	0x0801551c
 800f014:	08015528 	.word	0x08015528
 800f018:	0801552c 	.word	0x0801552c
 800f01c:	08015530 	.word	0x08015530
 800f020:	08015500 	.word	0x08015500
 800f024:	08015534 	.word	0x08015534
 800f028:	08015544 	.word	0x08015544
 800f02c:	20003690 	.word	0x20003690
 800f030:	20003694 	.word	0x20003694
 800f034:	20003698 	.word	0x20003698
 800f038:	080153e0 	.word	0x080153e0
 800f03c:	080153f0 	.word	0x080153f0
 800f040:	080153c0 	.word	0x080153c0
 800f044:	080153f8 	.word	0x080153f8
 800f048:	0801554c 	.word	0x0801554c
    } else if (mg_http_match_uri(hm, "/api/message/send")) {
 800f04c:	4967      	ldr	r1, [pc, #412]	; (800f1ec <device_dashboard_fn+0x514>)
 800f04e:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 800f052:	f7f6 fdc0 	bl	8005bd6 <mg_http_match_uri>
 800f056:	4603      	mov	r3, r0
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d03d      	beq.n	800f0d8 <device_dashboard_fn+0x400>
      if (s_connected &&
 800f05c:	4b64      	ldr	r3, [pc, #400]	; (800f1f0 <device_dashboard_fn+0x518>)
 800f05e:	781b      	ldrb	r3, [r3, #0]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d02e      	beq.n	800f0c2 <device_dashboard_fn+0x3ea>
          mg_http_get_var(&hm->body, "message", buf, sizeof(buf)) > 0) {
 800f064:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800f068:	f503 7000 	add.w	r0, r3, #512	; 0x200
 800f06c:	f107 0214 	add.w	r2, r7, #20
 800f070:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f074:	495f      	ldr	r1, [pc, #380]	; (800f1f4 <device_dashboard_fn+0x51c>)
 800f076:	f7f4 fef2 	bl	8003e5e <mg_http_get_var>
 800f07a:	4603      	mov	r3, r0
      if (s_connected &&
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	dd20      	ble.n	800f0c2 <device_dashboard_fn+0x3ea>
        mg_mqtt_pub(s_mqtt, mg_str(s_config.pub), mg_str(buf), 1, false);
 800f080:	4b5d      	ldr	r3, [pc, #372]	; (800f1f8 <device_dashboard_fn+0x520>)
 800f082:	681c      	ldr	r4, [r3, #0]
 800f084:	4b5d      	ldr	r3, [pc, #372]	; (800f1fc <device_dashboard_fn+0x524>)
 800f086:	685a      	ldr	r2, [r3, #4]
 800f088:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800f08c:	4611      	mov	r1, r2
 800f08e:	4618      	mov	r0, r3
 800f090:	f7fb f904 	bl	800a29c <mg_str_s>
 800f094:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800f098:	f107 0214 	add.w	r2, r7, #20
 800f09c:	4611      	mov	r1, r2
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f7fb f8fc 	bl	800a29c <mg_str_s>
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	9302      	str	r3, [sp, #8]
 800f0a8:	2301      	movs	r3, #1
 800f0aa:	9301      	str	r3, [sp, #4]
 800f0ac:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f0b0:	9300      	str	r3, [sp, #0]
 800f0b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f0b6:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 800f0ba:	ca06      	ldmia	r2, {r1, r2}
 800f0bc:	4620      	mov	r0, r4
 800f0be:	f7f8 fae3 	bl	8007688 <mg_mqtt_pub>
      mg_http_reply(c, 200, "", "ok\n");
 800f0c2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800f0c6:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 800f0ca:	4b4d      	ldr	r3, [pc, #308]	; (800f200 <device_dashboard_fn+0x528>)
 800f0cc:	4a4d      	ldr	r2, [pc, #308]	; (800f204 <device_dashboard_fn+0x52c>)
 800f0ce:	21c8      	movs	r1, #200	; 0xc8
 800f0d0:	6800      	ldr	r0, [r0, #0]
 800f0d2:	f7f5 fac9 	bl	8004668 <mg_http_reply>
 800f0d6:	e056      	b.n	800f186 <device_dashboard_fn+0x4ae>
    } else if (mg_http_match_uri(hm, "/api/watch")) {
 800f0d8:	494b      	ldr	r1, [pc, #300]	; (800f208 <device_dashboard_fn+0x530>)
 800f0da:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 800f0de:	f7f6 fd7a 	bl	8005bd6 <mg_http_match_uri>
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d012      	beq.n	800f10e <device_dashboard_fn+0x436>
      c->label[0] = 'W';  // Mark ourselves as a event listener
 800f0e8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800f0ec:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	2257      	movs	r2, #87	; 0x57
 800f0f4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
      mg_ws_upgrade(c, hm, NULL);
 800f0f8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800f0fc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800f100:	2200      	movs	r2, #0
 800f102:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800f106:	6818      	ldr	r0, [r3, #0]
 800f108:	f7fc fc84 	bl	800ba14 <mg_ws_upgrade>
 800f10c:	e03b      	b.n	800f186 <device_dashboard_fn+0x4ae>
    } else if (mg_http_match_uri(hm, "/api/login")) {
 800f10e:	493f      	ldr	r1, [pc, #252]	; (800f20c <device_dashboard_fn+0x534>)
 800f110:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 800f114:	f7f6 fd5f 	bl	8005bd6 <mg_http_match_uri>
 800f118:	4603      	mov	r3, r0
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d016      	beq.n	800f14c <device_dashboard_fn+0x474>
      mg_http_reply(c, 200, NULL, "{%Q:%Q,%Q:%Q}\n", "user", u->name, "token",
 800f11e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800f128:	6892      	ldr	r2, [r2, #8]
 800f12a:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 800f12e:	f5a1 709e 	sub.w	r0, r1, #316	; 0x13c
 800f132:	9203      	str	r2, [sp, #12]
 800f134:	4a36      	ldr	r2, [pc, #216]	; (800f210 <device_dashboard_fn+0x538>)
 800f136:	9202      	str	r2, [sp, #8]
 800f138:	9301      	str	r3, [sp, #4]
 800f13a:	4b36      	ldr	r3, [pc, #216]	; (800f214 <device_dashboard_fn+0x53c>)
 800f13c:	9300      	str	r3, [sp, #0]
 800f13e:	4b36      	ldr	r3, [pc, #216]	; (800f218 <device_dashboard_fn+0x540>)
 800f140:	2200      	movs	r2, #0
 800f142:	21c8      	movs	r1, #200	; 0xc8
 800f144:	6800      	ldr	r0, [r0, #0]
 800f146:	f7f5 fa8f 	bl	8004668 <mg_http_reply>
 800f14a:	e01c      	b.n	800f186 <device_dashboard_fn+0x4ae>
      struct mg_http_serve_opts opts = {0};
 800f14c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800f150:	2200      	movs	r2, #0
 800f152:	601a      	str	r2, [r3, #0]
 800f154:	605a      	str	r2, [r3, #4]
 800f156:	609a      	str	r2, [r3, #8]
 800f158:	60da      	str	r2, [r3, #12]
 800f15a:	611a      	str	r2, [r3, #16]
 800f15c:	615a      	str	r2, [r3, #20]
      opts.root_dir = "/web_root";
 800f15e:	4b2f      	ldr	r3, [pc, #188]	; (800f21c <device_dashboard_fn+0x544>)
 800f160:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      opts.fs = &mg_fs_packed;
 800f164:	4b2e      	ldr	r3, [pc, #184]	; (800f220 <device_dashboard_fn+0x548>)
 800f166:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
      mg_http_serve_dir(c, ev_data, &opts);
 800f16a:	f507 728a 	add.w	r2, r7, #276	; 0x114
 800f16e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800f172:	f5a3 71a2 	sub.w	r1, r3, #324	; 0x144
 800f176:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800f17a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800f17e:	6809      	ldr	r1, [r1, #0]
 800f180:	6818      	ldr	r0, [r3, #0]
 800f182:	f7f6 fa85 	bl	8005690 <mg_http_serve_dir>
    MG_DEBUG(("%lu %.*s %.*s -> %.*s", c->id, (int) hm->method.len,
 800f186:	4b27      	ldr	r3, [pc, #156]	; (800f224 <device_dashboard_fn+0x54c>)
 800f188:	22db      	movs	r2, #219	; 0xdb
 800f18a:	4927      	ldr	r1, [pc, #156]	; (800f228 <device_dashboard_fn+0x550>)
 800f18c:	2003      	movs	r0, #3
 800f18e:	f7f7 ff89 	bl	80070a4 <mg_log_prefix>
 800f192:	4603      	mov	r3, r0
 800f194:	2b00      	cmp	r3, #0
 800f196:	d024      	beq.n	800f1e2 <device_dashboard_fn+0x50a>
 800f198:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800f19c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800f1a4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800f1a8:	685b      	ldr	r3, [r3, #4]
 800f1aa:	461d      	mov	r5, r3
 800f1ac:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800f1b0:	6818      	ldr	r0, [r3, #0]
 800f1b2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800f1b6:	68db      	ldr	r3, [r3, #12]
 800f1b8:	461c      	mov	r4, r3
 800f1ba:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800f1be:	689b      	ldr	r3, [r3, #8]
 800f1c0:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800f1c4:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 800f1c8:	6812      	ldr	r2, [r2, #0]
 800f1ca:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800f1cc:	3209      	adds	r2, #9
 800f1ce:	9203      	str	r2, [sp, #12]
 800f1d0:	2203      	movs	r2, #3
 800f1d2:	9202      	str	r2, [sp, #8]
 800f1d4:	9301      	str	r3, [sp, #4]
 800f1d6:	9400      	str	r4, [sp, #0]
 800f1d8:	4603      	mov	r3, r0
 800f1da:	462a      	mov	r2, r5
 800f1dc:	4813      	ldr	r0, [pc, #76]	; (800f22c <device_dashboard_fn+0x554>)
 800f1de:	f7f7 ffbb 	bl	8007158 <mg_log>
}
 800f1e2:	bf00      	nop
 800f1e4:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	bdb0      	pop	{r4, r5, r7, pc}
 800f1ec:	08015550 	.word	0x08015550
 800f1f0:	2000369c 	.word	0x2000369c
 800f1f4:	08015408 	.word	0x08015408
 800f1f8:	20003698 	.word	0x20003698
 800f1fc:	2000368c 	.word	0x2000368c
 800f200:	0801554c 	.word	0x0801554c
 800f204:	080154a0 	.word	0x080154a0
 800f208:	08015564 	.word	0x08015564
 800f20c:	08015570 	.word	0x08015570
 800f210:	0801558c 	.word	0x0801558c
 800f214:	08015594 	.word	0x08015594
 800f218:	0801557c 	.word	0x0801557c
 800f21c:	0801559c 	.word	0x0801559c
 800f220:	20000000 	.word	0x20000000
 800f224:	08015830 	.word	0x08015830
 800f228:	08015444 	.word	0x08015444
 800f22c:	080155a8 	.word	0x080155a8

0800f230 <scmp>:
  {"/web_root/style.css", v4, sizeof(v4), 1659483223},
  {"/web_root/user.png", v5, sizeof(v5), 1659483223},
  {NULL, NULL, 0, 0}
};

static int scmp(const char *a, const char *b) {
 800f230:	b480      	push	{r7}
 800f232:	b083      	sub	sp, #12
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
 800f238:	6039      	str	r1, [r7, #0]
  while (*a && (*a == *b)) a++, b++;
 800f23a:	e005      	b.n	800f248 <scmp+0x18>
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	3301      	adds	r3, #1
 800f240:	607b      	str	r3, [r7, #4]
 800f242:	683b      	ldr	r3, [r7, #0]
 800f244:	3301      	adds	r3, #1
 800f246:	603b      	str	r3, [r7, #0]
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	781b      	ldrb	r3, [r3, #0]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d005      	beq.n	800f25c <scmp+0x2c>
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	781a      	ldrb	r2, [r3, #0]
 800f254:	683b      	ldr	r3, [r7, #0]
 800f256:	781b      	ldrb	r3, [r3, #0]
 800f258:	429a      	cmp	r2, r3
 800f25a:	d0ef      	beq.n	800f23c <scmp+0xc>
  return *(const unsigned char *) a - *(const unsigned char *) b;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	781b      	ldrb	r3, [r3, #0]
 800f260:	461a      	mov	r2, r3
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	781b      	ldrb	r3, [r3, #0]
 800f266:	1ad3      	subs	r3, r2, r3
}
 800f268:	4618      	mov	r0, r3
 800f26a:	370c      	adds	r7, #12
 800f26c:	46bd      	mov	sp, r7
 800f26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f272:	4770      	bx	lr

0800f274 <mg_unlist>:
const char *mg_unlist(size_t no);
const char *mg_unlist(size_t no) {
 800f274:	b480      	push	{r7}
 800f276:	b083      	sub	sp, #12
 800f278:	af00      	add	r7, sp, #0
 800f27a:	6078      	str	r0, [r7, #4]
  return packed_files[no].name;
 800f27c:	4906      	ldr	r1, [pc, #24]	; (800f298 <mg_unlist+0x24>)
 800f27e:	687a      	ldr	r2, [r7, #4]
 800f280:	4613      	mov	r3, r2
 800f282:	005b      	lsls	r3, r3, #1
 800f284:	4413      	add	r3, r2
 800f286:	00db      	lsls	r3, r3, #3
 800f288:	440b      	add	r3, r1
 800f28a:	681b      	ldr	r3, [r3, #0]
}
 800f28c:	4618      	mov	r0, r3
 800f28e:	370c      	adds	r7, #12
 800f290:	46bd      	mov	sp, r7
 800f292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f296:	4770      	bx	lr
 800f298:	0801dae8 	.word	0x0801dae8

0800f29c <mg_unpack>:
const char *mg_unpack(const char *path, size_t *size, time_t *mtime);
const char *mg_unpack(const char *name, size_t *size, time_t *mtime) {
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b086      	sub	sp, #24
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	60f8      	str	r0, [r7, #12]
 800f2a4:	60b9      	str	r1, [r7, #8]
 800f2a6:	607a      	str	r2, [r7, #4]
  const struct packed_file *p;
  for (p = packed_files; p->name != NULL; p++) {
 800f2a8:	4b16      	ldr	r3, [pc, #88]	; (800f304 <mg_unpack+0x68>)
 800f2aa:	617b      	str	r3, [r7, #20]
 800f2ac:	e020      	b.n	800f2f0 <mg_unpack+0x54>
    if (scmp(p->name, name) != 0) continue;
 800f2ae:	697b      	ldr	r3, [r7, #20]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	68f9      	ldr	r1, [r7, #12]
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	f7ff ffbb 	bl	800f230 <scmp>
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d003      	beq.n	800f2c8 <mg_unpack+0x2c>
  for (p = packed_files; p->name != NULL; p++) {
 800f2c0:	697b      	ldr	r3, [r7, #20]
 800f2c2:	3318      	adds	r3, #24
 800f2c4:	617b      	str	r3, [r7, #20]
 800f2c6:	e013      	b.n	800f2f0 <mg_unpack+0x54>
    if (size != NULL) *size = p->size - 1;
 800f2c8:	68bb      	ldr	r3, [r7, #8]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d004      	beq.n	800f2d8 <mg_unpack+0x3c>
 800f2ce:	697b      	ldr	r3, [r7, #20]
 800f2d0:	689b      	ldr	r3, [r3, #8]
 800f2d2:	1e5a      	subs	r2, r3, #1
 800f2d4:	68bb      	ldr	r3, [r7, #8]
 800f2d6:	601a      	str	r2, [r3, #0]
    if (mtime != NULL) *mtime = p->mtime;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d005      	beq.n	800f2ea <mg_unpack+0x4e>
 800f2de:	697b      	ldr	r3, [r7, #20]
 800f2e0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f2e4:	6879      	ldr	r1, [r7, #4]
 800f2e6:	e9c1 2300 	strd	r2, r3, [r1]
    return (const char *) p->data;
 800f2ea:	697b      	ldr	r3, [r7, #20]
 800f2ec:	685b      	ldr	r3, [r3, #4]
 800f2ee:	e004      	b.n	800f2fa <mg_unpack+0x5e>
  for (p = packed_files; p->name != NULL; p++) {
 800f2f0:	697b      	ldr	r3, [r7, #20]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d1da      	bne.n	800f2ae <mg_unpack+0x12>
  }
  return NULL;
 800f2f8:	2300      	movs	r3, #0
}
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	3718      	adds	r7, #24
 800f2fe:	46bd      	mov	sp, r7
 800f300:	bd80      	pop	{r7, pc}
 800f302:	bf00      	nop
 800f304:	0801dae8 	.word	0x0801dae8

0800f308 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800f308:	b480      	push	{r7}
 800f30a:	b083      	sub	sp, #12
 800f30c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800f30e:	4b0f      	ldr	r3, [pc, #60]	; (800f34c <HAL_MspInit+0x44>)
 800f310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f312:	4a0e      	ldr	r2, [pc, #56]	; (800f34c <HAL_MspInit+0x44>)
 800f314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f318:	6413      	str	r3, [r2, #64]	; 0x40
 800f31a:	4b0c      	ldr	r3, [pc, #48]	; (800f34c <HAL_MspInit+0x44>)
 800f31c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f31e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f322:	607b      	str	r3, [r7, #4]
 800f324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f326:	4b09      	ldr	r3, [pc, #36]	; (800f34c <HAL_MspInit+0x44>)
 800f328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f32a:	4a08      	ldr	r2, [pc, #32]	; (800f34c <HAL_MspInit+0x44>)
 800f32c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f330:	6453      	str	r3, [r2, #68]	; 0x44
 800f332:	4b06      	ldr	r3, [pc, #24]	; (800f34c <HAL_MspInit+0x44>)
 800f334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f33a:	603b      	str	r3, [r7, #0]
 800f33c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800f33e:	bf00      	nop
 800f340:	370c      	adds	r7, #12
 800f342:	46bd      	mov	sp, r7
 800f344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f348:	4770      	bx	lr
 800f34a:	bf00      	nop
 800f34c:	40023800 	.word	0x40023800

0800f350 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800f350:	b580      	push	{r7, lr}
 800f352:	b08e      	sub	sp, #56	; 0x38
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f358:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f35c:	2200      	movs	r2, #0
 800f35e:	601a      	str	r2, [r3, #0]
 800f360:	605a      	str	r2, [r3, #4]
 800f362:	609a      	str	r2, [r3, #8]
 800f364:	60da      	str	r2, [r3, #12]
 800f366:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	4a52      	ldr	r2, [pc, #328]	; (800f4b8 <HAL_ETH_MspInit+0x168>)
 800f36e:	4293      	cmp	r3, r2
 800f370:	f040 809e 	bne.w	800f4b0 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800f374:	4b51      	ldr	r3, [pc, #324]	; (800f4bc <HAL_ETH_MspInit+0x16c>)
 800f376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f378:	4a50      	ldr	r2, [pc, #320]	; (800f4bc <HAL_ETH_MspInit+0x16c>)
 800f37a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f37e:	6313      	str	r3, [r2, #48]	; 0x30
 800f380:	4b4e      	ldr	r3, [pc, #312]	; (800f4bc <HAL_ETH_MspInit+0x16c>)
 800f382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f388:	623b      	str	r3, [r7, #32]
 800f38a:	6a3b      	ldr	r3, [r7, #32]
 800f38c:	4b4b      	ldr	r3, [pc, #300]	; (800f4bc <HAL_ETH_MspInit+0x16c>)
 800f38e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f390:	4a4a      	ldr	r2, [pc, #296]	; (800f4bc <HAL_ETH_MspInit+0x16c>)
 800f392:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f396:	6313      	str	r3, [r2, #48]	; 0x30
 800f398:	4b48      	ldr	r3, [pc, #288]	; (800f4bc <HAL_ETH_MspInit+0x16c>)
 800f39a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f39c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f3a0:	61fb      	str	r3, [r7, #28]
 800f3a2:	69fb      	ldr	r3, [r7, #28]
 800f3a4:	4b45      	ldr	r3, [pc, #276]	; (800f4bc <HAL_ETH_MspInit+0x16c>)
 800f3a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3a8:	4a44      	ldr	r2, [pc, #272]	; (800f4bc <HAL_ETH_MspInit+0x16c>)
 800f3aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f3ae:	6313      	str	r3, [r2, #48]	; 0x30
 800f3b0:	4b42      	ldr	r3, [pc, #264]	; (800f4bc <HAL_ETH_MspInit+0x16c>)
 800f3b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f3b8:	61bb      	str	r3, [r7, #24]
 800f3ba:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f3bc:	4b3f      	ldr	r3, [pc, #252]	; (800f4bc <HAL_ETH_MspInit+0x16c>)
 800f3be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3c0:	4a3e      	ldr	r2, [pc, #248]	; (800f4bc <HAL_ETH_MspInit+0x16c>)
 800f3c2:	f043 0304 	orr.w	r3, r3, #4
 800f3c6:	6313      	str	r3, [r2, #48]	; 0x30
 800f3c8:	4b3c      	ldr	r3, [pc, #240]	; (800f4bc <HAL_ETH_MspInit+0x16c>)
 800f3ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3cc:	f003 0304 	and.w	r3, r3, #4
 800f3d0:	617b      	str	r3, [r7, #20]
 800f3d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f3d4:	4b39      	ldr	r3, [pc, #228]	; (800f4bc <HAL_ETH_MspInit+0x16c>)
 800f3d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3d8:	4a38      	ldr	r2, [pc, #224]	; (800f4bc <HAL_ETH_MspInit+0x16c>)
 800f3da:	f043 0301 	orr.w	r3, r3, #1
 800f3de:	6313      	str	r3, [r2, #48]	; 0x30
 800f3e0:	4b36      	ldr	r3, [pc, #216]	; (800f4bc <HAL_ETH_MspInit+0x16c>)
 800f3e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3e4:	f003 0301 	and.w	r3, r3, #1
 800f3e8:	613b      	str	r3, [r7, #16]
 800f3ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f3ec:	4b33      	ldr	r3, [pc, #204]	; (800f4bc <HAL_ETH_MspInit+0x16c>)
 800f3ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3f0:	4a32      	ldr	r2, [pc, #200]	; (800f4bc <HAL_ETH_MspInit+0x16c>)
 800f3f2:	f043 0302 	orr.w	r3, r3, #2
 800f3f6:	6313      	str	r3, [r2, #48]	; 0x30
 800f3f8:	4b30      	ldr	r3, [pc, #192]	; (800f4bc <HAL_ETH_MspInit+0x16c>)
 800f3fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3fc:	f003 0302 	and.w	r3, r3, #2
 800f400:	60fb      	str	r3, [r7, #12]
 800f402:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800f404:	4b2d      	ldr	r3, [pc, #180]	; (800f4bc <HAL_ETH_MspInit+0x16c>)
 800f406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f408:	4a2c      	ldr	r2, [pc, #176]	; (800f4bc <HAL_ETH_MspInit+0x16c>)
 800f40a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f40e:	6313      	str	r3, [r2, #48]	; 0x30
 800f410:	4b2a      	ldr	r3, [pc, #168]	; (800f4bc <HAL_ETH_MspInit+0x16c>)
 800f412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f418:	60bb      	str	r3, [r7, #8]
 800f41a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800f41c:	2332      	movs	r3, #50	; 0x32
 800f41e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f420:	2302      	movs	r3, #2
 800f422:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f424:	2300      	movs	r3, #0
 800f426:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f428:	2303      	movs	r3, #3
 800f42a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f42c:	230b      	movs	r3, #11
 800f42e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f434:	4619      	mov	r1, r3
 800f436:	4822      	ldr	r0, [pc, #136]	; (800f4c0 <HAL_ETH_MspInit+0x170>)
 800f438:	f000 feb0 	bl	801019c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800f43c:	2386      	movs	r3, #134	; 0x86
 800f43e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f440:	2302      	movs	r3, #2
 800f442:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f444:	2300      	movs	r3, #0
 800f446:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f448:	2303      	movs	r3, #3
 800f44a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f44c:	230b      	movs	r3, #11
 800f44e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f450:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f454:	4619      	mov	r1, r3
 800f456:	481b      	ldr	r0, [pc, #108]	; (800f4c4 <HAL_ETH_MspInit+0x174>)
 800f458:	f000 fea0 	bl	801019c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800f45c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f460:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f462:	2302      	movs	r3, #2
 800f464:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f466:	2300      	movs	r3, #0
 800f468:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f46a:	2303      	movs	r3, #3
 800f46c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f46e:	230b      	movs	r3, #11
 800f470:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f476:	4619      	mov	r1, r3
 800f478:	4813      	ldr	r0, [pc, #76]	; (800f4c8 <HAL_ETH_MspInit+0x178>)
 800f47a:	f000 fe8f 	bl	801019c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800f47e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800f482:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f484:	2302      	movs	r3, #2
 800f486:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f488:	2300      	movs	r3, #0
 800f48a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f48c:	2303      	movs	r3, #3
 800f48e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f490:	230b      	movs	r3, #11
 800f492:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800f494:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f498:	4619      	mov	r1, r3
 800f49a:	480c      	ldr	r0, [pc, #48]	; (800f4cc <HAL_ETH_MspInit+0x17c>)
 800f49c:	f000 fe7e 	bl	801019c <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 800f4a0:	2200      	movs	r2, #0
 800f4a2:	2100      	movs	r1, #0
 800f4a4:	203d      	movs	r0, #61	; 0x3d
 800f4a6:	f000 fb29 	bl	800fafc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800f4aa:	203d      	movs	r0, #61	; 0x3d
 800f4ac:	f000 fb42 	bl	800fb34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800f4b0:	bf00      	nop
 800f4b2:	3738      	adds	r7, #56	; 0x38
 800f4b4:	46bd      	mov	sp, r7
 800f4b6:	bd80      	pop	{r7, pc}
 800f4b8:	40028000 	.word	0x40028000
 800f4bc:	40023800 	.word	0x40023800
 800f4c0:	40020800 	.word	0x40020800
 800f4c4:	40020000 	.word	0x40020000
 800f4c8:	40020400 	.word	0x40020400
 800f4cc:	40021800 	.word	0x40021800

0800f4d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b0aa      	sub	sp, #168	; 0xa8
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f4d8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800f4dc:	2200      	movs	r2, #0
 800f4de:	601a      	str	r2, [r3, #0]
 800f4e0:	605a      	str	r2, [r3, #4]
 800f4e2:	609a      	str	r2, [r3, #8]
 800f4e4:	60da      	str	r2, [r3, #12]
 800f4e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f4e8:	f107 0310 	add.w	r3, r7, #16
 800f4ec:	2284      	movs	r2, #132	; 0x84
 800f4ee:	2100      	movs	r1, #0
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	f003 f949 	bl	8012788 <memset>
  if(huart->Instance==USART3)
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	4a22      	ldr	r2, [pc, #136]	; (800f584 <HAL_UART_MspInit+0xb4>)
 800f4fc:	4293      	cmp	r3, r2
 800f4fe:	d13c      	bne.n	800f57a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800f500:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f504:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800f506:	2300      	movs	r3, #0
 800f508:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f50a:	f107 0310 	add.w	r3, r7, #16
 800f50e:	4618      	mov	r0, r3
 800f510:	f001 fd16 	bl	8010f40 <HAL_RCCEx_PeriphCLKConfig>
 800f514:	4603      	mov	r3, r0
 800f516:	2b00      	cmp	r3, #0
 800f518:	d001      	beq.n	800f51e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800f51a:	f7f1 ff27 	bl	800136c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800f51e:	4b1a      	ldr	r3, [pc, #104]	; (800f588 <HAL_UART_MspInit+0xb8>)
 800f520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f522:	4a19      	ldr	r2, [pc, #100]	; (800f588 <HAL_UART_MspInit+0xb8>)
 800f524:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f528:	6413      	str	r3, [r2, #64]	; 0x40
 800f52a:	4b17      	ldr	r3, [pc, #92]	; (800f588 <HAL_UART_MspInit+0xb8>)
 800f52c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f52e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f532:	60fb      	str	r3, [r7, #12]
 800f534:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800f536:	4b14      	ldr	r3, [pc, #80]	; (800f588 <HAL_UART_MspInit+0xb8>)
 800f538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f53a:	4a13      	ldr	r2, [pc, #76]	; (800f588 <HAL_UART_MspInit+0xb8>)
 800f53c:	f043 0308 	orr.w	r3, r3, #8
 800f540:	6313      	str	r3, [r2, #48]	; 0x30
 800f542:	4b11      	ldr	r3, [pc, #68]	; (800f588 <HAL_UART_MspInit+0xb8>)
 800f544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f546:	f003 0308 	and.w	r3, r3, #8
 800f54a:	60bb      	str	r3, [r7, #8]
 800f54c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800f54e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800f552:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f556:	2302      	movs	r3, #2
 800f558:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f55c:	2300      	movs	r3, #0
 800f55e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f562:	2303      	movs	r3, #3
 800f564:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800f568:	2307      	movs	r3, #7
 800f56a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f56e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800f572:	4619      	mov	r1, r3
 800f574:	4805      	ldr	r0, [pc, #20]	; (800f58c <HAL_UART_MspInit+0xbc>)
 800f576:	f000 fe11 	bl	801019c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800f57a:	bf00      	nop
 800f57c:	37a8      	adds	r7, #168	; 0xa8
 800f57e:	46bd      	mov	sp, r7
 800f580:	bd80      	pop	{r7, pc}
 800f582:	bf00      	nop
 800f584:	40004800 	.word	0x40004800
 800f588:	40023800 	.word	0x40023800
 800f58c:	40020c00 	.word	0x40020c00

0800f590 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b08e      	sub	sp, #56	; 0x38
 800f594:	af00      	add	r7, sp, #0
 800f596:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800f598:	2300      	movs	r3, #0
 800f59a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800f59c:	2300      	movs	r3, #0
 800f59e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800f5a0:	4b33      	ldr	r3, [pc, #204]	; (800f670 <HAL_InitTick+0xe0>)
 800f5a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5a4:	4a32      	ldr	r2, [pc, #200]	; (800f670 <HAL_InitTick+0xe0>)
 800f5a6:	f043 0310 	orr.w	r3, r3, #16
 800f5aa:	6413      	str	r3, [r2, #64]	; 0x40
 800f5ac:	4b30      	ldr	r3, [pc, #192]	; (800f670 <HAL_InitTick+0xe0>)
 800f5ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5b0:	f003 0310 	and.w	r3, r3, #16
 800f5b4:	60fb      	str	r3, [r7, #12]
 800f5b6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800f5b8:	f107 0210 	add.w	r2, r7, #16
 800f5bc:	f107 0314 	add.w	r3, r7, #20
 800f5c0:	4611      	mov	r1, r2
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	f001 fc8a 	bl	8010edc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800f5c8:	6a3b      	ldr	r3, [r7, #32]
 800f5ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800f5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d103      	bne.n	800f5da <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800f5d2:	f001 fc5b 	bl	8010e8c <HAL_RCC_GetPCLK1Freq>
 800f5d6:	6378      	str	r0, [r7, #52]	; 0x34
 800f5d8:	e004      	b.n	800f5e4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800f5da:	f001 fc57 	bl	8010e8c <HAL_RCC_GetPCLK1Freq>
 800f5de:	4603      	mov	r3, r0
 800f5e0:	005b      	lsls	r3, r3, #1
 800f5e2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800f5e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5e6:	4a23      	ldr	r2, [pc, #140]	; (800f674 <HAL_InitTick+0xe4>)
 800f5e8:	fba2 2303 	umull	r2, r3, r2, r3
 800f5ec:	0c9b      	lsrs	r3, r3, #18
 800f5ee:	3b01      	subs	r3, #1
 800f5f0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800f5f2:	4b21      	ldr	r3, [pc, #132]	; (800f678 <HAL_InitTick+0xe8>)
 800f5f4:	4a21      	ldr	r2, [pc, #132]	; (800f67c <HAL_InitTick+0xec>)
 800f5f6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800f5f8:	4b1f      	ldr	r3, [pc, #124]	; (800f678 <HAL_InitTick+0xe8>)
 800f5fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 800f5fe:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800f600:	4a1d      	ldr	r2, [pc, #116]	; (800f678 <HAL_InitTick+0xe8>)
 800f602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f604:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800f606:	4b1c      	ldr	r3, [pc, #112]	; (800f678 <HAL_InitTick+0xe8>)
 800f608:	2200      	movs	r2, #0
 800f60a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f60c:	4b1a      	ldr	r3, [pc, #104]	; (800f678 <HAL_InitTick+0xe8>)
 800f60e:	2200      	movs	r2, #0
 800f610:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f612:	4b19      	ldr	r3, [pc, #100]	; (800f678 <HAL_InitTick+0xe8>)
 800f614:	2200      	movs	r2, #0
 800f616:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800f618:	4817      	ldr	r0, [pc, #92]	; (800f678 <HAL_InitTick+0xe8>)
 800f61a:	f002 f881 	bl	8011720 <HAL_TIM_Base_Init>
 800f61e:	4603      	mov	r3, r0
 800f620:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800f624:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d11b      	bne.n	800f664 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800f62c:	4812      	ldr	r0, [pc, #72]	; (800f678 <HAL_InitTick+0xe8>)
 800f62e:	f002 f8d9 	bl	80117e4 <HAL_TIM_Base_Start_IT>
 800f632:	4603      	mov	r3, r0
 800f634:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800f638:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d111      	bne.n	800f664 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800f640:	2036      	movs	r0, #54	; 0x36
 800f642:	f000 fa77 	bl	800fb34 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	2b0f      	cmp	r3, #15
 800f64a:	d808      	bhi.n	800f65e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800f64c:	2200      	movs	r2, #0
 800f64e:	6879      	ldr	r1, [r7, #4]
 800f650:	2036      	movs	r0, #54	; 0x36
 800f652:	f000 fa53 	bl	800fafc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800f656:	4a0a      	ldr	r2, [pc, #40]	; (800f680 <HAL_InitTick+0xf0>)
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	6013      	str	r3, [r2, #0]
 800f65c:	e002      	b.n	800f664 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800f65e:	2301      	movs	r3, #1
 800f660:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800f664:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800f668:	4618      	mov	r0, r3
 800f66a:	3738      	adds	r7, #56	; 0x38
 800f66c:	46bd      	mov	sp, r7
 800f66e:	bd80      	pop	{r7, pc}
 800f670:	40023800 	.word	0x40023800
 800f674:	431bde83 	.word	0x431bde83
 800f678:	200036a0 	.word	0x200036a0
 800f67c:	40001000 	.word	0x40001000
 800f680:	20000288 	.word	0x20000288

0800f684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800f684:	b480      	push	{r7}
 800f686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800f688:	e7fe      	b.n	800f688 <NMI_Handler+0x4>

0800f68a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800f68a:	b480      	push	{r7}
 800f68c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800f68e:	e7fe      	b.n	800f68e <HardFault_Handler+0x4>

0800f690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800f690:	b480      	push	{r7}
 800f692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800f694:	e7fe      	b.n	800f694 <MemManage_Handler+0x4>

0800f696 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800f696:	b480      	push	{r7}
 800f698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800f69a:	e7fe      	b.n	800f69a <BusFault_Handler+0x4>

0800f69c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800f69c:	b480      	push	{r7}
 800f69e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800f6a0:	e7fe      	b.n	800f6a0 <UsageFault_Handler+0x4>

0800f6a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800f6a2:	b480      	push	{r7}
 800f6a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800f6a6:	bf00      	nop
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ae:	4770      	bx	lr

0800f6b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800f6b0:	b480      	push	{r7}
 800f6b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800f6b4:	bf00      	nop
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6bc:	4770      	bx	lr

0800f6be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800f6be:	b480      	push	{r7}
 800f6c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800f6c2:	bf00      	nop
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ca:	4770      	bx	lr

0800f6cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800f6cc:	b480      	push	{r7}
 800f6ce:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800f6d0:	bf00      	nop
 800f6d2:	46bd      	mov	sp, r7
 800f6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d8:	4770      	bx	lr
	...

0800f6dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800f6e0:	4802      	ldr	r0, [pc, #8]	; (800f6ec <TIM6_DAC_IRQHandler+0x10>)
 800f6e2:	f002 f8f7 	bl	80118d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800f6e6:	bf00      	nop
 800f6e8:	bd80      	pop	{r7, pc}
 800f6ea:	bf00      	nop
 800f6ec:	200036a0 	.word	0x200036a0

0800f6f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800f6f0:	b480      	push	{r7}
 800f6f2:	af00      	add	r7, sp, #0
	return 1;
 800f6f4:	2301      	movs	r3, #1
}
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fe:	4770      	bx	lr

0800f700 <_kill>:

int _kill(int pid, int sig)
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b082      	sub	sp, #8
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
 800f708:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800f70a:	f002 ffcb 	bl	80126a4 <__errno>
 800f70e:	4603      	mov	r3, r0
 800f710:	2216      	movs	r2, #22
 800f712:	601a      	str	r2, [r3, #0]
	return -1;
 800f714:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f718:	4618      	mov	r0, r3
 800f71a:	3708      	adds	r7, #8
 800f71c:	46bd      	mov	sp, r7
 800f71e:	bd80      	pop	{r7, pc}

0800f720 <_exit>:

void _exit (int status)
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b082      	sub	sp, #8
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800f728:	f04f 31ff 	mov.w	r1, #4294967295
 800f72c:	6878      	ldr	r0, [r7, #4]
 800f72e:	f7ff ffe7 	bl	800f700 <_kill>
	while (1) {}		/* Make sure we hang here */
 800f732:	e7fe      	b.n	800f732 <_exit+0x12>

0800f734 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800f734:	b580      	push	{r7, lr}
 800f736:	b086      	sub	sp, #24
 800f738:	af00      	add	r7, sp, #0
 800f73a:	60f8      	str	r0, [r7, #12]
 800f73c:	60b9      	str	r1, [r7, #8]
 800f73e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f740:	2300      	movs	r3, #0
 800f742:	617b      	str	r3, [r7, #20]
 800f744:	e00a      	b.n	800f75c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800f746:	f3af 8000 	nop.w
 800f74a:	4601      	mov	r1, r0
 800f74c:	68bb      	ldr	r3, [r7, #8]
 800f74e:	1c5a      	adds	r2, r3, #1
 800f750:	60ba      	str	r2, [r7, #8]
 800f752:	b2ca      	uxtb	r2, r1
 800f754:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f756:	697b      	ldr	r3, [r7, #20]
 800f758:	3301      	adds	r3, #1
 800f75a:	617b      	str	r3, [r7, #20]
 800f75c:	697a      	ldr	r2, [r7, #20]
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	429a      	cmp	r2, r3
 800f762:	dbf0      	blt.n	800f746 <_read+0x12>
	}

return len;
 800f764:	687b      	ldr	r3, [r7, #4]
}
 800f766:	4618      	mov	r0, r3
 800f768:	3718      	adds	r7, #24
 800f76a:	46bd      	mov	sp, r7
 800f76c:	bd80      	pop	{r7, pc}
	...

0800f770 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b084      	sub	sp, #16
 800f774:	af00      	add	r7, sp, #0
 800f776:	60f8      	str	r0, [r7, #12]
 800f778:	60b9      	str	r1, [r7, #8]
 800f77a:	607a      	str	r2, [r7, #4]
//	for (DataIdx = 0; DataIdx < len; DataIdx++)
//	{
//		__io_putchar(*ptr++);
//	}
	extern UART_HandleTypeDef huart3;
	if (file == 1) HAL_UART_Transmit(&huart3, ptr, len, 1000);
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	2b01      	cmp	r3, #1
 800f780:	d107      	bne.n	800f792 <_write+0x22>
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	b29a      	uxth	r2, r3
 800f786:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f78a:	68b9      	ldr	r1, [r7, #8]
 800f78c:	4803      	ldr	r0, [pc, #12]	; (800f79c <_write+0x2c>)
 800f78e:	f002 faf5 	bl	8011d7c <HAL_UART_Transmit>
	return len;
 800f792:	687b      	ldr	r3, [r7, #4]
}
 800f794:	4618      	mov	r0, r3
 800f796:	3710      	adds	r7, #16
 800f798:	46bd      	mov	sp, r7
 800f79a:	bd80      	pop	{r7, pc}
 800f79c:	2000053c 	.word	0x2000053c

0800f7a0 <_close>:

int _close(int file)
{
 800f7a0:	b480      	push	{r7}
 800f7a2:	b083      	sub	sp, #12
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	6078      	str	r0, [r7, #4]
	return -1;
 800f7a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	370c      	adds	r7, #12
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b6:	4770      	bx	lr

0800f7b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800f7b8:	b480      	push	{r7}
 800f7ba:	b083      	sub	sp, #12
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	6078      	str	r0, [r7, #4]
 800f7c0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800f7c2:	683b      	ldr	r3, [r7, #0]
 800f7c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f7c8:	605a      	str	r2, [r3, #4]
	return 0;
 800f7ca:	2300      	movs	r3, #0
}
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	370c      	adds	r7, #12
 800f7d0:	46bd      	mov	sp, r7
 800f7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d6:	4770      	bx	lr

0800f7d8 <_isatty>:

int _isatty(int file)
{
 800f7d8:	b480      	push	{r7}
 800f7da:	b083      	sub	sp, #12
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
	return 1;
 800f7e0:	2301      	movs	r3, #1
}
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	370c      	adds	r7, #12
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ec:	4770      	bx	lr

0800f7ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800f7ee:	b480      	push	{r7}
 800f7f0:	b085      	sub	sp, #20
 800f7f2:	af00      	add	r7, sp, #0
 800f7f4:	60f8      	str	r0, [r7, #12]
 800f7f6:	60b9      	str	r1, [r7, #8]
 800f7f8:	607a      	str	r2, [r7, #4]
	return 0;
 800f7fa:	2300      	movs	r3, #0
}
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	3714      	adds	r7, #20
 800f800:	46bd      	mov	sp, r7
 800f802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f806:	4770      	bx	lr

0800f808 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800f808:	b580      	push	{r7, lr}
 800f80a:	b086      	sub	sp, #24
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800f810:	4a14      	ldr	r2, [pc, #80]	; (800f864 <_sbrk+0x5c>)
 800f812:	4b15      	ldr	r3, [pc, #84]	; (800f868 <_sbrk+0x60>)
 800f814:	1ad3      	subs	r3, r2, r3
 800f816:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800f818:	697b      	ldr	r3, [r7, #20]
 800f81a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800f81c:	4b13      	ldr	r3, [pc, #76]	; (800f86c <_sbrk+0x64>)
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d102      	bne.n	800f82a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800f824:	4b11      	ldr	r3, [pc, #68]	; (800f86c <_sbrk+0x64>)
 800f826:	4a12      	ldr	r2, [pc, #72]	; (800f870 <_sbrk+0x68>)
 800f828:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800f82a:	4b10      	ldr	r3, [pc, #64]	; (800f86c <_sbrk+0x64>)
 800f82c:	681a      	ldr	r2, [r3, #0]
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	4413      	add	r3, r2
 800f832:	693a      	ldr	r2, [r7, #16]
 800f834:	429a      	cmp	r2, r3
 800f836:	d207      	bcs.n	800f848 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800f838:	f002 ff34 	bl	80126a4 <__errno>
 800f83c:	4603      	mov	r3, r0
 800f83e:	220c      	movs	r2, #12
 800f840:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800f842:	f04f 33ff 	mov.w	r3, #4294967295
 800f846:	e009      	b.n	800f85c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800f848:	4b08      	ldr	r3, [pc, #32]	; (800f86c <_sbrk+0x64>)
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800f84e:	4b07      	ldr	r3, [pc, #28]	; (800f86c <_sbrk+0x64>)
 800f850:	681a      	ldr	r2, [r3, #0]
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	4413      	add	r3, r2
 800f856:	4a05      	ldr	r2, [pc, #20]	; (800f86c <_sbrk+0x64>)
 800f858:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800f85a:	68fb      	ldr	r3, [r7, #12]
}
 800f85c:	4618      	mov	r0, r3
 800f85e:	3718      	adds	r7, #24
 800f860:	46bd      	mov	sp, r7
 800f862:	bd80      	pop	{r7, pc}
 800f864:	20050000 	.word	0x20050000
 800f868:	00000400 	.word	0x00000400
 800f86c:	200036ec 	.word	0x200036ec
 800f870:	20003708 	.word	0x20003708

0800f874 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800f874:	b480      	push	{r7}
 800f876:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800f878:	4b06      	ldr	r3, [pc, #24]	; (800f894 <SystemInit+0x20>)
 800f87a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f87e:	4a05      	ldr	r2, [pc, #20]	; (800f894 <SystemInit+0x20>)
 800f880:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f884:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800f888:	bf00      	nop
 800f88a:	46bd      	mov	sp, r7
 800f88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f890:	4770      	bx	lr
 800f892:	bf00      	nop
 800f894:	e000ed00 	.word	0xe000ed00

0800f898 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800f898:	f8df d034 	ldr.w	sp, [pc, #52]	; 800f8d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800f89c:	480d      	ldr	r0, [pc, #52]	; (800f8d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800f89e:	490e      	ldr	r1, [pc, #56]	; (800f8d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800f8a0:	4a0e      	ldr	r2, [pc, #56]	; (800f8dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 800f8a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800f8a4:	e002      	b.n	800f8ac <LoopCopyDataInit>

0800f8a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800f8a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800f8a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800f8aa:	3304      	adds	r3, #4

0800f8ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800f8ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800f8ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800f8b0:	d3f9      	bcc.n	800f8a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800f8b2:	4a0b      	ldr	r2, [pc, #44]	; (800f8e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800f8b4:	4c0b      	ldr	r4, [pc, #44]	; (800f8e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 800f8b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800f8b8:	e001      	b.n	800f8be <LoopFillZerobss>

0800f8ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800f8ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800f8bc:	3204      	adds	r2, #4

0800f8be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800f8be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800f8c0:	d3fb      	bcc.n	800f8ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800f8c2:	f7ff ffd7 	bl	800f874 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800f8c6:	f002 fef3 	bl	80126b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800f8ca:	f7f1 fbb7 	bl	800103c <main>
  bx  lr    
 800f8ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800f8d0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800f8d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800f8d8:	200002f4 	.word	0x200002f4
  ldr r2, =_sidata
 800f8dc:	0801de0c 	.word	0x0801de0c
  ldr r2, =_sbss
 800f8e0:	20000438 	.word	0x20000438
  ldr r4, =_ebss
 800f8e4:	20003704 	.word	0x20003704

0800f8e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800f8e8:	e7fe      	b.n	800f8e8 <ADC_IRQHandler>

0800f8ea <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800f8ea:	b580      	push	{r7, lr}
 800f8ec:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800f8ee:	2003      	movs	r0, #3
 800f8f0:	f000 f8f9 	bl	800fae6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800f8f4:	200f      	movs	r0, #15
 800f8f6:	f7ff fe4b 	bl	800f590 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800f8fa:	f7ff fd05 	bl	800f308 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800f8fe:	2300      	movs	r3, #0
}
 800f900:	4618      	mov	r0, r3
 800f902:	bd80      	pop	{r7, pc}

0800f904 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800f904:	b480      	push	{r7}
 800f906:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800f908:	4b06      	ldr	r3, [pc, #24]	; (800f924 <HAL_IncTick+0x20>)
 800f90a:	781b      	ldrb	r3, [r3, #0]
 800f90c:	461a      	mov	r2, r3
 800f90e:	4b06      	ldr	r3, [pc, #24]	; (800f928 <HAL_IncTick+0x24>)
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	4413      	add	r3, r2
 800f914:	4a04      	ldr	r2, [pc, #16]	; (800f928 <HAL_IncTick+0x24>)
 800f916:	6013      	str	r3, [r2, #0]
}
 800f918:	bf00      	nop
 800f91a:	46bd      	mov	sp, r7
 800f91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f920:	4770      	bx	lr
 800f922:	bf00      	nop
 800f924:	2000028c 	.word	0x2000028c
 800f928:	200036f0 	.word	0x200036f0

0800f92c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800f92c:	b480      	push	{r7}
 800f92e:	af00      	add	r7, sp, #0
  return uwTick;
 800f930:	4b03      	ldr	r3, [pc, #12]	; (800f940 <HAL_GetTick+0x14>)
 800f932:	681b      	ldr	r3, [r3, #0]
}
 800f934:	4618      	mov	r0, r3
 800f936:	46bd      	mov	sp, r7
 800f938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93c:	4770      	bx	lr
 800f93e:	bf00      	nop
 800f940:	200036f0 	.word	0x200036f0

0800f944 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b084      	sub	sp, #16
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800f94c:	f7ff ffee 	bl	800f92c <HAL_GetTick>
 800f950:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f95c:	d005      	beq.n	800f96a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800f95e:	4b0a      	ldr	r3, [pc, #40]	; (800f988 <HAL_Delay+0x44>)
 800f960:	781b      	ldrb	r3, [r3, #0]
 800f962:	461a      	mov	r2, r3
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	4413      	add	r3, r2
 800f968:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800f96a:	bf00      	nop
 800f96c:	f7ff ffde 	bl	800f92c <HAL_GetTick>
 800f970:	4602      	mov	r2, r0
 800f972:	68bb      	ldr	r3, [r7, #8]
 800f974:	1ad3      	subs	r3, r2, r3
 800f976:	68fa      	ldr	r2, [r7, #12]
 800f978:	429a      	cmp	r2, r3
 800f97a:	d8f7      	bhi.n	800f96c <HAL_Delay+0x28>
  {
  }
}
 800f97c:	bf00      	nop
 800f97e:	bf00      	nop
 800f980:	3710      	adds	r7, #16
 800f982:	46bd      	mov	sp, r7
 800f984:	bd80      	pop	{r7, pc}
 800f986:	bf00      	nop
 800f988:	2000028c 	.word	0x2000028c

0800f98c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800f98c:	b480      	push	{r7}
 800f98e:	b085      	sub	sp, #20
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	f003 0307 	and.w	r3, r3, #7
 800f99a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800f99c:	4b0b      	ldr	r3, [pc, #44]	; (800f9cc <__NVIC_SetPriorityGrouping+0x40>)
 800f99e:	68db      	ldr	r3, [r3, #12]
 800f9a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800f9a2:	68ba      	ldr	r2, [r7, #8]
 800f9a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800f9a8:	4013      	ands	r3, r2
 800f9aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800f9b0:	68bb      	ldr	r3, [r7, #8]
 800f9b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800f9b4:	4b06      	ldr	r3, [pc, #24]	; (800f9d0 <__NVIC_SetPriorityGrouping+0x44>)
 800f9b6:	4313      	orrs	r3, r2
 800f9b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800f9ba:	4a04      	ldr	r2, [pc, #16]	; (800f9cc <__NVIC_SetPriorityGrouping+0x40>)
 800f9bc:	68bb      	ldr	r3, [r7, #8]
 800f9be:	60d3      	str	r3, [r2, #12]
}
 800f9c0:	bf00      	nop
 800f9c2:	3714      	adds	r7, #20
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ca:	4770      	bx	lr
 800f9cc:	e000ed00 	.word	0xe000ed00
 800f9d0:	05fa0000 	.word	0x05fa0000

0800f9d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800f9d4:	b480      	push	{r7}
 800f9d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800f9d8:	4b04      	ldr	r3, [pc, #16]	; (800f9ec <__NVIC_GetPriorityGrouping+0x18>)
 800f9da:	68db      	ldr	r3, [r3, #12]
 800f9dc:	0a1b      	lsrs	r3, r3, #8
 800f9de:	f003 0307 	and.w	r3, r3, #7
}
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ea:	4770      	bx	lr
 800f9ec:	e000ed00 	.word	0xe000ed00

0800f9f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f9f0:	b480      	push	{r7}
 800f9f2:	b083      	sub	sp, #12
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	4603      	mov	r3, r0
 800f9f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f9fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	db0b      	blt.n	800fa1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800fa02:	79fb      	ldrb	r3, [r7, #7]
 800fa04:	f003 021f 	and.w	r2, r3, #31
 800fa08:	4907      	ldr	r1, [pc, #28]	; (800fa28 <__NVIC_EnableIRQ+0x38>)
 800fa0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fa0e:	095b      	lsrs	r3, r3, #5
 800fa10:	2001      	movs	r0, #1
 800fa12:	fa00 f202 	lsl.w	r2, r0, r2
 800fa16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800fa1a:	bf00      	nop
 800fa1c:	370c      	adds	r7, #12
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa24:	4770      	bx	lr
 800fa26:	bf00      	nop
 800fa28:	e000e100 	.word	0xe000e100

0800fa2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800fa2c:	b480      	push	{r7}
 800fa2e:	b083      	sub	sp, #12
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	4603      	mov	r3, r0
 800fa34:	6039      	str	r1, [r7, #0]
 800fa36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800fa38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	db0a      	blt.n	800fa56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fa40:	683b      	ldr	r3, [r7, #0]
 800fa42:	b2da      	uxtb	r2, r3
 800fa44:	490c      	ldr	r1, [pc, #48]	; (800fa78 <__NVIC_SetPriority+0x4c>)
 800fa46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fa4a:	0112      	lsls	r2, r2, #4
 800fa4c:	b2d2      	uxtb	r2, r2
 800fa4e:	440b      	add	r3, r1
 800fa50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800fa54:	e00a      	b.n	800fa6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fa56:	683b      	ldr	r3, [r7, #0]
 800fa58:	b2da      	uxtb	r2, r3
 800fa5a:	4908      	ldr	r1, [pc, #32]	; (800fa7c <__NVIC_SetPriority+0x50>)
 800fa5c:	79fb      	ldrb	r3, [r7, #7]
 800fa5e:	f003 030f 	and.w	r3, r3, #15
 800fa62:	3b04      	subs	r3, #4
 800fa64:	0112      	lsls	r2, r2, #4
 800fa66:	b2d2      	uxtb	r2, r2
 800fa68:	440b      	add	r3, r1
 800fa6a:	761a      	strb	r2, [r3, #24]
}
 800fa6c:	bf00      	nop
 800fa6e:	370c      	adds	r7, #12
 800fa70:	46bd      	mov	sp, r7
 800fa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa76:	4770      	bx	lr
 800fa78:	e000e100 	.word	0xe000e100
 800fa7c:	e000ed00 	.word	0xe000ed00

0800fa80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800fa80:	b480      	push	{r7}
 800fa82:	b089      	sub	sp, #36	; 0x24
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	60f8      	str	r0, [r7, #12]
 800fa88:	60b9      	str	r1, [r7, #8]
 800fa8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	f003 0307 	and.w	r3, r3, #7
 800fa92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800fa94:	69fb      	ldr	r3, [r7, #28]
 800fa96:	f1c3 0307 	rsb	r3, r3, #7
 800fa9a:	2b04      	cmp	r3, #4
 800fa9c:	bf28      	it	cs
 800fa9e:	2304      	movcs	r3, #4
 800faa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800faa2:	69fb      	ldr	r3, [r7, #28]
 800faa4:	3304      	adds	r3, #4
 800faa6:	2b06      	cmp	r3, #6
 800faa8:	d902      	bls.n	800fab0 <NVIC_EncodePriority+0x30>
 800faaa:	69fb      	ldr	r3, [r7, #28]
 800faac:	3b03      	subs	r3, #3
 800faae:	e000      	b.n	800fab2 <NVIC_EncodePriority+0x32>
 800fab0:	2300      	movs	r3, #0
 800fab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800fab4:	f04f 32ff 	mov.w	r2, #4294967295
 800fab8:	69bb      	ldr	r3, [r7, #24]
 800faba:	fa02 f303 	lsl.w	r3, r2, r3
 800fabe:	43da      	mvns	r2, r3
 800fac0:	68bb      	ldr	r3, [r7, #8]
 800fac2:	401a      	ands	r2, r3
 800fac4:	697b      	ldr	r3, [r7, #20]
 800fac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800fac8:	f04f 31ff 	mov.w	r1, #4294967295
 800facc:	697b      	ldr	r3, [r7, #20]
 800face:	fa01 f303 	lsl.w	r3, r1, r3
 800fad2:	43d9      	mvns	r1, r3
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800fad8:	4313      	orrs	r3, r2
         );
}
 800fada:	4618      	mov	r0, r3
 800fadc:	3724      	adds	r7, #36	; 0x24
 800fade:	46bd      	mov	sp, r7
 800fae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae4:	4770      	bx	lr

0800fae6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800fae6:	b580      	push	{r7, lr}
 800fae8:	b082      	sub	sp, #8
 800faea:	af00      	add	r7, sp, #0
 800faec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800faee:	6878      	ldr	r0, [r7, #4]
 800faf0:	f7ff ff4c 	bl	800f98c <__NVIC_SetPriorityGrouping>
}
 800faf4:	bf00      	nop
 800faf6:	3708      	adds	r7, #8
 800faf8:	46bd      	mov	sp, r7
 800fafa:	bd80      	pop	{r7, pc}

0800fafc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b086      	sub	sp, #24
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	4603      	mov	r3, r0
 800fb04:	60b9      	str	r1, [r7, #8]
 800fb06:	607a      	str	r2, [r7, #4]
 800fb08:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800fb0e:	f7ff ff61 	bl	800f9d4 <__NVIC_GetPriorityGrouping>
 800fb12:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800fb14:	687a      	ldr	r2, [r7, #4]
 800fb16:	68b9      	ldr	r1, [r7, #8]
 800fb18:	6978      	ldr	r0, [r7, #20]
 800fb1a:	f7ff ffb1 	bl	800fa80 <NVIC_EncodePriority>
 800fb1e:	4602      	mov	r2, r0
 800fb20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb24:	4611      	mov	r1, r2
 800fb26:	4618      	mov	r0, r3
 800fb28:	f7ff ff80 	bl	800fa2c <__NVIC_SetPriority>
}
 800fb2c:	bf00      	nop
 800fb2e:	3718      	adds	r7, #24
 800fb30:	46bd      	mov	sp, r7
 800fb32:	bd80      	pop	{r7, pc}

0800fb34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b082      	sub	sp, #8
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	4603      	mov	r3, r0
 800fb3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800fb3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fb42:	4618      	mov	r0, r3
 800fb44:	f7ff ff54 	bl	800f9f0 <__NVIC_EnableIRQ>
}
 800fb48:	bf00      	nop
 800fb4a:	3708      	adds	r7, #8
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	bd80      	pop	{r7, pc}

0800fb50 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b084      	sub	sp, #16
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d101      	bne.n	800fb62 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800fb5e:	2301      	movs	r3, #1
 800fb60:	e06a      	b.n	800fc38 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d106      	bne.n	800fb7a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	2223      	movs	r2, #35	; 0x23
 800fb70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800fb74:	6878      	ldr	r0, [r7, #4]
 800fb76:	f7ff fbeb 	bl	800f350 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800fb7a:	4b31      	ldr	r3, [pc, #196]	; (800fc40 <HAL_ETH_Init+0xf0>)
 800fb7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb7e:	4a30      	ldr	r2, [pc, #192]	; (800fc40 <HAL_ETH_Init+0xf0>)
 800fb80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fb84:	6453      	str	r3, [r2, #68]	; 0x44
 800fb86:	4b2e      	ldr	r3, [pc, #184]	; (800fc40 <HAL_ETH_Init+0xf0>)
 800fb88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fb8e:	60bb      	str	r3, [r7, #8]
 800fb90:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800fb92:	4b2c      	ldr	r3, [pc, #176]	; (800fc44 <HAL_ETH_Init+0xf4>)
 800fb94:	685b      	ldr	r3, [r3, #4]
 800fb96:	4a2b      	ldr	r2, [pc, #172]	; (800fc44 <HAL_ETH_Init+0xf4>)
 800fb98:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800fb9c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800fb9e:	4b29      	ldr	r3, [pc, #164]	; (800fc44 <HAL_ETH_Init+0xf4>)
 800fba0:	685a      	ldr	r2, [r3, #4]
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	689b      	ldr	r3, [r3, #8]
 800fba6:	4927      	ldr	r1, [pc, #156]	; (800fc44 <HAL_ETH_Init+0xf4>)
 800fba8:	4313      	orrs	r3, r2
 800fbaa:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800fbac:	4b25      	ldr	r3, [pc, #148]	; (800fc44 <HAL_ETH_Init+0xf4>)
 800fbae:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	687a      	ldr	r2, [r7, #4]
 800fbbc:	6812      	ldr	r2, [r2, #0]
 800fbbe:	f043 0301 	orr.w	r3, r3, #1
 800fbc2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800fbc6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800fbc8:	f7ff feb0 	bl	800f92c <HAL_GetTick>
 800fbcc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800fbce:	e011      	b.n	800fbf4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800fbd0:	f7ff feac 	bl	800f92c <HAL_GetTick>
 800fbd4:	4602      	mov	r2, r0
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	1ad3      	subs	r3, r2, r3
 800fbda:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800fbde:	d909      	bls.n	800fbf4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	2204      	movs	r2, #4
 800fbe4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	22e0      	movs	r2, #224	; 0xe0
 800fbec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800fbf0:	2301      	movs	r3, #1
 800fbf2:	e021      	b.n	800fc38 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	f003 0301 	and.w	r3, r3, #1
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d1e4      	bne.n	800fbd0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800fc06:	6878      	ldr	r0, [r7, #4]
 800fc08:	f000 f958 	bl	800febc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800fc0c:	6878      	ldr	r0, [r7, #4]
 800fc0e:	f000 f9ff 	bl	8010010 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800fc12:	6878      	ldr	r0, [r7, #4]
 800fc14:	f000 fa55 	bl	80100c2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	685b      	ldr	r3, [r3, #4]
 800fc1c:	461a      	mov	r2, r3
 800fc1e:	2100      	movs	r1, #0
 800fc20:	6878      	ldr	r0, [r7, #4]
 800fc22:	f000 f9bd 	bl	800ffa0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	2200      	movs	r2, #0
 800fc2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	2210      	movs	r2, #16
 800fc32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fc36:	2300      	movs	r3, #0
}
 800fc38:	4618      	mov	r0, r3
 800fc3a:	3710      	adds	r7, #16
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	bd80      	pop	{r7, pc}
 800fc40:	40023800 	.word	0x40023800
 800fc44:	40013800 	.word	0x40013800

0800fc48 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b084      	sub	sp, #16
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
 800fc50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800fc5a:	68fa      	ldr	r2, [r7, #12]
 800fc5c:	4b51      	ldr	r3, [pc, #324]	; (800fda4 <ETH_SetMACConfig+0x15c>)
 800fc5e:	4013      	ands	r3, r2
 800fc60:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800fc62:	683b      	ldr	r3, [r7, #0]
 800fc64:	7c1b      	ldrb	r3, [r3, #16]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d102      	bne.n	800fc70 <ETH_SetMACConfig+0x28>
 800fc6a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800fc6e:	e000      	b.n	800fc72 <ETH_SetMACConfig+0x2a>
 800fc70:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800fc72:	683b      	ldr	r3, [r7, #0]
 800fc74:	7c5b      	ldrb	r3, [r3, #17]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d102      	bne.n	800fc80 <ETH_SetMACConfig+0x38>
 800fc7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800fc7e:	e000      	b.n	800fc82 <ETH_SetMACConfig+0x3a>
 800fc80:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800fc82:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800fc84:	683b      	ldr	r3, [r7, #0]
 800fc86:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800fc88:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800fc8a:	683b      	ldr	r3, [r7, #0]
 800fc8c:	7fdb      	ldrb	r3, [r3, #31]
 800fc8e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800fc90:	431a      	orrs	r2, r3
                        macconf->Speed |
 800fc92:	683b      	ldr	r3, [r7, #0]
 800fc94:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800fc96:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800fc98:	683a      	ldr	r2, [r7, #0]
 800fc9a:	7f92      	ldrb	r2, [r2, #30]
 800fc9c:	2a00      	cmp	r2, #0
 800fc9e:	d102      	bne.n	800fca6 <ETH_SetMACConfig+0x5e>
 800fca0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800fca4:	e000      	b.n	800fca8 <ETH_SetMACConfig+0x60>
 800fca6:	2200      	movs	r2, #0
                        macconf->Speed |
 800fca8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800fcaa:	683b      	ldr	r3, [r7, #0]
 800fcac:	7f1b      	ldrb	r3, [r3, #28]
 800fcae:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800fcb0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800fcb2:	683b      	ldr	r3, [r7, #0]
 800fcb4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800fcb6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800fcb8:	683b      	ldr	r3, [r7, #0]
 800fcba:	791b      	ldrb	r3, [r3, #4]
 800fcbc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800fcbe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800fcc0:	683a      	ldr	r2, [r7, #0]
 800fcc2:	f892 2020 	ldrb.w	r2, [r2, #32]
 800fcc6:	2a00      	cmp	r2, #0
 800fcc8:	d102      	bne.n	800fcd0 <ETH_SetMACConfig+0x88>
 800fcca:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fcce:	e000      	b.n	800fcd2 <ETH_SetMACConfig+0x8a>
 800fcd0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800fcd2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800fcd4:	683b      	ldr	r3, [r7, #0]
 800fcd6:	7bdb      	ldrb	r3, [r3, #15]
 800fcd8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800fcda:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800fcdc:	683b      	ldr	r3, [r7, #0]
 800fcde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800fce0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800fce2:	683b      	ldr	r3, [r7, #0]
 800fce4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fce8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800fcea:	4313      	orrs	r3, r2
 800fcec:	68fa      	ldr	r2, [r7, #12]
 800fcee:	4313      	orrs	r3, r2
 800fcf0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	68fa      	ldr	r2, [r7, #12]
 800fcf8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800fd02:	2001      	movs	r0, #1
 800fd04:	f7ff fe1e 	bl	800f944 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	68fa      	ldr	r2, [r7, #12]
 800fd0e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	699b      	ldr	r3, [r3, #24]
 800fd16:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800fd18:	68fa      	ldr	r2, [r7, #12]
 800fd1a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800fd1e:	4013      	ands	r3, r2
 800fd20:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800fd22:	683b      	ldr	r3, [r7, #0]
 800fd24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fd26:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800fd28:	683a      	ldr	r2, [r7, #0]
 800fd2a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800fd2e:	2a00      	cmp	r2, #0
 800fd30:	d101      	bne.n	800fd36 <ETH_SetMACConfig+0xee>
 800fd32:	2280      	movs	r2, #128	; 0x80
 800fd34:	e000      	b.n	800fd38 <ETH_SetMACConfig+0xf0>
 800fd36:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800fd38:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800fd3a:	683b      	ldr	r3, [r7, #0]
 800fd3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800fd3e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800fd40:	683a      	ldr	r2, [r7, #0]
 800fd42:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800fd46:	2a01      	cmp	r2, #1
 800fd48:	d101      	bne.n	800fd4e <ETH_SetMACConfig+0x106>
 800fd4a:	2208      	movs	r2, #8
 800fd4c:	e000      	b.n	800fd50 <ETH_SetMACConfig+0x108>
 800fd4e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800fd50:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800fd52:	683a      	ldr	r2, [r7, #0]
 800fd54:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800fd58:	2a01      	cmp	r2, #1
 800fd5a:	d101      	bne.n	800fd60 <ETH_SetMACConfig+0x118>
 800fd5c:	2204      	movs	r2, #4
 800fd5e:	e000      	b.n	800fd62 <ETH_SetMACConfig+0x11a>
 800fd60:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800fd62:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800fd64:	683a      	ldr	r2, [r7, #0]
 800fd66:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800fd6a:	2a01      	cmp	r2, #1
 800fd6c:	d101      	bne.n	800fd72 <ETH_SetMACConfig+0x12a>
 800fd6e:	2202      	movs	r2, #2
 800fd70:	e000      	b.n	800fd74 <ETH_SetMACConfig+0x12c>
 800fd72:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800fd74:	4313      	orrs	r3, r2
 800fd76:	68fa      	ldr	r2, [r7, #12]
 800fd78:	4313      	orrs	r3, r2
 800fd7a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	68fa      	ldr	r2, [r7, #12]
 800fd82:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	699b      	ldr	r3, [r3, #24]
 800fd8a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800fd8c:	2001      	movs	r0, #1
 800fd8e:	f7ff fdd9 	bl	800f944 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	68fa      	ldr	r2, [r7, #12]
 800fd98:	619a      	str	r2, [r3, #24]
}
 800fd9a:	bf00      	nop
 800fd9c:	3710      	adds	r7, #16
 800fd9e:	46bd      	mov	sp, r7
 800fda0:	bd80      	pop	{r7, pc}
 800fda2:	bf00      	nop
 800fda4:	ff20810f 	.word	0xff20810f

0800fda8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800fda8:	b580      	push	{r7, lr}
 800fdaa:	b084      	sub	sp, #16
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	6078      	str	r0, [r7, #4]
 800fdb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fdba:	699b      	ldr	r3, [r3, #24]
 800fdbc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800fdbe:	68fa      	ldr	r2, [r7, #12]
 800fdc0:	4b3d      	ldr	r3, [pc, #244]	; (800feb8 <ETH_SetDMAConfig+0x110>)
 800fdc2:	4013      	ands	r3, r2
 800fdc4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800fdc6:	683b      	ldr	r3, [r7, #0]
 800fdc8:	7b1b      	ldrb	r3, [r3, #12]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d102      	bne.n	800fdd4 <ETH_SetDMAConfig+0x2c>
 800fdce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800fdd2:	e000      	b.n	800fdd6 <ETH_SetDMAConfig+0x2e>
 800fdd4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800fdd6:	683b      	ldr	r3, [r7, #0]
 800fdd8:	7b5b      	ldrb	r3, [r3, #13]
 800fdda:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800fddc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800fdde:	683a      	ldr	r2, [r7, #0]
 800fde0:	7f52      	ldrb	r2, [r2, #29]
 800fde2:	2a00      	cmp	r2, #0
 800fde4:	d102      	bne.n	800fdec <ETH_SetDMAConfig+0x44>
 800fde6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800fdea:	e000      	b.n	800fdee <ETH_SetDMAConfig+0x46>
 800fdec:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800fdee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800fdf0:	683b      	ldr	r3, [r7, #0]
 800fdf2:	7b9b      	ldrb	r3, [r3, #14]
 800fdf4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800fdf6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800fdf8:	683b      	ldr	r3, [r7, #0]
 800fdfa:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800fdfc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800fdfe:	683b      	ldr	r3, [r7, #0]
 800fe00:	7f1b      	ldrb	r3, [r3, #28]
 800fe02:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800fe04:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800fe06:	683b      	ldr	r3, [r7, #0]
 800fe08:	7f9b      	ldrb	r3, [r3, #30]
 800fe0a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800fe0c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800fe0e:	683b      	ldr	r3, [r7, #0]
 800fe10:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800fe12:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800fe1a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800fe1c:	4313      	orrs	r3, r2
 800fe1e:	68fa      	ldr	r2, [r7, #12]
 800fe20:	4313      	orrs	r3, r2
 800fe22:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe2c:	461a      	mov	r2, r3
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe3a:	699b      	ldr	r3, [r3, #24]
 800fe3c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800fe3e:	2001      	movs	r0, #1
 800fe40:	f7ff fd80 	bl	800f944 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe4c:	461a      	mov	r2, r3
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800fe52:	683b      	ldr	r3, [r7, #0]
 800fe54:	791b      	ldrb	r3, [r3, #4]
 800fe56:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800fe58:	683b      	ldr	r3, [r7, #0]
 800fe5a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800fe5c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800fe5e:	683b      	ldr	r3, [r7, #0]
 800fe60:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800fe62:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800fe64:	683b      	ldr	r3, [r7, #0]
 800fe66:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800fe68:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800fe6a:	683b      	ldr	r3, [r7, #0]
 800fe6c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800fe70:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800fe72:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800fe74:	683b      	ldr	r3, [r7, #0]
 800fe76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe78:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800fe7a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800fe7c:	683b      	ldr	r3, [r7, #0]
 800fe7e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800fe80:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800fe82:	687a      	ldr	r2, [r7, #4]
 800fe84:	6812      	ldr	r2, [r2, #0]
 800fe86:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800fe8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800fe8e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800fe9c:	2001      	movs	r0, #1
 800fe9e:	f7ff fd51 	bl	800f944 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800feaa:	461a      	mov	r2, r3
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	6013      	str	r3, [r2, #0]
}
 800feb0:	bf00      	nop
 800feb2:	3710      	adds	r7, #16
 800feb4:	46bd      	mov	sp, r7
 800feb6:	bd80      	pop	{r7, pc}
 800feb8:	f8de3f23 	.word	0xf8de3f23

0800febc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800febc:	b580      	push	{r7, lr}
 800febe:	b0a6      	sub	sp, #152	; 0x98
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800fec4:	2301      	movs	r3, #1
 800fec6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800feca:	2301      	movs	r3, #1
 800fecc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800fed0:	2300      	movs	r3, #0
 800fed2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800fed4:	2300      	movs	r3, #0
 800fed6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800feda:	2301      	movs	r3, #1
 800fedc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800fee0:	2300      	movs	r3, #0
 800fee2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800fee6:	2301      	movs	r3, #1
 800fee8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800feec:	2300      	movs	r3, #0
 800feee:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800fef2:	2300      	movs	r3, #0
 800fef4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800fef8:	2300      	movs	r3, #0
 800fefa:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800fefc:	2300      	movs	r3, #0
 800fefe:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800ff02:	2300      	movs	r3, #0
 800ff04:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800ff06:	2300      	movs	r3, #0
 800ff08:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800ff12:	2300      	movs	r3, #0
 800ff14:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800ff18:	2300      	movs	r3, #0
 800ff1a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800ff1e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ff22:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800ff24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ff28:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800ff30:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ff34:	4619      	mov	r1, r3
 800ff36:	6878      	ldr	r0, [r7, #4]
 800ff38:	f7ff fe86 	bl	800fc48 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800ff3c:	2301      	movs	r3, #1
 800ff3e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800ff40:	2301      	movs	r3, #1
 800ff42:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800ff44:	2301      	movs	r3, #1
 800ff46:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800ff4a:	2301      	movs	r3, #1
 800ff4c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800ff4e:	2300      	movs	r3, #0
 800ff50:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800ff52:	2300      	movs	r3, #0
 800ff54:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800ff58:	2300      	movs	r3, #0
 800ff5a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800ff5e:	2300      	movs	r3, #0
 800ff60:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800ff62:	2301      	movs	r3, #1
 800ff64:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800ff68:	2301      	movs	r3, #1
 800ff6a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800ff6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ff70:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800ff72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ff76:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800ff78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ff7c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800ff7e:	2301      	movs	r3, #1
 800ff80:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800ff84:	2300      	movs	r3, #0
 800ff86:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800ff88:	2300      	movs	r3, #0
 800ff8a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800ff8c:	f107 0308 	add.w	r3, r7, #8
 800ff90:	4619      	mov	r1, r3
 800ff92:	6878      	ldr	r0, [r7, #4]
 800ff94:	f7ff ff08 	bl	800fda8 <ETH_SetDMAConfig>
}
 800ff98:	bf00      	nop
 800ff9a:	3798      	adds	r7, #152	; 0x98
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	bd80      	pop	{r7, pc}

0800ffa0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800ffa0:	b480      	push	{r7}
 800ffa2:	b087      	sub	sp, #28
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	60f8      	str	r0, [r7, #12]
 800ffa8:	60b9      	str	r1, [r7, #8]
 800ffaa:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	3305      	adds	r3, #5
 800ffb0:	781b      	ldrb	r3, [r3, #0]
 800ffb2:	021b      	lsls	r3, r3, #8
 800ffb4:	687a      	ldr	r2, [r7, #4]
 800ffb6:	3204      	adds	r2, #4
 800ffb8:	7812      	ldrb	r2, [r2, #0]
 800ffba:	4313      	orrs	r3, r2
 800ffbc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800ffbe:	68ba      	ldr	r2, [r7, #8]
 800ffc0:	4b11      	ldr	r3, [pc, #68]	; (8010008 <ETH_MACAddressConfig+0x68>)
 800ffc2:	4413      	add	r3, r2
 800ffc4:	461a      	mov	r2, r3
 800ffc6:	697b      	ldr	r3, [r7, #20]
 800ffc8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	3303      	adds	r3, #3
 800ffce:	781b      	ldrb	r3, [r3, #0]
 800ffd0:	061a      	lsls	r2, r3, #24
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	3302      	adds	r3, #2
 800ffd6:	781b      	ldrb	r3, [r3, #0]
 800ffd8:	041b      	lsls	r3, r3, #16
 800ffda:	431a      	orrs	r2, r3
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	3301      	adds	r3, #1
 800ffe0:	781b      	ldrb	r3, [r3, #0]
 800ffe2:	021b      	lsls	r3, r3, #8
 800ffe4:	4313      	orrs	r3, r2
 800ffe6:	687a      	ldr	r2, [r7, #4]
 800ffe8:	7812      	ldrb	r2, [r2, #0]
 800ffea:	4313      	orrs	r3, r2
 800ffec:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800ffee:	68ba      	ldr	r2, [r7, #8]
 800fff0:	4b06      	ldr	r3, [pc, #24]	; (801000c <ETH_MACAddressConfig+0x6c>)
 800fff2:	4413      	add	r3, r2
 800fff4:	461a      	mov	r2, r3
 800fff6:	697b      	ldr	r3, [r7, #20]
 800fff8:	6013      	str	r3, [r2, #0]
}
 800fffa:	bf00      	nop
 800fffc:	371c      	adds	r7, #28
 800fffe:	46bd      	mov	sp, r7
 8010000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010004:	4770      	bx	lr
 8010006:	bf00      	nop
 8010008:	40028040 	.word	0x40028040
 801000c:	40028044 	.word	0x40028044

08010010 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8010010:	b480      	push	{r7}
 8010012:	b085      	sub	sp, #20
 8010014:	af00      	add	r7, sp, #0
 8010016:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8010018:	2300      	movs	r3, #0
 801001a:	60fb      	str	r3, [r7, #12]
 801001c:	e03e      	b.n	801009c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	68d9      	ldr	r1, [r3, #12]
 8010022:	68fa      	ldr	r2, [r7, #12]
 8010024:	4613      	mov	r3, r2
 8010026:	009b      	lsls	r3, r3, #2
 8010028:	4413      	add	r3, r2
 801002a:	00db      	lsls	r3, r3, #3
 801002c:	440b      	add	r3, r1
 801002e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8010030:	68bb      	ldr	r3, [r7, #8]
 8010032:	2200      	movs	r2, #0
 8010034:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8010036:	68bb      	ldr	r3, [r7, #8]
 8010038:	2200      	movs	r2, #0
 801003a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 801003c:	68bb      	ldr	r3, [r7, #8]
 801003e:	2200      	movs	r2, #0
 8010040:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8010042:	68bb      	ldr	r3, [r7, #8]
 8010044:	2200      	movs	r2, #0
 8010046:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8010048:	68b9      	ldr	r1, [r7, #8]
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	68fa      	ldr	r2, [r7, #12]
 801004e:	3206      	adds	r2, #6
 8010050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8010054:	68bb      	ldr	r3, [r7, #8]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801005c:	68bb      	ldr	r3, [r7, #8]
 801005e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	2b02      	cmp	r3, #2
 8010064:	d80c      	bhi.n	8010080 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	68d9      	ldr	r1, [r3, #12]
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	1c5a      	adds	r2, r3, #1
 801006e:	4613      	mov	r3, r2
 8010070:	009b      	lsls	r3, r3, #2
 8010072:	4413      	add	r3, r2
 8010074:	00db      	lsls	r3, r3, #3
 8010076:	440b      	add	r3, r1
 8010078:	461a      	mov	r2, r3
 801007a:	68bb      	ldr	r3, [r7, #8]
 801007c:	60da      	str	r2, [r3, #12]
 801007e:	e004      	b.n	801008a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	68db      	ldr	r3, [r3, #12]
 8010084:	461a      	mov	r2, r3
 8010086:	68bb      	ldr	r3, [r7, #8]
 8010088:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 801008a:	68bb      	ldr	r3, [r7, #8]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8010092:	68bb      	ldr	r3, [r7, #8]
 8010094:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	3301      	adds	r3, #1
 801009a:	60fb      	str	r3, [r7, #12]
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	2b03      	cmp	r3, #3
 80100a0:	d9bd      	bls.n	801001e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	2200      	movs	r2, #0
 80100a6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	68da      	ldr	r2, [r3, #12]
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80100b4:	611a      	str	r2, [r3, #16]
}
 80100b6:	bf00      	nop
 80100b8:	3714      	adds	r7, #20
 80100ba:	46bd      	mov	sp, r7
 80100bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c0:	4770      	bx	lr

080100c2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80100c2:	b480      	push	{r7}
 80100c4:	b085      	sub	sp, #20
 80100c6:	af00      	add	r7, sp, #0
 80100c8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80100ca:	2300      	movs	r3, #0
 80100cc:	60fb      	str	r3, [r7, #12]
 80100ce:	e046      	b.n	801015e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	6919      	ldr	r1, [r3, #16]
 80100d4:	68fa      	ldr	r2, [r7, #12]
 80100d6:	4613      	mov	r3, r2
 80100d8:	009b      	lsls	r3, r3, #2
 80100da:	4413      	add	r3, r2
 80100dc:	00db      	lsls	r3, r3, #3
 80100de:	440b      	add	r3, r1
 80100e0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80100e2:	68bb      	ldr	r3, [r7, #8]
 80100e4:	2200      	movs	r2, #0
 80100e6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80100e8:	68bb      	ldr	r3, [r7, #8]
 80100ea:	2200      	movs	r2, #0
 80100ec:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80100ee:	68bb      	ldr	r3, [r7, #8]
 80100f0:	2200      	movs	r2, #0
 80100f2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80100f4:	68bb      	ldr	r3, [r7, #8]
 80100f6:	2200      	movs	r2, #0
 80100f8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80100fa:	68bb      	ldr	r3, [r7, #8]
 80100fc:	2200      	movs	r2, #0
 80100fe:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8010100:	68bb      	ldr	r3, [r7, #8]
 8010102:	2200      	movs	r2, #0
 8010104:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8010106:	68bb      	ldr	r3, [r7, #8]
 8010108:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801010c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 801010e:	68bb      	ldr	r3, [r7, #8]
 8010110:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8010114:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8010116:	68bb      	ldr	r3, [r7, #8]
 8010118:	685b      	ldr	r3, [r3, #4]
 801011a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801011e:	68bb      	ldr	r3, [r7, #8]
 8010120:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8010122:	68b9      	ldr	r1, [r7, #8]
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	68fa      	ldr	r2, [r7, #12]
 8010128:	3212      	adds	r2, #18
 801012a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	2b02      	cmp	r3, #2
 8010132:	d80c      	bhi.n	801014e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	6919      	ldr	r1, [r3, #16]
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	1c5a      	adds	r2, r3, #1
 801013c:	4613      	mov	r3, r2
 801013e:	009b      	lsls	r3, r3, #2
 8010140:	4413      	add	r3, r2
 8010142:	00db      	lsls	r3, r3, #3
 8010144:	440b      	add	r3, r1
 8010146:	461a      	mov	r2, r3
 8010148:	68bb      	ldr	r3, [r7, #8]
 801014a:	60da      	str	r2, [r3, #12]
 801014c:	e004      	b.n	8010158 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	691b      	ldr	r3, [r3, #16]
 8010152:	461a      	mov	r2, r3
 8010154:	68bb      	ldr	r3, [r7, #8]
 8010156:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	3301      	adds	r3, #1
 801015c:	60fb      	str	r3, [r7, #12]
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	2b03      	cmp	r3, #3
 8010162:	d9b5      	bls.n	80100d0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	2200      	movs	r2, #0
 8010168:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	2200      	movs	r2, #0
 801016e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	2200      	movs	r2, #0
 8010174:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	2200      	movs	r2, #0
 801017a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	2200      	movs	r2, #0
 8010180:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	691a      	ldr	r2, [r3, #16]
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801018e:	60da      	str	r2, [r3, #12]
}
 8010190:	bf00      	nop
 8010192:	3714      	adds	r7, #20
 8010194:	46bd      	mov	sp, r7
 8010196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019a:	4770      	bx	lr

0801019c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801019c:	b480      	push	{r7}
 801019e:	b089      	sub	sp, #36	; 0x24
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	6078      	str	r0, [r7, #4]
 80101a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80101a6:	2300      	movs	r3, #0
 80101a8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80101aa:	2300      	movs	r3, #0
 80101ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80101ae:	2300      	movs	r3, #0
 80101b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80101b2:	2300      	movs	r3, #0
 80101b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80101b6:	2300      	movs	r3, #0
 80101b8:	61fb      	str	r3, [r7, #28]
 80101ba:	e175      	b.n	80104a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80101bc:	2201      	movs	r2, #1
 80101be:	69fb      	ldr	r3, [r7, #28]
 80101c0:	fa02 f303 	lsl.w	r3, r2, r3
 80101c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80101c6:	683b      	ldr	r3, [r7, #0]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	697a      	ldr	r2, [r7, #20]
 80101cc:	4013      	ands	r3, r2
 80101ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80101d0:	693a      	ldr	r2, [r7, #16]
 80101d2:	697b      	ldr	r3, [r7, #20]
 80101d4:	429a      	cmp	r2, r3
 80101d6:	f040 8164 	bne.w	80104a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80101da:	683b      	ldr	r3, [r7, #0]
 80101dc:	685b      	ldr	r3, [r3, #4]
 80101de:	f003 0303 	and.w	r3, r3, #3
 80101e2:	2b01      	cmp	r3, #1
 80101e4:	d005      	beq.n	80101f2 <HAL_GPIO_Init+0x56>
 80101e6:	683b      	ldr	r3, [r7, #0]
 80101e8:	685b      	ldr	r3, [r3, #4]
 80101ea:	f003 0303 	and.w	r3, r3, #3
 80101ee:	2b02      	cmp	r3, #2
 80101f0:	d130      	bne.n	8010254 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	689b      	ldr	r3, [r3, #8]
 80101f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80101f8:	69fb      	ldr	r3, [r7, #28]
 80101fa:	005b      	lsls	r3, r3, #1
 80101fc:	2203      	movs	r2, #3
 80101fe:	fa02 f303 	lsl.w	r3, r2, r3
 8010202:	43db      	mvns	r3, r3
 8010204:	69ba      	ldr	r2, [r7, #24]
 8010206:	4013      	ands	r3, r2
 8010208:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 801020a:	683b      	ldr	r3, [r7, #0]
 801020c:	68da      	ldr	r2, [r3, #12]
 801020e:	69fb      	ldr	r3, [r7, #28]
 8010210:	005b      	lsls	r3, r3, #1
 8010212:	fa02 f303 	lsl.w	r3, r2, r3
 8010216:	69ba      	ldr	r2, [r7, #24]
 8010218:	4313      	orrs	r3, r2
 801021a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	69ba      	ldr	r2, [r7, #24]
 8010220:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	685b      	ldr	r3, [r3, #4]
 8010226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8010228:	2201      	movs	r2, #1
 801022a:	69fb      	ldr	r3, [r7, #28]
 801022c:	fa02 f303 	lsl.w	r3, r2, r3
 8010230:	43db      	mvns	r3, r3
 8010232:	69ba      	ldr	r2, [r7, #24]
 8010234:	4013      	ands	r3, r2
 8010236:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8010238:	683b      	ldr	r3, [r7, #0]
 801023a:	685b      	ldr	r3, [r3, #4]
 801023c:	091b      	lsrs	r3, r3, #4
 801023e:	f003 0201 	and.w	r2, r3, #1
 8010242:	69fb      	ldr	r3, [r7, #28]
 8010244:	fa02 f303 	lsl.w	r3, r2, r3
 8010248:	69ba      	ldr	r2, [r7, #24]
 801024a:	4313      	orrs	r3, r2
 801024c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	69ba      	ldr	r2, [r7, #24]
 8010252:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8010254:	683b      	ldr	r3, [r7, #0]
 8010256:	685b      	ldr	r3, [r3, #4]
 8010258:	f003 0303 	and.w	r3, r3, #3
 801025c:	2b03      	cmp	r3, #3
 801025e:	d017      	beq.n	8010290 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	68db      	ldr	r3, [r3, #12]
 8010264:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8010266:	69fb      	ldr	r3, [r7, #28]
 8010268:	005b      	lsls	r3, r3, #1
 801026a:	2203      	movs	r2, #3
 801026c:	fa02 f303 	lsl.w	r3, r2, r3
 8010270:	43db      	mvns	r3, r3
 8010272:	69ba      	ldr	r2, [r7, #24]
 8010274:	4013      	ands	r3, r2
 8010276:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8010278:	683b      	ldr	r3, [r7, #0]
 801027a:	689a      	ldr	r2, [r3, #8]
 801027c:	69fb      	ldr	r3, [r7, #28]
 801027e:	005b      	lsls	r3, r3, #1
 8010280:	fa02 f303 	lsl.w	r3, r2, r3
 8010284:	69ba      	ldr	r2, [r7, #24]
 8010286:	4313      	orrs	r3, r2
 8010288:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	69ba      	ldr	r2, [r7, #24]
 801028e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8010290:	683b      	ldr	r3, [r7, #0]
 8010292:	685b      	ldr	r3, [r3, #4]
 8010294:	f003 0303 	and.w	r3, r3, #3
 8010298:	2b02      	cmp	r3, #2
 801029a:	d123      	bne.n	80102e4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 801029c:	69fb      	ldr	r3, [r7, #28]
 801029e:	08da      	lsrs	r2, r3, #3
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	3208      	adds	r2, #8
 80102a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80102aa:	69fb      	ldr	r3, [r7, #28]
 80102ac:	f003 0307 	and.w	r3, r3, #7
 80102b0:	009b      	lsls	r3, r3, #2
 80102b2:	220f      	movs	r2, #15
 80102b4:	fa02 f303 	lsl.w	r3, r2, r3
 80102b8:	43db      	mvns	r3, r3
 80102ba:	69ba      	ldr	r2, [r7, #24]
 80102bc:	4013      	ands	r3, r2
 80102be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80102c0:	683b      	ldr	r3, [r7, #0]
 80102c2:	691a      	ldr	r2, [r3, #16]
 80102c4:	69fb      	ldr	r3, [r7, #28]
 80102c6:	f003 0307 	and.w	r3, r3, #7
 80102ca:	009b      	lsls	r3, r3, #2
 80102cc:	fa02 f303 	lsl.w	r3, r2, r3
 80102d0:	69ba      	ldr	r2, [r7, #24]
 80102d2:	4313      	orrs	r3, r2
 80102d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80102d6:	69fb      	ldr	r3, [r7, #28]
 80102d8:	08da      	lsrs	r2, r3, #3
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	3208      	adds	r2, #8
 80102de:	69b9      	ldr	r1, [r7, #24]
 80102e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80102ea:	69fb      	ldr	r3, [r7, #28]
 80102ec:	005b      	lsls	r3, r3, #1
 80102ee:	2203      	movs	r2, #3
 80102f0:	fa02 f303 	lsl.w	r3, r2, r3
 80102f4:	43db      	mvns	r3, r3
 80102f6:	69ba      	ldr	r2, [r7, #24]
 80102f8:	4013      	ands	r3, r2
 80102fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80102fc:	683b      	ldr	r3, [r7, #0]
 80102fe:	685b      	ldr	r3, [r3, #4]
 8010300:	f003 0203 	and.w	r2, r3, #3
 8010304:	69fb      	ldr	r3, [r7, #28]
 8010306:	005b      	lsls	r3, r3, #1
 8010308:	fa02 f303 	lsl.w	r3, r2, r3
 801030c:	69ba      	ldr	r2, [r7, #24]
 801030e:	4313      	orrs	r3, r2
 8010310:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	69ba      	ldr	r2, [r7, #24]
 8010316:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8010318:	683b      	ldr	r3, [r7, #0]
 801031a:	685b      	ldr	r3, [r3, #4]
 801031c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8010320:	2b00      	cmp	r3, #0
 8010322:	f000 80be 	beq.w	80104a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010326:	4b66      	ldr	r3, [pc, #408]	; (80104c0 <HAL_GPIO_Init+0x324>)
 8010328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801032a:	4a65      	ldr	r2, [pc, #404]	; (80104c0 <HAL_GPIO_Init+0x324>)
 801032c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010330:	6453      	str	r3, [r2, #68]	; 0x44
 8010332:	4b63      	ldr	r3, [pc, #396]	; (80104c0 <HAL_GPIO_Init+0x324>)
 8010334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801033a:	60fb      	str	r3, [r7, #12]
 801033c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 801033e:	4a61      	ldr	r2, [pc, #388]	; (80104c4 <HAL_GPIO_Init+0x328>)
 8010340:	69fb      	ldr	r3, [r7, #28]
 8010342:	089b      	lsrs	r3, r3, #2
 8010344:	3302      	adds	r3, #2
 8010346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801034a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 801034c:	69fb      	ldr	r3, [r7, #28]
 801034e:	f003 0303 	and.w	r3, r3, #3
 8010352:	009b      	lsls	r3, r3, #2
 8010354:	220f      	movs	r2, #15
 8010356:	fa02 f303 	lsl.w	r3, r2, r3
 801035a:	43db      	mvns	r3, r3
 801035c:	69ba      	ldr	r2, [r7, #24]
 801035e:	4013      	ands	r3, r2
 8010360:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	4a58      	ldr	r2, [pc, #352]	; (80104c8 <HAL_GPIO_Init+0x32c>)
 8010366:	4293      	cmp	r3, r2
 8010368:	d037      	beq.n	80103da <HAL_GPIO_Init+0x23e>
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	4a57      	ldr	r2, [pc, #348]	; (80104cc <HAL_GPIO_Init+0x330>)
 801036e:	4293      	cmp	r3, r2
 8010370:	d031      	beq.n	80103d6 <HAL_GPIO_Init+0x23a>
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	4a56      	ldr	r2, [pc, #344]	; (80104d0 <HAL_GPIO_Init+0x334>)
 8010376:	4293      	cmp	r3, r2
 8010378:	d02b      	beq.n	80103d2 <HAL_GPIO_Init+0x236>
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	4a55      	ldr	r2, [pc, #340]	; (80104d4 <HAL_GPIO_Init+0x338>)
 801037e:	4293      	cmp	r3, r2
 8010380:	d025      	beq.n	80103ce <HAL_GPIO_Init+0x232>
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	4a54      	ldr	r2, [pc, #336]	; (80104d8 <HAL_GPIO_Init+0x33c>)
 8010386:	4293      	cmp	r3, r2
 8010388:	d01f      	beq.n	80103ca <HAL_GPIO_Init+0x22e>
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	4a53      	ldr	r2, [pc, #332]	; (80104dc <HAL_GPIO_Init+0x340>)
 801038e:	4293      	cmp	r3, r2
 8010390:	d019      	beq.n	80103c6 <HAL_GPIO_Init+0x22a>
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	4a52      	ldr	r2, [pc, #328]	; (80104e0 <HAL_GPIO_Init+0x344>)
 8010396:	4293      	cmp	r3, r2
 8010398:	d013      	beq.n	80103c2 <HAL_GPIO_Init+0x226>
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	4a51      	ldr	r2, [pc, #324]	; (80104e4 <HAL_GPIO_Init+0x348>)
 801039e:	4293      	cmp	r3, r2
 80103a0:	d00d      	beq.n	80103be <HAL_GPIO_Init+0x222>
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	4a50      	ldr	r2, [pc, #320]	; (80104e8 <HAL_GPIO_Init+0x34c>)
 80103a6:	4293      	cmp	r3, r2
 80103a8:	d007      	beq.n	80103ba <HAL_GPIO_Init+0x21e>
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	4a4f      	ldr	r2, [pc, #316]	; (80104ec <HAL_GPIO_Init+0x350>)
 80103ae:	4293      	cmp	r3, r2
 80103b0:	d101      	bne.n	80103b6 <HAL_GPIO_Init+0x21a>
 80103b2:	2309      	movs	r3, #9
 80103b4:	e012      	b.n	80103dc <HAL_GPIO_Init+0x240>
 80103b6:	230a      	movs	r3, #10
 80103b8:	e010      	b.n	80103dc <HAL_GPIO_Init+0x240>
 80103ba:	2308      	movs	r3, #8
 80103bc:	e00e      	b.n	80103dc <HAL_GPIO_Init+0x240>
 80103be:	2307      	movs	r3, #7
 80103c0:	e00c      	b.n	80103dc <HAL_GPIO_Init+0x240>
 80103c2:	2306      	movs	r3, #6
 80103c4:	e00a      	b.n	80103dc <HAL_GPIO_Init+0x240>
 80103c6:	2305      	movs	r3, #5
 80103c8:	e008      	b.n	80103dc <HAL_GPIO_Init+0x240>
 80103ca:	2304      	movs	r3, #4
 80103cc:	e006      	b.n	80103dc <HAL_GPIO_Init+0x240>
 80103ce:	2303      	movs	r3, #3
 80103d0:	e004      	b.n	80103dc <HAL_GPIO_Init+0x240>
 80103d2:	2302      	movs	r3, #2
 80103d4:	e002      	b.n	80103dc <HAL_GPIO_Init+0x240>
 80103d6:	2301      	movs	r3, #1
 80103d8:	e000      	b.n	80103dc <HAL_GPIO_Init+0x240>
 80103da:	2300      	movs	r3, #0
 80103dc:	69fa      	ldr	r2, [r7, #28]
 80103de:	f002 0203 	and.w	r2, r2, #3
 80103e2:	0092      	lsls	r2, r2, #2
 80103e4:	4093      	lsls	r3, r2
 80103e6:	69ba      	ldr	r2, [r7, #24]
 80103e8:	4313      	orrs	r3, r2
 80103ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80103ec:	4935      	ldr	r1, [pc, #212]	; (80104c4 <HAL_GPIO_Init+0x328>)
 80103ee:	69fb      	ldr	r3, [r7, #28]
 80103f0:	089b      	lsrs	r3, r3, #2
 80103f2:	3302      	adds	r3, #2
 80103f4:	69ba      	ldr	r2, [r7, #24]
 80103f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80103fa:	4b3d      	ldr	r3, [pc, #244]	; (80104f0 <HAL_GPIO_Init+0x354>)
 80103fc:	689b      	ldr	r3, [r3, #8]
 80103fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010400:	693b      	ldr	r3, [r7, #16]
 8010402:	43db      	mvns	r3, r3
 8010404:	69ba      	ldr	r2, [r7, #24]
 8010406:	4013      	ands	r3, r2
 8010408:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 801040a:	683b      	ldr	r3, [r7, #0]
 801040c:	685b      	ldr	r3, [r3, #4]
 801040e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010412:	2b00      	cmp	r3, #0
 8010414:	d003      	beq.n	801041e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8010416:	69ba      	ldr	r2, [r7, #24]
 8010418:	693b      	ldr	r3, [r7, #16]
 801041a:	4313      	orrs	r3, r2
 801041c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801041e:	4a34      	ldr	r2, [pc, #208]	; (80104f0 <HAL_GPIO_Init+0x354>)
 8010420:	69bb      	ldr	r3, [r7, #24]
 8010422:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8010424:	4b32      	ldr	r3, [pc, #200]	; (80104f0 <HAL_GPIO_Init+0x354>)
 8010426:	68db      	ldr	r3, [r3, #12]
 8010428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801042a:	693b      	ldr	r3, [r7, #16]
 801042c:	43db      	mvns	r3, r3
 801042e:	69ba      	ldr	r2, [r7, #24]
 8010430:	4013      	ands	r3, r2
 8010432:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8010434:	683b      	ldr	r3, [r7, #0]
 8010436:	685b      	ldr	r3, [r3, #4]
 8010438:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801043c:	2b00      	cmp	r3, #0
 801043e:	d003      	beq.n	8010448 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8010440:	69ba      	ldr	r2, [r7, #24]
 8010442:	693b      	ldr	r3, [r7, #16]
 8010444:	4313      	orrs	r3, r2
 8010446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8010448:	4a29      	ldr	r2, [pc, #164]	; (80104f0 <HAL_GPIO_Init+0x354>)
 801044a:	69bb      	ldr	r3, [r7, #24]
 801044c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 801044e:	4b28      	ldr	r3, [pc, #160]	; (80104f0 <HAL_GPIO_Init+0x354>)
 8010450:	685b      	ldr	r3, [r3, #4]
 8010452:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010454:	693b      	ldr	r3, [r7, #16]
 8010456:	43db      	mvns	r3, r3
 8010458:	69ba      	ldr	r2, [r7, #24]
 801045a:	4013      	ands	r3, r2
 801045c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 801045e:	683b      	ldr	r3, [r7, #0]
 8010460:	685b      	ldr	r3, [r3, #4]
 8010462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010466:	2b00      	cmp	r3, #0
 8010468:	d003      	beq.n	8010472 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 801046a:	69ba      	ldr	r2, [r7, #24]
 801046c:	693b      	ldr	r3, [r7, #16]
 801046e:	4313      	orrs	r3, r2
 8010470:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8010472:	4a1f      	ldr	r2, [pc, #124]	; (80104f0 <HAL_GPIO_Init+0x354>)
 8010474:	69bb      	ldr	r3, [r7, #24]
 8010476:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8010478:	4b1d      	ldr	r3, [pc, #116]	; (80104f0 <HAL_GPIO_Init+0x354>)
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801047e:	693b      	ldr	r3, [r7, #16]
 8010480:	43db      	mvns	r3, r3
 8010482:	69ba      	ldr	r2, [r7, #24]
 8010484:	4013      	ands	r3, r2
 8010486:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8010488:	683b      	ldr	r3, [r7, #0]
 801048a:	685b      	ldr	r3, [r3, #4]
 801048c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010490:	2b00      	cmp	r3, #0
 8010492:	d003      	beq.n	801049c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8010494:	69ba      	ldr	r2, [r7, #24]
 8010496:	693b      	ldr	r3, [r7, #16]
 8010498:	4313      	orrs	r3, r2
 801049a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801049c:	4a14      	ldr	r2, [pc, #80]	; (80104f0 <HAL_GPIO_Init+0x354>)
 801049e:	69bb      	ldr	r3, [r7, #24]
 80104a0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80104a2:	69fb      	ldr	r3, [r7, #28]
 80104a4:	3301      	adds	r3, #1
 80104a6:	61fb      	str	r3, [r7, #28]
 80104a8:	69fb      	ldr	r3, [r7, #28]
 80104aa:	2b0f      	cmp	r3, #15
 80104ac:	f67f ae86 	bls.w	80101bc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80104b0:	bf00      	nop
 80104b2:	bf00      	nop
 80104b4:	3724      	adds	r7, #36	; 0x24
 80104b6:	46bd      	mov	sp, r7
 80104b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104bc:	4770      	bx	lr
 80104be:	bf00      	nop
 80104c0:	40023800 	.word	0x40023800
 80104c4:	40013800 	.word	0x40013800
 80104c8:	40020000 	.word	0x40020000
 80104cc:	40020400 	.word	0x40020400
 80104d0:	40020800 	.word	0x40020800
 80104d4:	40020c00 	.word	0x40020c00
 80104d8:	40021000 	.word	0x40021000
 80104dc:	40021400 	.word	0x40021400
 80104e0:	40021800 	.word	0x40021800
 80104e4:	40021c00 	.word	0x40021c00
 80104e8:	40022000 	.word	0x40022000
 80104ec:	40022400 	.word	0x40022400
 80104f0:	40013c00 	.word	0x40013c00

080104f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80104f4:	b480      	push	{r7}
 80104f6:	b083      	sub	sp, #12
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	6078      	str	r0, [r7, #4]
 80104fc:	460b      	mov	r3, r1
 80104fe:	807b      	strh	r3, [r7, #2]
 8010500:	4613      	mov	r3, r2
 8010502:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8010504:	787b      	ldrb	r3, [r7, #1]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d003      	beq.n	8010512 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801050a:	887a      	ldrh	r2, [r7, #2]
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8010510:	e003      	b.n	801051a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8010512:	887b      	ldrh	r3, [r7, #2]
 8010514:	041a      	lsls	r2, r3, #16
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	619a      	str	r2, [r3, #24]
}
 801051a:	bf00      	nop
 801051c:	370c      	adds	r7, #12
 801051e:	46bd      	mov	sp, r7
 8010520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010524:	4770      	bx	lr
	...

08010528 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8010528:	b580      	push	{r7, lr}
 801052a:	b082      	sub	sp, #8
 801052c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 801052e:	2300      	movs	r3, #0
 8010530:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8010532:	4b23      	ldr	r3, [pc, #140]	; (80105c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8010534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010536:	4a22      	ldr	r2, [pc, #136]	; (80105c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8010538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801053c:	6413      	str	r3, [r2, #64]	; 0x40
 801053e:	4b20      	ldr	r3, [pc, #128]	; (80105c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8010540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010546:	603b      	str	r3, [r7, #0]
 8010548:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 801054a:	4b1e      	ldr	r3, [pc, #120]	; (80105c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	4a1d      	ldr	r2, [pc, #116]	; (80105c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8010550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010554:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8010556:	f7ff f9e9 	bl	800f92c <HAL_GetTick>
 801055a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 801055c:	e009      	b.n	8010572 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 801055e:	f7ff f9e5 	bl	800f92c <HAL_GetTick>
 8010562:	4602      	mov	r2, r0
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	1ad3      	subs	r3, r2, r3
 8010568:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801056c:	d901      	bls.n	8010572 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 801056e:	2303      	movs	r3, #3
 8010570:	e022      	b.n	80105b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8010572:	4b14      	ldr	r3, [pc, #80]	; (80105c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8010574:	685b      	ldr	r3, [r3, #4]
 8010576:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801057a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801057e:	d1ee      	bne.n	801055e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8010580:	4b10      	ldr	r3, [pc, #64]	; (80105c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	4a0f      	ldr	r2, [pc, #60]	; (80105c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8010586:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801058a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801058c:	f7ff f9ce 	bl	800f92c <HAL_GetTick>
 8010590:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8010592:	e009      	b.n	80105a8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8010594:	f7ff f9ca 	bl	800f92c <HAL_GetTick>
 8010598:	4602      	mov	r2, r0
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	1ad3      	subs	r3, r2, r3
 801059e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80105a2:	d901      	bls.n	80105a8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80105a4:	2303      	movs	r3, #3
 80105a6:	e007      	b.n	80105b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80105a8:	4b06      	ldr	r3, [pc, #24]	; (80105c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80105aa:	685b      	ldr	r3, [r3, #4]
 80105ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80105b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80105b4:	d1ee      	bne.n	8010594 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80105b6:	2300      	movs	r3, #0
}
 80105b8:	4618      	mov	r0, r3
 80105ba:	3708      	adds	r7, #8
 80105bc:	46bd      	mov	sp, r7
 80105be:	bd80      	pop	{r7, pc}
 80105c0:	40023800 	.word	0x40023800
 80105c4:	40007000 	.word	0x40007000

080105c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b086      	sub	sp, #24
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80105d0:	2300      	movs	r3, #0
 80105d2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d101      	bne.n	80105de <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80105da:	2301      	movs	r3, #1
 80105dc:	e291      	b.n	8010b02 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	f003 0301 	and.w	r3, r3, #1
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	f000 8087 	beq.w	80106fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80105ec:	4b96      	ldr	r3, [pc, #600]	; (8010848 <HAL_RCC_OscConfig+0x280>)
 80105ee:	689b      	ldr	r3, [r3, #8]
 80105f0:	f003 030c 	and.w	r3, r3, #12
 80105f4:	2b04      	cmp	r3, #4
 80105f6:	d00c      	beq.n	8010612 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80105f8:	4b93      	ldr	r3, [pc, #588]	; (8010848 <HAL_RCC_OscConfig+0x280>)
 80105fa:	689b      	ldr	r3, [r3, #8]
 80105fc:	f003 030c 	and.w	r3, r3, #12
 8010600:	2b08      	cmp	r3, #8
 8010602:	d112      	bne.n	801062a <HAL_RCC_OscConfig+0x62>
 8010604:	4b90      	ldr	r3, [pc, #576]	; (8010848 <HAL_RCC_OscConfig+0x280>)
 8010606:	685b      	ldr	r3, [r3, #4]
 8010608:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801060c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010610:	d10b      	bne.n	801062a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010612:	4b8d      	ldr	r3, [pc, #564]	; (8010848 <HAL_RCC_OscConfig+0x280>)
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801061a:	2b00      	cmp	r3, #0
 801061c:	d06c      	beq.n	80106f8 <HAL_RCC_OscConfig+0x130>
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	685b      	ldr	r3, [r3, #4]
 8010622:	2b00      	cmp	r3, #0
 8010624:	d168      	bne.n	80106f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8010626:	2301      	movs	r3, #1
 8010628:	e26b      	b.n	8010b02 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	685b      	ldr	r3, [r3, #4]
 801062e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010632:	d106      	bne.n	8010642 <HAL_RCC_OscConfig+0x7a>
 8010634:	4b84      	ldr	r3, [pc, #528]	; (8010848 <HAL_RCC_OscConfig+0x280>)
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	4a83      	ldr	r2, [pc, #524]	; (8010848 <HAL_RCC_OscConfig+0x280>)
 801063a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801063e:	6013      	str	r3, [r2, #0]
 8010640:	e02e      	b.n	80106a0 <HAL_RCC_OscConfig+0xd8>
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	685b      	ldr	r3, [r3, #4]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d10c      	bne.n	8010664 <HAL_RCC_OscConfig+0x9c>
 801064a:	4b7f      	ldr	r3, [pc, #508]	; (8010848 <HAL_RCC_OscConfig+0x280>)
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	4a7e      	ldr	r2, [pc, #504]	; (8010848 <HAL_RCC_OscConfig+0x280>)
 8010650:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010654:	6013      	str	r3, [r2, #0]
 8010656:	4b7c      	ldr	r3, [pc, #496]	; (8010848 <HAL_RCC_OscConfig+0x280>)
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	4a7b      	ldr	r2, [pc, #492]	; (8010848 <HAL_RCC_OscConfig+0x280>)
 801065c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010660:	6013      	str	r3, [r2, #0]
 8010662:	e01d      	b.n	80106a0 <HAL_RCC_OscConfig+0xd8>
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	685b      	ldr	r3, [r3, #4]
 8010668:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801066c:	d10c      	bne.n	8010688 <HAL_RCC_OscConfig+0xc0>
 801066e:	4b76      	ldr	r3, [pc, #472]	; (8010848 <HAL_RCC_OscConfig+0x280>)
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	4a75      	ldr	r2, [pc, #468]	; (8010848 <HAL_RCC_OscConfig+0x280>)
 8010674:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010678:	6013      	str	r3, [r2, #0]
 801067a:	4b73      	ldr	r3, [pc, #460]	; (8010848 <HAL_RCC_OscConfig+0x280>)
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	4a72      	ldr	r2, [pc, #456]	; (8010848 <HAL_RCC_OscConfig+0x280>)
 8010680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010684:	6013      	str	r3, [r2, #0]
 8010686:	e00b      	b.n	80106a0 <HAL_RCC_OscConfig+0xd8>
 8010688:	4b6f      	ldr	r3, [pc, #444]	; (8010848 <HAL_RCC_OscConfig+0x280>)
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	4a6e      	ldr	r2, [pc, #440]	; (8010848 <HAL_RCC_OscConfig+0x280>)
 801068e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010692:	6013      	str	r3, [r2, #0]
 8010694:	4b6c      	ldr	r3, [pc, #432]	; (8010848 <HAL_RCC_OscConfig+0x280>)
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	4a6b      	ldr	r2, [pc, #428]	; (8010848 <HAL_RCC_OscConfig+0x280>)
 801069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801069e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	685b      	ldr	r3, [r3, #4]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d013      	beq.n	80106d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80106a8:	f7ff f940 	bl	800f92c <HAL_GetTick>
 80106ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80106ae:	e008      	b.n	80106c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80106b0:	f7ff f93c 	bl	800f92c <HAL_GetTick>
 80106b4:	4602      	mov	r2, r0
 80106b6:	693b      	ldr	r3, [r7, #16]
 80106b8:	1ad3      	subs	r3, r2, r3
 80106ba:	2b64      	cmp	r3, #100	; 0x64
 80106bc:	d901      	bls.n	80106c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80106be:	2303      	movs	r3, #3
 80106c0:	e21f      	b.n	8010b02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80106c2:	4b61      	ldr	r3, [pc, #388]	; (8010848 <HAL_RCC_OscConfig+0x280>)
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d0f0      	beq.n	80106b0 <HAL_RCC_OscConfig+0xe8>
 80106ce:	e014      	b.n	80106fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80106d0:	f7ff f92c 	bl	800f92c <HAL_GetTick>
 80106d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80106d6:	e008      	b.n	80106ea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80106d8:	f7ff f928 	bl	800f92c <HAL_GetTick>
 80106dc:	4602      	mov	r2, r0
 80106de:	693b      	ldr	r3, [r7, #16]
 80106e0:	1ad3      	subs	r3, r2, r3
 80106e2:	2b64      	cmp	r3, #100	; 0x64
 80106e4:	d901      	bls.n	80106ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80106e6:	2303      	movs	r3, #3
 80106e8:	e20b      	b.n	8010b02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80106ea:	4b57      	ldr	r3, [pc, #348]	; (8010848 <HAL_RCC_OscConfig+0x280>)
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d1f0      	bne.n	80106d8 <HAL_RCC_OscConfig+0x110>
 80106f6:	e000      	b.n	80106fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80106f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	f003 0302 	and.w	r3, r3, #2
 8010702:	2b00      	cmp	r3, #0
 8010704:	d069      	beq.n	80107da <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8010706:	4b50      	ldr	r3, [pc, #320]	; (8010848 <HAL_RCC_OscConfig+0x280>)
 8010708:	689b      	ldr	r3, [r3, #8]
 801070a:	f003 030c 	and.w	r3, r3, #12
 801070e:	2b00      	cmp	r3, #0
 8010710:	d00b      	beq.n	801072a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8010712:	4b4d      	ldr	r3, [pc, #308]	; (8010848 <HAL_RCC_OscConfig+0x280>)
 8010714:	689b      	ldr	r3, [r3, #8]
 8010716:	f003 030c 	and.w	r3, r3, #12
 801071a:	2b08      	cmp	r3, #8
 801071c:	d11c      	bne.n	8010758 <HAL_RCC_OscConfig+0x190>
 801071e:	4b4a      	ldr	r3, [pc, #296]	; (8010848 <HAL_RCC_OscConfig+0x280>)
 8010720:	685b      	ldr	r3, [r3, #4]
 8010722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010726:	2b00      	cmp	r3, #0
 8010728:	d116      	bne.n	8010758 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801072a:	4b47      	ldr	r3, [pc, #284]	; (8010848 <HAL_RCC_OscConfig+0x280>)
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	f003 0302 	and.w	r3, r3, #2
 8010732:	2b00      	cmp	r3, #0
 8010734:	d005      	beq.n	8010742 <HAL_RCC_OscConfig+0x17a>
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	68db      	ldr	r3, [r3, #12]
 801073a:	2b01      	cmp	r3, #1
 801073c:	d001      	beq.n	8010742 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 801073e:	2301      	movs	r3, #1
 8010740:	e1df      	b.n	8010b02 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010742:	4b41      	ldr	r3, [pc, #260]	; (8010848 <HAL_RCC_OscConfig+0x280>)
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	691b      	ldr	r3, [r3, #16]
 801074e:	00db      	lsls	r3, r3, #3
 8010750:	493d      	ldr	r1, [pc, #244]	; (8010848 <HAL_RCC_OscConfig+0x280>)
 8010752:	4313      	orrs	r3, r2
 8010754:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010756:	e040      	b.n	80107da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	68db      	ldr	r3, [r3, #12]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d023      	beq.n	80107a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8010760:	4b39      	ldr	r3, [pc, #228]	; (8010848 <HAL_RCC_OscConfig+0x280>)
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	4a38      	ldr	r2, [pc, #224]	; (8010848 <HAL_RCC_OscConfig+0x280>)
 8010766:	f043 0301 	orr.w	r3, r3, #1
 801076a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801076c:	f7ff f8de 	bl	800f92c <HAL_GetTick>
 8010770:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010772:	e008      	b.n	8010786 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010774:	f7ff f8da 	bl	800f92c <HAL_GetTick>
 8010778:	4602      	mov	r2, r0
 801077a:	693b      	ldr	r3, [r7, #16]
 801077c:	1ad3      	subs	r3, r2, r3
 801077e:	2b02      	cmp	r3, #2
 8010780:	d901      	bls.n	8010786 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8010782:	2303      	movs	r3, #3
 8010784:	e1bd      	b.n	8010b02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010786:	4b30      	ldr	r3, [pc, #192]	; (8010848 <HAL_RCC_OscConfig+0x280>)
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	f003 0302 	and.w	r3, r3, #2
 801078e:	2b00      	cmp	r3, #0
 8010790:	d0f0      	beq.n	8010774 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010792:	4b2d      	ldr	r3, [pc, #180]	; (8010848 <HAL_RCC_OscConfig+0x280>)
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	691b      	ldr	r3, [r3, #16]
 801079e:	00db      	lsls	r3, r3, #3
 80107a0:	4929      	ldr	r1, [pc, #164]	; (8010848 <HAL_RCC_OscConfig+0x280>)
 80107a2:	4313      	orrs	r3, r2
 80107a4:	600b      	str	r3, [r1, #0]
 80107a6:	e018      	b.n	80107da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80107a8:	4b27      	ldr	r3, [pc, #156]	; (8010848 <HAL_RCC_OscConfig+0x280>)
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	4a26      	ldr	r2, [pc, #152]	; (8010848 <HAL_RCC_OscConfig+0x280>)
 80107ae:	f023 0301 	bic.w	r3, r3, #1
 80107b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80107b4:	f7ff f8ba 	bl	800f92c <HAL_GetTick>
 80107b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80107ba:	e008      	b.n	80107ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80107bc:	f7ff f8b6 	bl	800f92c <HAL_GetTick>
 80107c0:	4602      	mov	r2, r0
 80107c2:	693b      	ldr	r3, [r7, #16]
 80107c4:	1ad3      	subs	r3, r2, r3
 80107c6:	2b02      	cmp	r3, #2
 80107c8:	d901      	bls.n	80107ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80107ca:	2303      	movs	r3, #3
 80107cc:	e199      	b.n	8010b02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80107ce:	4b1e      	ldr	r3, [pc, #120]	; (8010848 <HAL_RCC_OscConfig+0x280>)
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	f003 0302 	and.w	r3, r3, #2
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d1f0      	bne.n	80107bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	f003 0308 	and.w	r3, r3, #8
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d038      	beq.n	8010858 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	695b      	ldr	r3, [r3, #20]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d019      	beq.n	8010822 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80107ee:	4b16      	ldr	r3, [pc, #88]	; (8010848 <HAL_RCC_OscConfig+0x280>)
 80107f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80107f2:	4a15      	ldr	r2, [pc, #84]	; (8010848 <HAL_RCC_OscConfig+0x280>)
 80107f4:	f043 0301 	orr.w	r3, r3, #1
 80107f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80107fa:	f7ff f897 	bl	800f92c <HAL_GetTick>
 80107fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010800:	e008      	b.n	8010814 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010802:	f7ff f893 	bl	800f92c <HAL_GetTick>
 8010806:	4602      	mov	r2, r0
 8010808:	693b      	ldr	r3, [r7, #16]
 801080a:	1ad3      	subs	r3, r2, r3
 801080c:	2b02      	cmp	r3, #2
 801080e:	d901      	bls.n	8010814 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8010810:	2303      	movs	r3, #3
 8010812:	e176      	b.n	8010b02 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010814:	4b0c      	ldr	r3, [pc, #48]	; (8010848 <HAL_RCC_OscConfig+0x280>)
 8010816:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010818:	f003 0302 	and.w	r3, r3, #2
 801081c:	2b00      	cmp	r3, #0
 801081e:	d0f0      	beq.n	8010802 <HAL_RCC_OscConfig+0x23a>
 8010820:	e01a      	b.n	8010858 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8010822:	4b09      	ldr	r3, [pc, #36]	; (8010848 <HAL_RCC_OscConfig+0x280>)
 8010824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010826:	4a08      	ldr	r2, [pc, #32]	; (8010848 <HAL_RCC_OscConfig+0x280>)
 8010828:	f023 0301 	bic.w	r3, r3, #1
 801082c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801082e:	f7ff f87d 	bl	800f92c <HAL_GetTick>
 8010832:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010834:	e00a      	b.n	801084c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010836:	f7ff f879 	bl	800f92c <HAL_GetTick>
 801083a:	4602      	mov	r2, r0
 801083c:	693b      	ldr	r3, [r7, #16]
 801083e:	1ad3      	subs	r3, r2, r3
 8010840:	2b02      	cmp	r3, #2
 8010842:	d903      	bls.n	801084c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8010844:	2303      	movs	r3, #3
 8010846:	e15c      	b.n	8010b02 <HAL_RCC_OscConfig+0x53a>
 8010848:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801084c:	4b91      	ldr	r3, [pc, #580]	; (8010a94 <HAL_RCC_OscConfig+0x4cc>)
 801084e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010850:	f003 0302 	and.w	r3, r3, #2
 8010854:	2b00      	cmp	r3, #0
 8010856:	d1ee      	bne.n	8010836 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	f003 0304 	and.w	r3, r3, #4
 8010860:	2b00      	cmp	r3, #0
 8010862:	f000 80a4 	beq.w	80109ae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8010866:	4b8b      	ldr	r3, [pc, #556]	; (8010a94 <HAL_RCC_OscConfig+0x4cc>)
 8010868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801086a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801086e:	2b00      	cmp	r3, #0
 8010870:	d10d      	bne.n	801088e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8010872:	4b88      	ldr	r3, [pc, #544]	; (8010a94 <HAL_RCC_OscConfig+0x4cc>)
 8010874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010876:	4a87      	ldr	r2, [pc, #540]	; (8010a94 <HAL_RCC_OscConfig+0x4cc>)
 8010878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801087c:	6413      	str	r3, [r2, #64]	; 0x40
 801087e:	4b85      	ldr	r3, [pc, #532]	; (8010a94 <HAL_RCC_OscConfig+0x4cc>)
 8010880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010886:	60bb      	str	r3, [r7, #8]
 8010888:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801088a:	2301      	movs	r3, #1
 801088c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801088e:	4b82      	ldr	r3, [pc, #520]	; (8010a98 <HAL_RCC_OscConfig+0x4d0>)
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010896:	2b00      	cmp	r3, #0
 8010898:	d118      	bne.n	80108cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 801089a:	4b7f      	ldr	r3, [pc, #508]	; (8010a98 <HAL_RCC_OscConfig+0x4d0>)
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	4a7e      	ldr	r2, [pc, #504]	; (8010a98 <HAL_RCC_OscConfig+0x4d0>)
 80108a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80108a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80108a6:	f7ff f841 	bl	800f92c <HAL_GetTick>
 80108aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80108ac:	e008      	b.n	80108c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80108ae:	f7ff f83d 	bl	800f92c <HAL_GetTick>
 80108b2:	4602      	mov	r2, r0
 80108b4:	693b      	ldr	r3, [r7, #16]
 80108b6:	1ad3      	subs	r3, r2, r3
 80108b8:	2b64      	cmp	r3, #100	; 0x64
 80108ba:	d901      	bls.n	80108c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80108bc:	2303      	movs	r3, #3
 80108be:	e120      	b.n	8010b02 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80108c0:	4b75      	ldr	r3, [pc, #468]	; (8010a98 <HAL_RCC_OscConfig+0x4d0>)
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d0f0      	beq.n	80108ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	689b      	ldr	r3, [r3, #8]
 80108d0:	2b01      	cmp	r3, #1
 80108d2:	d106      	bne.n	80108e2 <HAL_RCC_OscConfig+0x31a>
 80108d4:	4b6f      	ldr	r3, [pc, #444]	; (8010a94 <HAL_RCC_OscConfig+0x4cc>)
 80108d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80108d8:	4a6e      	ldr	r2, [pc, #440]	; (8010a94 <HAL_RCC_OscConfig+0x4cc>)
 80108da:	f043 0301 	orr.w	r3, r3, #1
 80108de:	6713      	str	r3, [r2, #112]	; 0x70
 80108e0:	e02d      	b.n	801093e <HAL_RCC_OscConfig+0x376>
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	689b      	ldr	r3, [r3, #8]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d10c      	bne.n	8010904 <HAL_RCC_OscConfig+0x33c>
 80108ea:	4b6a      	ldr	r3, [pc, #424]	; (8010a94 <HAL_RCC_OscConfig+0x4cc>)
 80108ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80108ee:	4a69      	ldr	r2, [pc, #420]	; (8010a94 <HAL_RCC_OscConfig+0x4cc>)
 80108f0:	f023 0301 	bic.w	r3, r3, #1
 80108f4:	6713      	str	r3, [r2, #112]	; 0x70
 80108f6:	4b67      	ldr	r3, [pc, #412]	; (8010a94 <HAL_RCC_OscConfig+0x4cc>)
 80108f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80108fa:	4a66      	ldr	r2, [pc, #408]	; (8010a94 <HAL_RCC_OscConfig+0x4cc>)
 80108fc:	f023 0304 	bic.w	r3, r3, #4
 8010900:	6713      	str	r3, [r2, #112]	; 0x70
 8010902:	e01c      	b.n	801093e <HAL_RCC_OscConfig+0x376>
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	689b      	ldr	r3, [r3, #8]
 8010908:	2b05      	cmp	r3, #5
 801090a:	d10c      	bne.n	8010926 <HAL_RCC_OscConfig+0x35e>
 801090c:	4b61      	ldr	r3, [pc, #388]	; (8010a94 <HAL_RCC_OscConfig+0x4cc>)
 801090e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010910:	4a60      	ldr	r2, [pc, #384]	; (8010a94 <HAL_RCC_OscConfig+0x4cc>)
 8010912:	f043 0304 	orr.w	r3, r3, #4
 8010916:	6713      	str	r3, [r2, #112]	; 0x70
 8010918:	4b5e      	ldr	r3, [pc, #376]	; (8010a94 <HAL_RCC_OscConfig+0x4cc>)
 801091a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801091c:	4a5d      	ldr	r2, [pc, #372]	; (8010a94 <HAL_RCC_OscConfig+0x4cc>)
 801091e:	f043 0301 	orr.w	r3, r3, #1
 8010922:	6713      	str	r3, [r2, #112]	; 0x70
 8010924:	e00b      	b.n	801093e <HAL_RCC_OscConfig+0x376>
 8010926:	4b5b      	ldr	r3, [pc, #364]	; (8010a94 <HAL_RCC_OscConfig+0x4cc>)
 8010928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801092a:	4a5a      	ldr	r2, [pc, #360]	; (8010a94 <HAL_RCC_OscConfig+0x4cc>)
 801092c:	f023 0301 	bic.w	r3, r3, #1
 8010930:	6713      	str	r3, [r2, #112]	; 0x70
 8010932:	4b58      	ldr	r3, [pc, #352]	; (8010a94 <HAL_RCC_OscConfig+0x4cc>)
 8010934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010936:	4a57      	ldr	r2, [pc, #348]	; (8010a94 <HAL_RCC_OscConfig+0x4cc>)
 8010938:	f023 0304 	bic.w	r3, r3, #4
 801093c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	689b      	ldr	r3, [r3, #8]
 8010942:	2b00      	cmp	r3, #0
 8010944:	d015      	beq.n	8010972 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010946:	f7fe fff1 	bl	800f92c <HAL_GetTick>
 801094a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801094c:	e00a      	b.n	8010964 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801094e:	f7fe ffed 	bl	800f92c <HAL_GetTick>
 8010952:	4602      	mov	r2, r0
 8010954:	693b      	ldr	r3, [r7, #16]
 8010956:	1ad3      	subs	r3, r2, r3
 8010958:	f241 3288 	movw	r2, #5000	; 0x1388
 801095c:	4293      	cmp	r3, r2
 801095e:	d901      	bls.n	8010964 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8010960:	2303      	movs	r3, #3
 8010962:	e0ce      	b.n	8010b02 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010964:	4b4b      	ldr	r3, [pc, #300]	; (8010a94 <HAL_RCC_OscConfig+0x4cc>)
 8010966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010968:	f003 0302 	and.w	r3, r3, #2
 801096c:	2b00      	cmp	r3, #0
 801096e:	d0ee      	beq.n	801094e <HAL_RCC_OscConfig+0x386>
 8010970:	e014      	b.n	801099c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010972:	f7fe ffdb 	bl	800f92c <HAL_GetTick>
 8010976:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010978:	e00a      	b.n	8010990 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801097a:	f7fe ffd7 	bl	800f92c <HAL_GetTick>
 801097e:	4602      	mov	r2, r0
 8010980:	693b      	ldr	r3, [r7, #16]
 8010982:	1ad3      	subs	r3, r2, r3
 8010984:	f241 3288 	movw	r2, #5000	; 0x1388
 8010988:	4293      	cmp	r3, r2
 801098a:	d901      	bls.n	8010990 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 801098c:	2303      	movs	r3, #3
 801098e:	e0b8      	b.n	8010b02 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010990:	4b40      	ldr	r3, [pc, #256]	; (8010a94 <HAL_RCC_OscConfig+0x4cc>)
 8010992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010994:	f003 0302 	and.w	r3, r3, #2
 8010998:	2b00      	cmp	r3, #0
 801099a:	d1ee      	bne.n	801097a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801099c:	7dfb      	ldrb	r3, [r7, #23]
 801099e:	2b01      	cmp	r3, #1
 80109a0:	d105      	bne.n	80109ae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80109a2:	4b3c      	ldr	r3, [pc, #240]	; (8010a94 <HAL_RCC_OscConfig+0x4cc>)
 80109a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109a6:	4a3b      	ldr	r2, [pc, #236]	; (8010a94 <HAL_RCC_OscConfig+0x4cc>)
 80109a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80109ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	699b      	ldr	r3, [r3, #24]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	f000 80a4 	beq.w	8010b00 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80109b8:	4b36      	ldr	r3, [pc, #216]	; (8010a94 <HAL_RCC_OscConfig+0x4cc>)
 80109ba:	689b      	ldr	r3, [r3, #8]
 80109bc:	f003 030c 	and.w	r3, r3, #12
 80109c0:	2b08      	cmp	r3, #8
 80109c2:	d06b      	beq.n	8010a9c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	699b      	ldr	r3, [r3, #24]
 80109c8:	2b02      	cmp	r3, #2
 80109ca:	d149      	bne.n	8010a60 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80109cc:	4b31      	ldr	r3, [pc, #196]	; (8010a94 <HAL_RCC_OscConfig+0x4cc>)
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	4a30      	ldr	r2, [pc, #192]	; (8010a94 <HAL_RCC_OscConfig+0x4cc>)
 80109d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80109d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80109d8:	f7fe ffa8 	bl	800f92c <HAL_GetTick>
 80109dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80109de:	e008      	b.n	80109f2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80109e0:	f7fe ffa4 	bl	800f92c <HAL_GetTick>
 80109e4:	4602      	mov	r2, r0
 80109e6:	693b      	ldr	r3, [r7, #16]
 80109e8:	1ad3      	subs	r3, r2, r3
 80109ea:	2b02      	cmp	r3, #2
 80109ec:	d901      	bls.n	80109f2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80109ee:	2303      	movs	r3, #3
 80109f0:	e087      	b.n	8010b02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80109f2:	4b28      	ldr	r3, [pc, #160]	; (8010a94 <HAL_RCC_OscConfig+0x4cc>)
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d1f0      	bne.n	80109e0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	69da      	ldr	r2, [r3, #28]
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	6a1b      	ldr	r3, [r3, #32]
 8010a06:	431a      	orrs	r2, r3
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a0c:	019b      	lsls	r3, r3, #6
 8010a0e:	431a      	orrs	r2, r3
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a14:	085b      	lsrs	r3, r3, #1
 8010a16:	3b01      	subs	r3, #1
 8010a18:	041b      	lsls	r3, r3, #16
 8010a1a:	431a      	orrs	r2, r3
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a20:	061b      	lsls	r3, r3, #24
 8010a22:	4313      	orrs	r3, r2
 8010a24:	4a1b      	ldr	r2, [pc, #108]	; (8010a94 <HAL_RCC_OscConfig+0x4cc>)
 8010a26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010a2a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8010a2c:	4b19      	ldr	r3, [pc, #100]	; (8010a94 <HAL_RCC_OscConfig+0x4cc>)
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	4a18      	ldr	r2, [pc, #96]	; (8010a94 <HAL_RCC_OscConfig+0x4cc>)
 8010a32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010a36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010a38:	f7fe ff78 	bl	800f92c <HAL_GetTick>
 8010a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010a3e:	e008      	b.n	8010a52 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010a40:	f7fe ff74 	bl	800f92c <HAL_GetTick>
 8010a44:	4602      	mov	r2, r0
 8010a46:	693b      	ldr	r3, [r7, #16]
 8010a48:	1ad3      	subs	r3, r2, r3
 8010a4a:	2b02      	cmp	r3, #2
 8010a4c:	d901      	bls.n	8010a52 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8010a4e:	2303      	movs	r3, #3
 8010a50:	e057      	b.n	8010b02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010a52:	4b10      	ldr	r3, [pc, #64]	; (8010a94 <HAL_RCC_OscConfig+0x4cc>)
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d0f0      	beq.n	8010a40 <HAL_RCC_OscConfig+0x478>
 8010a5e:	e04f      	b.n	8010b00 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010a60:	4b0c      	ldr	r3, [pc, #48]	; (8010a94 <HAL_RCC_OscConfig+0x4cc>)
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	4a0b      	ldr	r2, [pc, #44]	; (8010a94 <HAL_RCC_OscConfig+0x4cc>)
 8010a66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010a6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010a6c:	f7fe ff5e 	bl	800f92c <HAL_GetTick>
 8010a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010a72:	e008      	b.n	8010a86 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010a74:	f7fe ff5a 	bl	800f92c <HAL_GetTick>
 8010a78:	4602      	mov	r2, r0
 8010a7a:	693b      	ldr	r3, [r7, #16]
 8010a7c:	1ad3      	subs	r3, r2, r3
 8010a7e:	2b02      	cmp	r3, #2
 8010a80:	d901      	bls.n	8010a86 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8010a82:	2303      	movs	r3, #3
 8010a84:	e03d      	b.n	8010b02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010a86:	4b03      	ldr	r3, [pc, #12]	; (8010a94 <HAL_RCC_OscConfig+0x4cc>)
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d1f0      	bne.n	8010a74 <HAL_RCC_OscConfig+0x4ac>
 8010a92:	e035      	b.n	8010b00 <HAL_RCC_OscConfig+0x538>
 8010a94:	40023800 	.word	0x40023800
 8010a98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8010a9c:	4b1b      	ldr	r3, [pc, #108]	; (8010b0c <HAL_RCC_OscConfig+0x544>)
 8010a9e:	685b      	ldr	r3, [r3, #4]
 8010aa0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	699b      	ldr	r3, [r3, #24]
 8010aa6:	2b01      	cmp	r3, #1
 8010aa8:	d028      	beq.n	8010afc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8010ab4:	429a      	cmp	r2, r3
 8010ab6:	d121      	bne.n	8010afc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010ac2:	429a      	cmp	r2, r3
 8010ac4:	d11a      	bne.n	8010afc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8010ac6:	68fa      	ldr	r2, [r7, #12]
 8010ac8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8010acc:	4013      	ands	r3, r2
 8010ace:	687a      	ldr	r2, [r7, #4]
 8010ad0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8010ad2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8010ad4:	4293      	cmp	r3, r2
 8010ad6:	d111      	bne.n	8010afc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ae2:	085b      	lsrs	r3, r3, #1
 8010ae4:	3b01      	subs	r3, #1
 8010ae6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8010ae8:	429a      	cmp	r2, r3
 8010aea:	d107      	bne.n	8010afc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010af6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8010af8:	429a      	cmp	r2, r3
 8010afa:	d001      	beq.n	8010b00 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8010afc:	2301      	movs	r3, #1
 8010afe:	e000      	b.n	8010b02 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8010b00:	2300      	movs	r3, #0
}
 8010b02:	4618      	mov	r0, r3
 8010b04:	3718      	adds	r7, #24
 8010b06:	46bd      	mov	sp, r7
 8010b08:	bd80      	pop	{r7, pc}
 8010b0a:	bf00      	nop
 8010b0c:	40023800 	.word	0x40023800

08010b10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010b10:	b580      	push	{r7, lr}
 8010b12:	b084      	sub	sp, #16
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	6078      	str	r0, [r7, #4]
 8010b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d101      	bne.n	8010b28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8010b24:	2301      	movs	r3, #1
 8010b26:	e0d0      	b.n	8010cca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8010b28:	4b6a      	ldr	r3, [pc, #424]	; (8010cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	f003 030f 	and.w	r3, r3, #15
 8010b30:	683a      	ldr	r2, [r7, #0]
 8010b32:	429a      	cmp	r2, r3
 8010b34:	d910      	bls.n	8010b58 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010b36:	4b67      	ldr	r3, [pc, #412]	; (8010cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	f023 020f 	bic.w	r2, r3, #15
 8010b3e:	4965      	ldr	r1, [pc, #404]	; (8010cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8010b40:	683b      	ldr	r3, [r7, #0]
 8010b42:	4313      	orrs	r3, r2
 8010b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010b46:	4b63      	ldr	r3, [pc, #396]	; (8010cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	f003 030f 	and.w	r3, r3, #15
 8010b4e:	683a      	ldr	r2, [r7, #0]
 8010b50:	429a      	cmp	r2, r3
 8010b52:	d001      	beq.n	8010b58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8010b54:	2301      	movs	r3, #1
 8010b56:	e0b8      	b.n	8010cca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	f003 0302 	and.w	r3, r3, #2
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d020      	beq.n	8010ba6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	f003 0304 	and.w	r3, r3, #4
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d005      	beq.n	8010b7c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8010b70:	4b59      	ldr	r3, [pc, #356]	; (8010cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8010b72:	689b      	ldr	r3, [r3, #8]
 8010b74:	4a58      	ldr	r2, [pc, #352]	; (8010cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8010b76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8010b7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	f003 0308 	and.w	r3, r3, #8
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d005      	beq.n	8010b94 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8010b88:	4b53      	ldr	r3, [pc, #332]	; (8010cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8010b8a:	689b      	ldr	r3, [r3, #8]
 8010b8c:	4a52      	ldr	r2, [pc, #328]	; (8010cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8010b8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8010b92:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010b94:	4b50      	ldr	r3, [pc, #320]	; (8010cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8010b96:	689b      	ldr	r3, [r3, #8]
 8010b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	689b      	ldr	r3, [r3, #8]
 8010ba0:	494d      	ldr	r1, [pc, #308]	; (8010cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8010ba2:	4313      	orrs	r3, r2
 8010ba4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	f003 0301 	and.w	r3, r3, #1
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d040      	beq.n	8010c34 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	685b      	ldr	r3, [r3, #4]
 8010bb6:	2b01      	cmp	r3, #1
 8010bb8:	d107      	bne.n	8010bca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010bba:	4b47      	ldr	r3, [pc, #284]	; (8010cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d115      	bne.n	8010bf2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8010bc6:	2301      	movs	r3, #1
 8010bc8:	e07f      	b.n	8010cca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	685b      	ldr	r3, [r3, #4]
 8010bce:	2b02      	cmp	r3, #2
 8010bd0:	d107      	bne.n	8010be2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010bd2:	4b41      	ldr	r3, [pc, #260]	; (8010cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d109      	bne.n	8010bf2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8010bde:	2301      	movs	r3, #1
 8010be0:	e073      	b.n	8010cca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010be2:	4b3d      	ldr	r3, [pc, #244]	; (8010cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	f003 0302 	and.w	r3, r3, #2
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d101      	bne.n	8010bf2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8010bee:	2301      	movs	r3, #1
 8010bf0:	e06b      	b.n	8010cca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8010bf2:	4b39      	ldr	r3, [pc, #228]	; (8010cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8010bf4:	689b      	ldr	r3, [r3, #8]
 8010bf6:	f023 0203 	bic.w	r2, r3, #3
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	685b      	ldr	r3, [r3, #4]
 8010bfe:	4936      	ldr	r1, [pc, #216]	; (8010cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8010c00:	4313      	orrs	r3, r2
 8010c02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010c04:	f7fe fe92 	bl	800f92c <HAL_GetTick>
 8010c08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010c0a:	e00a      	b.n	8010c22 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010c0c:	f7fe fe8e 	bl	800f92c <HAL_GetTick>
 8010c10:	4602      	mov	r2, r0
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	1ad3      	subs	r3, r2, r3
 8010c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8010c1a:	4293      	cmp	r3, r2
 8010c1c:	d901      	bls.n	8010c22 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8010c1e:	2303      	movs	r3, #3
 8010c20:	e053      	b.n	8010cca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010c22:	4b2d      	ldr	r3, [pc, #180]	; (8010cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8010c24:	689b      	ldr	r3, [r3, #8]
 8010c26:	f003 020c 	and.w	r2, r3, #12
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	685b      	ldr	r3, [r3, #4]
 8010c2e:	009b      	lsls	r3, r3, #2
 8010c30:	429a      	cmp	r2, r3
 8010c32:	d1eb      	bne.n	8010c0c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8010c34:	4b27      	ldr	r3, [pc, #156]	; (8010cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	f003 030f 	and.w	r3, r3, #15
 8010c3c:	683a      	ldr	r2, [r7, #0]
 8010c3e:	429a      	cmp	r2, r3
 8010c40:	d210      	bcs.n	8010c64 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010c42:	4b24      	ldr	r3, [pc, #144]	; (8010cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	f023 020f 	bic.w	r2, r3, #15
 8010c4a:	4922      	ldr	r1, [pc, #136]	; (8010cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8010c4c:	683b      	ldr	r3, [r7, #0]
 8010c4e:	4313      	orrs	r3, r2
 8010c50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010c52:	4b20      	ldr	r3, [pc, #128]	; (8010cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	f003 030f 	and.w	r3, r3, #15
 8010c5a:	683a      	ldr	r2, [r7, #0]
 8010c5c:	429a      	cmp	r2, r3
 8010c5e:	d001      	beq.n	8010c64 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8010c60:	2301      	movs	r3, #1
 8010c62:	e032      	b.n	8010cca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	f003 0304 	and.w	r3, r3, #4
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d008      	beq.n	8010c82 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8010c70:	4b19      	ldr	r3, [pc, #100]	; (8010cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8010c72:	689b      	ldr	r3, [r3, #8]
 8010c74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	68db      	ldr	r3, [r3, #12]
 8010c7c:	4916      	ldr	r1, [pc, #88]	; (8010cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8010c7e:	4313      	orrs	r3, r2
 8010c80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	f003 0308 	and.w	r3, r3, #8
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d009      	beq.n	8010ca2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8010c8e:	4b12      	ldr	r3, [pc, #72]	; (8010cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8010c90:	689b      	ldr	r3, [r3, #8]
 8010c92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	691b      	ldr	r3, [r3, #16]
 8010c9a:	00db      	lsls	r3, r3, #3
 8010c9c:	490e      	ldr	r1, [pc, #56]	; (8010cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8010c9e:	4313      	orrs	r3, r2
 8010ca0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8010ca2:	f000 f821 	bl	8010ce8 <HAL_RCC_GetSysClockFreq>
 8010ca6:	4602      	mov	r2, r0
 8010ca8:	4b0b      	ldr	r3, [pc, #44]	; (8010cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8010caa:	689b      	ldr	r3, [r3, #8]
 8010cac:	091b      	lsrs	r3, r3, #4
 8010cae:	f003 030f 	and.w	r3, r3, #15
 8010cb2:	490a      	ldr	r1, [pc, #40]	; (8010cdc <HAL_RCC_ClockConfig+0x1cc>)
 8010cb4:	5ccb      	ldrb	r3, [r1, r3]
 8010cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8010cba:	4a09      	ldr	r2, [pc, #36]	; (8010ce0 <HAL_RCC_ClockConfig+0x1d0>)
 8010cbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8010cbe:	4b09      	ldr	r3, [pc, #36]	; (8010ce4 <HAL_RCC_ClockConfig+0x1d4>)
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	f7fe fc64 	bl	800f590 <HAL_InitTick>

  return HAL_OK;
 8010cc8:	2300      	movs	r3, #0
}
 8010cca:	4618      	mov	r0, r3
 8010ccc:	3710      	adds	r7, #16
 8010cce:	46bd      	mov	sp, r7
 8010cd0:	bd80      	pop	{r7, pc}
 8010cd2:	bf00      	nop
 8010cd4:	40023c00 	.word	0x40023c00
 8010cd8:	40023800 	.word	0x40023800
 8010cdc:	0801db78 	.word	0x0801db78
 8010ce0:	20000284 	.word	0x20000284
 8010ce4:	20000288 	.word	0x20000288

08010ce8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010cec:	b090      	sub	sp, #64	; 0x40
 8010cee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	637b      	str	r3, [r7, #52]	; 0x34
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8010cfc:	2300      	movs	r3, #0
 8010cfe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8010d00:	4b59      	ldr	r3, [pc, #356]	; (8010e68 <HAL_RCC_GetSysClockFreq+0x180>)
 8010d02:	689b      	ldr	r3, [r3, #8]
 8010d04:	f003 030c 	and.w	r3, r3, #12
 8010d08:	2b08      	cmp	r3, #8
 8010d0a:	d00d      	beq.n	8010d28 <HAL_RCC_GetSysClockFreq+0x40>
 8010d0c:	2b08      	cmp	r3, #8
 8010d0e:	f200 80a1 	bhi.w	8010e54 <HAL_RCC_GetSysClockFreq+0x16c>
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d002      	beq.n	8010d1c <HAL_RCC_GetSysClockFreq+0x34>
 8010d16:	2b04      	cmp	r3, #4
 8010d18:	d003      	beq.n	8010d22 <HAL_RCC_GetSysClockFreq+0x3a>
 8010d1a:	e09b      	b.n	8010e54 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8010d1c:	4b53      	ldr	r3, [pc, #332]	; (8010e6c <HAL_RCC_GetSysClockFreq+0x184>)
 8010d1e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8010d20:	e09b      	b.n	8010e5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8010d22:	4b53      	ldr	r3, [pc, #332]	; (8010e70 <HAL_RCC_GetSysClockFreq+0x188>)
 8010d24:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8010d26:	e098      	b.n	8010e5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8010d28:	4b4f      	ldr	r3, [pc, #316]	; (8010e68 <HAL_RCC_GetSysClockFreq+0x180>)
 8010d2a:	685b      	ldr	r3, [r3, #4]
 8010d2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010d30:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8010d32:	4b4d      	ldr	r3, [pc, #308]	; (8010e68 <HAL_RCC_GetSysClockFreq+0x180>)
 8010d34:	685b      	ldr	r3, [r3, #4]
 8010d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d028      	beq.n	8010d90 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010d3e:	4b4a      	ldr	r3, [pc, #296]	; (8010e68 <HAL_RCC_GetSysClockFreq+0x180>)
 8010d40:	685b      	ldr	r3, [r3, #4]
 8010d42:	099b      	lsrs	r3, r3, #6
 8010d44:	2200      	movs	r2, #0
 8010d46:	623b      	str	r3, [r7, #32]
 8010d48:	627a      	str	r2, [r7, #36]	; 0x24
 8010d4a:	6a3b      	ldr	r3, [r7, #32]
 8010d4c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8010d50:	2100      	movs	r1, #0
 8010d52:	4b47      	ldr	r3, [pc, #284]	; (8010e70 <HAL_RCC_GetSysClockFreq+0x188>)
 8010d54:	fb03 f201 	mul.w	r2, r3, r1
 8010d58:	2300      	movs	r3, #0
 8010d5a:	fb00 f303 	mul.w	r3, r0, r3
 8010d5e:	4413      	add	r3, r2
 8010d60:	4a43      	ldr	r2, [pc, #268]	; (8010e70 <HAL_RCC_GetSysClockFreq+0x188>)
 8010d62:	fba0 1202 	umull	r1, r2, r0, r2
 8010d66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010d68:	460a      	mov	r2, r1
 8010d6a:	62ba      	str	r2, [r7, #40]	; 0x28
 8010d6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d6e:	4413      	add	r3, r2
 8010d70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d74:	2200      	movs	r2, #0
 8010d76:	61bb      	str	r3, [r7, #24]
 8010d78:	61fa      	str	r2, [r7, #28]
 8010d7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010d7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8010d82:	f7ef ff95 	bl	8000cb0 <__aeabi_uldivmod>
 8010d86:	4602      	mov	r2, r0
 8010d88:	460b      	mov	r3, r1
 8010d8a:	4613      	mov	r3, r2
 8010d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010d8e:	e053      	b.n	8010e38 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010d90:	4b35      	ldr	r3, [pc, #212]	; (8010e68 <HAL_RCC_GetSysClockFreq+0x180>)
 8010d92:	685b      	ldr	r3, [r3, #4]
 8010d94:	099b      	lsrs	r3, r3, #6
 8010d96:	2200      	movs	r2, #0
 8010d98:	613b      	str	r3, [r7, #16]
 8010d9a:	617a      	str	r2, [r7, #20]
 8010d9c:	693b      	ldr	r3, [r7, #16]
 8010d9e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8010da2:	f04f 0b00 	mov.w	fp, #0
 8010da6:	4652      	mov	r2, sl
 8010da8:	465b      	mov	r3, fp
 8010daa:	f04f 0000 	mov.w	r0, #0
 8010dae:	f04f 0100 	mov.w	r1, #0
 8010db2:	0159      	lsls	r1, r3, #5
 8010db4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010db8:	0150      	lsls	r0, r2, #5
 8010dba:	4602      	mov	r2, r0
 8010dbc:	460b      	mov	r3, r1
 8010dbe:	ebb2 080a 	subs.w	r8, r2, sl
 8010dc2:	eb63 090b 	sbc.w	r9, r3, fp
 8010dc6:	f04f 0200 	mov.w	r2, #0
 8010dca:	f04f 0300 	mov.w	r3, #0
 8010dce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8010dd2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8010dd6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8010dda:	ebb2 0408 	subs.w	r4, r2, r8
 8010dde:	eb63 0509 	sbc.w	r5, r3, r9
 8010de2:	f04f 0200 	mov.w	r2, #0
 8010de6:	f04f 0300 	mov.w	r3, #0
 8010dea:	00eb      	lsls	r3, r5, #3
 8010dec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8010df0:	00e2      	lsls	r2, r4, #3
 8010df2:	4614      	mov	r4, r2
 8010df4:	461d      	mov	r5, r3
 8010df6:	eb14 030a 	adds.w	r3, r4, sl
 8010dfa:	603b      	str	r3, [r7, #0]
 8010dfc:	eb45 030b 	adc.w	r3, r5, fp
 8010e00:	607b      	str	r3, [r7, #4]
 8010e02:	f04f 0200 	mov.w	r2, #0
 8010e06:	f04f 0300 	mov.w	r3, #0
 8010e0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8010e0e:	4629      	mov	r1, r5
 8010e10:	028b      	lsls	r3, r1, #10
 8010e12:	4621      	mov	r1, r4
 8010e14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8010e18:	4621      	mov	r1, r4
 8010e1a:	028a      	lsls	r2, r1, #10
 8010e1c:	4610      	mov	r0, r2
 8010e1e:	4619      	mov	r1, r3
 8010e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e22:	2200      	movs	r2, #0
 8010e24:	60bb      	str	r3, [r7, #8]
 8010e26:	60fa      	str	r2, [r7, #12]
 8010e28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010e2c:	f7ef ff40 	bl	8000cb0 <__aeabi_uldivmod>
 8010e30:	4602      	mov	r2, r0
 8010e32:	460b      	mov	r3, r1
 8010e34:	4613      	mov	r3, r2
 8010e36:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8010e38:	4b0b      	ldr	r3, [pc, #44]	; (8010e68 <HAL_RCC_GetSysClockFreq+0x180>)
 8010e3a:	685b      	ldr	r3, [r3, #4]
 8010e3c:	0c1b      	lsrs	r3, r3, #16
 8010e3e:	f003 0303 	and.w	r3, r3, #3
 8010e42:	3301      	adds	r3, #1
 8010e44:	005b      	lsls	r3, r3, #1
 8010e46:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8010e48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010e50:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8010e52:	e002      	b.n	8010e5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8010e54:	4b05      	ldr	r3, [pc, #20]	; (8010e6c <HAL_RCC_GetSysClockFreq+0x184>)
 8010e56:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8010e58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8010e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	3740      	adds	r7, #64	; 0x40
 8010e60:	46bd      	mov	sp, r7
 8010e62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010e66:	bf00      	nop
 8010e68:	40023800 	.word	0x40023800
 8010e6c:	00f42400 	.word	0x00f42400
 8010e70:	017d7840 	.word	0x017d7840

08010e74 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010e74:	b480      	push	{r7}
 8010e76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8010e78:	4b03      	ldr	r3, [pc, #12]	; (8010e88 <HAL_RCC_GetHCLKFreq+0x14>)
 8010e7a:	681b      	ldr	r3, [r3, #0]
}
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	46bd      	mov	sp, r7
 8010e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e84:	4770      	bx	lr
 8010e86:	bf00      	nop
 8010e88:	20000284 	.word	0x20000284

08010e8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010e8c:	b580      	push	{r7, lr}
 8010e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8010e90:	f7ff fff0 	bl	8010e74 <HAL_RCC_GetHCLKFreq>
 8010e94:	4602      	mov	r2, r0
 8010e96:	4b05      	ldr	r3, [pc, #20]	; (8010eac <HAL_RCC_GetPCLK1Freq+0x20>)
 8010e98:	689b      	ldr	r3, [r3, #8]
 8010e9a:	0a9b      	lsrs	r3, r3, #10
 8010e9c:	f003 0307 	and.w	r3, r3, #7
 8010ea0:	4903      	ldr	r1, [pc, #12]	; (8010eb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8010ea2:	5ccb      	ldrb	r3, [r1, r3]
 8010ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	bd80      	pop	{r7, pc}
 8010eac:	40023800 	.word	0x40023800
 8010eb0:	0801db88 	.word	0x0801db88

08010eb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8010eb8:	f7ff ffdc 	bl	8010e74 <HAL_RCC_GetHCLKFreq>
 8010ebc:	4602      	mov	r2, r0
 8010ebe:	4b05      	ldr	r3, [pc, #20]	; (8010ed4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8010ec0:	689b      	ldr	r3, [r3, #8]
 8010ec2:	0b5b      	lsrs	r3, r3, #13
 8010ec4:	f003 0307 	and.w	r3, r3, #7
 8010ec8:	4903      	ldr	r1, [pc, #12]	; (8010ed8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8010eca:	5ccb      	ldrb	r3, [r1, r3]
 8010ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	bd80      	pop	{r7, pc}
 8010ed4:	40023800 	.word	0x40023800
 8010ed8:	0801db88 	.word	0x0801db88

08010edc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8010edc:	b480      	push	{r7}
 8010ede:	b083      	sub	sp, #12
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	6078      	str	r0, [r7, #4]
 8010ee4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	220f      	movs	r2, #15
 8010eea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8010eec:	4b12      	ldr	r3, [pc, #72]	; (8010f38 <HAL_RCC_GetClockConfig+0x5c>)
 8010eee:	689b      	ldr	r3, [r3, #8]
 8010ef0:	f003 0203 	and.w	r2, r3, #3
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8010ef8:	4b0f      	ldr	r3, [pc, #60]	; (8010f38 <HAL_RCC_GetClockConfig+0x5c>)
 8010efa:	689b      	ldr	r3, [r3, #8]
 8010efc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8010f04:	4b0c      	ldr	r3, [pc, #48]	; (8010f38 <HAL_RCC_GetClockConfig+0x5c>)
 8010f06:	689b      	ldr	r3, [r3, #8]
 8010f08:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8010f10:	4b09      	ldr	r3, [pc, #36]	; (8010f38 <HAL_RCC_GetClockConfig+0x5c>)
 8010f12:	689b      	ldr	r3, [r3, #8]
 8010f14:	08db      	lsrs	r3, r3, #3
 8010f16:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8010f1e:	4b07      	ldr	r3, [pc, #28]	; (8010f3c <HAL_RCC_GetClockConfig+0x60>)
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	f003 020f 	and.w	r2, r3, #15
 8010f26:	683b      	ldr	r3, [r7, #0]
 8010f28:	601a      	str	r2, [r3, #0]
}
 8010f2a:	bf00      	nop
 8010f2c:	370c      	adds	r7, #12
 8010f2e:	46bd      	mov	sp, r7
 8010f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f34:	4770      	bx	lr
 8010f36:	bf00      	nop
 8010f38:	40023800 	.word	0x40023800
 8010f3c:	40023c00 	.word	0x40023c00

08010f40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8010f40:	b580      	push	{r7, lr}
 8010f42:	b088      	sub	sp, #32
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8010f48:	2300      	movs	r3, #0
 8010f4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8010f50:	2300      	movs	r3, #0
 8010f52:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8010f54:	2300      	movs	r3, #0
 8010f56:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8010f58:	2300      	movs	r3, #0
 8010f5a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	f003 0301 	and.w	r3, r3, #1
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d012      	beq.n	8010f8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8010f68:	4b69      	ldr	r3, [pc, #420]	; (8011110 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010f6a:	689b      	ldr	r3, [r3, #8]
 8010f6c:	4a68      	ldr	r2, [pc, #416]	; (8011110 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010f6e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8010f72:	6093      	str	r3, [r2, #8]
 8010f74:	4b66      	ldr	r3, [pc, #408]	; (8011110 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010f76:	689a      	ldr	r2, [r3, #8]
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f7c:	4964      	ldr	r1, [pc, #400]	; (8011110 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010f7e:	4313      	orrs	r3, r2
 8010f80:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d101      	bne.n	8010f8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8010f8a:	2301      	movs	r3, #1
 8010f8c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d017      	beq.n	8010fca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8010f9a:	4b5d      	ldr	r3, [pc, #372]	; (8011110 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010f9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010fa0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010fa8:	4959      	ldr	r1, [pc, #356]	; (8011110 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010faa:	4313      	orrs	r3, r2
 8010fac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010fb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010fb8:	d101      	bne.n	8010fbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8010fba:	2301      	movs	r3, #1
 8010fbc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d101      	bne.n	8010fca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8010fc6:	2301      	movs	r3, #1
 8010fc8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d017      	beq.n	8011006 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8010fd6:	4b4e      	ldr	r3, [pc, #312]	; (8011110 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010fdc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fe4:	494a      	ldr	r1, [pc, #296]	; (8011110 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010fe6:	4313      	orrs	r3, r2
 8010fe8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ff0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010ff4:	d101      	bne.n	8010ffa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8010ff6:	2301      	movs	r3, #1
 8010ff8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d101      	bne.n	8011006 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8011002:	2301      	movs	r3, #1
 8011004:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801100e:	2b00      	cmp	r3, #0
 8011010:	d001      	beq.n	8011016 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8011012:	2301      	movs	r3, #1
 8011014:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	f003 0320 	and.w	r3, r3, #32
 801101e:	2b00      	cmp	r3, #0
 8011020:	f000 808b 	beq.w	801113a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8011024:	4b3a      	ldr	r3, [pc, #232]	; (8011110 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011028:	4a39      	ldr	r2, [pc, #228]	; (8011110 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801102a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801102e:	6413      	str	r3, [r2, #64]	; 0x40
 8011030:	4b37      	ldr	r3, [pc, #220]	; (8011110 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011038:	60bb      	str	r3, [r7, #8]
 801103a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801103c:	4b35      	ldr	r3, [pc, #212]	; (8011114 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	4a34      	ldr	r2, [pc, #208]	; (8011114 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8011042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011046:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011048:	f7fe fc70 	bl	800f92c <HAL_GetTick>
 801104c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 801104e:	e008      	b.n	8011062 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011050:	f7fe fc6c 	bl	800f92c <HAL_GetTick>
 8011054:	4602      	mov	r2, r0
 8011056:	697b      	ldr	r3, [r7, #20]
 8011058:	1ad3      	subs	r3, r2, r3
 801105a:	2b64      	cmp	r3, #100	; 0x64
 801105c:	d901      	bls.n	8011062 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 801105e:	2303      	movs	r3, #3
 8011060:	e357      	b.n	8011712 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8011062:	4b2c      	ldr	r3, [pc, #176]	; (8011114 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801106a:	2b00      	cmp	r3, #0
 801106c:	d0f0      	beq.n	8011050 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 801106e:	4b28      	ldr	r3, [pc, #160]	; (8011110 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011076:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8011078:	693b      	ldr	r3, [r7, #16]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d035      	beq.n	80110ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011086:	693a      	ldr	r2, [r7, #16]
 8011088:	429a      	cmp	r2, r3
 801108a:	d02e      	beq.n	80110ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801108c:	4b20      	ldr	r3, [pc, #128]	; (8011110 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801108e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011090:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011094:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8011096:	4b1e      	ldr	r3, [pc, #120]	; (8011110 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801109a:	4a1d      	ldr	r2, [pc, #116]	; (8011110 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801109c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80110a0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80110a2:	4b1b      	ldr	r3, [pc, #108]	; (8011110 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80110a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80110a6:	4a1a      	ldr	r2, [pc, #104]	; (8011110 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80110a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80110ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80110ae:	4a18      	ldr	r2, [pc, #96]	; (8011110 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80110b0:	693b      	ldr	r3, [r7, #16]
 80110b2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80110b4:	4b16      	ldr	r3, [pc, #88]	; (8011110 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80110b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80110b8:	f003 0301 	and.w	r3, r3, #1
 80110bc:	2b01      	cmp	r3, #1
 80110be:	d114      	bne.n	80110ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80110c0:	f7fe fc34 	bl	800f92c <HAL_GetTick>
 80110c4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80110c6:	e00a      	b.n	80110de <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80110c8:	f7fe fc30 	bl	800f92c <HAL_GetTick>
 80110cc:	4602      	mov	r2, r0
 80110ce:	697b      	ldr	r3, [r7, #20]
 80110d0:	1ad3      	subs	r3, r2, r3
 80110d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80110d6:	4293      	cmp	r3, r2
 80110d8:	d901      	bls.n	80110de <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80110da:	2303      	movs	r3, #3
 80110dc:	e319      	b.n	8011712 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80110de:	4b0c      	ldr	r3, [pc, #48]	; (8011110 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80110e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80110e2:	f003 0302 	and.w	r3, r3, #2
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d0ee      	beq.n	80110c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80110f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80110f6:	d111      	bne.n	801111c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80110f8:	4b05      	ldr	r3, [pc, #20]	; (8011110 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80110fa:	689b      	ldr	r3, [r3, #8]
 80110fc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8011104:	4b04      	ldr	r3, [pc, #16]	; (8011118 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8011106:	400b      	ands	r3, r1
 8011108:	4901      	ldr	r1, [pc, #4]	; (8011110 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801110a:	4313      	orrs	r3, r2
 801110c:	608b      	str	r3, [r1, #8]
 801110e:	e00b      	b.n	8011128 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8011110:	40023800 	.word	0x40023800
 8011114:	40007000 	.word	0x40007000
 8011118:	0ffffcff 	.word	0x0ffffcff
 801111c:	4baa      	ldr	r3, [pc, #680]	; (80113c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801111e:	689b      	ldr	r3, [r3, #8]
 8011120:	4aa9      	ldr	r2, [pc, #676]	; (80113c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011122:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8011126:	6093      	str	r3, [r2, #8]
 8011128:	4ba7      	ldr	r3, [pc, #668]	; (80113c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801112a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011130:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011134:	49a4      	ldr	r1, [pc, #656]	; (80113c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011136:	4313      	orrs	r3, r2
 8011138:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	f003 0310 	and.w	r3, r3, #16
 8011142:	2b00      	cmp	r3, #0
 8011144:	d010      	beq.n	8011168 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8011146:	4ba0      	ldr	r3, [pc, #640]	; (80113c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011148:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801114c:	4a9e      	ldr	r2, [pc, #632]	; (80113c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801114e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8011152:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8011156:	4b9c      	ldr	r3, [pc, #624]	; (80113c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011158:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011160:	4999      	ldr	r1, [pc, #612]	; (80113c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011162:	4313      	orrs	r3, r2
 8011164:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011170:	2b00      	cmp	r3, #0
 8011172:	d00a      	beq.n	801118a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8011174:	4b94      	ldr	r3, [pc, #592]	; (80113c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801117a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011182:	4991      	ldr	r1, [pc, #580]	; (80113c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011184:	4313      	orrs	r3, r2
 8011186:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011192:	2b00      	cmp	r3, #0
 8011194:	d00a      	beq.n	80111ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8011196:	4b8c      	ldr	r3, [pc, #560]	; (80113c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801119c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80111a4:	4988      	ldr	r1, [pc, #544]	; (80113c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80111a6:	4313      	orrs	r3, r2
 80111a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d00a      	beq.n	80111ce <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80111b8:	4b83      	ldr	r3, [pc, #524]	; (80113c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80111ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80111be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111c6:	4980      	ldr	r1, [pc, #512]	; (80113c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80111c8:	4313      	orrs	r3, r2
 80111ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d00a      	beq.n	80111f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80111da:	4b7b      	ldr	r3, [pc, #492]	; (80113c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80111dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80111e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111e8:	4977      	ldr	r1, [pc, #476]	; (80113c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80111ea:	4313      	orrs	r3, r2
 80111ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d00a      	beq.n	8011212 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80111fc:	4b72      	ldr	r3, [pc, #456]	; (80113c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80111fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011202:	f023 0203 	bic.w	r2, r3, #3
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801120a:	496f      	ldr	r1, [pc, #444]	; (80113c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801120c:	4313      	orrs	r3, r2
 801120e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801121a:	2b00      	cmp	r3, #0
 801121c:	d00a      	beq.n	8011234 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801121e:	4b6a      	ldr	r3, [pc, #424]	; (80113c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011224:	f023 020c 	bic.w	r2, r3, #12
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801122c:	4966      	ldr	r1, [pc, #408]	; (80113c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801122e:	4313      	orrs	r3, r2
 8011230:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801123c:	2b00      	cmp	r3, #0
 801123e:	d00a      	beq.n	8011256 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8011240:	4b61      	ldr	r3, [pc, #388]	; (80113c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011246:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801124e:	495e      	ldr	r1, [pc, #376]	; (80113c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011250:	4313      	orrs	r3, r2
 8011252:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801125e:	2b00      	cmp	r3, #0
 8011260:	d00a      	beq.n	8011278 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8011262:	4b59      	ldr	r3, [pc, #356]	; (80113c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011268:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011270:	4955      	ldr	r1, [pc, #340]	; (80113c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011272:	4313      	orrs	r3, r2
 8011274:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011280:	2b00      	cmp	r3, #0
 8011282:	d00a      	beq.n	801129a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8011284:	4b50      	ldr	r3, [pc, #320]	; (80113c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801128a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011292:	494d      	ldr	r1, [pc, #308]	; (80113c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011294:	4313      	orrs	r3, r2
 8011296:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d00a      	beq.n	80112bc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80112a6:	4b48      	ldr	r3, [pc, #288]	; (80113c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80112a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80112ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80112b4:	4944      	ldr	r1, [pc, #272]	; (80113c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80112b6:	4313      	orrs	r3, r2
 80112b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d00a      	beq.n	80112de <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80112c8:	4b3f      	ldr	r3, [pc, #252]	; (80113c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80112ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80112ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80112d6:	493c      	ldr	r1, [pc, #240]	; (80113c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80112d8:	4313      	orrs	r3, r2
 80112da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d00a      	beq.n	8011300 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80112ea:	4b37      	ldr	r3, [pc, #220]	; (80113c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80112ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80112f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80112f8:	4933      	ldr	r1, [pc, #204]	; (80113c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80112fa:	4313      	orrs	r3, r2
 80112fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011308:	2b00      	cmp	r3, #0
 801130a:	d00a      	beq.n	8011322 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801130c:	4b2e      	ldr	r3, [pc, #184]	; (80113c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801130e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011312:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801131a:	492b      	ldr	r1, [pc, #172]	; (80113c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801131c:	4313      	orrs	r3, r2
 801131e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801132a:	2b00      	cmp	r3, #0
 801132c:	d011      	beq.n	8011352 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 801132e:	4b26      	ldr	r3, [pc, #152]	; (80113c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011334:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801133c:	4922      	ldr	r1, [pc, #136]	; (80113c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801133e:	4313      	orrs	r3, r2
 8011340:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011348:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801134c:	d101      	bne.n	8011352 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 801134e:	2301      	movs	r3, #1
 8011350:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	f003 0308 	and.w	r3, r3, #8
 801135a:	2b00      	cmp	r3, #0
 801135c:	d001      	beq.n	8011362 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 801135e:	2301      	movs	r3, #1
 8011360:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801136a:	2b00      	cmp	r3, #0
 801136c:	d00a      	beq.n	8011384 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801136e:	4b16      	ldr	r3, [pc, #88]	; (80113c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011374:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801137c:	4912      	ldr	r1, [pc, #72]	; (80113c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801137e:	4313      	orrs	r3, r2
 8011380:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801138c:	2b00      	cmp	r3, #0
 801138e:	d00b      	beq.n	80113a8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8011390:	4b0d      	ldr	r3, [pc, #52]	; (80113c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011396:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80113a0:	4909      	ldr	r1, [pc, #36]	; (80113c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80113a2:	4313      	orrs	r3, r2
 80113a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80113a8:	69fb      	ldr	r3, [r7, #28]
 80113aa:	2b01      	cmp	r3, #1
 80113ac:	d006      	beq.n	80113bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	f000 80d9 	beq.w	801156e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80113bc:	4b02      	ldr	r3, [pc, #8]	; (80113c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	4a01      	ldr	r2, [pc, #4]	; (80113c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80113c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80113c6:	e001      	b.n	80113cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80113c8:	40023800 	.word	0x40023800
 80113cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80113ce:	f7fe faad 	bl	800f92c <HAL_GetTick>
 80113d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80113d4:	e008      	b.n	80113e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80113d6:	f7fe faa9 	bl	800f92c <HAL_GetTick>
 80113da:	4602      	mov	r2, r0
 80113dc:	697b      	ldr	r3, [r7, #20]
 80113de:	1ad3      	subs	r3, r2, r3
 80113e0:	2b64      	cmp	r3, #100	; 0x64
 80113e2:	d901      	bls.n	80113e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80113e4:	2303      	movs	r3, #3
 80113e6:	e194      	b.n	8011712 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80113e8:	4b6c      	ldr	r3, [pc, #432]	; (801159c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d1f0      	bne.n	80113d6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	f003 0301 	and.w	r3, r3, #1
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d021      	beq.n	8011444 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011404:	2b00      	cmp	r3, #0
 8011406:	d11d      	bne.n	8011444 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8011408:	4b64      	ldr	r3, [pc, #400]	; (801159c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 801140a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801140e:	0c1b      	lsrs	r3, r3, #16
 8011410:	f003 0303 	and.w	r3, r3, #3
 8011414:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8011416:	4b61      	ldr	r3, [pc, #388]	; (801159c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011418:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801141c:	0e1b      	lsrs	r3, r3, #24
 801141e:	f003 030f 	and.w	r3, r3, #15
 8011422:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	685b      	ldr	r3, [r3, #4]
 8011428:	019a      	lsls	r2, r3, #6
 801142a:	693b      	ldr	r3, [r7, #16]
 801142c:	041b      	lsls	r3, r3, #16
 801142e:	431a      	orrs	r2, r3
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	061b      	lsls	r3, r3, #24
 8011434:	431a      	orrs	r2, r3
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	689b      	ldr	r3, [r3, #8]
 801143a:	071b      	lsls	r3, r3, #28
 801143c:	4957      	ldr	r1, [pc, #348]	; (801159c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 801143e:	4313      	orrs	r3, r2
 8011440:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801144c:	2b00      	cmp	r3, #0
 801144e:	d004      	beq.n	801145a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011454:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011458:	d00a      	beq.n	8011470 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8011462:	2b00      	cmp	r3, #0
 8011464:	d02e      	beq.n	80114c4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801146a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801146e:	d129      	bne.n	80114c4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8011470:	4b4a      	ldr	r3, [pc, #296]	; (801159c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011472:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011476:	0c1b      	lsrs	r3, r3, #16
 8011478:	f003 0303 	and.w	r3, r3, #3
 801147c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801147e:	4b47      	ldr	r3, [pc, #284]	; (801159c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011480:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011484:	0f1b      	lsrs	r3, r3, #28
 8011486:	f003 0307 	and.w	r3, r3, #7
 801148a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	685b      	ldr	r3, [r3, #4]
 8011490:	019a      	lsls	r2, r3, #6
 8011492:	693b      	ldr	r3, [r7, #16]
 8011494:	041b      	lsls	r3, r3, #16
 8011496:	431a      	orrs	r2, r3
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	68db      	ldr	r3, [r3, #12]
 801149c:	061b      	lsls	r3, r3, #24
 801149e:	431a      	orrs	r2, r3
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	071b      	lsls	r3, r3, #28
 80114a4:	493d      	ldr	r1, [pc, #244]	; (801159c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80114a6:	4313      	orrs	r3, r2
 80114a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80114ac:	4b3b      	ldr	r3, [pc, #236]	; (801159c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80114ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80114b2:	f023 021f 	bic.w	r2, r3, #31
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114ba:	3b01      	subs	r3, #1
 80114bc:	4937      	ldr	r1, [pc, #220]	; (801159c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80114be:	4313      	orrs	r3, r2
 80114c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d01d      	beq.n	801150c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80114d0:	4b32      	ldr	r3, [pc, #200]	; (801159c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80114d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80114d6:	0e1b      	lsrs	r3, r3, #24
 80114d8:	f003 030f 	and.w	r3, r3, #15
 80114dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80114de:	4b2f      	ldr	r3, [pc, #188]	; (801159c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80114e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80114e4:	0f1b      	lsrs	r3, r3, #28
 80114e6:	f003 0307 	and.w	r3, r3, #7
 80114ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	685b      	ldr	r3, [r3, #4]
 80114f0:	019a      	lsls	r2, r3, #6
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	691b      	ldr	r3, [r3, #16]
 80114f6:	041b      	lsls	r3, r3, #16
 80114f8:	431a      	orrs	r2, r3
 80114fa:	693b      	ldr	r3, [r7, #16]
 80114fc:	061b      	lsls	r3, r3, #24
 80114fe:	431a      	orrs	r2, r3
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	071b      	lsls	r3, r3, #28
 8011504:	4925      	ldr	r1, [pc, #148]	; (801159c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011506:	4313      	orrs	r3, r2
 8011508:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011514:	2b00      	cmp	r3, #0
 8011516:	d011      	beq.n	801153c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	685b      	ldr	r3, [r3, #4]
 801151c:	019a      	lsls	r2, r3, #6
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	691b      	ldr	r3, [r3, #16]
 8011522:	041b      	lsls	r3, r3, #16
 8011524:	431a      	orrs	r2, r3
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	68db      	ldr	r3, [r3, #12]
 801152a:	061b      	lsls	r3, r3, #24
 801152c:	431a      	orrs	r2, r3
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	689b      	ldr	r3, [r3, #8]
 8011532:	071b      	lsls	r3, r3, #28
 8011534:	4919      	ldr	r1, [pc, #100]	; (801159c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011536:	4313      	orrs	r3, r2
 8011538:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 801153c:	4b17      	ldr	r3, [pc, #92]	; (801159c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	4a16      	ldr	r2, [pc, #88]	; (801159c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011542:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011546:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011548:	f7fe f9f0 	bl	800f92c <HAL_GetTick>
 801154c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801154e:	e008      	b.n	8011562 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8011550:	f7fe f9ec 	bl	800f92c <HAL_GetTick>
 8011554:	4602      	mov	r2, r0
 8011556:	697b      	ldr	r3, [r7, #20]
 8011558:	1ad3      	subs	r3, r2, r3
 801155a:	2b64      	cmp	r3, #100	; 0x64
 801155c:	d901      	bls.n	8011562 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801155e:	2303      	movs	r3, #3
 8011560:	e0d7      	b.n	8011712 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8011562:	4b0e      	ldr	r3, [pc, #56]	; (801159c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801156a:	2b00      	cmp	r3, #0
 801156c:	d0f0      	beq.n	8011550 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 801156e:	69bb      	ldr	r3, [r7, #24]
 8011570:	2b01      	cmp	r3, #1
 8011572:	f040 80cd 	bne.w	8011710 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8011576:	4b09      	ldr	r3, [pc, #36]	; (801159c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	4a08      	ldr	r2, [pc, #32]	; (801159c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 801157c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011580:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011582:	f7fe f9d3 	bl	800f92c <HAL_GetTick>
 8011586:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8011588:	e00a      	b.n	80115a0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 801158a:	f7fe f9cf 	bl	800f92c <HAL_GetTick>
 801158e:	4602      	mov	r2, r0
 8011590:	697b      	ldr	r3, [r7, #20]
 8011592:	1ad3      	subs	r3, r2, r3
 8011594:	2b64      	cmp	r3, #100	; 0x64
 8011596:	d903      	bls.n	80115a0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8011598:	2303      	movs	r3, #3
 801159a:	e0ba      	b.n	8011712 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 801159c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80115a0:	4b5e      	ldr	r3, [pc, #376]	; (801171c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80115a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80115ac:	d0ed      	beq.n	801158a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d003      	beq.n	80115c2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d009      	beq.n	80115d6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d02e      	beq.n	801162c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d12a      	bne.n	801162c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80115d6:	4b51      	ldr	r3, [pc, #324]	; (801171c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80115d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80115dc:	0c1b      	lsrs	r3, r3, #16
 80115de:	f003 0303 	and.w	r3, r3, #3
 80115e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80115e4:	4b4d      	ldr	r3, [pc, #308]	; (801171c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80115e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80115ea:	0f1b      	lsrs	r3, r3, #28
 80115ec:	f003 0307 	and.w	r3, r3, #7
 80115f0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	695b      	ldr	r3, [r3, #20]
 80115f6:	019a      	lsls	r2, r3, #6
 80115f8:	693b      	ldr	r3, [r7, #16]
 80115fa:	041b      	lsls	r3, r3, #16
 80115fc:	431a      	orrs	r2, r3
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	699b      	ldr	r3, [r3, #24]
 8011602:	061b      	lsls	r3, r3, #24
 8011604:	431a      	orrs	r2, r3
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	071b      	lsls	r3, r3, #28
 801160a:	4944      	ldr	r1, [pc, #272]	; (801171c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 801160c:	4313      	orrs	r3, r2
 801160e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8011612:	4b42      	ldr	r3, [pc, #264]	; (801171c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011614:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011618:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011620:	3b01      	subs	r3, #1
 8011622:	021b      	lsls	r3, r3, #8
 8011624:	493d      	ldr	r1, [pc, #244]	; (801171c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011626:	4313      	orrs	r3, r2
 8011628:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011634:	2b00      	cmp	r3, #0
 8011636:	d022      	beq.n	801167e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801163c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011640:	d11d      	bne.n	801167e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8011642:	4b36      	ldr	r3, [pc, #216]	; (801171c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011648:	0e1b      	lsrs	r3, r3, #24
 801164a:	f003 030f 	and.w	r3, r3, #15
 801164e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8011650:	4b32      	ldr	r3, [pc, #200]	; (801171c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011656:	0f1b      	lsrs	r3, r3, #28
 8011658:	f003 0307 	and.w	r3, r3, #7
 801165c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	695b      	ldr	r3, [r3, #20]
 8011662:	019a      	lsls	r2, r3, #6
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	6a1b      	ldr	r3, [r3, #32]
 8011668:	041b      	lsls	r3, r3, #16
 801166a:	431a      	orrs	r2, r3
 801166c:	693b      	ldr	r3, [r7, #16]
 801166e:	061b      	lsls	r3, r3, #24
 8011670:	431a      	orrs	r2, r3
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	071b      	lsls	r3, r3, #28
 8011676:	4929      	ldr	r1, [pc, #164]	; (801171c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011678:	4313      	orrs	r3, r2
 801167a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	f003 0308 	and.w	r3, r3, #8
 8011686:	2b00      	cmp	r3, #0
 8011688:	d028      	beq.n	80116dc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 801168a:	4b24      	ldr	r3, [pc, #144]	; (801171c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 801168c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011690:	0e1b      	lsrs	r3, r3, #24
 8011692:	f003 030f 	and.w	r3, r3, #15
 8011696:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8011698:	4b20      	ldr	r3, [pc, #128]	; (801171c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 801169a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801169e:	0c1b      	lsrs	r3, r3, #16
 80116a0:	f003 0303 	and.w	r3, r3, #3
 80116a4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	695b      	ldr	r3, [r3, #20]
 80116aa:	019a      	lsls	r2, r3, #6
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	041b      	lsls	r3, r3, #16
 80116b0:	431a      	orrs	r2, r3
 80116b2:	693b      	ldr	r3, [r7, #16]
 80116b4:	061b      	lsls	r3, r3, #24
 80116b6:	431a      	orrs	r2, r3
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	69db      	ldr	r3, [r3, #28]
 80116bc:	071b      	lsls	r3, r3, #28
 80116be:	4917      	ldr	r1, [pc, #92]	; (801171c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80116c0:	4313      	orrs	r3, r2
 80116c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80116c6:	4b15      	ldr	r3, [pc, #84]	; (801171c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80116c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80116cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116d4:	4911      	ldr	r1, [pc, #68]	; (801171c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80116d6:	4313      	orrs	r3, r2
 80116d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80116dc:	4b0f      	ldr	r3, [pc, #60]	; (801171c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	4a0e      	ldr	r2, [pc, #56]	; (801171c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80116e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80116e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80116e8:	f7fe f920 	bl	800f92c <HAL_GetTick>
 80116ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80116ee:	e008      	b.n	8011702 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80116f0:	f7fe f91c 	bl	800f92c <HAL_GetTick>
 80116f4:	4602      	mov	r2, r0
 80116f6:	697b      	ldr	r3, [r7, #20]
 80116f8:	1ad3      	subs	r3, r2, r3
 80116fa:	2b64      	cmp	r3, #100	; 0x64
 80116fc:	d901      	bls.n	8011702 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80116fe:	2303      	movs	r3, #3
 8011700:	e007      	b.n	8011712 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8011702:	4b06      	ldr	r3, [pc, #24]	; (801171c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801170a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801170e:	d1ef      	bne.n	80116f0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8011710:	2300      	movs	r3, #0
}
 8011712:	4618      	mov	r0, r3
 8011714:	3720      	adds	r7, #32
 8011716:	46bd      	mov	sp, r7
 8011718:	bd80      	pop	{r7, pc}
 801171a:	bf00      	nop
 801171c:	40023800 	.word	0x40023800

08011720 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8011720:	b580      	push	{r7, lr}
 8011722:	b082      	sub	sp, #8
 8011724:	af00      	add	r7, sp, #0
 8011726:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	2b00      	cmp	r3, #0
 801172c:	d101      	bne.n	8011732 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801172e:	2301      	movs	r3, #1
 8011730:	e049      	b.n	80117c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011738:	b2db      	uxtb	r3, r3
 801173a:	2b00      	cmp	r3, #0
 801173c:	d106      	bne.n	801174c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	2200      	movs	r2, #0
 8011742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8011746:	6878      	ldr	r0, [r7, #4]
 8011748:	f000 f841 	bl	80117ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	2202      	movs	r2, #2
 8011750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	681a      	ldr	r2, [r3, #0]
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	3304      	adds	r3, #4
 801175c:	4619      	mov	r1, r3
 801175e:	4610      	mov	r0, r2
 8011760:	f000 fa00 	bl	8011b64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	2201      	movs	r2, #1
 8011768:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	2201      	movs	r2, #1
 8011770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	2201      	movs	r2, #1
 8011778:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	2201      	movs	r2, #1
 8011780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	2201      	movs	r2, #1
 8011788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	2201      	movs	r2, #1
 8011790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	2201      	movs	r2, #1
 8011798:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	2201      	movs	r2, #1
 80117a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	2201      	movs	r2, #1
 80117a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	2201      	movs	r2, #1
 80117b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	2201      	movs	r2, #1
 80117b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	2201      	movs	r2, #1
 80117c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80117c4:	2300      	movs	r3, #0
}
 80117c6:	4618      	mov	r0, r3
 80117c8:	3708      	adds	r7, #8
 80117ca:	46bd      	mov	sp, r7
 80117cc:	bd80      	pop	{r7, pc}

080117ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80117ce:	b480      	push	{r7}
 80117d0:	b083      	sub	sp, #12
 80117d2:	af00      	add	r7, sp, #0
 80117d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80117d6:	bf00      	nop
 80117d8:	370c      	adds	r7, #12
 80117da:	46bd      	mov	sp, r7
 80117dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e0:	4770      	bx	lr
	...

080117e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80117e4:	b480      	push	{r7}
 80117e6:	b085      	sub	sp, #20
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80117f2:	b2db      	uxtb	r3, r3
 80117f4:	2b01      	cmp	r3, #1
 80117f6:	d001      	beq.n	80117fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80117f8:	2301      	movs	r3, #1
 80117fa:	e054      	b.n	80118a6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	2202      	movs	r2, #2
 8011800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	68da      	ldr	r2, [r3, #12]
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	f042 0201 	orr.w	r2, r2, #1
 8011812:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	4a26      	ldr	r2, [pc, #152]	; (80118b4 <HAL_TIM_Base_Start_IT+0xd0>)
 801181a:	4293      	cmp	r3, r2
 801181c:	d022      	beq.n	8011864 <HAL_TIM_Base_Start_IT+0x80>
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011826:	d01d      	beq.n	8011864 <HAL_TIM_Base_Start_IT+0x80>
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	4a22      	ldr	r2, [pc, #136]	; (80118b8 <HAL_TIM_Base_Start_IT+0xd4>)
 801182e:	4293      	cmp	r3, r2
 8011830:	d018      	beq.n	8011864 <HAL_TIM_Base_Start_IT+0x80>
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	4a21      	ldr	r2, [pc, #132]	; (80118bc <HAL_TIM_Base_Start_IT+0xd8>)
 8011838:	4293      	cmp	r3, r2
 801183a:	d013      	beq.n	8011864 <HAL_TIM_Base_Start_IT+0x80>
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	4a1f      	ldr	r2, [pc, #124]	; (80118c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8011842:	4293      	cmp	r3, r2
 8011844:	d00e      	beq.n	8011864 <HAL_TIM_Base_Start_IT+0x80>
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	4a1e      	ldr	r2, [pc, #120]	; (80118c4 <HAL_TIM_Base_Start_IT+0xe0>)
 801184c:	4293      	cmp	r3, r2
 801184e:	d009      	beq.n	8011864 <HAL_TIM_Base_Start_IT+0x80>
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	4a1c      	ldr	r2, [pc, #112]	; (80118c8 <HAL_TIM_Base_Start_IT+0xe4>)
 8011856:	4293      	cmp	r3, r2
 8011858:	d004      	beq.n	8011864 <HAL_TIM_Base_Start_IT+0x80>
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	4a1b      	ldr	r2, [pc, #108]	; (80118cc <HAL_TIM_Base_Start_IT+0xe8>)
 8011860:	4293      	cmp	r3, r2
 8011862:	d115      	bne.n	8011890 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	689a      	ldr	r2, [r3, #8]
 801186a:	4b19      	ldr	r3, [pc, #100]	; (80118d0 <HAL_TIM_Base_Start_IT+0xec>)
 801186c:	4013      	ands	r3, r2
 801186e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	2b06      	cmp	r3, #6
 8011874:	d015      	beq.n	80118a2 <HAL_TIM_Base_Start_IT+0xbe>
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801187c:	d011      	beq.n	80118a2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	681a      	ldr	r2, [r3, #0]
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	f042 0201 	orr.w	r2, r2, #1
 801188c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801188e:	e008      	b.n	80118a2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	681a      	ldr	r2, [r3, #0]
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	f042 0201 	orr.w	r2, r2, #1
 801189e:	601a      	str	r2, [r3, #0]
 80118a0:	e000      	b.n	80118a4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80118a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80118a4:	2300      	movs	r3, #0
}
 80118a6:	4618      	mov	r0, r3
 80118a8:	3714      	adds	r7, #20
 80118aa:	46bd      	mov	sp, r7
 80118ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b0:	4770      	bx	lr
 80118b2:	bf00      	nop
 80118b4:	40010000 	.word	0x40010000
 80118b8:	40000400 	.word	0x40000400
 80118bc:	40000800 	.word	0x40000800
 80118c0:	40000c00 	.word	0x40000c00
 80118c4:	40010400 	.word	0x40010400
 80118c8:	40014000 	.word	0x40014000
 80118cc:	40001800 	.word	0x40001800
 80118d0:	00010007 	.word	0x00010007

080118d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b082      	sub	sp, #8
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	691b      	ldr	r3, [r3, #16]
 80118e2:	f003 0302 	and.w	r3, r3, #2
 80118e6:	2b02      	cmp	r3, #2
 80118e8:	d122      	bne.n	8011930 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	68db      	ldr	r3, [r3, #12]
 80118f0:	f003 0302 	and.w	r3, r3, #2
 80118f4:	2b02      	cmp	r3, #2
 80118f6:	d11b      	bne.n	8011930 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	f06f 0202 	mvn.w	r2, #2
 8011900:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	2201      	movs	r2, #1
 8011906:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	699b      	ldr	r3, [r3, #24]
 801190e:	f003 0303 	and.w	r3, r3, #3
 8011912:	2b00      	cmp	r3, #0
 8011914:	d003      	beq.n	801191e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8011916:	6878      	ldr	r0, [r7, #4]
 8011918:	f000 f905 	bl	8011b26 <HAL_TIM_IC_CaptureCallback>
 801191c:	e005      	b.n	801192a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801191e:	6878      	ldr	r0, [r7, #4]
 8011920:	f000 f8f7 	bl	8011b12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011924:	6878      	ldr	r0, [r7, #4]
 8011926:	f000 f908 	bl	8011b3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	2200      	movs	r2, #0
 801192e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	691b      	ldr	r3, [r3, #16]
 8011936:	f003 0304 	and.w	r3, r3, #4
 801193a:	2b04      	cmp	r3, #4
 801193c:	d122      	bne.n	8011984 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	68db      	ldr	r3, [r3, #12]
 8011944:	f003 0304 	and.w	r3, r3, #4
 8011948:	2b04      	cmp	r3, #4
 801194a:	d11b      	bne.n	8011984 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	f06f 0204 	mvn.w	r2, #4
 8011954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	2202      	movs	r2, #2
 801195a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	699b      	ldr	r3, [r3, #24]
 8011962:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011966:	2b00      	cmp	r3, #0
 8011968:	d003      	beq.n	8011972 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801196a:	6878      	ldr	r0, [r7, #4]
 801196c:	f000 f8db 	bl	8011b26 <HAL_TIM_IC_CaptureCallback>
 8011970:	e005      	b.n	801197e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011972:	6878      	ldr	r0, [r7, #4]
 8011974:	f000 f8cd 	bl	8011b12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011978:	6878      	ldr	r0, [r7, #4]
 801197a:	f000 f8de 	bl	8011b3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	2200      	movs	r2, #0
 8011982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	691b      	ldr	r3, [r3, #16]
 801198a:	f003 0308 	and.w	r3, r3, #8
 801198e:	2b08      	cmp	r3, #8
 8011990:	d122      	bne.n	80119d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	68db      	ldr	r3, [r3, #12]
 8011998:	f003 0308 	and.w	r3, r3, #8
 801199c:	2b08      	cmp	r3, #8
 801199e:	d11b      	bne.n	80119d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	f06f 0208 	mvn.w	r2, #8
 80119a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	2204      	movs	r2, #4
 80119ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	69db      	ldr	r3, [r3, #28]
 80119b6:	f003 0303 	and.w	r3, r3, #3
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d003      	beq.n	80119c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80119be:	6878      	ldr	r0, [r7, #4]
 80119c0:	f000 f8b1 	bl	8011b26 <HAL_TIM_IC_CaptureCallback>
 80119c4:	e005      	b.n	80119d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80119c6:	6878      	ldr	r0, [r7, #4]
 80119c8:	f000 f8a3 	bl	8011b12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80119cc:	6878      	ldr	r0, [r7, #4]
 80119ce:	f000 f8b4 	bl	8011b3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	2200      	movs	r2, #0
 80119d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	691b      	ldr	r3, [r3, #16]
 80119de:	f003 0310 	and.w	r3, r3, #16
 80119e2:	2b10      	cmp	r3, #16
 80119e4:	d122      	bne.n	8011a2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	68db      	ldr	r3, [r3, #12]
 80119ec:	f003 0310 	and.w	r3, r3, #16
 80119f0:	2b10      	cmp	r3, #16
 80119f2:	d11b      	bne.n	8011a2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	f06f 0210 	mvn.w	r2, #16
 80119fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	2208      	movs	r2, #8
 8011a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	69db      	ldr	r3, [r3, #28]
 8011a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d003      	beq.n	8011a1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011a12:	6878      	ldr	r0, [r7, #4]
 8011a14:	f000 f887 	bl	8011b26 <HAL_TIM_IC_CaptureCallback>
 8011a18:	e005      	b.n	8011a26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011a1a:	6878      	ldr	r0, [r7, #4]
 8011a1c:	f000 f879 	bl	8011b12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011a20:	6878      	ldr	r0, [r7, #4]
 8011a22:	f000 f88a 	bl	8011b3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	2200      	movs	r2, #0
 8011a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	691b      	ldr	r3, [r3, #16]
 8011a32:	f003 0301 	and.w	r3, r3, #1
 8011a36:	2b01      	cmp	r3, #1
 8011a38:	d10e      	bne.n	8011a58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	68db      	ldr	r3, [r3, #12]
 8011a40:	f003 0301 	and.w	r3, r3, #1
 8011a44:	2b01      	cmp	r3, #1
 8011a46:	d107      	bne.n	8011a58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	f06f 0201 	mvn.w	r2, #1
 8011a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8011a52:	6878      	ldr	r0, [r7, #4]
 8011a54:	f7ef fc78 	bl	8001348 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	691b      	ldr	r3, [r3, #16]
 8011a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011a62:	2b80      	cmp	r3, #128	; 0x80
 8011a64:	d10e      	bne.n	8011a84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	68db      	ldr	r3, [r3, #12]
 8011a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011a70:	2b80      	cmp	r3, #128	; 0x80
 8011a72:	d107      	bne.n	8011a84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8011a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8011a7e:	6878      	ldr	r0, [r7, #4]
 8011a80:	f000 f91a 	bl	8011cb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	691b      	ldr	r3, [r3, #16]
 8011a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011a8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011a92:	d10e      	bne.n	8011ab2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	68db      	ldr	r3, [r3, #12]
 8011a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011a9e:	2b80      	cmp	r3, #128	; 0x80
 8011aa0:	d107      	bne.n	8011ab2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8011aaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8011aac:	6878      	ldr	r0, [r7, #4]
 8011aae:	f000 f90d 	bl	8011ccc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	691b      	ldr	r3, [r3, #16]
 8011ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011abc:	2b40      	cmp	r3, #64	; 0x40
 8011abe:	d10e      	bne.n	8011ade <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	68db      	ldr	r3, [r3, #12]
 8011ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011aca:	2b40      	cmp	r3, #64	; 0x40
 8011acc:	d107      	bne.n	8011ade <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8011ad6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8011ad8:	6878      	ldr	r0, [r7, #4]
 8011ada:	f000 f838 	bl	8011b4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	691b      	ldr	r3, [r3, #16]
 8011ae4:	f003 0320 	and.w	r3, r3, #32
 8011ae8:	2b20      	cmp	r3, #32
 8011aea:	d10e      	bne.n	8011b0a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	68db      	ldr	r3, [r3, #12]
 8011af2:	f003 0320 	and.w	r3, r3, #32
 8011af6:	2b20      	cmp	r3, #32
 8011af8:	d107      	bne.n	8011b0a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	f06f 0220 	mvn.w	r2, #32
 8011b02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8011b04:	6878      	ldr	r0, [r7, #4]
 8011b06:	f000 f8cd 	bl	8011ca4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8011b0a:	bf00      	nop
 8011b0c:	3708      	adds	r7, #8
 8011b0e:	46bd      	mov	sp, r7
 8011b10:	bd80      	pop	{r7, pc}

08011b12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011b12:	b480      	push	{r7}
 8011b14:	b083      	sub	sp, #12
 8011b16:	af00      	add	r7, sp, #0
 8011b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8011b1a:	bf00      	nop
 8011b1c:	370c      	adds	r7, #12
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b24:	4770      	bx	lr

08011b26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8011b26:	b480      	push	{r7}
 8011b28:	b083      	sub	sp, #12
 8011b2a:	af00      	add	r7, sp, #0
 8011b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8011b2e:	bf00      	nop
 8011b30:	370c      	adds	r7, #12
 8011b32:	46bd      	mov	sp, r7
 8011b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b38:	4770      	bx	lr

08011b3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8011b3a:	b480      	push	{r7}
 8011b3c:	b083      	sub	sp, #12
 8011b3e:	af00      	add	r7, sp, #0
 8011b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8011b42:	bf00      	nop
 8011b44:	370c      	adds	r7, #12
 8011b46:	46bd      	mov	sp, r7
 8011b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b4c:	4770      	bx	lr

08011b4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8011b4e:	b480      	push	{r7}
 8011b50:	b083      	sub	sp, #12
 8011b52:	af00      	add	r7, sp, #0
 8011b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8011b56:	bf00      	nop
 8011b58:	370c      	adds	r7, #12
 8011b5a:	46bd      	mov	sp, r7
 8011b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b60:	4770      	bx	lr
	...

08011b64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8011b64:	b480      	push	{r7}
 8011b66:	b085      	sub	sp, #20
 8011b68:	af00      	add	r7, sp, #0
 8011b6a:	6078      	str	r0, [r7, #4]
 8011b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	4a40      	ldr	r2, [pc, #256]	; (8011c78 <TIM_Base_SetConfig+0x114>)
 8011b78:	4293      	cmp	r3, r2
 8011b7a:	d013      	beq.n	8011ba4 <TIM_Base_SetConfig+0x40>
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011b82:	d00f      	beq.n	8011ba4 <TIM_Base_SetConfig+0x40>
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	4a3d      	ldr	r2, [pc, #244]	; (8011c7c <TIM_Base_SetConfig+0x118>)
 8011b88:	4293      	cmp	r3, r2
 8011b8a:	d00b      	beq.n	8011ba4 <TIM_Base_SetConfig+0x40>
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	4a3c      	ldr	r2, [pc, #240]	; (8011c80 <TIM_Base_SetConfig+0x11c>)
 8011b90:	4293      	cmp	r3, r2
 8011b92:	d007      	beq.n	8011ba4 <TIM_Base_SetConfig+0x40>
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	4a3b      	ldr	r2, [pc, #236]	; (8011c84 <TIM_Base_SetConfig+0x120>)
 8011b98:	4293      	cmp	r3, r2
 8011b9a:	d003      	beq.n	8011ba4 <TIM_Base_SetConfig+0x40>
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	4a3a      	ldr	r2, [pc, #232]	; (8011c88 <TIM_Base_SetConfig+0x124>)
 8011ba0:	4293      	cmp	r3, r2
 8011ba2:	d108      	bne.n	8011bb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011baa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011bac:	683b      	ldr	r3, [r7, #0]
 8011bae:	685b      	ldr	r3, [r3, #4]
 8011bb0:	68fa      	ldr	r2, [r7, #12]
 8011bb2:	4313      	orrs	r3, r2
 8011bb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	4a2f      	ldr	r2, [pc, #188]	; (8011c78 <TIM_Base_SetConfig+0x114>)
 8011bba:	4293      	cmp	r3, r2
 8011bbc:	d02b      	beq.n	8011c16 <TIM_Base_SetConfig+0xb2>
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011bc4:	d027      	beq.n	8011c16 <TIM_Base_SetConfig+0xb2>
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	4a2c      	ldr	r2, [pc, #176]	; (8011c7c <TIM_Base_SetConfig+0x118>)
 8011bca:	4293      	cmp	r3, r2
 8011bcc:	d023      	beq.n	8011c16 <TIM_Base_SetConfig+0xb2>
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	4a2b      	ldr	r2, [pc, #172]	; (8011c80 <TIM_Base_SetConfig+0x11c>)
 8011bd2:	4293      	cmp	r3, r2
 8011bd4:	d01f      	beq.n	8011c16 <TIM_Base_SetConfig+0xb2>
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	4a2a      	ldr	r2, [pc, #168]	; (8011c84 <TIM_Base_SetConfig+0x120>)
 8011bda:	4293      	cmp	r3, r2
 8011bdc:	d01b      	beq.n	8011c16 <TIM_Base_SetConfig+0xb2>
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	4a29      	ldr	r2, [pc, #164]	; (8011c88 <TIM_Base_SetConfig+0x124>)
 8011be2:	4293      	cmp	r3, r2
 8011be4:	d017      	beq.n	8011c16 <TIM_Base_SetConfig+0xb2>
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	4a28      	ldr	r2, [pc, #160]	; (8011c8c <TIM_Base_SetConfig+0x128>)
 8011bea:	4293      	cmp	r3, r2
 8011bec:	d013      	beq.n	8011c16 <TIM_Base_SetConfig+0xb2>
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	4a27      	ldr	r2, [pc, #156]	; (8011c90 <TIM_Base_SetConfig+0x12c>)
 8011bf2:	4293      	cmp	r3, r2
 8011bf4:	d00f      	beq.n	8011c16 <TIM_Base_SetConfig+0xb2>
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	4a26      	ldr	r2, [pc, #152]	; (8011c94 <TIM_Base_SetConfig+0x130>)
 8011bfa:	4293      	cmp	r3, r2
 8011bfc:	d00b      	beq.n	8011c16 <TIM_Base_SetConfig+0xb2>
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	4a25      	ldr	r2, [pc, #148]	; (8011c98 <TIM_Base_SetConfig+0x134>)
 8011c02:	4293      	cmp	r3, r2
 8011c04:	d007      	beq.n	8011c16 <TIM_Base_SetConfig+0xb2>
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	4a24      	ldr	r2, [pc, #144]	; (8011c9c <TIM_Base_SetConfig+0x138>)
 8011c0a:	4293      	cmp	r3, r2
 8011c0c:	d003      	beq.n	8011c16 <TIM_Base_SetConfig+0xb2>
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	4a23      	ldr	r2, [pc, #140]	; (8011ca0 <TIM_Base_SetConfig+0x13c>)
 8011c12:	4293      	cmp	r3, r2
 8011c14:	d108      	bne.n	8011c28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011c1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011c1e:	683b      	ldr	r3, [r7, #0]
 8011c20:	68db      	ldr	r3, [r3, #12]
 8011c22:	68fa      	ldr	r2, [r7, #12]
 8011c24:	4313      	orrs	r3, r2
 8011c26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011c2e:	683b      	ldr	r3, [r7, #0]
 8011c30:	695b      	ldr	r3, [r3, #20]
 8011c32:	4313      	orrs	r3, r2
 8011c34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	68fa      	ldr	r2, [r7, #12]
 8011c3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011c3c:	683b      	ldr	r3, [r7, #0]
 8011c3e:	689a      	ldr	r2, [r3, #8]
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011c44:	683b      	ldr	r3, [r7, #0]
 8011c46:	681a      	ldr	r2, [r3, #0]
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	4a0a      	ldr	r2, [pc, #40]	; (8011c78 <TIM_Base_SetConfig+0x114>)
 8011c50:	4293      	cmp	r3, r2
 8011c52:	d003      	beq.n	8011c5c <TIM_Base_SetConfig+0xf8>
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	4a0c      	ldr	r2, [pc, #48]	; (8011c88 <TIM_Base_SetConfig+0x124>)
 8011c58:	4293      	cmp	r3, r2
 8011c5a:	d103      	bne.n	8011c64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011c5c:	683b      	ldr	r3, [r7, #0]
 8011c5e:	691a      	ldr	r2, [r3, #16]
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	2201      	movs	r2, #1
 8011c68:	615a      	str	r2, [r3, #20]
}
 8011c6a:	bf00      	nop
 8011c6c:	3714      	adds	r7, #20
 8011c6e:	46bd      	mov	sp, r7
 8011c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c74:	4770      	bx	lr
 8011c76:	bf00      	nop
 8011c78:	40010000 	.word	0x40010000
 8011c7c:	40000400 	.word	0x40000400
 8011c80:	40000800 	.word	0x40000800
 8011c84:	40000c00 	.word	0x40000c00
 8011c88:	40010400 	.word	0x40010400
 8011c8c:	40014000 	.word	0x40014000
 8011c90:	40014400 	.word	0x40014400
 8011c94:	40014800 	.word	0x40014800
 8011c98:	40001800 	.word	0x40001800
 8011c9c:	40001c00 	.word	0x40001c00
 8011ca0:	40002000 	.word	0x40002000

08011ca4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011ca4:	b480      	push	{r7}
 8011ca6:	b083      	sub	sp, #12
 8011ca8:	af00      	add	r7, sp, #0
 8011caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011cac:	bf00      	nop
 8011cae:	370c      	adds	r7, #12
 8011cb0:	46bd      	mov	sp, r7
 8011cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb6:	4770      	bx	lr

08011cb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011cb8:	b480      	push	{r7}
 8011cba:	b083      	sub	sp, #12
 8011cbc:	af00      	add	r7, sp, #0
 8011cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011cc0:	bf00      	nop
 8011cc2:	370c      	adds	r7, #12
 8011cc4:	46bd      	mov	sp, r7
 8011cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cca:	4770      	bx	lr

08011ccc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8011ccc:	b480      	push	{r7}
 8011cce:	b083      	sub	sp, #12
 8011cd0:	af00      	add	r7, sp, #0
 8011cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8011cd4:	bf00      	nop
 8011cd6:	370c      	adds	r7, #12
 8011cd8:	46bd      	mov	sp, r7
 8011cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cde:	4770      	bx	lr

08011ce0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011ce0:	b580      	push	{r7, lr}
 8011ce2:	b082      	sub	sp, #8
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d101      	bne.n	8011cf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011cee:	2301      	movs	r3, #1
 8011cf0:	e040      	b.n	8011d74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d106      	bne.n	8011d08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	2200      	movs	r2, #0
 8011cfe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011d02:	6878      	ldr	r0, [r7, #4]
 8011d04:	f7fd fbe4 	bl	800f4d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	2224      	movs	r2, #36	; 0x24
 8011d0c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	681a      	ldr	r2, [r3, #0]
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	f022 0201 	bic.w	r2, r2, #1
 8011d1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011d1e:	6878      	ldr	r0, [r7, #4]
 8011d20:	f000 f8b0 	bl	8011e84 <UART_SetConfig>
 8011d24:	4603      	mov	r3, r0
 8011d26:	2b01      	cmp	r3, #1
 8011d28:	d101      	bne.n	8011d2e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8011d2a:	2301      	movs	r3, #1
 8011d2c:	e022      	b.n	8011d74 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d002      	beq.n	8011d3c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8011d36:	6878      	ldr	r0, [r7, #4]
 8011d38:	f000 fb08 	bl	801234c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	685a      	ldr	r2, [r3, #4]
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011d4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	689a      	ldr	r2, [r3, #8]
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011d5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	681a      	ldr	r2, [r3, #0]
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	f042 0201 	orr.w	r2, r2, #1
 8011d6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011d6c:	6878      	ldr	r0, [r7, #4]
 8011d6e:	f000 fb8f 	bl	8012490 <UART_CheckIdleState>
 8011d72:	4603      	mov	r3, r0
}
 8011d74:	4618      	mov	r0, r3
 8011d76:	3708      	adds	r7, #8
 8011d78:	46bd      	mov	sp, r7
 8011d7a:	bd80      	pop	{r7, pc}

08011d7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011d7c:	b580      	push	{r7, lr}
 8011d7e:	b08a      	sub	sp, #40	; 0x28
 8011d80:	af02      	add	r7, sp, #8
 8011d82:	60f8      	str	r0, [r7, #12]
 8011d84:	60b9      	str	r1, [r7, #8]
 8011d86:	603b      	str	r3, [r7, #0]
 8011d88:	4613      	mov	r3, r2
 8011d8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011d90:	2b20      	cmp	r3, #32
 8011d92:	d171      	bne.n	8011e78 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8011d94:	68bb      	ldr	r3, [r7, #8]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d002      	beq.n	8011da0 <HAL_UART_Transmit+0x24>
 8011d9a:	88fb      	ldrh	r3, [r7, #6]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d101      	bne.n	8011da4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8011da0:	2301      	movs	r3, #1
 8011da2:	e06a      	b.n	8011e7a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	2200      	movs	r2, #0
 8011da8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	2221      	movs	r2, #33	; 0x21
 8011db0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8011db2:	f7fd fdbb 	bl	800f92c <HAL_GetTick>
 8011db6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	88fa      	ldrh	r2, [r7, #6]
 8011dbc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	88fa      	ldrh	r2, [r7, #6]
 8011dc4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	689b      	ldr	r3, [r3, #8]
 8011dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011dd0:	d108      	bne.n	8011de4 <HAL_UART_Transmit+0x68>
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	691b      	ldr	r3, [r3, #16]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d104      	bne.n	8011de4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8011dda:	2300      	movs	r3, #0
 8011ddc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8011dde:	68bb      	ldr	r3, [r7, #8]
 8011de0:	61bb      	str	r3, [r7, #24]
 8011de2:	e003      	b.n	8011dec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8011de4:	68bb      	ldr	r3, [r7, #8]
 8011de6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011de8:	2300      	movs	r3, #0
 8011dea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8011dec:	e02c      	b.n	8011e48 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011dee:	683b      	ldr	r3, [r7, #0]
 8011df0:	9300      	str	r3, [sp, #0]
 8011df2:	697b      	ldr	r3, [r7, #20]
 8011df4:	2200      	movs	r2, #0
 8011df6:	2180      	movs	r1, #128	; 0x80
 8011df8:	68f8      	ldr	r0, [r7, #12]
 8011dfa:	f000 fb80 	bl	80124fe <UART_WaitOnFlagUntilTimeout>
 8011dfe:	4603      	mov	r3, r0
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d001      	beq.n	8011e08 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8011e04:	2303      	movs	r3, #3
 8011e06:	e038      	b.n	8011e7a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8011e08:	69fb      	ldr	r3, [r7, #28]
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d10b      	bne.n	8011e26 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8011e0e:	69bb      	ldr	r3, [r7, #24]
 8011e10:	881b      	ldrh	r3, [r3, #0]
 8011e12:	461a      	mov	r2, r3
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011e1c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8011e1e:	69bb      	ldr	r3, [r7, #24]
 8011e20:	3302      	adds	r3, #2
 8011e22:	61bb      	str	r3, [r7, #24]
 8011e24:	e007      	b.n	8011e36 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8011e26:	69fb      	ldr	r3, [r7, #28]
 8011e28:	781a      	ldrb	r2, [r3, #0]
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8011e30:	69fb      	ldr	r3, [r7, #28]
 8011e32:	3301      	adds	r3, #1
 8011e34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8011e3c:	b29b      	uxth	r3, r3
 8011e3e:	3b01      	subs	r3, #1
 8011e40:	b29a      	uxth	r2, r3
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8011e4e:	b29b      	uxth	r3, r3
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d1cc      	bne.n	8011dee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8011e54:	683b      	ldr	r3, [r7, #0]
 8011e56:	9300      	str	r3, [sp, #0]
 8011e58:	697b      	ldr	r3, [r7, #20]
 8011e5a:	2200      	movs	r2, #0
 8011e5c:	2140      	movs	r1, #64	; 0x40
 8011e5e:	68f8      	ldr	r0, [r7, #12]
 8011e60:	f000 fb4d 	bl	80124fe <UART_WaitOnFlagUntilTimeout>
 8011e64:	4603      	mov	r3, r0
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d001      	beq.n	8011e6e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8011e6a:	2303      	movs	r3, #3
 8011e6c:	e005      	b.n	8011e7a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	2220      	movs	r2, #32
 8011e72:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8011e74:	2300      	movs	r3, #0
 8011e76:	e000      	b.n	8011e7a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8011e78:	2302      	movs	r3, #2
  }
}
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	3720      	adds	r7, #32
 8011e7e:	46bd      	mov	sp, r7
 8011e80:	bd80      	pop	{r7, pc}
	...

08011e84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011e84:	b580      	push	{r7, lr}
 8011e86:	b088      	sub	sp, #32
 8011e88:	af00      	add	r7, sp, #0
 8011e8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011e8c:	2300      	movs	r3, #0
 8011e8e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	689a      	ldr	r2, [r3, #8]
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	691b      	ldr	r3, [r3, #16]
 8011e98:	431a      	orrs	r2, r3
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	695b      	ldr	r3, [r3, #20]
 8011e9e:	431a      	orrs	r2, r3
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	69db      	ldr	r3, [r3, #28]
 8011ea4:	4313      	orrs	r3, r2
 8011ea6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	681a      	ldr	r2, [r3, #0]
 8011eae:	4ba6      	ldr	r3, [pc, #664]	; (8012148 <UART_SetConfig+0x2c4>)
 8011eb0:	4013      	ands	r3, r2
 8011eb2:	687a      	ldr	r2, [r7, #4]
 8011eb4:	6812      	ldr	r2, [r2, #0]
 8011eb6:	6979      	ldr	r1, [r7, #20]
 8011eb8:	430b      	orrs	r3, r1
 8011eba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	685b      	ldr	r3, [r3, #4]
 8011ec2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	68da      	ldr	r2, [r3, #12]
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	430a      	orrs	r2, r1
 8011ed0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	699b      	ldr	r3, [r3, #24]
 8011ed6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	6a1b      	ldr	r3, [r3, #32]
 8011edc:	697a      	ldr	r2, [r7, #20]
 8011ede:	4313      	orrs	r3, r2
 8011ee0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	689b      	ldr	r3, [r3, #8]
 8011ee8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	697a      	ldr	r2, [r7, #20]
 8011ef2:	430a      	orrs	r2, r1
 8011ef4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	4a94      	ldr	r2, [pc, #592]	; (801214c <UART_SetConfig+0x2c8>)
 8011efc:	4293      	cmp	r3, r2
 8011efe:	d120      	bne.n	8011f42 <UART_SetConfig+0xbe>
 8011f00:	4b93      	ldr	r3, [pc, #588]	; (8012150 <UART_SetConfig+0x2cc>)
 8011f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011f06:	f003 0303 	and.w	r3, r3, #3
 8011f0a:	2b03      	cmp	r3, #3
 8011f0c:	d816      	bhi.n	8011f3c <UART_SetConfig+0xb8>
 8011f0e:	a201      	add	r2, pc, #4	; (adr r2, 8011f14 <UART_SetConfig+0x90>)
 8011f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f14:	08011f25 	.word	0x08011f25
 8011f18:	08011f31 	.word	0x08011f31
 8011f1c:	08011f2b 	.word	0x08011f2b
 8011f20:	08011f37 	.word	0x08011f37
 8011f24:	2301      	movs	r3, #1
 8011f26:	77fb      	strb	r3, [r7, #31]
 8011f28:	e150      	b.n	80121cc <UART_SetConfig+0x348>
 8011f2a:	2302      	movs	r3, #2
 8011f2c:	77fb      	strb	r3, [r7, #31]
 8011f2e:	e14d      	b.n	80121cc <UART_SetConfig+0x348>
 8011f30:	2304      	movs	r3, #4
 8011f32:	77fb      	strb	r3, [r7, #31]
 8011f34:	e14a      	b.n	80121cc <UART_SetConfig+0x348>
 8011f36:	2308      	movs	r3, #8
 8011f38:	77fb      	strb	r3, [r7, #31]
 8011f3a:	e147      	b.n	80121cc <UART_SetConfig+0x348>
 8011f3c:	2310      	movs	r3, #16
 8011f3e:	77fb      	strb	r3, [r7, #31]
 8011f40:	e144      	b.n	80121cc <UART_SetConfig+0x348>
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	4a83      	ldr	r2, [pc, #524]	; (8012154 <UART_SetConfig+0x2d0>)
 8011f48:	4293      	cmp	r3, r2
 8011f4a:	d132      	bne.n	8011fb2 <UART_SetConfig+0x12e>
 8011f4c:	4b80      	ldr	r3, [pc, #512]	; (8012150 <UART_SetConfig+0x2cc>)
 8011f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011f52:	f003 030c 	and.w	r3, r3, #12
 8011f56:	2b0c      	cmp	r3, #12
 8011f58:	d828      	bhi.n	8011fac <UART_SetConfig+0x128>
 8011f5a:	a201      	add	r2, pc, #4	; (adr r2, 8011f60 <UART_SetConfig+0xdc>)
 8011f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f60:	08011f95 	.word	0x08011f95
 8011f64:	08011fad 	.word	0x08011fad
 8011f68:	08011fad 	.word	0x08011fad
 8011f6c:	08011fad 	.word	0x08011fad
 8011f70:	08011fa1 	.word	0x08011fa1
 8011f74:	08011fad 	.word	0x08011fad
 8011f78:	08011fad 	.word	0x08011fad
 8011f7c:	08011fad 	.word	0x08011fad
 8011f80:	08011f9b 	.word	0x08011f9b
 8011f84:	08011fad 	.word	0x08011fad
 8011f88:	08011fad 	.word	0x08011fad
 8011f8c:	08011fad 	.word	0x08011fad
 8011f90:	08011fa7 	.word	0x08011fa7
 8011f94:	2300      	movs	r3, #0
 8011f96:	77fb      	strb	r3, [r7, #31]
 8011f98:	e118      	b.n	80121cc <UART_SetConfig+0x348>
 8011f9a:	2302      	movs	r3, #2
 8011f9c:	77fb      	strb	r3, [r7, #31]
 8011f9e:	e115      	b.n	80121cc <UART_SetConfig+0x348>
 8011fa0:	2304      	movs	r3, #4
 8011fa2:	77fb      	strb	r3, [r7, #31]
 8011fa4:	e112      	b.n	80121cc <UART_SetConfig+0x348>
 8011fa6:	2308      	movs	r3, #8
 8011fa8:	77fb      	strb	r3, [r7, #31]
 8011faa:	e10f      	b.n	80121cc <UART_SetConfig+0x348>
 8011fac:	2310      	movs	r3, #16
 8011fae:	77fb      	strb	r3, [r7, #31]
 8011fb0:	e10c      	b.n	80121cc <UART_SetConfig+0x348>
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	4a68      	ldr	r2, [pc, #416]	; (8012158 <UART_SetConfig+0x2d4>)
 8011fb8:	4293      	cmp	r3, r2
 8011fba:	d120      	bne.n	8011ffe <UART_SetConfig+0x17a>
 8011fbc:	4b64      	ldr	r3, [pc, #400]	; (8012150 <UART_SetConfig+0x2cc>)
 8011fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011fc2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8011fc6:	2b30      	cmp	r3, #48	; 0x30
 8011fc8:	d013      	beq.n	8011ff2 <UART_SetConfig+0x16e>
 8011fca:	2b30      	cmp	r3, #48	; 0x30
 8011fcc:	d814      	bhi.n	8011ff8 <UART_SetConfig+0x174>
 8011fce:	2b20      	cmp	r3, #32
 8011fd0:	d009      	beq.n	8011fe6 <UART_SetConfig+0x162>
 8011fd2:	2b20      	cmp	r3, #32
 8011fd4:	d810      	bhi.n	8011ff8 <UART_SetConfig+0x174>
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d002      	beq.n	8011fe0 <UART_SetConfig+0x15c>
 8011fda:	2b10      	cmp	r3, #16
 8011fdc:	d006      	beq.n	8011fec <UART_SetConfig+0x168>
 8011fde:	e00b      	b.n	8011ff8 <UART_SetConfig+0x174>
 8011fe0:	2300      	movs	r3, #0
 8011fe2:	77fb      	strb	r3, [r7, #31]
 8011fe4:	e0f2      	b.n	80121cc <UART_SetConfig+0x348>
 8011fe6:	2302      	movs	r3, #2
 8011fe8:	77fb      	strb	r3, [r7, #31]
 8011fea:	e0ef      	b.n	80121cc <UART_SetConfig+0x348>
 8011fec:	2304      	movs	r3, #4
 8011fee:	77fb      	strb	r3, [r7, #31]
 8011ff0:	e0ec      	b.n	80121cc <UART_SetConfig+0x348>
 8011ff2:	2308      	movs	r3, #8
 8011ff4:	77fb      	strb	r3, [r7, #31]
 8011ff6:	e0e9      	b.n	80121cc <UART_SetConfig+0x348>
 8011ff8:	2310      	movs	r3, #16
 8011ffa:	77fb      	strb	r3, [r7, #31]
 8011ffc:	e0e6      	b.n	80121cc <UART_SetConfig+0x348>
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	4a56      	ldr	r2, [pc, #344]	; (801215c <UART_SetConfig+0x2d8>)
 8012004:	4293      	cmp	r3, r2
 8012006:	d120      	bne.n	801204a <UART_SetConfig+0x1c6>
 8012008:	4b51      	ldr	r3, [pc, #324]	; (8012150 <UART_SetConfig+0x2cc>)
 801200a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801200e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8012012:	2bc0      	cmp	r3, #192	; 0xc0
 8012014:	d013      	beq.n	801203e <UART_SetConfig+0x1ba>
 8012016:	2bc0      	cmp	r3, #192	; 0xc0
 8012018:	d814      	bhi.n	8012044 <UART_SetConfig+0x1c0>
 801201a:	2b80      	cmp	r3, #128	; 0x80
 801201c:	d009      	beq.n	8012032 <UART_SetConfig+0x1ae>
 801201e:	2b80      	cmp	r3, #128	; 0x80
 8012020:	d810      	bhi.n	8012044 <UART_SetConfig+0x1c0>
 8012022:	2b00      	cmp	r3, #0
 8012024:	d002      	beq.n	801202c <UART_SetConfig+0x1a8>
 8012026:	2b40      	cmp	r3, #64	; 0x40
 8012028:	d006      	beq.n	8012038 <UART_SetConfig+0x1b4>
 801202a:	e00b      	b.n	8012044 <UART_SetConfig+0x1c0>
 801202c:	2300      	movs	r3, #0
 801202e:	77fb      	strb	r3, [r7, #31]
 8012030:	e0cc      	b.n	80121cc <UART_SetConfig+0x348>
 8012032:	2302      	movs	r3, #2
 8012034:	77fb      	strb	r3, [r7, #31]
 8012036:	e0c9      	b.n	80121cc <UART_SetConfig+0x348>
 8012038:	2304      	movs	r3, #4
 801203a:	77fb      	strb	r3, [r7, #31]
 801203c:	e0c6      	b.n	80121cc <UART_SetConfig+0x348>
 801203e:	2308      	movs	r3, #8
 8012040:	77fb      	strb	r3, [r7, #31]
 8012042:	e0c3      	b.n	80121cc <UART_SetConfig+0x348>
 8012044:	2310      	movs	r3, #16
 8012046:	77fb      	strb	r3, [r7, #31]
 8012048:	e0c0      	b.n	80121cc <UART_SetConfig+0x348>
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	4a44      	ldr	r2, [pc, #272]	; (8012160 <UART_SetConfig+0x2dc>)
 8012050:	4293      	cmp	r3, r2
 8012052:	d125      	bne.n	80120a0 <UART_SetConfig+0x21c>
 8012054:	4b3e      	ldr	r3, [pc, #248]	; (8012150 <UART_SetConfig+0x2cc>)
 8012056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801205a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801205e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012062:	d017      	beq.n	8012094 <UART_SetConfig+0x210>
 8012064:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012068:	d817      	bhi.n	801209a <UART_SetConfig+0x216>
 801206a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801206e:	d00b      	beq.n	8012088 <UART_SetConfig+0x204>
 8012070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012074:	d811      	bhi.n	801209a <UART_SetConfig+0x216>
 8012076:	2b00      	cmp	r3, #0
 8012078:	d003      	beq.n	8012082 <UART_SetConfig+0x1fe>
 801207a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801207e:	d006      	beq.n	801208e <UART_SetConfig+0x20a>
 8012080:	e00b      	b.n	801209a <UART_SetConfig+0x216>
 8012082:	2300      	movs	r3, #0
 8012084:	77fb      	strb	r3, [r7, #31]
 8012086:	e0a1      	b.n	80121cc <UART_SetConfig+0x348>
 8012088:	2302      	movs	r3, #2
 801208a:	77fb      	strb	r3, [r7, #31]
 801208c:	e09e      	b.n	80121cc <UART_SetConfig+0x348>
 801208e:	2304      	movs	r3, #4
 8012090:	77fb      	strb	r3, [r7, #31]
 8012092:	e09b      	b.n	80121cc <UART_SetConfig+0x348>
 8012094:	2308      	movs	r3, #8
 8012096:	77fb      	strb	r3, [r7, #31]
 8012098:	e098      	b.n	80121cc <UART_SetConfig+0x348>
 801209a:	2310      	movs	r3, #16
 801209c:	77fb      	strb	r3, [r7, #31]
 801209e:	e095      	b.n	80121cc <UART_SetConfig+0x348>
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	4a2f      	ldr	r2, [pc, #188]	; (8012164 <UART_SetConfig+0x2e0>)
 80120a6:	4293      	cmp	r3, r2
 80120a8:	d125      	bne.n	80120f6 <UART_SetConfig+0x272>
 80120aa:	4b29      	ldr	r3, [pc, #164]	; (8012150 <UART_SetConfig+0x2cc>)
 80120ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80120b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80120b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80120b8:	d017      	beq.n	80120ea <UART_SetConfig+0x266>
 80120ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80120be:	d817      	bhi.n	80120f0 <UART_SetConfig+0x26c>
 80120c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80120c4:	d00b      	beq.n	80120de <UART_SetConfig+0x25a>
 80120c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80120ca:	d811      	bhi.n	80120f0 <UART_SetConfig+0x26c>
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d003      	beq.n	80120d8 <UART_SetConfig+0x254>
 80120d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80120d4:	d006      	beq.n	80120e4 <UART_SetConfig+0x260>
 80120d6:	e00b      	b.n	80120f0 <UART_SetConfig+0x26c>
 80120d8:	2301      	movs	r3, #1
 80120da:	77fb      	strb	r3, [r7, #31]
 80120dc:	e076      	b.n	80121cc <UART_SetConfig+0x348>
 80120de:	2302      	movs	r3, #2
 80120e0:	77fb      	strb	r3, [r7, #31]
 80120e2:	e073      	b.n	80121cc <UART_SetConfig+0x348>
 80120e4:	2304      	movs	r3, #4
 80120e6:	77fb      	strb	r3, [r7, #31]
 80120e8:	e070      	b.n	80121cc <UART_SetConfig+0x348>
 80120ea:	2308      	movs	r3, #8
 80120ec:	77fb      	strb	r3, [r7, #31]
 80120ee:	e06d      	b.n	80121cc <UART_SetConfig+0x348>
 80120f0:	2310      	movs	r3, #16
 80120f2:	77fb      	strb	r3, [r7, #31]
 80120f4:	e06a      	b.n	80121cc <UART_SetConfig+0x348>
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	4a1b      	ldr	r2, [pc, #108]	; (8012168 <UART_SetConfig+0x2e4>)
 80120fc:	4293      	cmp	r3, r2
 80120fe:	d138      	bne.n	8012172 <UART_SetConfig+0x2ee>
 8012100:	4b13      	ldr	r3, [pc, #76]	; (8012150 <UART_SetConfig+0x2cc>)
 8012102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012106:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 801210a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801210e:	d017      	beq.n	8012140 <UART_SetConfig+0x2bc>
 8012110:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8012114:	d82a      	bhi.n	801216c <UART_SetConfig+0x2e8>
 8012116:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801211a:	d00b      	beq.n	8012134 <UART_SetConfig+0x2b0>
 801211c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012120:	d824      	bhi.n	801216c <UART_SetConfig+0x2e8>
 8012122:	2b00      	cmp	r3, #0
 8012124:	d003      	beq.n	801212e <UART_SetConfig+0x2aa>
 8012126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801212a:	d006      	beq.n	801213a <UART_SetConfig+0x2b6>
 801212c:	e01e      	b.n	801216c <UART_SetConfig+0x2e8>
 801212e:	2300      	movs	r3, #0
 8012130:	77fb      	strb	r3, [r7, #31]
 8012132:	e04b      	b.n	80121cc <UART_SetConfig+0x348>
 8012134:	2302      	movs	r3, #2
 8012136:	77fb      	strb	r3, [r7, #31]
 8012138:	e048      	b.n	80121cc <UART_SetConfig+0x348>
 801213a:	2304      	movs	r3, #4
 801213c:	77fb      	strb	r3, [r7, #31]
 801213e:	e045      	b.n	80121cc <UART_SetConfig+0x348>
 8012140:	2308      	movs	r3, #8
 8012142:	77fb      	strb	r3, [r7, #31]
 8012144:	e042      	b.n	80121cc <UART_SetConfig+0x348>
 8012146:	bf00      	nop
 8012148:	efff69f3 	.word	0xefff69f3
 801214c:	40011000 	.word	0x40011000
 8012150:	40023800 	.word	0x40023800
 8012154:	40004400 	.word	0x40004400
 8012158:	40004800 	.word	0x40004800
 801215c:	40004c00 	.word	0x40004c00
 8012160:	40005000 	.word	0x40005000
 8012164:	40011400 	.word	0x40011400
 8012168:	40007800 	.word	0x40007800
 801216c:	2310      	movs	r3, #16
 801216e:	77fb      	strb	r3, [r7, #31]
 8012170:	e02c      	b.n	80121cc <UART_SetConfig+0x348>
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	4a72      	ldr	r2, [pc, #456]	; (8012340 <UART_SetConfig+0x4bc>)
 8012178:	4293      	cmp	r3, r2
 801217a:	d125      	bne.n	80121c8 <UART_SetConfig+0x344>
 801217c:	4b71      	ldr	r3, [pc, #452]	; (8012344 <UART_SetConfig+0x4c0>)
 801217e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012182:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8012186:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801218a:	d017      	beq.n	80121bc <UART_SetConfig+0x338>
 801218c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8012190:	d817      	bhi.n	80121c2 <UART_SetConfig+0x33e>
 8012192:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012196:	d00b      	beq.n	80121b0 <UART_SetConfig+0x32c>
 8012198:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801219c:	d811      	bhi.n	80121c2 <UART_SetConfig+0x33e>
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d003      	beq.n	80121aa <UART_SetConfig+0x326>
 80121a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80121a6:	d006      	beq.n	80121b6 <UART_SetConfig+0x332>
 80121a8:	e00b      	b.n	80121c2 <UART_SetConfig+0x33e>
 80121aa:	2300      	movs	r3, #0
 80121ac:	77fb      	strb	r3, [r7, #31]
 80121ae:	e00d      	b.n	80121cc <UART_SetConfig+0x348>
 80121b0:	2302      	movs	r3, #2
 80121b2:	77fb      	strb	r3, [r7, #31]
 80121b4:	e00a      	b.n	80121cc <UART_SetConfig+0x348>
 80121b6:	2304      	movs	r3, #4
 80121b8:	77fb      	strb	r3, [r7, #31]
 80121ba:	e007      	b.n	80121cc <UART_SetConfig+0x348>
 80121bc:	2308      	movs	r3, #8
 80121be:	77fb      	strb	r3, [r7, #31]
 80121c0:	e004      	b.n	80121cc <UART_SetConfig+0x348>
 80121c2:	2310      	movs	r3, #16
 80121c4:	77fb      	strb	r3, [r7, #31]
 80121c6:	e001      	b.n	80121cc <UART_SetConfig+0x348>
 80121c8:	2310      	movs	r3, #16
 80121ca:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	69db      	ldr	r3, [r3, #28]
 80121d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80121d4:	d15b      	bne.n	801228e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80121d6:	7ffb      	ldrb	r3, [r7, #31]
 80121d8:	2b08      	cmp	r3, #8
 80121da:	d828      	bhi.n	801222e <UART_SetConfig+0x3aa>
 80121dc:	a201      	add	r2, pc, #4	; (adr r2, 80121e4 <UART_SetConfig+0x360>)
 80121de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121e2:	bf00      	nop
 80121e4:	08012209 	.word	0x08012209
 80121e8:	08012211 	.word	0x08012211
 80121ec:	08012219 	.word	0x08012219
 80121f0:	0801222f 	.word	0x0801222f
 80121f4:	0801221f 	.word	0x0801221f
 80121f8:	0801222f 	.word	0x0801222f
 80121fc:	0801222f 	.word	0x0801222f
 8012200:	0801222f 	.word	0x0801222f
 8012204:	08012227 	.word	0x08012227
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012208:	f7fe fe40 	bl	8010e8c <HAL_RCC_GetPCLK1Freq>
 801220c:	61b8      	str	r0, [r7, #24]
        break;
 801220e:	e013      	b.n	8012238 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012210:	f7fe fe50 	bl	8010eb4 <HAL_RCC_GetPCLK2Freq>
 8012214:	61b8      	str	r0, [r7, #24]
        break;
 8012216:	e00f      	b.n	8012238 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8012218:	4b4b      	ldr	r3, [pc, #300]	; (8012348 <UART_SetConfig+0x4c4>)
 801221a:	61bb      	str	r3, [r7, #24]
        break;
 801221c:	e00c      	b.n	8012238 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801221e:	f7fe fd63 	bl	8010ce8 <HAL_RCC_GetSysClockFreq>
 8012222:	61b8      	str	r0, [r7, #24]
        break;
 8012224:	e008      	b.n	8012238 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801222a:	61bb      	str	r3, [r7, #24]
        break;
 801222c:	e004      	b.n	8012238 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 801222e:	2300      	movs	r3, #0
 8012230:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8012232:	2301      	movs	r3, #1
 8012234:	77bb      	strb	r3, [r7, #30]
        break;
 8012236:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8012238:	69bb      	ldr	r3, [r7, #24]
 801223a:	2b00      	cmp	r3, #0
 801223c:	d074      	beq.n	8012328 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801223e:	69bb      	ldr	r3, [r7, #24]
 8012240:	005a      	lsls	r2, r3, #1
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	685b      	ldr	r3, [r3, #4]
 8012246:	085b      	lsrs	r3, r3, #1
 8012248:	441a      	add	r2, r3
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	685b      	ldr	r3, [r3, #4]
 801224e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012252:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012254:	693b      	ldr	r3, [r7, #16]
 8012256:	2b0f      	cmp	r3, #15
 8012258:	d916      	bls.n	8012288 <UART_SetConfig+0x404>
 801225a:	693b      	ldr	r3, [r7, #16]
 801225c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012260:	d212      	bcs.n	8012288 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012262:	693b      	ldr	r3, [r7, #16]
 8012264:	b29b      	uxth	r3, r3
 8012266:	f023 030f 	bic.w	r3, r3, #15
 801226a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801226c:	693b      	ldr	r3, [r7, #16]
 801226e:	085b      	lsrs	r3, r3, #1
 8012270:	b29b      	uxth	r3, r3
 8012272:	f003 0307 	and.w	r3, r3, #7
 8012276:	b29a      	uxth	r2, r3
 8012278:	89fb      	ldrh	r3, [r7, #14]
 801227a:	4313      	orrs	r3, r2
 801227c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	89fa      	ldrh	r2, [r7, #14]
 8012284:	60da      	str	r2, [r3, #12]
 8012286:	e04f      	b.n	8012328 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8012288:	2301      	movs	r3, #1
 801228a:	77bb      	strb	r3, [r7, #30]
 801228c:	e04c      	b.n	8012328 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 801228e:	7ffb      	ldrb	r3, [r7, #31]
 8012290:	2b08      	cmp	r3, #8
 8012292:	d828      	bhi.n	80122e6 <UART_SetConfig+0x462>
 8012294:	a201      	add	r2, pc, #4	; (adr r2, 801229c <UART_SetConfig+0x418>)
 8012296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801229a:	bf00      	nop
 801229c:	080122c1 	.word	0x080122c1
 80122a0:	080122c9 	.word	0x080122c9
 80122a4:	080122d1 	.word	0x080122d1
 80122a8:	080122e7 	.word	0x080122e7
 80122ac:	080122d7 	.word	0x080122d7
 80122b0:	080122e7 	.word	0x080122e7
 80122b4:	080122e7 	.word	0x080122e7
 80122b8:	080122e7 	.word	0x080122e7
 80122bc:	080122df 	.word	0x080122df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80122c0:	f7fe fde4 	bl	8010e8c <HAL_RCC_GetPCLK1Freq>
 80122c4:	61b8      	str	r0, [r7, #24]
        break;
 80122c6:	e013      	b.n	80122f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80122c8:	f7fe fdf4 	bl	8010eb4 <HAL_RCC_GetPCLK2Freq>
 80122cc:	61b8      	str	r0, [r7, #24]
        break;
 80122ce:	e00f      	b.n	80122f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80122d0:	4b1d      	ldr	r3, [pc, #116]	; (8012348 <UART_SetConfig+0x4c4>)
 80122d2:	61bb      	str	r3, [r7, #24]
        break;
 80122d4:	e00c      	b.n	80122f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80122d6:	f7fe fd07 	bl	8010ce8 <HAL_RCC_GetSysClockFreq>
 80122da:	61b8      	str	r0, [r7, #24]
        break;
 80122dc:	e008      	b.n	80122f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80122de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80122e2:	61bb      	str	r3, [r7, #24]
        break;
 80122e4:	e004      	b.n	80122f0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80122e6:	2300      	movs	r3, #0
 80122e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80122ea:	2301      	movs	r3, #1
 80122ec:	77bb      	strb	r3, [r7, #30]
        break;
 80122ee:	bf00      	nop
    }

    if (pclk != 0U)
 80122f0:	69bb      	ldr	r3, [r7, #24]
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d018      	beq.n	8012328 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	685b      	ldr	r3, [r3, #4]
 80122fa:	085a      	lsrs	r2, r3, #1
 80122fc:	69bb      	ldr	r3, [r7, #24]
 80122fe:	441a      	add	r2, r3
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	685b      	ldr	r3, [r3, #4]
 8012304:	fbb2 f3f3 	udiv	r3, r2, r3
 8012308:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801230a:	693b      	ldr	r3, [r7, #16]
 801230c:	2b0f      	cmp	r3, #15
 801230e:	d909      	bls.n	8012324 <UART_SetConfig+0x4a0>
 8012310:	693b      	ldr	r3, [r7, #16]
 8012312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012316:	d205      	bcs.n	8012324 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8012318:	693b      	ldr	r3, [r7, #16]
 801231a:	b29a      	uxth	r2, r3
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	60da      	str	r2, [r3, #12]
 8012322:	e001      	b.n	8012328 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8012324:	2301      	movs	r3, #1
 8012326:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	2200      	movs	r2, #0
 801232c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	2200      	movs	r2, #0
 8012332:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8012334:	7fbb      	ldrb	r3, [r7, #30]
}
 8012336:	4618      	mov	r0, r3
 8012338:	3720      	adds	r7, #32
 801233a:	46bd      	mov	sp, r7
 801233c:	bd80      	pop	{r7, pc}
 801233e:	bf00      	nop
 8012340:	40007c00 	.word	0x40007c00
 8012344:	40023800 	.word	0x40023800
 8012348:	00f42400 	.word	0x00f42400

0801234c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801234c:	b480      	push	{r7}
 801234e:	b083      	sub	sp, #12
 8012350:	af00      	add	r7, sp, #0
 8012352:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012358:	f003 0301 	and.w	r3, r3, #1
 801235c:	2b00      	cmp	r3, #0
 801235e:	d00a      	beq.n	8012376 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	685b      	ldr	r3, [r3, #4]
 8012366:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	430a      	orrs	r2, r1
 8012374:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801237a:	f003 0302 	and.w	r3, r3, #2
 801237e:	2b00      	cmp	r3, #0
 8012380:	d00a      	beq.n	8012398 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	685b      	ldr	r3, [r3, #4]
 8012388:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	430a      	orrs	r2, r1
 8012396:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801239c:	f003 0304 	and.w	r3, r3, #4
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d00a      	beq.n	80123ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	685b      	ldr	r3, [r3, #4]
 80123aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	430a      	orrs	r2, r1
 80123b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123be:	f003 0308 	and.w	r3, r3, #8
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d00a      	beq.n	80123dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	685b      	ldr	r3, [r3, #4]
 80123cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	430a      	orrs	r2, r1
 80123da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123e0:	f003 0310 	and.w	r3, r3, #16
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d00a      	beq.n	80123fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	689b      	ldr	r3, [r3, #8]
 80123ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	430a      	orrs	r2, r1
 80123fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012402:	f003 0320 	and.w	r3, r3, #32
 8012406:	2b00      	cmp	r3, #0
 8012408:	d00a      	beq.n	8012420 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	689b      	ldr	r3, [r3, #8]
 8012410:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	430a      	orrs	r2, r1
 801241e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012428:	2b00      	cmp	r3, #0
 801242a:	d01a      	beq.n	8012462 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	685b      	ldr	r3, [r3, #4]
 8012432:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	430a      	orrs	r2, r1
 8012440:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012446:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801244a:	d10a      	bne.n	8012462 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	685b      	ldr	r3, [r3, #4]
 8012452:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	430a      	orrs	r2, r1
 8012460:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801246a:	2b00      	cmp	r3, #0
 801246c:	d00a      	beq.n	8012484 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	685b      	ldr	r3, [r3, #4]
 8012474:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	430a      	orrs	r2, r1
 8012482:	605a      	str	r2, [r3, #4]
  }
}
 8012484:	bf00      	nop
 8012486:	370c      	adds	r7, #12
 8012488:	46bd      	mov	sp, r7
 801248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801248e:	4770      	bx	lr

08012490 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012490:	b580      	push	{r7, lr}
 8012492:	b086      	sub	sp, #24
 8012494:	af02      	add	r7, sp, #8
 8012496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	2200      	movs	r2, #0
 801249c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80124a0:	f7fd fa44 	bl	800f92c <HAL_GetTick>
 80124a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	f003 0308 	and.w	r3, r3, #8
 80124b0:	2b08      	cmp	r3, #8
 80124b2:	d10e      	bne.n	80124d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80124b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80124b8:	9300      	str	r3, [sp, #0]
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	2200      	movs	r2, #0
 80124be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80124c2:	6878      	ldr	r0, [r7, #4]
 80124c4:	f000 f81b 	bl	80124fe <UART_WaitOnFlagUntilTimeout>
 80124c8:	4603      	mov	r3, r0
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d001      	beq.n	80124d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80124ce:	2303      	movs	r3, #3
 80124d0:	e011      	b.n	80124f6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	2220      	movs	r2, #32
 80124d6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	2220      	movs	r2, #32
 80124dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	2200      	movs	r2, #0
 80124e4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	2200      	movs	r2, #0
 80124ea:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	2200      	movs	r2, #0
 80124f0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80124f4:	2300      	movs	r3, #0
}
 80124f6:	4618      	mov	r0, r3
 80124f8:	3710      	adds	r7, #16
 80124fa:	46bd      	mov	sp, r7
 80124fc:	bd80      	pop	{r7, pc}

080124fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80124fe:	b580      	push	{r7, lr}
 8012500:	b09c      	sub	sp, #112	; 0x70
 8012502:	af00      	add	r7, sp, #0
 8012504:	60f8      	str	r0, [r7, #12]
 8012506:	60b9      	str	r1, [r7, #8]
 8012508:	603b      	str	r3, [r7, #0]
 801250a:	4613      	mov	r3, r2
 801250c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801250e:	e0a7      	b.n	8012660 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012510:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012516:	f000 80a3 	beq.w	8012660 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801251a:	f7fd fa07 	bl	800f92c <HAL_GetTick>
 801251e:	4602      	mov	r2, r0
 8012520:	683b      	ldr	r3, [r7, #0]
 8012522:	1ad3      	subs	r3, r2, r3
 8012524:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012526:	429a      	cmp	r2, r3
 8012528:	d302      	bcc.n	8012530 <UART_WaitOnFlagUntilTimeout+0x32>
 801252a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801252c:	2b00      	cmp	r3, #0
 801252e:	d13f      	bne.n	80125b0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012536:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012538:	e853 3f00 	ldrex	r3, [r3]
 801253c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801253e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012540:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8012544:	667b      	str	r3, [r7, #100]	; 0x64
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	461a      	mov	r2, r3
 801254c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801254e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012550:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012552:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012554:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012556:	e841 2300 	strex	r3, r2, [r1]
 801255a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801255c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801255e:	2b00      	cmp	r3, #0
 8012560:	d1e6      	bne.n	8012530 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	3308      	adds	r3, #8
 8012568:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801256a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801256c:	e853 3f00 	ldrex	r3, [r3]
 8012570:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012574:	f023 0301 	bic.w	r3, r3, #1
 8012578:	663b      	str	r3, [r7, #96]	; 0x60
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	3308      	adds	r3, #8
 8012580:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012582:	64ba      	str	r2, [r7, #72]	; 0x48
 8012584:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012586:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012588:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801258a:	e841 2300 	strex	r3, r2, [r1]
 801258e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8012590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012592:	2b00      	cmp	r3, #0
 8012594:	d1e5      	bne.n	8012562 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	2220      	movs	r2, #32
 801259a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	2220      	movs	r2, #32
 80125a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	2200      	movs	r2, #0
 80125a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80125ac:	2303      	movs	r3, #3
 80125ae:	e068      	b.n	8012682 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	f003 0304 	and.w	r3, r3, #4
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d050      	beq.n	8012660 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	69db      	ldr	r3, [r3, #28]
 80125c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80125c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80125cc:	d148      	bne.n	8012660 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80125d6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125e0:	e853 3f00 	ldrex	r3, [r3]
 80125e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80125e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80125ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	461a      	mov	r2, r3
 80125f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80125f6:	637b      	str	r3, [r7, #52]	; 0x34
 80125f8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80125fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80125fe:	e841 2300 	strex	r3, r2, [r1]
 8012602:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8012604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012606:	2b00      	cmp	r3, #0
 8012608:	d1e6      	bne.n	80125d8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	3308      	adds	r3, #8
 8012610:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012612:	697b      	ldr	r3, [r7, #20]
 8012614:	e853 3f00 	ldrex	r3, [r3]
 8012618:	613b      	str	r3, [r7, #16]
   return(result);
 801261a:	693b      	ldr	r3, [r7, #16]
 801261c:	f023 0301 	bic.w	r3, r3, #1
 8012620:	66bb      	str	r3, [r7, #104]	; 0x68
 8012622:	68fb      	ldr	r3, [r7, #12]
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	3308      	adds	r3, #8
 8012628:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801262a:	623a      	str	r2, [r7, #32]
 801262c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801262e:	69f9      	ldr	r1, [r7, #28]
 8012630:	6a3a      	ldr	r2, [r7, #32]
 8012632:	e841 2300 	strex	r3, r2, [r1]
 8012636:	61bb      	str	r3, [r7, #24]
   return(result);
 8012638:	69bb      	ldr	r3, [r7, #24]
 801263a:	2b00      	cmp	r3, #0
 801263c:	d1e5      	bne.n	801260a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	2220      	movs	r2, #32
 8012642:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	2220      	movs	r2, #32
 8012648:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	2220      	movs	r2, #32
 8012650:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	2200      	movs	r2, #0
 8012658:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 801265c:	2303      	movs	r3, #3
 801265e:	e010      	b.n	8012682 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	69da      	ldr	r2, [r3, #28]
 8012666:	68bb      	ldr	r3, [r7, #8]
 8012668:	4013      	ands	r3, r2
 801266a:	68ba      	ldr	r2, [r7, #8]
 801266c:	429a      	cmp	r2, r3
 801266e:	bf0c      	ite	eq
 8012670:	2301      	moveq	r3, #1
 8012672:	2300      	movne	r3, #0
 8012674:	b2db      	uxtb	r3, r3
 8012676:	461a      	mov	r2, r3
 8012678:	79fb      	ldrb	r3, [r7, #7]
 801267a:	429a      	cmp	r2, r3
 801267c:	f43f af48 	beq.w	8012510 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012680:	2300      	movs	r3, #0
}
 8012682:	4618      	mov	r0, r3
 8012684:	3770      	adds	r7, #112	; 0x70
 8012686:	46bd      	mov	sp, r7
 8012688:	bd80      	pop	{r7, pc}

0801268a <atoi>:
 801268a:	220a      	movs	r2, #10
 801268c:	2100      	movs	r1, #0
 801268e:	f000 bb15 	b.w	8012cbc <strtol>
	...

08012694 <calloc>:
 8012694:	4b02      	ldr	r3, [pc, #8]	; (80126a0 <calloc+0xc>)
 8012696:	460a      	mov	r2, r1
 8012698:	4601      	mov	r1, r0
 801269a:	6818      	ldr	r0, [r3, #0]
 801269c:	f000 b87c 	b.w	8012798 <_calloc_r>
 80126a0:	20000290 	.word	0x20000290

080126a4 <__errno>:
 80126a4:	4b01      	ldr	r3, [pc, #4]	; (80126ac <__errno+0x8>)
 80126a6:	6818      	ldr	r0, [r3, #0]
 80126a8:	4770      	bx	lr
 80126aa:	bf00      	nop
 80126ac:	20000290 	.word	0x20000290

080126b0 <__libc_init_array>:
 80126b0:	b570      	push	{r4, r5, r6, lr}
 80126b2:	4d0d      	ldr	r5, [pc, #52]	; (80126e8 <__libc_init_array+0x38>)
 80126b4:	4c0d      	ldr	r4, [pc, #52]	; (80126ec <__libc_init_array+0x3c>)
 80126b6:	1b64      	subs	r4, r4, r5
 80126b8:	10a4      	asrs	r4, r4, #2
 80126ba:	2600      	movs	r6, #0
 80126bc:	42a6      	cmp	r6, r4
 80126be:	d109      	bne.n	80126d4 <__libc_init_array+0x24>
 80126c0:	4d0b      	ldr	r5, [pc, #44]	; (80126f0 <__libc_init_array+0x40>)
 80126c2:	4c0c      	ldr	r4, [pc, #48]	; (80126f4 <__libc_init_array+0x44>)
 80126c4:	f001 fa0a 	bl	8013adc <_init>
 80126c8:	1b64      	subs	r4, r4, r5
 80126ca:	10a4      	asrs	r4, r4, #2
 80126cc:	2600      	movs	r6, #0
 80126ce:	42a6      	cmp	r6, r4
 80126d0:	d105      	bne.n	80126de <__libc_init_array+0x2e>
 80126d2:	bd70      	pop	{r4, r5, r6, pc}
 80126d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80126d8:	4798      	blx	r3
 80126da:	3601      	adds	r6, #1
 80126dc:	e7ee      	b.n	80126bc <__libc_init_array+0xc>
 80126de:	f855 3b04 	ldr.w	r3, [r5], #4
 80126e2:	4798      	blx	r3
 80126e4:	3601      	adds	r6, #1
 80126e6:	e7f2      	b.n	80126ce <__libc_init_array+0x1e>
 80126e8:	0801de04 	.word	0x0801de04
 80126ec:	0801de04 	.word	0x0801de04
 80126f0:	0801de04 	.word	0x0801de04
 80126f4:	0801de08 	.word	0x0801de08

080126f8 <malloc>:
 80126f8:	4b02      	ldr	r3, [pc, #8]	; (8012704 <malloc+0xc>)
 80126fa:	4601      	mov	r1, r0
 80126fc:	6818      	ldr	r0, [r3, #0]
 80126fe:	f000 b8cd 	b.w	801289c <_malloc_r>
 8012702:	bf00      	nop
 8012704:	20000290 	.word	0x20000290

08012708 <free>:
 8012708:	4b02      	ldr	r3, [pc, #8]	; (8012714 <free+0xc>)
 801270a:	4601      	mov	r1, r0
 801270c:	6818      	ldr	r0, [r3, #0]
 801270e:	f000 b859 	b.w	80127c4 <_free_r>
 8012712:	bf00      	nop
 8012714:	20000290 	.word	0x20000290

08012718 <memcmp>:
 8012718:	b510      	push	{r4, lr}
 801271a:	3901      	subs	r1, #1
 801271c:	4402      	add	r2, r0
 801271e:	4290      	cmp	r0, r2
 8012720:	d101      	bne.n	8012726 <memcmp+0xe>
 8012722:	2000      	movs	r0, #0
 8012724:	e005      	b.n	8012732 <memcmp+0x1a>
 8012726:	7803      	ldrb	r3, [r0, #0]
 8012728:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801272c:	42a3      	cmp	r3, r4
 801272e:	d001      	beq.n	8012734 <memcmp+0x1c>
 8012730:	1b18      	subs	r0, r3, r4
 8012732:	bd10      	pop	{r4, pc}
 8012734:	3001      	adds	r0, #1
 8012736:	e7f2      	b.n	801271e <memcmp+0x6>

08012738 <memcpy>:
 8012738:	440a      	add	r2, r1
 801273a:	4291      	cmp	r1, r2
 801273c:	f100 33ff 	add.w	r3, r0, #4294967295
 8012740:	d100      	bne.n	8012744 <memcpy+0xc>
 8012742:	4770      	bx	lr
 8012744:	b510      	push	{r4, lr}
 8012746:	f811 4b01 	ldrb.w	r4, [r1], #1
 801274a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801274e:	4291      	cmp	r1, r2
 8012750:	d1f9      	bne.n	8012746 <memcpy+0xe>
 8012752:	bd10      	pop	{r4, pc}

08012754 <memmove>:
 8012754:	4288      	cmp	r0, r1
 8012756:	b510      	push	{r4, lr}
 8012758:	eb01 0402 	add.w	r4, r1, r2
 801275c:	d902      	bls.n	8012764 <memmove+0x10>
 801275e:	4284      	cmp	r4, r0
 8012760:	4623      	mov	r3, r4
 8012762:	d807      	bhi.n	8012774 <memmove+0x20>
 8012764:	1e43      	subs	r3, r0, #1
 8012766:	42a1      	cmp	r1, r4
 8012768:	d008      	beq.n	801277c <memmove+0x28>
 801276a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801276e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012772:	e7f8      	b.n	8012766 <memmove+0x12>
 8012774:	4402      	add	r2, r0
 8012776:	4601      	mov	r1, r0
 8012778:	428a      	cmp	r2, r1
 801277a:	d100      	bne.n	801277e <memmove+0x2a>
 801277c:	bd10      	pop	{r4, pc}
 801277e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012782:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012786:	e7f7      	b.n	8012778 <memmove+0x24>

08012788 <memset>:
 8012788:	4402      	add	r2, r0
 801278a:	4603      	mov	r3, r0
 801278c:	4293      	cmp	r3, r2
 801278e:	d100      	bne.n	8012792 <memset+0xa>
 8012790:	4770      	bx	lr
 8012792:	f803 1b01 	strb.w	r1, [r3], #1
 8012796:	e7f9      	b.n	801278c <memset+0x4>

08012798 <_calloc_r>:
 8012798:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801279a:	fba1 2402 	umull	r2, r4, r1, r2
 801279e:	b94c      	cbnz	r4, 80127b4 <_calloc_r+0x1c>
 80127a0:	4611      	mov	r1, r2
 80127a2:	9201      	str	r2, [sp, #4]
 80127a4:	f000 f87a 	bl	801289c <_malloc_r>
 80127a8:	9a01      	ldr	r2, [sp, #4]
 80127aa:	4605      	mov	r5, r0
 80127ac:	b930      	cbnz	r0, 80127bc <_calloc_r+0x24>
 80127ae:	4628      	mov	r0, r5
 80127b0:	b003      	add	sp, #12
 80127b2:	bd30      	pop	{r4, r5, pc}
 80127b4:	220c      	movs	r2, #12
 80127b6:	6002      	str	r2, [r0, #0]
 80127b8:	2500      	movs	r5, #0
 80127ba:	e7f8      	b.n	80127ae <_calloc_r+0x16>
 80127bc:	4621      	mov	r1, r4
 80127be:	f7ff ffe3 	bl	8012788 <memset>
 80127c2:	e7f4      	b.n	80127ae <_calloc_r+0x16>

080127c4 <_free_r>:
 80127c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80127c6:	2900      	cmp	r1, #0
 80127c8:	d044      	beq.n	8012854 <_free_r+0x90>
 80127ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80127ce:	9001      	str	r0, [sp, #4]
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	f1a1 0404 	sub.w	r4, r1, #4
 80127d6:	bfb8      	it	lt
 80127d8:	18e4      	addlt	r4, r4, r3
 80127da:	f000 fbd5 	bl	8012f88 <__malloc_lock>
 80127de:	4a1e      	ldr	r2, [pc, #120]	; (8012858 <_free_r+0x94>)
 80127e0:	9801      	ldr	r0, [sp, #4]
 80127e2:	6813      	ldr	r3, [r2, #0]
 80127e4:	b933      	cbnz	r3, 80127f4 <_free_r+0x30>
 80127e6:	6063      	str	r3, [r4, #4]
 80127e8:	6014      	str	r4, [r2, #0]
 80127ea:	b003      	add	sp, #12
 80127ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80127f0:	f000 bbd0 	b.w	8012f94 <__malloc_unlock>
 80127f4:	42a3      	cmp	r3, r4
 80127f6:	d908      	bls.n	801280a <_free_r+0x46>
 80127f8:	6825      	ldr	r5, [r4, #0]
 80127fa:	1961      	adds	r1, r4, r5
 80127fc:	428b      	cmp	r3, r1
 80127fe:	bf01      	itttt	eq
 8012800:	6819      	ldreq	r1, [r3, #0]
 8012802:	685b      	ldreq	r3, [r3, #4]
 8012804:	1949      	addeq	r1, r1, r5
 8012806:	6021      	streq	r1, [r4, #0]
 8012808:	e7ed      	b.n	80127e6 <_free_r+0x22>
 801280a:	461a      	mov	r2, r3
 801280c:	685b      	ldr	r3, [r3, #4]
 801280e:	b10b      	cbz	r3, 8012814 <_free_r+0x50>
 8012810:	42a3      	cmp	r3, r4
 8012812:	d9fa      	bls.n	801280a <_free_r+0x46>
 8012814:	6811      	ldr	r1, [r2, #0]
 8012816:	1855      	adds	r5, r2, r1
 8012818:	42a5      	cmp	r5, r4
 801281a:	d10b      	bne.n	8012834 <_free_r+0x70>
 801281c:	6824      	ldr	r4, [r4, #0]
 801281e:	4421      	add	r1, r4
 8012820:	1854      	adds	r4, r2, r1
 8012822:	42a3      	cmp	r3, r4
 8012824:	6011      	str	r1, [r2, #0]
 8012826:	d1e0      	bne.n	80127ea <_free_r+0x26>
 8012828:	681c      	ldr	r4, [r3, #0]
 801282a:	685b      	ldr	r3, [r3, #4]
 801282c:	6053      	str	r3, [r2, #4]
 801282e:	4421      	add	r1, r4
 8012830:	6011      	str	r1, [r2, #0]
 8012832:	e7da      	b.n	80127ea <_free_r+0x26>
 8012834:	d902      	bls.n	801283c <_free_r+0x78>
 8012836:	230c      	movs	r3, #12
 8012838:	6003      	str	r3, [r0, #0]
 801283a:	e7d6      	b.n	80127ea <_free_r+0x26>
 801283c:	6825      	ldr	r5, [r4, #0]
 801283e:	1961      	adds	r1, r4, r5
 8012840:	428b      	cmp	r3, r1
 8012842:	bf04      	itt	eq
 8012844:	6819      	ldreq	r1, [r3, #0]
 8012846:	685b      	ldreq	r3, [r3, #4]
 8012848:	6063      	str	r3, [r4, #4]
 801284a:	bf04      	itt	eq
 801284c:	1949      	addeq	r1, r1, r5
 801284e:	6021      	streq	r1, [r4, #0]
 8012850:	6054      	str	r4, [r2, #4]
 8012852:	e7ca      	b.n	80127ea <_free_r+0x26>
 8012854:	b003      	add	sp, #12
 8012856:	bd30      	pop	{r4, r5, pc}
 8012858:	200036f4 	.word	0x200036f4

0801285c <sbrk_aligned>:
 801285c:	b570      	push	{r4, r5, r6, lr}
 801285e:	4e0e      	ldr	r6, [pc, #56]	; (8012898 <sbrk_aligned+0x3c>)
 8012860:	460c      	mov	r4, r1
 8012862:	6831      	ldr	r1, [r6, #0]
 8012864:	4605      	mov	r5, r0
 8012866:	b911      	cbnz	r1, 801286e <sbrk_aligned+0x12>
 8012868:	f000 f8f8 	bl	8012a5c <_sbrk_r>
 801286c:	6030      	str	r0, [r6, #0]
 801286e:	4621      	mov	r1, r4
 8012870:	4628      	mov	r0, r5
 8012872:	f000 f8f3 	bl	8012a5c <_sbrk_r>
 8012876:	1c43      	adds	r3, r0, #1
 8012878:	d00a      	beq.n	8012890 <sbrk_aligned+0x34>
 801287a:	1cc4      	adds	r4, r0, #3
 801287c:	f024 0403 	bic.w	r4, r4, #3
 8012880:	42a0      	cmp	r0, r4
 8012882:	d007      	beq.n	8012894 <sbrk_aligned+0x38>
 8012884:	1a21      	subs	r1, r4, r0
 8012886:	4628      	mov	r0, r5
 8012888:	f000 f8e8 	bl	8012a5c <_sbrk_r>
 801288c:	3001      	adds	r0, #1
 801288e:	d101      	bne.n	8012894 <sbrk_aligned+0x38>
 8012890:	f04f 34ff 	mov.w	r4, #4294967295
 8012894:	4620      	mov	r0, r4
 8012896:	bd70      	pop	{r4, r5, r6, pc}
 8012898:	200036f8 	.word	0x200036f8

0801289c <_malloc_r>:
 801289c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128a0:	1ccd      	adds	r5, r1, #3
 80128a2:	f025 0503 	bic.w	r5, r5, #3
 80128a6:	3508      	adds	r5, #8
 80128a8:	2d0c      	cmp	r5, #12
 80128aa:	bf38      	it	cc
 80128ac:	250c      	movcc	r5, #12
 80128ae:	2d00      	cmp	r5, #0
 80128b0:	4607      	mov	r7, r0
 80128b2:	db01      	blt.n	80128b8 <_malloc_r+0x1c>
 80128b4:	42a9      	cmp	r1, r5
 80128b6:	d905      	bls.n	80128c4 <_malloc_r+0x28>
 80128b8:	230c      	movs	r3, #12
 80128ba:	603b      	str	r3, [r7, #0]
 80128bc:	2600      	movs	r6, #0
 80128be:	4630      	mov	r0, r6
 80128c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128c4:	4e2e      	ldr	r6, [pc, #184]	; (8012980 <_malloc_r+0xe4>)
 80128c6:	f000 fb5f 	bl	8012f88 <__malloc_lock>
 80128ca:	6833      	ldr	r3, [r6, #0]
 80128cc:	461c      	mov	r4, r3
 80128ce:	bb34      	cbnz	r4, 801291e <_malloc_r+0x82>
 80128d0:	4629      	mov	r1, r5
 80128d2:	4638      	mov	r0, r7
 80128d4:	f7ff ffc2 	bl	801285c <sbrk_aligned>
 80128d8:	1c43      	adds	r3, r0, #1
 80128da:	4604      	mov	r4, r0
 80128dc:	d14d      	bne.n	801297a <_malloc_r+0xde>
 80128de:	6834      	ldr	r4, [r6, #0]
 80128e0:	4626      	mov	r6, r4
 80128e2:	2e00      	cmp	r6, #0
 80128e4:	d140      	bne.n	8012968 <_malloc_r+0xcc>
 80128e6:	6823      	ldr	r3, [r4, #0]
 80128e8:	4631      	mov	r1, r6
 80128ea:	4638      	mov	r0, r7
 80128ec:	eb04 0803 	add.w	r8, r4, r3
 80128f0:	f000 f8b4 	bl	8012a5c <_sbrk_r>
 80128f4:	4580      	cmp	r8, r0
 80128f6:	d13a      	bne.n	801296e <_malloc_r+0xd2>
 80128f8:	6821      	ldr	r1, [r4, #0]
 80128fa:	3503      	adds	r5, #3
 80128fc:	1a6d      	subs	r5, r5, r1
 80128fe:	f025 0503 	bic.w	r5, r5, #3
 8012902:	3508      	adds	r5, #8
 8012904:	2d0c      	cmp	r5, #12
 8012906:	bf38      	it	cc
 8012908:	250c      	movcc	r5, #12
 801290a:	4629      	mov	r1, r5
 801290c:	4638      	mov	r0, r7
 801290e:	f7ff ffa5 	bl	801285c <sbrk_aligned>
 8012912:	3001      	adds	r0, #1
 8012914:	d02b      	beq.n	801296e <_malloc_r+0xd2>
 8012916:	6823      	ldr	r3, [r4, #0]
 8012918:	442b      	add	r3, r5
 801291a:	6023      	str	r3, [r4, #0]
 801291c:	e00e      	b.n	801293c <_malloc_r+0xa0>
 801291e:	6822      	ldr	r2, [r4, #0]
 8012920:	1b52      	subs	r2, r2, r5
 8012922:	d41e      	bmi.n	8012962 <_malloc_r+0xc6>
 8012924:	2a0b      	cmp	r2, #11
 8012926:	d916      	bls.n	8012956 <_malloc_r+0xba>
 8012928:	1961      	adds	r1, r4, r5
 801292a:	42a3      	cmp	r3, r4
 801292c:	6025      	str	r5, [r4, #0]
 801292e:	bf18      	it	ne
 8012930:	6059      	strne	r1, [r3, #4]
 8012932:	6863      	ldr	r3, [r4, #4]
 8012934:	bf08      	it	eq
 8012936:	6031      	streq	r1, [r6, #0]
 8012938:	5162      	str	r2, [r4, r5]
 801293a:	604b      	str	r3, [r1, #4]
 801293c:	4638      	mov	r0, r7
 801293e:	f104 060b 	add.w	r6, r4, #11
 8012942:	f000 fb27 	bl	8012f94 <__malloc_unlock>
 8012946:	f026 0607 	bic.w	r6, r6, #7
 801294a:	1d23      	adds	r3, r4, #4
 801294c:	1af2      	subs	r2, r6, r3
 801294e:	d0b6      	beq.n	80128be <_malloc_r+0x22>
 8012950:	1b9b      	subs	r3, r3, r6
 8012952:	50a3      	str	r3, [r4, r2]
 8012954:	e7b3      	b.n	80128be <_malloc_r+0x22>
 8012956:	6862      	ldr	r2, [r4, #4]
 8012958:	42a3      	cmp	r3, r4
 801295a:	bf0c      	ite	eq
 801295c:	6032      	streq	r2, [r6, #0]
 801295e:	605a      	strne	r2, [r3, #4]
 8012960:	e7ec      	b.n	801293c <_malloc_r+0xa0>
 8012962:	4623      	mov	r3, r4
 8012964:	6864      	ldr	r4, [r4, #4]
 8012966:	e7b2      	b.n	80128ce <_malloc_r+0x32>
 8012968:	4634      	mov	r4, r6
 801296a:	6876      	ldr	r6, [r6, #4]
 801296c:	e7b9      	b.n	80128e2 <_malloc_r+0x46>
 801296e:	230c      	movs	r3, #12
 8012970:	603b      	str	r3, [r7, #0]
 8012972:	4638      	mov	r0, r7
 8012974:	f000 fb0e 	bl	8012f94 <__malloc_unlock>
 8012978:	e7a1      	b.n	80128be <_malloc_r+0x22>
 801297a:	6025      	str	r5, [r4, #0]
 801297c:	e7de      	b.n	801293c <_malloc_r+0xa0>
 801297e:	bf00      	nop
 8012980:	200036f4 	.word	0x200036f4

08012984 <iprintf>:
 8012984:	b40f      	push	{r0, r1, r2, r3}
 8012986:	4b0a      	ldr	r3, [pc, #40]	; (80129b0 <iprintf+0x2c>)
 8012988:	b513      	push	{r0, r1, r4, lr}
 801298a:	681c      	ldr	r4, [r3, #0]
 801298c:	b124      	cbz	r4, 8012998 <iprintf+0x14>
 801298e:	69a3      	ldr	r3, [r4, #24]
 8012990:	b913      	cbnz	r3, 8012998 <iprintf+0x14>
 8012992:	4620      	mov	r0, r4
 8012994:	f000 fa34 	bl	8012e00 <__sinit>
 8012998:	ab05      	add	r3, sp, #20
 801299a:	9a04      	ldr	r2, [sp, #16]
 801299c:	68a1      	ldr	r1, [r4, #8]
 801299e:	9301      	str	r3, [sp, #4]
 80129a0:	4620      	mov	r0, r4
 80129a2:	f000 fb27 	bl	8012ff4 <_vfiprintf_r>
 80129a6:	b002      	add	sp, #8
 80129a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80129ac:	b004      	add	sp, #16
 80129ae:	4770      	bx	lr
 80129b0:	20000290 	.word	0x20000290

080129b4 <putchar>:
 80129b4:	4b09      	ldr	r3, [pc, #36]	; (80129dc <putchar+0x28>)
 80129b6:	b513      	push	{r0, r1, r4, lr}
 80129b8:	681c      	ldr	r4, [r3, #0]
 80129ba:	4601      	mov	r1, r0
 80129bc:	b134      	cbz	r4, 80129cc <putchar+0x18>
 80129be:	69a3      	ldr	r3, [r4, #24]
 80129c0:	b923      	cbnz	r3, 80129cc <putchar+0x18>
 80129c2:	9001      	str	r0, [sp, #4]
 80129c4:	4620      	mov	r0, r4
 80129c6:	f000 fa1b 	bl	8012e00 <__sinit>
 80129ca:	9901      	ldr	r1, [sp, #4]
 80129cc:	68a2      	ldr	r2, [r4, #8]
 80129ce:	4620      	mov	r0, r4
 80129d0:	b002      	add	sp, #8
 80129d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80129d6:	f000 bdd1 	b.w	801357c <_putc_r>
 80129da:	bf00      	nop
 80129dc:	20000290 	.word	0x20000290

080129e0 <rand>:
 80129e0:	4b16      	ldr	r3, [pc, #88]	; (8012a3c <rand+0x5c>)
 80129e2:	b510      	push	{r4, lr}
 80129e4:	681c      	ldr	r4, [r3, #0]
 80129e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80129e8:	b9b3      	cbnz	r3, 8012a18 <rand+0x38>
 80129ea:	2018      	movs	r0, #24
 80129ec:	f7ff fe84 	bl	80126f8 <malloc>
 80129f0:	63a0      	str	r0, [r4, #56]	; 0x38
 80129f2:	b928      	cbnz	r0, 8012a00 <rand+0x20>
 80129f4:	4602      	mov	r2, r0
 80129f6:	4b12      	ldr	r3, [pc, #72]	; (8012a40 <rand+0x60>)
 80129f8:	4812      	ldr	r0, [pc, #72]	; (8012a44 <rand+0x64>)
 80129fa:	214e      	movs	r1, #78	; 0x4e
 80129fc:	f000 f97a 	bl	8012cf4 <__assert_func>
 8012a00:	4a11      	ldr	r2, [pc, #68]	; (8012a48 <rand+0x68>)
 8012a02:	4b12      	ldr	r3, [pc, #72]	; (8012a4c <rand+0x6c>)
 8012a04:	e9c0 2300 	strd	r2, r3, [r0]
 8012a08:	4b11      	ldr	r3, [pc, #68]	; (8012a50 <rand+0x70>)
 8012a0a:	6083      	str	r3, [r0, #8]
 8012a0c:	230b      	movs	r3, #11
 8012a0e:	8183      	strh	r3, [r0, #12]
 8012a10:	2201      	movs	r2, #1
 8012a12:	2300      	movs	r3, #0
 8012a14:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8012a18:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8012a1a:	4a0e      	ldr	r2, [pc, #56]	; (8012a54 <rand+0x74>)
 8012a1c:	6920      	ldr	r0, [r4, #16]
 8012a1e:	6963      	ldr	r3, [r4, #20]
 8012a20:	490d      	ldr	r1, [pc, #52]	; (8012a58 <rand+0x78>)
 8012a22:	4342      	muls	r2, r0
 8012a24:	fb01 2203 	mla	r2, r1, r3, r2
 8012a28:	fba0 0101 	umull	r0, r1, r0, r1
 8012a2c:	1c43      	adds	r3, r0, #1
 8012a2e:	eb42 0001 	adc.w	r0, r2, r1
 8012a32:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8012a36:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8012a3a:	bd10      	pop	{r4, pc}
 8012a3c:	20000290 	.word	0x20000290
 8012a40:	0801db94 	.word	0x0801db94
 8012a44:	0801dbab 	.word	0x0801dbab
 8012a48:	abcd330e 	.word	0xabcd330e
 8012a4c:	e66d1234 	.word	0xe66d1234
 8012a50:	0005deec 	.word	0x0005deec
 8012a54:	5851f42d 	.word	0x5851f42d
 8012a58:	4c957f2d 	.word	0x4c957f2d

08012a5c <_sbrk_r>:
 8012a5c:	b538      	push	{r3, r4, r5, lr}
 8012a5e:	4d06      	ldr	r5, [pc, #24]	; (8012a78 <_sbrk_r+0x1c>)
 8012a60:	2300      	movs	r3, #0
 8012a62:	4604      	mov	r4, r0
 8012a64:	4608      	mov	r0, r1
 8012a66:	602b      	str	r3, [r5, #0]
 8012a68:	f7fc fece 	bl	800f808 <_sbrk>
 8012a6c:	1c43      	adds	r3, r0, #1
 8012a6e:	d102      	bne.n	8012a76 <_sbrk_r+0x1a>
 8012a70:	682b      	ldr	r3, [r5, #0]
 8012a72:	b103      	cbz	r3, 8012a76 <_sbrk_r+0x1a>
 8012a74:	6023      	str	r3, [r4, #0]
 8012a76:	bd38      	pop	{r3, r4, r5, pc}
 8012a78:	20003700 	.word	0x20003700

08012a7c <__sread>:
 8012a7c:	b510      	push	{r4, lr}
 8012a7e:	460c      	mov	r4, r1
 8012a80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a84:	f000 fdc2 	bl	801360c <_read_r>
 8012a88:	2800      	cmp	r0, #0
 8012a8a:	bfab      	itete	ge
 8012a8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012a8e:	89a3      	ldrhlt	r3, [r4, #12]
 8012a90:	181b      	addge	r3, r3, r0
 8012a92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012a96:	bfac      	ite	ge
 8012a98:	6563      	strge	r3, [r4, #84]	; 0x54
 8012a9a:	81a3      	strhlt	r3, [r4, #12]
 8012a9c:	bd10      	pop	{r4, pc}

08012a9e <__swrite>:
 8012a9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012aa2:	461f      	mov	r7, r3
 8012aa4:	898b      	ldrh	r3, [r1, #12]
 8012aa6:	05db      	lsls	r3, r3, #23
 8012aa8:	4605      	mov	r5, r0
 8012aaa:	460c      	mov	r4, r1
 8012aac:	4616      	mov	r6, r2
 8012aae:	d505      	bpl.n	8012abc <__swrite+0x1e>
 8012ab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ab4:	2302      	movs	r3, #2
 8012ab6:	2200      	movs	r2, #0
 8012ab8:	f000 fa54 	bl	8012f64 <_lseek_r>
 8012abc:	89a3      	ldrh	r3, [r4, #12]
 8012abe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012ac2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012ac6:	81a3      	strh	r3, [r4, #12]
 8012ac8:	4632      	mov	r2, r6
 8012aca:	463b      	mov	r3, r7
 8012acc:	4628      	mov	r0, r5
 8012ace:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012ad2:	f000 b8fd 	b.w	8012cd0 <_write_r>

08012ad6 <__sseek>:
 8012ad6:	b510      	push	{r4, lr}
 8012ad8:	460c      	mov	r4, r1
 8012ada:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ade:	f000 fa41 	bl	8012f64 <_lseek_r>
 8012ae2:	1c43      	adds	r3, r0, #1
 8012ae4:	89a3      	ldrh	r3, [r4, #12]
 8012ae6:	bf15      	itete	ne
 8012ae8:	6560      	strne	r0, [r4, #84]	; 0x54
 8012aea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012aee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012af2:	81a3      	strheq	r3, [r4, #12]
 8012af4:	bf18      	it	ne
 8012af6:	81a3      	strhne	r3, [r4, #12]
 8012af8:	bd10      	pop	{r4, pc}

08012afa <__sclose>:
 8012afa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012afe:	f000 b917 	b.w	8012d30 <_close_r>

08012b02 <strchr>:
 8012b02:	b2c9      	uxtb	r1, r1
 8012b04:	4603      	mov	r3, r0
 8012b06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012b0a:	b11a      	cbz	r2, 8012b14 <strchr+0x12>
 8012b0c:	428a      	cmp	r2, r1
 8012b0e:	d1f9      	bne.n	8012b04 <strchr+0x2>
 8012b10:	4618      	mov	r0, r3
 8012b12:	4770      	bx	lr
 8012b14:	2900      	cmp	r1, #0
 8012b16:	bf18      	it	ne
 8012b18:	2300      	movne	r3, #0
 8012b1a:	e7f9      	b.n	8012b10 <strchr+0xe>

08012b1c <strcpy>:
 8012b1c:	4603      	mov	r3, r0
 8012b1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012b22:	f803 2b01 	strb.w	r2, [r3], #1
 8012b26:	2a00      	cmp	r2, #0
 8012b28:	d1f9      	bne.n	8012b1e <strcpy+0x2>
 8012b2a:	4770      	bx	lr

08012b2c <strdup>:
 8012b2c:	4b02      	ldr	r3, [pc, #8]	; (8012b38 <strdup+0xc>)
 8012b2e:	4601      	mov	r1, r0
 8012b30:	6818      	ldr	r0, [r3, #0]
 8012b32:	f000 b803 	b.w	8012b3c <_strdup_r>
 8012b36:	bf00      	nop
 8012b38:	20000290 	.word	0x20000290

08012b3c <_strdup_r>:
 8012b3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012b3e:	4604      	mov	r4, r0
 8012b40:	4608      	mov	r0, r1
 8012b42:	460d      	mov	r5, r1
 8012b44:	f7ed fbbe 	bl	80002c4 <strlen>
 8012b48:	1c42      	adds	r2, r0, #1
 8012b4a:	4611      	mov	r1, r2
 8012b4c:	4620      	mov	r0, r4
 8012b4e:	9201      	str	r2, [sp, #4]
 8012b50:	f7ff fea4 	bl	801289c <_malloc_r>
 8012b54:	4604      	mov	r4, r0
 8012b56:	b118      	cbz	r0, 8012b60 <_strdup_r+0x24>
 8012b58:	9a01      	ldr	r2, [sp, #4]
 8012b5a:	4629      	mov	r1, r5
 8012b5c:	f7ff fdec 	bl	8012738 <memcpy>
 8012b60:	4620      	mov	r0, r4
 8012b62:	b003      	add	sp, #12
 8012b64:	bd30      	pop	{r4, r5, pc}

08012b66 <strncmp>:
 8012b66:	b510      	push	{r4, lr}
 8012b68:	b17a      	cbz	r2, 8012b8a <strncmp+0x24>
 8012b6a:	4603      	mov	r3, r0
 8012b6c:	3901      	subs	r1, #1
 8012b6e:	1884      	adds	r4, r0, r2
 8012b70:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012b74:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012b78:	4290      	cmp	r0, r2
 8012b7a:	d101      	bne.n	8012b80 <strncmp+0x1a>
 8012b7c:	42a3      	cmp	r3, r4
 8012b7e:	d101      	bne.n	8012b84 <strncmp+0x1e>
 8012b80:	1a80      	subs	r0, r0, r2
 8012b82:	bd10      	pop	{r4, pc}
 8012b84:	2800      	cmp	r0, #0
 8012b86:	d1f3      	bne.n	8012b70 <strncmp+0xa>
 8012b88:	e7fa      	b.n	8012b80 <strncmp+0x1a>
 8012b8a:	4610      	mov	r0, r2
 8012b8c:	e7f9      	b.n	8012b82 <strncmp+0x1c>

08012b8e <strrchr>:
 8012b8e:	b538      	push	{r3, r4, r5, lr}
 8012b90:	4603      	mov	r3, r0
 8012b92:	460c      	mov	r4, r1
 8012b94:	b969      	cbnz	r1, 8012bb2 <strrchr+0x24>
 8012b96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b9a:	f7ff bfb2 	b.w	8012b02 <strchr>
 8012b9e:	1c43      	adds	r3, r0, #1
 8012ba0:	4605      	mov	r5, r0
 8012ba2:	4621      	mov	r1, r4
 8012ba4:	4618      	mov	r0, r3
 8012ba6:	f7ff ffac 	bl	8012b02 <strchr>
 8012baa:	2800      	cmp	r0, #0
 8012bac:	d1f7      	bne.n	8012b9e <strrchr+0x10>
 8012bae:	4628      	mov	r0, r5
 8012bb0:	bd38      	pop	{r3, r4, r5, pc}
 8012bb2:	2500      	movs	r5, #0
 8012bb4:	e7f5      	b.n	8012ba2 <strrchr+0x14>
	...

08012bb8 <_strtol_l.constprop.0>:
 8012bb8:	2b01      	cmp	r3, #1
 8012bba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012bbe:	d001      	beq.n	8012bc4 <_strtol_l.constprop.0+0xc>
 8012bc0:	2b24      	cmp	r3, #36	; 0x24
 8012bc2:	d906      	bls.n	8012bd2 <_strtol_l.constprop.0+0x1a>
 8012bc4:	f7ff fd6e 	bl	80126a4 <__errno>
 8012bc8:	2316      	movs	r3, #22
 8012bca:	6003      	str	r3, [r0, #0]
 8012bcc:	2000      	movs	r0, #0
 8012bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012bd2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8012cb8 <_strtol_l.constprop.0+0x100>
 8012bd6:	460d      	mov	r5, r1
 8012bd8:	462e      	mov	r6, r5
 8012bda:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012bde:	f814 700c 	ldrb.w	r7, [r4, ip]
 8012be2:	f017 0708 	ands.w	r7, r7, #8
 8012be6:	d1f7      	bne.n	8012bd8 <_strtol_l.constprop.0+0x20>
 8012be8:	2c2d      	cmp	r4, #45	; 0x2d
 8012bea:	d132      	bne.n	8012c52 <_strtol_l.constprop.0+0x9a>
 8012bec:	782c      	ldrb	r4, [r5, #0]
 8012bee:	2701      	movs	r7, #1
 8012bf0:	1cb5      	adds	r5, r6, #2
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d05b      	beq.n	8012cae <_strtol_l.constprop.0+0xf6>
 8012bf6:	2b10      	cmp	r3, #16
 8012bf8:	d109      	bne.n	8012c0e <_strtol_l.constprop.0+0x56>
 8012bfa:	2c30      	cmp	r4, #48	; 0x30
 8012bfc:	d107      	bne.n	8012c0e <_strtol_l.constprop.0+0x56>
 8012bfe:	782c      	ldrb	r4, [r5, #0]
 8012c00:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8012c04:	2c58      	cmp	r4, #88	; 0x58
 8012c06:	d14d      	bne.n	8012ca4 <_strtol_l.constprop.0+0xec>
 8012c08:	786c      	ldrb	r4, [r5, #1]
 8012c0a:	2310      	movs	r3, #16
 8012c0c:	3502      	adds	r5, #2
 8012c0e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8012c12:	f108 38ff 	add.w	r8, r8, #4294967295
 8012c16:	f04f 0c00 	mov.w	ip, #0
 8012c1a:	fbb8 f9f3 	udiv	r9, r8, r3
 8012c1e:	4666      	mov	r6, ip
 8012c20:	fb03 8a19 	mls	sl, r3, r9, r8
 8012c24:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8012c28:	f1be 0f09 	cmp.w	lr, #9
 8012c2c:	d816      	bhi.n	8012c5c <_strtol_l.constprop.0+0xa4>
 8012c2e:	4674      	mov	r4, lr
 8012c30:	42a3      	cmp	r3, r4
 8012c32:	dd24      	ble.n	8012c7e <_strtol_l.constprop.0+0xc6>
 8012c34:	f1bc 0f00 	cmp.w	ip, #0
 8012c38:	db1e      	blt.n	8012c78 <_strtol_l.constprop.0+0xc0>
 8012c3a:	45b1      	cmp	r9, r6
 8012c3c:	d31c      	bcc.n	8012c78 <_strtol_l.constprop.0+0xc0>
 8012c3e:	d101      	bne.n	8012c44 <_strtol_l.constprop.0+0x8c>
 8012c40:	45a2      	cmp	sl, r4
 8012c42:	db19      	blt.n	8012c78 <_strtol_l.constprop.0+0xc0>
 8012c44:	fb06 4603 	mla	r6, r6, r3, r4
 8012c48:	f04f 0c01 	mov.w	ip, #1
 8012c4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012c50:	e7e8      	b.n	8012c24 <_strtol_l.constprop.0+0x6c>
 8012c52:	2c2b      	cmp	r4, #43	; 0x2b
 8012c54:	bf04      	itt	eq
 8012c56:	782c      	ldrbeq	r4, [r5, #0]
 8012c58:	1cb5      	addeq	r5, r6, #2
 8012c5a:	e7ca      	b.n	8012bf2 <_strtol_l.constprop.0+0x3a>
 8012c5c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8012c60:	f1be 0f19 	cmp.w	lr, #25
 8012c64:	d801      	bhi.n	8012c6a <_strtol_l.constprop.0+0xb2>
 8012c66:	3c37      	subs	r4, #55	; 0x37
 8012c68:	e7e2      	b.n	8012c30 <_strtol_l.constprop.0+0x78>
 8012c6a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8012c6e:	f1be 0f19 	cmp.w	lr, #25
 8012c72:	d804      	bhi.n	8012c7e <_strtol_l.constprop.0+0xc6>
 8012c74:	3c57      	subs	r4, #87	; 0x57
 8012c76:	e7db      	b.n	8012c30 <_strtol_l.constprop.0+0x78>
 8012c78:	f04f 3cff 	mov.w	ip, #4294967295
 8012c7c:	e7e6      	b.n	8012c4c <_strtol_l.constprop.0+0x94>
 8012c7e:	f1bc 0f00 	cmp.w	ip, #0
 8012c82:	da05      	bge.n	8012c90 <_strtol_l.constprop.0+0xd8>
 8012c84:	2322      	movs	r3, #34	; 0x22
 8012c86:	6003      	str	r3, [r0, #0]
 8012c88:	4646      	mov	r6, r8
 8012c8a:	b942      	cbnz	r2, 8012c9e <_strtol_l.constprop.0+0xe6>
 8012c8c:	4630      	mov	r0, r6
 8012c8e:	e79e      	b.n	8012bce <_strtol_l.constprop.0+0x16>
 8012c90:	b107      	cbz	r7, 8012c94 <_strtol_l.constprop.0+0xdc>
 8012c92:	4276      	negs	r6, r6
 8012c94:	2a00      	cmp	r2, #0
 8012c96:	d0f9      	beq.n	8012c8c <_strtol_l.constprop.0+0xd4>
 8012c98:	f1bc 0f00 	cmp.w	ip, #0
 8012c9c:	d000      	beq.n	8012ca0 <_strtol_l.constprop.0+0xe8>
 8012c9e:	1e69      	subs	r1, r5, #1
 8012ca0:	6011      	str	r1, [r2, #0]
 8012ca2:	e7f3      	b.n	8012c8c <_strtol_l.constprop.0+0xd4>
 8012ca4:	2430      	movs	r4, #48	; 0x30
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d1b1      	bne.n	8012c0e <_strtol_l.constprop.0+0x56>
 8012caa:	2308      	movs	r3, #8
 8012cac:	e7af      	b.n	8012c0e <_strtol_l.constprop.0+0x56>
 8012cae:	2c30      	cmp	r4, #48	; 0x30
 8012cb0:	d0a5      	beq.n	8012bfe <_strtol_l.constprop.0+0x46>
 8012cb2:	230a      	movs	r3, #10
 8012cb4:	e7ab      	b.n	8012c0e <_strtol_l.constprop.0+0x56>
 8012cb6:	bf00      	nop
 8012cb8:	0801dc66 	.word	0x0801dc66

08012cbc <strtol>:
 8012cbc:	4613      	mov	r3, r2
 8012cbe:	460a      	mov	r2, r1
 8012cc0:	4601      	mov	r1, r0
 8012cc2:	4802      	ldr	r0, [pc, #8]	; (8012ccc <strtol+0x10>)
 8012cc4:	6800      	ldr	r0, [r0, #0]
 8012cc6:	f7ff bf77 	b.w	8012bb8 <_strtol_l.constprop.0>
 8012cca:	bf00      	nop
 8012ccc:	20000290 	.word	0x20000290

08012cd0 <_write_r>:
 8012cd0:	b538      	push	{r3, r4, r5, lr}
 8012cd2:	4d07      	ldr	r5, [pc, #28]	; (8012cf0 <_write_r+0x20>)
 8012cd4:	4604      	mov	r4, r0
 8012cd6:	4608      	mov	r0, r1
 8012cd8:	4611      	mov	r1, r2
 8012cda:	2200      	movs	r2, #0
 8012cdc:	602a      	str	r2, [r5, #0]
 8012cde:	461a      	mov	r2, r3
 8012ce0:	f7fc fd46 	bl	800f770 <_write>
 8012ce4:	1c43      	adds	r3, r0, #1
 8012ce6:	d102      	bne.n	8012cee <_write_r+0x1e>
 8012ce8:	682b      	ldr	r3, [r5, #0]
 8012cea:	b103      	cbz	r3, 8012cee <_write_r+0x1e>
 8012cec:	6023      	str	r3, [r4, #0]
 8012cee:	bd38      	pop	{r3, r4, r5, pc}
 8012cf0:	20003700 	.word	0x20003700

08012cf4 <__assert_func>:
 8012cf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012cf6:	4614      	mov	r4, r2
 8012cf8:	461a      	mov	r2, r3
 8012cfa:	4b09      	ldr	r3, [pc, #36]	; (8012d20 <__assert_func+0x2c>)
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	4605      	mov	r5, r0
 8012d00:	68d8      	ldr	r0, [r3, #12]
 8012d02:	b14c      	cbz	r4, 8012d18 <__assert_func+0x24>
 8012d04:	4b07      	ldr	r3, [pc, #28]	; (8012d24 <__assert_func+0x30>)
 8012d06:	9100      	str	r1, [sp, #0]
 8012d08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012d0c:	4906      	ldr	r1, [pc, #24]	; (8012d28 <__assert_func+0x34>)
 8012d0e:	462b      	mov	r3, r5
 8012d10:	f000 f8f4 	bl	8012efc <fiprintf>
 8012d14:	f000 fd4c 	bl	80137b0 <abort>
 8012d18:	4b04      	ldr	r3, [pc, #16]	; (8012d2c <__assert_func+0x38>)
 8012d1a:	461c      	mov	r4, r3
 8012d1c:	e7f3      	b.n	8012d06 <__assert_func+0x12>
 8012d1e:	bf00      	nop
 8012d20:	20000290 	.word	0x20000290
 8012d24:	0801dc29 	.word	0x0801dc29
 8012d28:	0801dc36 	.word	0x0801dc36
 8012d2c:	0801dc64 	.word	0x0801dc64

08012d30 <_close_r>:
 8012d30:	b538      	push	{r3, r4, r5, lr}
 8012d32:	4d06      	ldr	r5, [pc, #24]	; (8012d4c <_close_r+0x1c>)
 8012d34:	2300      	movs	r3, #0
 8012d36:	4604      	mov	r4, r0
 8012d38:	4608      	mov	r0, r1
 8012d3a:	602b      	str	r3, [r5, #0]
 8012d3c:	f7fc fd30 	bl	800f7a0 <_close>
 8012d40:	1c43      	adds	r3, r0, #1
 8012d42:	d102      	bne.n	8012d4a <_close_r+0x1a>
 8012d44:	682b      	ldr	r3, [r5, #0]
 8012d46:	b103      	cbz	r3, 8012d4a <_close_r+0x1a>
 8012d48:	6023      	str	r3, [r4, #0]
 8012d4a:	bd38      	pop	{r3, r4, r5, pc}
 8012d4c:	20003700 	.word	0x20003700

08012d50 <std>:
 8012d50:	2300      	movs	r3, #0
 8012d52:	b510      	push	{r4, lr}
 8012d54:	4604      	mov	r4, r0
 8012d56:	e9c0 3300 	strd	r3, r3, [r0]
 8012d5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012d5e:	6083      	str	r3, [r0, #8]
 8012d60:	8181      	strh	r1, [r0, #12]
 8012d62:	6643      	str	r3, [r0, #100]	; 0x64
 8012d64:	81c2      	strh	r2, [r0, #14]
 8012d66:	6183      	str	r3, [r0, #24]
 8012d68:	4619      	mov	r1, r3
 8012d6a:	2208      	movs	r2, #8
 8012d6c:	305c      	adds	r0, #92	; 0x5c
 8012d6e:	f7ff fd0b 	bl	8012788 <memset>
 8012d72:	4b05      	ldr	r3, [pc, #20]	; (8012d88 <std+0x38>)
 8012d74:	6263      	str	r3, [r4, #36]	; 0x24
 8012d76:	4b05      	ldr	r3, [pc, #20]	; (8012d8c <std+0x3c>)
 8012d78:	62a3      	str	r3, [r4, #40]	; 0x28
 8012d7a:	4b05      	ldr	r3, [pc, #20]	; (8012d90 <std+0x40>)
 8012d7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012d7e:	4b05      	ldr	r3, [pc, #20]	; (8012d94 <std+0x44>)
 8012d80:	6224      	str	r4, [r4, #32]
 8012d82:	6323      	str	r3, [r4, #48]	; 0x30
 8012d84:	bd10      	pop	{r4, pc}
 8012d86:	bf00      	nop
 8012d88:	08012a7d 	.word	0x08012a7d
 8012d8c:	08012a9f 	.word	0x08012a9f
 8012d90:	08012ad7 	.word	0x08012ad7
 8012d94:	08012afb 	.word	0x08012afb

08012d98 <_cleanup_r>:
 8012d98:	4901      	ldr	r1, [pc, #4]	; (8012da0 <_cleanup_r+0x8>)
 8012d9a:	f000 b8c1 	b.w	8012f20 <_fwalk_reent>
 8012d9e:	bf00      	nop
 8012da0:	080138cd 	.word	0x080138cd

08012da4 <__sfmoreglue>:
 8012da4:	b570      	push	{r4, r5, r6, lr}
 8012da6:	2268      	movs	r2, #104	; 0x68
 8012da8:	1e4d      	subs	r5, r1, #1
 8012daa:	4355      	muls	r5, r2
 8012dac:	460e      	mov	r6, r1
 8012dae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012db2:	f7ff fd73 	bl	801289c <_malloc_r>
 8012db6:	4604      	mov	r4, r0
 8012db8:	b140      	cbz	r0, 8012dcc <__sfmoreglue+0x28>
 8012dba:	2100      	movs	r1, #0
 8012dbc:	e9c0 1600 	strd	r1, r6, [r0]
 8012dc0:	300c      	adds	r0, #12
 8012dc2:	60a0      	str	r0, [r4, #8]
 8012dc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012dc8:	f7ff fcde 	bl	8012788 <memset>
 8012dcc:	4620      	mov	r0, r4
 8012dce:	bd70      	pop	{r4, r5, r6, pc}

08012dd0 <__sfp_lock_acquire>:
 8012dd0:	4801      	ldr	r0, [pc, #4]	; (8012dd8 <__sfp_lock_acquire+0x8>)
 8012dd2:	f000 b8c5 	b.w	8012f60 <__retarget_lock_acquire_recursive>
 8012dd6:	bf00      	nop
 8012dd8:	200036fd 	.word	0x200036fd

08012ddc <__sfp_lock_release>:
 8012ddc:	4801      	ldr	r0, [pc, #4]	; (8012de4 <__sfp_lock_release+0x8>)
 8012dde:	f000 b8c0 	b.w	8012f62 <__retarget_lock_release_recursive>
 8012de2:	bf00      	nop
 8012de4:	200036fd 	.word	0x200036fd

08012de8 <__sinit_lock_acquire>:
 8012de8:	4801      	ldr	r0, [pc, #4]	; (8012df0 <__sinit_lock_acquire+0x8>)
 8012dea:	f000 b8b9 	b.w	8012f60 <__retarget_lock_acquire_recursive>
 8012dee:	bf00      	nop
 8012df0:	200036fe 	.word	0x200036fe

08012df4 <__sinit_lock_release>:
 8012df4:	4801      	ldr	r0, [pc, #4]	; (8012dfc <__sinit_lock_release+0x8>)
 8012df6:	f000 b8b4 	b.w	8012f62 <__retarget_lock_release_recursive>
 8012dfa:	bf00      	nop
 8012dfc:	200036fe 	.word	0x200036fe

08012e00 <__sinit>:
 8012e00:	b510      	push	{r4, lr}
 8012e02:	4604      	mov	r4, r0
 8012e04:	f7ff fff0 	bl	8012de8 <__sinit_lock_acquire>
 8012e08:	69a3      	ldr	r3, [r4, #24]
 8012e0a:	b11b      	cbz	r3, 8012e14 <__sinit+0x14>
 8012e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e10:	f7ff bff0 	b.w	8012df4 <__sinit_lock_release>
 8012e14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012e18:	6523      	str	r3, [r4, #80]	; 0x50
 8012e1a:	4b13      	ldr	r3, [pc, #76]	; (8012e68 <__sinit+0x68>)
 8012e1c:	4a13      	ldr	r2, [pc, #76]	; (8012e6c <__sinit+0x6c>)
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	62a2      	str	r2, [r4, #40]	; 0x28
 8012e22:	42a3      	cmp	r3, r4
 8012e24:	bf04      	itt	eq
 8012e26:	2301      	moveq	r3, #1
 8012e28:	61a3      	streq	r3, [r4, #24]
 8012e2a:	4620      	mov	r0, r4
 8012e2c:	f000 f820 	bl	8012e70 <__sfp>
 8012e30:	6060      	str	r0, [r4, #4]
 8012e32:	4620      	mov	r0, r4
 8012e34:	f000 f81c 	bl	8012e70 <__sfp>
 8012e38:	60a0      	str	r0, [r4, #8]
 8012e3a:	4620      	mov	r0, r4
 8012e3c:	f000 f818 	bl	8012e70 <__sfp>
 8012e40:	2200      	movs	r2, #0
 8012e42:	60e0      	str	r0, [r4, #12]
 8012e44:	2104      	movs	r1, #4
 8012e46:	6860      	ldr	r0, [r4, #4]
 8012e48:	f7ff ff82 	bl	8012d50 <std>
 8012e4c:	68a0      	ldr	r0, [r4, #8]
 8012e4e:	2201      	movs	r2, #1
 8012e50:	2109      	movs	r1, #9
 8012e52:	f7ff ff7d 	bl	8012d50 <std>
 8012e56:	68e0      	ldr	r0, [r4, #12]
 8012e58:	2202      	movs	r2, #2
 8012e5a:	2112      	movs	r1, #18
 8012e5c:	f7ff ff78 	bl	8012d50 <std>
 8012e60:	2301      	movs	r3, #1
 8012e62:	61a3      	str	r3, [r4, #24]
 8012e64:	e7d2      	b.n	8012e0c <__sinit+0xc>
 8012e66:	bf00      	nop
 8012e68:	0801db90 	.word	0x0801db90
 8012e6c:	08012d99 	.word	0x08012d99

08012e70 <__sfp>:
 8012e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e72:	4607      	mov	r7, r0
 8012e74:	f7ff ffac 	bl	8012dd0 <__sfp_lock_acquire>
 8012e78:	4b1e      	ldr	r3, [pc, #120]	; (8012ef4 <__sfp+0x84>)
 8012e7a:	681e      	ldr	r6, [r3, #0]
 8012e7c:	69b3      	ldr	r3, [r6, #24]
 8012e7e:	b913      	cbnz	r3, 8012e86 <__sfp+0x16>
 8012e80:	4630      	mov	r0, r6
 8012e82:	f7ff ffbd 	bl	8012e00 <__sinit>
 8012e86:	3648      	adds	r6, #72	; 0x48
 8012e88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012e8c:	3b01      	subs	r3, #1
 8012e8e:	d503      	bpl.n	8012e98 <__sfp+0x28>
 8012e90:	6833      	ldr	r3, [r6, #0]
 8012e92:	b30b      	cbz	r3, 8012ed8 <__sfp+0x68>
 8012e94:	6836      	ldr	r6, [r6, #0]
 8012e96:	e7f7      	b.n	8012e88 <__sfp+0x18>
 8012e98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012e9c:	b9d5      	cbnz	r5, 8012ed4 <__sfp+0x64>
 8012e9e:	4b16      	ldr	r3, [pc, #88]	; (8012ef8 <__sfp+0x88>)
 8012ea0:	60e3      	str	r3, [r4, #12]
 8012ea2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012ea6:	6665      	str	r5, [r4, #100]	; 0x64
 8012ea8:	f000 f859 	bl	8012f5e <__retarget_lock_init_recursive>
 8012eac:	f7ff ff96 	bl	8012ddc <__sfp_lock_release>
 8012eb0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012eb4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012eb8:	6025      	str	r5, [r4, #0]
 8012eba:	61a5      	str	r5, [r4, #24]
 8012ebc:	2208      	movs	r2, #8
 8012ebe:	4629      	mov	r1, r5
 8012ec0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012ec4:	f7ff fc60 	bl	8012788 <memset>
 8012ec8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012ecc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012ed0:	4620      	mov	r0, r4
 8012ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ed4:	3468      	adds	r4, #104	; 0x68
 8012ed6:	e7d9      	b.n	8012e8c <__sfp+0x1c>
 8012ed8:	2104      	movs	r1, #4
 8012eda:	4638      	mov	r0, r7
 8012edc:	f7ff ff62 	bl	8012da4 <__sfmoreglue>
 8012ee0:	4604      	mov	r4, r0
 8012ee2:	6030      	str	r0, [r6, #0]
 8012ee4:	2800      	cmp	r0, #0
 8012ee6:	d1d5      	bne.n	8012e94 <__sfp+0x24>
 8012ee8:	f7ff ff78 	bl	8012ddc <__sfp_lock_release>
 8012eec:	230c      	movs	r3, #12
 8012eee:	603b      	str	r3, [r7, #0]
 8012ef0:	e7ee      	b.n	8012ed0 <__sfp+0x60>
 8012ef2:	bf00      	nop
 8012ef4:	0801db90 	.word	0x0801db90
 8012ef8:	ffff0001 	.word	0xffff0001

08012efc <fiprintf>:
 8012efc:	b40e      	push	{r1, r2, r3}
 8012efe:	b503      	push	{r0, r1, lr}
 8012f00:	4601      	mov	r1, r0
 8012f02:	ab03      	add	r3, sp, #12
 8012f04:	4805      	ldr	r0, [pc, #20]	; (8012f1c <fiprintf+0x20>)
 8012f06:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f0a:	6800      	ldr	r0, [r0, #0]
 8012f0c:	9301      	str	r3, [sp, #4]
 8012f0e:	f000 f871 	bl	8012ff4 <_vfiprintf_r>
 8012f12:	b002      	add	sp, #8
 8012f14:	f85d eb04 	ldr.w	lr, [sp], #4
 8012f18:	b003      	add	sp, #12
 8012f1a:	4770      	bx	lr
 8012f1c:	20000290 	.word	0x20000290

08012f20 <_fwalk_reent>:
 8012f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f24:	4606      	mov	r6, r0
 8012f26:	4688      	mov	r8, r1
 8012f28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012f2c:	2700      	movs	r7, #0
 8012f2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012f32:	f1b9 0901 	subs.w	r9, r9, #1
 8012f36:	d505      	bpl.n	8012f44 <_fwalk_reent+0x24>
 8012f38:	6824      	ldr	r4, [r4, #0]
 8012f3a:	2c00      	cmp	r4, #0
 8012f3c:	d1f7      	bne.n	8012f2e <_fwalk_reent+0xe>
 8012f3e:	4638      	mov	r0, r7
 8012f40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f44:	89ab      	ldrh	r3, [r5, #12]
 8012f46:	2b01      	cmp	r3, #1
 8012f48:	d907      	bls.n	8012f5a <_fwalk_reent+0x3a>
 8012f4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012f4e:	3301      	adds	r3, #1
 8012f50:	d003      	beq.n	8012f5a <_fwalk_reent+0x3a>
 8012f52:	4629      	mov	r1, r5
 8012f54:	4630      	mov	r0, r6
 8012f56:	47c0      	blx	r8
 8012f58:	4307      	orrs	r7, r0
 8012f5a:	3568      	adds	r5, #104	; 0x68
 8012f5c:	e7e9      	b.n	8012f32 <_fwalk_reent+0x12>

08012f5e <__retarget_lock_init_recursive>:
 8012f5e:	4770      	bx	lr

08012f60 <__retarget_lock_acquire_recursive>:
 8012f60:	4770      	bx	lr

08012f62 <__retarget_lock_release_recursive>:
 8012f62:	4770      	bx	lr

08012f64 <_lseek_r>:
 8012f64:	b538      	push	{r3, r4, r5, lr}
 8012f66:	4d07      	ldr	r5, [pc, #28]	; (8012f84 <_lseek_r+0x20>)
 8012f68:	4604      	mov	r4, r0
 8012f6a:	4608      	mov	r0, r1
 8012f6c:	4611      	mov	r1, r2
 8012f6e:	2200      	movs	r2, #0
 8012f70:	602a      	str	r2, [r5, #0]
 8012f72:	461a      	mov	r2, r3
 8012f74:	f7fc fc3b 	bl	800f7ee <_lseek>
 8012f78:	1c43      	adds	r3, r0, #1
 8012f7a:	d102      	bne.n	8012f82 <_lseek_r+0x1e>
 8012f7c:	682b      	ldr	r3, [r5, #0]
 8012f7e:	b103      	cbz	r3, 8012f82 <_lseek_r+0x1e>
 8012f80:	6023      	str	r3, [r4, #0]
 8012f82:	bd38      	pop	{r3, r4, r5, pc}
 8012f84:	20003700 	.word	0x20003700

08012f88 <__malloc_lock>:
 8012f88:	4801      	ldr	r0, [pc, #4]	; (8012f90 <__malloc_lock+0x8>)
 8012f8a:	f7ff bfe9 	b.w	8012f60 <__retarget_lock_acquire_recursive>
 8012f8e:	bf00      	nop
 8012f90:	200036fc 	.word	0x200036fc

08012f94 <__malloc_unlock>:
 8012f94:	4801      	ldr	r0, [pc, #4]	; (8012f9c <__malloc_unlock+0x8>)
 8012f96:	f7ff bfe4 	b.w	8012f62 <__retarget_lock_release_recursive>
 8012f9a:	bf00      	nop
 8012f9c:	200036fc 	.word	0x200036fc

08012fa0 <__sfputc_r>:
 8012fa0:	6893      	ldr	r3, [r2, #8]
 8012fa2:	3b01      	subs	r3, #1
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	b410      	push	{r4}
 8012fa8:	6093      	str	r3, [r2, #8]
 8012faa:	da08      	bge.n	8012fbe <__sfputc_r+0x1e>
 8012fac:	6994      	ldr	r4, [r2, #24]
 8012fae:	42a3      	cmp	r3, r4
 8012fb0:	db01      	blt.n	8012fb6 <__sfputc_r+0x16>
 8012fb2:	290a      	cmp	r1, #10
 8012fb4:	d103      	bne.n	8012fbe <__sfputc_r+0x1e>
 8012fb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012fba:	f000 bb39 	b.w	8013630 <__swbuf_r>
 8012fbe:	6813      	ldr	r3, [r2, #0]
 8012fc0:	1c58      	adds	r0, r3, #1
 8012fc2:	6010      	str	r0, [r2, #0]
 8012fc4:	7019      	strb	r1, [r3, #0]
 8012fc6:	4608      	mov	r0, r1
 8012fc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012fcc:	4770      	bx	lr

08012fce <__sfputs_r>:
 8012fce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fd0:	4606      	mov	r6, r0
 8012fd2:	460f      	mov	r7, r1
 8012fd4:	4614      	mov	r4, r2
 8012fd6:	18d5      	adds	r5, r2, r3
 8012fd8:	42ac      	cmp	r4, r5
 8012fda:	d101      	bne.n	8012fe0 <__sfputs_r+0x12>
 8012fdc:	2000      	movs	r0, #0
 8012fde:	e007      	b.n	8012ff0 <__sfputs_r+0x22>
 8012fe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012fe4:	463a      	mov	r2, r7
 8012fe6:	4630      	mov	r0, r6
 8012fe8:	f7ff ffda 	bl	8012fa0 <__sfputc_r>
 8012fec:	1c43      	adds	r3, r0, #1
 8012fee:	d1f3      	bne.n	8012fd8 <__sfputs_r+0xa>
 8012ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012ff4 <_vfiprintf_r>:
 8012ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ff8:	460d      	mov	r5, r1
 8012ffa:	b09d      	sub	sp, #116	; 0x74
 8012ffc:	4614      	mov	r4, r2
 8012ffe:	4698      	mov	r8, r3
 8013000:	4606      	mov	r6, r0
 8013002:	b118      	cbz	r0, 801300c <_vfiprintf_r+0x18>
 8013004:	6983      	ldr	r3, [r0, #24]
 8013006:	b90b      	cbnz	r3, 801300c <_vfiprintf_r+0x18>
 8013008:	f7ff fefa 	bl	8012e00 <__sinit>
 801300c:	4b89      	ldr	r3, [pc, #548]	; (8013234 <_vfiprintf_r+0x240>)
 801300e:	429d      	cmp	r5, r3
 8013010:	d11b      	bne.n	801304a <_vfiprintf_r+0x56>
 8013012:	6875      	ldr	r5, [r6, #4]
 8013014:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013016:	07d9      	lsls	r1, r3, #31
 8013018:	d405      	bmi.n	8013026 <_vfiprintf_r+0x32>
 801301a:	89ab      	ldrh	r3, [r5, #12]
 801301c:	059a      	lsls	r2, r3, #22
 801301e:	d402      	bmi.n	8013026 <_vfiprintf_r+0x32>
 8013020:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013022:	f7ff ff9d 	bl	8012f60 <__retarget_lock_acquire_recursive>
 8013026:	89ab      	ldrh	r3, [r5, #12]
 8013028:	071b      	lsls	r3, r3, #28
 801302a:	d501      	bpl.n	8013030 <_vfiprintf_r+0x3c>
 801302c:	692b      	ldr	r3, [r5, #16]
 801302e:	b9eb      	cbnz	r3, 801306c <_vfiprintf_r+0x78>
 8013030:	4629      	mov	r1, r5
 8013032:	4630      	mov	r0, r6
 8013034:	f000 fb4e 	bl	80136d4 <__swsetup_r>
 8013038:	b1c0      	cbz	r0, 801306c <_vfiprintf_r+0x78>
 801303a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801303c:	07dc      	lsls	r4, r3, #31
 801303e:	d50e      	bpl.n	801305e <_vfiprintf_r+0x6a>
 8013040:	f04f 30ff 	mov.w	r0, #4294967295
 8013044:	b01d      	add	sp, #116	; 0x74
 8013046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801304a:	4b7b      	ldr	r3, [pc, #492]	; (8013238 <_vfiprintf_r+0x244>)
 801304c:	429d      	cmp	r5, r3
 801304e:	d101      	bne.n	8013054 <_vfiprintf_r+0x60>
 8013050:	68b5      	ldr	r5, [r6, #8]
 8013052:	e7df      	b.n	8013014 <_vfiprintf_r+0x20>
 8013054:	4b79      	ldr	r3, [pc, #484]	; (801323c <_vfiprintf_r+0x248>)
 8013056:	429d      	cmp	r5, r3
 8013058:	bf08      	it	eq
 801305a:	68f5      	ldreq	r5, [r6, #12]
 801305c:	e7da      	b.n	8013014 <_vfiprintf_r+0x20>
 801305e:	89ab      	ldrh	r3, [r5, #12]
 8013060:	0598      	lsls	r0, r3, #22
 8013062:	d4ed      	bmi.n	8013040 <_vfiprintf_r+0x4c>
 8013064:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013066:	f7ff ff7c 	bl	8012f62 <__retarget_lock_release_recursive>
 801306a:	e7e9      	b.n	8013040 <_vfiprintf_r+0x4c>
 801306c:	2300      	movs	r3, #0
 801306e:	9309      	str	r3, [sp, #36]	; 0x24
 8013070:	2320      	movs	r3, #32
 8013072:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013076:	f8cd 800c 	str.w	r8, [sp, #12]
 801307a:	2330      	movs	r3, #48	; 0x30
 801307c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013240 <_vfiprintf_r+0x24c>
 8013080:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013084:	f04f 0901 	mov.w	r9, #1
 8013088:	4623      	mov	r3, r4
 801308a:	469a      	mov	sl, r3
 801308c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013090:	b10a      	cbz	r2, 8013096 <_vfiprintf_r+0xa2>
 8013092:	2a25      	cmp	r2, #37	; 0x25
 8013094:	d1f9      	bne.n	801308a <_vfiprintf_r+0x96>
 8013096:	ebba 0b04 	subs.w	fp, sl, r4
 801309a:	d00b      	beq.n	80130b4 <_vfiprintf_r+0xc0>
 801309c:	465b      	mov	r3, fp
 801309e:	4622      	mov	r2, r4
 80130a0:	4629      	mov	r1, r5
 80130a2:	4630      	mov	r0, r6
 80130a4:	f7ff ff93 	bl	8012fce <__sfputs_r>
 80130a8:	3001      	adds	r0, #1
 80130aa:	f000 80aa 	beq.w	8013202 <_vfiprintf_r+0x20e>
 80130ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80130b0:	445a      	add	r2, fp
 80130b2:	9209      	str	r2, [sp, #36]	; 0x24
 80130b4:	f89a 3000 	ldrb.w	r3, [sl]
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	f000 80a2 	beq.w	8013202 <_vfiprintf_r+0x20e>
 80130be:	2300      	movs	r3, #0
 80130c0:	f04f 32ff 	mov.w	r2, #4294967295
 80130c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80130c8:	f10a 0a01 	add.w	sl, sl, #1
 80130cc:	9304      	str	r3, [sp, #16]
 80130ce:	9307      	str	r3, [sp, #28]
 80130d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80130d4:	931a      	str	r3, [sp, #104]	; 0x68
 80130d6:	4654      	mov	r4, sl
 80130d8:	2205      	movs	r2, #5
 80130da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80130de:	4858      	ldr	r0, [pc, #352]	; (8013240 <_vfiprintf_r+0x24c>)
 80130e0:	f7ed f896 	bl	8000210 <memchr>
 80130e4:	9a04      	ldr	r2, [sp, #16]
 80130e6:	b9d8      	cbnz	r0, 8013120 <_vfiprintf_r+0x12c>
 80130e8:	06d1      	lsls	r1, r2, #27
 80130ea:	bf44      	itt	mi
 80130ec:	2320      	movmi	r3, #32
 80130ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80130f2:	0713      	lsls	r3, r2, #28
 80130f4:	bf44      	itt	mi
 80130f6:	232b      	movmi	r3, #43	; 0x2b
 80130f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80130fc:	f89a 3000 	ldrb.w	r3, [sl]
 8013100:	2b2a      	cmp	r3, #42	; 0x2a
 8013102:	d015      	beq.n	8013130 <_vfiprintf_r+0x13c>
 8013104:	9a07      	ldr	r2, [sp, #28]
 8013106:	4654      	mov	r4, sl
 8013108:	2000      	movs	r0, #0
 801310a:	f04f 0c0a 	mov.w	ip, #10
 801310e:	4621      	mov	r1, r4
 8013110:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013114:	3b30      	subs	r3, #48	; 0x30
 8013116:	2b09      	cmp	r3, #9
 8013118:	d94e      	bls.n	80131b8 <_vfiprintf_r+0x1c4>
 801311a:	b1b0      	cbz	r0, 801314a <_vfiprintf_r+0x156>
 801311c:	9207      	str	r2, [sp, #28]
 801311e:	e014      	b.n	801314a <_vfiprintf_r+0x156>
 8013120:	eba0 0308 	sub.w	r3, r0, r8
 8013124:	fa09 f303 	lsl.w	r3, r9, r3
 8013128:	4313      	orrs	r3, r2
 801312a:	9304      	str	r3, [sp, #16]
 801312c:	46a2      	mov	sl, r4
 801312e:	e7d2      	b.n	80130d6 <_vfiprintf_r+0xe2>
 8013130:	9b03      	ldr	r3, [sp, #12]
 8013132:	1d19      	adds	r1, r3, #4
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	9103      	str	r1, [sp, #12]
 8013138:	2b00      	cmp	r3, #0
 801313a:	bfbb      	ittet	lt
 801313c:	425b      	neglt	r3, r3
 801313e:	f042 0202 	orrlt.w	r2, r2, #2
 8013142:	9307      	strge	r3, [sp, #28]
 8013144:	9307      	strlt	r3, [sp, #28]
 8013146:	bfb8      	it	lt
 8013148:	9204      	strlt	r2, [sp, #16]
 801314a:	7823      	ldrb	r3, [r4, #0]
 801314c:	2b2e      	cmp	r3, #46	; 0x2e
 801314e:	d10c      	bne.n	801316a <_vfiprintf_r+0x176>
 8013150:	7863      	ldrb	r3, [r4, #1]
 8013152:	2b2a      	cmp	r3, #42	; 0x2a
 8013154:	d135      	bne.n	80131c2 <_vfiprintf_r+0x1ce>
 8013156:	9b03      	ldr	r3, [sp, #12]
 8013158:	1d1a      	adds	r2, r3, #4
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	9203      	str	r2, [sp, #12]
 801315e:	2b00      	cmp	r3, #0
 8013160:	bfb8      	it	lt
 8013162:	f04f 33ff 	movlt.w	r3, #4294967295
 8013166:	3402      	adds	r4, #2
 8013168:	9305      	str	r3, [sp, #20]
 801316a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013250 <_vfiprintf_r+0x25c>
 801316e:	7821      	ldrb	r1, [r4, #0]
 8013170:	2203      	movs	r2, #3
 8013172:	4650      	mov	r0, sl
 8013174:	f7ed f84c 	bl	8000210 <memchr>
 8013178:	b140      	cbz	r0, 801318c <_vfiprintf_r+0x198>
 801317a:	2340      	movs	r3, #64	; 0x40
 801317c:	eba0 000a 	sub.w	r0, r0, sl
 8013180:	fa03 f000 	lsl.w	r0, r3, r0
 8013184:	9b04      	ldr	r3, [sp, #16]
 8013186:	4303      	orrs	r3, r0
 8013188:	3401      	adds	r4, #1
 801318a:	9304      	str	r3, [sp, #16]
 801318c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013190:	482c      	ldr	r0, [pc, #176]	; (8013244 <_vfiprintf_r+0x250>)
 8013192:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013196:	2206      	movs	r2, #6
 8013198:	f7ed f83a 	bl	8000210 <memchr>
 801319c:	2800      	cmp	r0, #0
 801319e:	d03f      	beq.n	8013220 <_vfiprintf_r+0x22c>
 80131a0:	4b29      	ldr	r3, [pc, #164]	; (8013248 <_vfiprintf_r+0x254>)
 80131a2:	bb1b      	cbnz	r3, 80131ec <_vfiprintf_r+0x1f8>
 80131a4:	9b03      	ldr	r3, [sp, #12]
 80131a6:	3307      	adds	r3, #7
 80131a8:	f023 0307 	bic.w	r3, r3, #7
 80131ac:	3308      	adds	r3, #8
 80131ae:	9303      	str	r3, [sp, #12]
 80131b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131b2:	443b      	add	r3, r7
 80131b4:	9309      	str	r3, [sp, #36]	; 0x24
 80131b6:	e767      	b.n	8013088 <_vfiprintf_r+0x94>
 80131b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80131bc:	460c      	mov	r4, r1
 80131be:	2001      	movs	r0, #1
 80131c0:	e7a5      	b.n	801310e <_vfiprintf_r+0x11a>
 80131c2:	2300      	movs	r3, #0
 80131c4:	3401      	adds	r4, #1
 80131c6:	9305      	str	r3, [sp, #20]
 80131c8:	4619      	mov	r1, r3
 80131ca:	f04f 0c0a 	mov.w	ip, #10
 80131ce:	4620      	mov	r0, r4
 80131d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80131d4:	3a30      	subs	r2, #48	; 0x30
 80131d6:	2a09      	cmp	r2, #9
 80131d8:	d903      	bls.n	80131e2 <_vfiprintf_r+0x1ee>
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d0c5      	beq.n	801316a <_vfiprintf_r+0x176>
 80131de:	9105      	str	r1, [sp, #20]
 80131e0:	e7c3      	b.n	801316a <_vfiprintf_r+0x176>
 80131e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80131e6:	4604      	mov	r4, r0
 80131e8:	2301      	movs	r3, #1
 80131ea:	e7f0      	b.n	80131ce <_vfiprintf_r+0x1da>
 80131ec:	ab03      	add	r3, sp, #12
 80131ee:	9300      	str	r3, [sp, #0]
 80131f0:	462a      	mov	r2, r5
 80131f2:	4b16      	ldr	r3, [pc, #88]	; (801324c <_vfiprintf_r+0x258>)
 80131f4:	a904      	add	r1, sp, #16
 80131f6:	4630      	mov	r0, r6
 80131f8:	f3af 8000 	nop.w
 80131fc:	4607      	mov	r7, r0
 80131fe:	1c78      	adds	r0, r7, #1
 8013200:	d1d6      	bne.n	80131b0 <_vfiprintf_r+0x1bc>
 8013202:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013204:	07d9      	lsls	r1, r3, #31
 8013206:	d405      	bmi.n	8013214 <_vfiprintf_r+0x220>
 8013208:	89ab      	ldrh	r3, [r5, #12]
 801320a:	059a      	lsls	r2, r3, #22
 801320c:	d402      	bmi.n	8013214 <_vfiprintf_r+0x220>
 801320e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013210:	f7ff fea7 	bl	8012f62 <__retarget_lock_release_recursive>
 8013214:	89ab      	ldrh	r3, [r5, #12]
 8013216:	065b      	lsls	r3, r3, #25
 8013218:	f53f af12 	bmi.w	8013040 <_vfiprintf_r+0x4c>
 801321c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801321e:	e711      	b.n	8013044 <_vfiprintf_r+0x50>
 8013220:	ab03      	add	r3, sp, #12
 8013222:	9300      	str	r3, [sp, #0]
 8013224:	462a      	mov	r2, r5
 8013226:	4b09      	ldr	r3, [pc, #36]	; (801324c <_vfiprintf_r+0x258>)
 8013228:	a904      	add	r1, sp, #16
 801322a:	4630      	mov	r0, r6
 801322c:	f000 f880 	bl	8013330 <_printf_i>
 8013230:	e7e4      	b.n	80131fc <_vfiprintf_r+0x208>
 8013232:	bf00      	nop
 8013234:	0801dd88 	.word	0x0801dd88
 8013238:	0801dda8 	.word	0x0801dda8
 801323c:	0801dd68 	.word	0x0801dd68
 8013240:	0801ddc8 	.word	0x0801ddc8
 8013244:	0801ddd2 	.word	0x0801ddd2
 8013248:	00000000 	.word	0x00000000
 801324c:	08012fcf 	.word	0x08012fcf
 8013250:	0801ddce 	.word	0x0801ddce

08013254 <_printf_common>:
 8013254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013258:	4616      	mov	r6, r2
 801325a:	4699      	mov	r9, r3
 801325c:	688a      	ldr	r2, [r1, #8]
 801325e:	690b      	ldr	r3, [r1, #16]
 8013260:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013264:	4293      	cmp	r3, r2
 8013266:	bfb8      	it	lt
 8013268:	4613      	movlt	r3, r2
 801326a:	6033      	str	r3, [r6, #0]
 801326c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013270:	4607      	mov	r7, r0
 8013272:	460c      	mov	r4, r1
 8013274:	b10a      	cbz	r2, 801327a <_printf_common+0x26>
 8013276:	3301      	adds	r3, #1
 8013278:	6033      	str	r3, [r6, #0]
 801327a:	6823      	ldr	r3, [r4, #0]
 801327c:	0699      	lsls	r1, r3, #26
 801327e:	bf42      	ittt	mi
 8013280:	6833      	ldrmi	r3, [r6, #0]
 8013282:	3302      	addmi	r3, #2
 8013284:	6033      	strmi	r3, [r6, #0]
 8013286:	6825      	ldr	r5, [r4, #0]
 8013288:	f015 0506 	ands.w	r5, r5, #6
 801328c:	d106      	bne.n	801329c <_printf_common+0x48>
 801328e:	f104 0a19 	add.w	sl, r4, #25
 8013292:	68e3      	ldr	r3, [r4, #12]
 8013294:	6832      	ldr	r2, [r6, #0]
 8013296:	1a9b      	subs	r3, r3, r2
 8013298:	42ab      	cmp	r3, r5
 801329a:	dc26      	bgt.n	80132ea <_printf_common+0x96>
 801329c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80132a0:	1e13      	subs	r3, r2, #0
 80132a2:	6822      	ldr	r2, [r4, #0]
 80132a4:	bf18      	it	ne
 80132a6:	2301      	movne	r3, #1
 80132a8:	0692      	lsls	r2, r2, #26
 80132aa:	d42b      	bmi.n	8013304 <_printf_common+0xb0>
 80132ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80132b0:	4649      	mov	r1, r9
 80132b2:	4638      	mov	r0, r7
 80132b4:	47c0      	blx	r8
 80132b6:	3001      	adds	r0, #1
 80132b8:	d01e      	beq.n	80132f8 <_printf_common+0xa4>
 80132ba:	6823      	ldr	r3, [r4, #0]
 80132bc:	68e5      	ldr	r5, [r4, #12]
 80132be:	6832      	ldr	r2, [r6, #0]
 80132c0:	f003 0306 	and.w	r3, r3, #6
 80132c4:	2b04      	cmp	r3, #4
 80132c6:	bf08      	it	eq
 80132c8:	1aad      	subeq	r5, r5, r2
 80132ca:	68a3      	ldr	r3, [r4, #8]
 80132cc:	6922      	ldr	r2, [r4, #16]
 80132ce:	bf0c      	ite	eq
 80132d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80132d4:	2500      	movne	r5, #0
 80132d6:	4293      	cmp	r3, r2
 80132d8:	bfc4      	itt	gt
 80132da:	1a9b      	subgt	r3, r3, r2
 80132dc:	18ed      	addgt	r5, r5, r3
 80132de:	2600      	movs	r6, #0
 80132e0:	341a      	adds	r4, #26
 80132e2:	42b5      	cmp	r5, r6
 80132e4:	d11a      	bne.n	801331c <_printf_common+0xc8>
 80132e6:	2000      	movs	r0, #0
 80132e8:	e008      	b.n	80132fc <_printf_common+0xa8>
 80132ea:	2301      	movs	r3, #1
 80132ec:	4652      	mov	r2, sl
 80132ee:	4649      	mov	r1, r9
 80132f0:	4638      	mov	r0, r7
 80132f2:	47c0      	blx	r8
 80132f4:	3001      	adds	r0, #1
 80132f6:	d103      	bne.n	8013300 <_printf_common+0xac>
 80132f8:	f04f 30ff 	mov.w	r0, #4294967295
 80132fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013300:	3501      	adds	r5, #1
 8013302:	e7c6      	b.n	8013292 <_printf_common+0x3e>
 8013304:	18e1      	adds	r1, r4, r3
 8013306:	1c5a      	adds	r2, r3, #1
 8013308:	2030      	movs	r0, #48	; 0x30
 801330a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801330e:	4422      	add	r2, r4
 8013310:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013314:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013318:	3302      	adds	r3, #2
 801331a:	e7c7      	b.n	80132ac <_printf_common+0x58>
 801331c:	2301      	movs	r3, #1
 801331e:	4622      	mov	r2, r4
 8013320:	4649      	mov	r1, r9
 8013322:	4638      	mov	r0, r7
 8013324:	47c0      	blx	r8
 8013326:	3001      	adds	r0, #1
 8013328:	d0e6      	beq.n	80132f8 <_printf_common+0xa4>
 801332a:	3601      	adds	r6, #1
 801332c:	e7d9      	b.n	80132e2 <_printf_common+0x8e>
	...

08013330 <_printf_i>:
 8013330:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013334:	7e0f      	ldrb	r7, [r1, #24]
 8013336:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013338:	2f78      	cmp	r7, #120	; 0x78
 801333a:	4691      	mov	r9, r2
 801333c:	4680      	mov	r8, r0
 801333e:	460c      	mov	r4, r1
 8013340:	469a      	mov	sl, r3
 8013342:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013346:	d807      	bhi.n	8013358 <_printf_i+0x28>
 8013348:	2f62      	cmp	r7, #98	; 0x62
 801334a:	d80a      	bhi.n	8013362 <_printf_i+0x32>
 801334c:	2f00      	cmp	r7, #0
 801334e:	f000 80d8 	beq.w	8013502 <_printf_i+0x1d2>
 8013352:	2f58      	cmp	r7, #88	; 0x58
 8013354:	f000 80a3 	beq.w	801349e <_printf_i+0x16e>
 8013358:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801335c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013360:	e03a      	b.n	80133d8 <_printf_i+0xa8>
 8013362:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013366:	2b15      	cmp	r3, #21
 8013368:	d8f6      	bhi.n	8013358 <_printf_i+0x28>
 801336a:	a101      	add	r1, pc, #4	; (adr r1, 8013370 <_printf_i+0x40>)
 801336c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013370:	080133c9 	.word	0x080133c9
 8013374:	080133dd 	.word	0x080133dd
 8013378:	08013359 	.word	0x08013359
 801337c:	08013359 	.word	0x08013359
 8013380:	08013359 	.word	0x08013359
 8013384:	08013359 	.word	0x08013359
 8013388:	080133dd 	.word	0x080133dd
 801338c:	08013359 	.word	0x08013359
 8013390:	08013359 	.word	0x08013359
 8013394:	08013359 	.word	0x08013359
 8013398:	08013359 	.word	0x08013359
 801339c:	080134e9 	.word	0x080134e9
 80133a0:	0801340d 	.word	0x0801340d
 80133a4:	080134cb 	.word	0x080134cb
 80133a8:	08013359 	.word	0x08013359
 80133ac:	08013359 	.word	0x08013359
 80133b0:	0801350b 	.word	0x0801350b
 80133b4:	08013359 	.word	0x08013359
 80133b8:	0801340d 	.word	0x0801340d
 80133bc:	08013359 	.word	0x08013359
 80133c0:	08013359 	.word	0x08013359
 80133c4:	080134d3 	.word	0x080134d3
 80133c8:	682b      	ldr	r3, [r5, #0]
 80133ca:	1d1a      	adds	r2, r3, #4
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	602a      	str	r2, [r5, #0]
 80133d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80133d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80133d8:	2301      	movs	r3, #1
 80133da:	e0a3      	b.n	8013524 <_printf_i+0x1f4>
 80133dc:	6820      	ldr	r0, [r4, #0]
 80133de:	6829      	ldr	r1, [r5, #0]
 80133e0:	0606      	lsls	r6, r0, #24
 80133e2:	f101 0304 	add.w	r3, r1, #4
 80133e6:	d50a      	bpl.n	80133fe <_printf_i+0xce>
 80133e8:	680e      	ldr	r6, [r1, #0]
 80133ea:	602b      	str	r3, [r5, #0]
 80133ec:	2e00      	cmp	r6, #0
 80133ee:	da03      	bge.n	80133f8 <_printf_i+0xc8>
 80133f0:	232d      	movs	r3, #45	; 0x2d
 80133f2:	4276      	negs	r6, r6
 80133f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80133f8:	485e      	ldr	r0, [pc, #376]	; (8013574 <_printf_i+0x244>)
 80133fa:	230a      	movs	r3, #10
 80133fc:	e019      	b.n	8013432 <_printf_i+0x102>
 80133fe:	680e      	ldr	r6, [r1, #0]
 8013400:	602b      	str	r3, [r5, #0]
 8013402:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013406:	bf18      	it	ne
 8013408:	b236      	sxthne	r6, r6
 801340a:	e7ef      	b.n	80133ec <_printf_i+0xbc>
 801340c:	682b      	ldr	r3, [r5, #0]
 801340e:	6820      	ldr	r0, [r4, #0]
 8013410:	1d19      	adds	r1, r3, #4
 8013412:	6029      	str	r1, [r5, #0]
 8013414:	0601      	lsls	r1, r0, #24
 8013416:	d501      	bpl.n	801341c <_printf_i+0xec>
 8013418:	681e      	ldr	r6, [r3, #0]
 801341a:	e002      	b.n	8013422 <_printf_i+0xf2>
 801341c:	0646      	lsls	r6, r0, #25
 801341e:	d5fb      	bpl.n	8013418 <_printf_i+0xe8>
 8013420:	881e      	ldrh	r6, [r3, #0]
 8013422:	4854      	ldr	r0, [pc, #336]	; (8013574 <_printf_i+0x244>)
 8013424:	2f6f      	cmp	r7, #111	; 0x6f
 8013426:	bf0c      	ite	eq
 8013428:	2308      	moveq	r3, #8
 801342a:	230a      	movne	r3, #10
 801342c:	2100      	movs	r1, #0
 801342e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013432:	6865      	ldr	r5, [r4, #4]
 8013434:	60a5      	str	r5, [r4, #8]
 8013436:	2d00      	cmp	r5, #0
 8013438:	bfa2      	ittt	ge
 801343a:	6821      	ldrge	r1, [r4, #0]
 801343c:	f021 0104 	bicge.w	r1, r1, #4
 8013440:	6021      	strge	r1, [r4, #0]
 8013442:	b90e      	cbnz	r6, 8013448 <_printf_i+0x118>
 8013444:	2d00      	cmp	r5, #0
 8013446:	d04d      	beq.n	80134e4 <_printf_i+0x1b4>
 8013448:	4615      	mov	r5, r2
 801344a:	fbb6 f1f3 	udiv	r1, r6, r3
 801344e:	fb03 6711 	mls	r7, r3, r1, r6
 8013452:	5dc7      	ldrb	r7, [r0, r7]
 8013454:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013458:	4637      	mov	r7, r6
 801345a:	42bb      	cmp	r3, r7
 801345c:	460e      	mov	r6, r1
 801345e:	d9f4      	bls.n	801344a <_printf_i+0x11a>
 8013460:	2b08      	cmp	r3, #8
 8013462:	d10b      	bne.n	801347c <_printf_i+0x14c>
 8013464:	6823      	ldr	r3, [r4, #0]
 8013466:	07de      	lsls	r6, r3, #31
 8013468:	d508      	bpl.n	801347c <_printf_i+0x14c>
 801346a:	6923      	ldr	r3, [r4, #16]
 801346c:	6861      	ldr	r1, [r4, #4]
 801346e:	4299      	cmp	r1, r3
 8013470:	bfde      	ittt	le
 8013472:	2330      	movle	r3, #48	; 0x30
 8013474:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013478:	f105 35ff 	addle.w	r5, r5, #4294967295
 801347c:	1b52      	subs	r2, r2, r5
 801347e:	6122      	str	r2, [r4, #16]
 8013480:	f8cd a000 	str.w	sl, [sp]
 8013484:	464b      	mov	r3, r9
 8013486:	aa03      	add	r2, sp, #12
 8013488:	4621      	mov	r1, r4
 801348a:	4640      	mov	r0, r8
 801348c:	f7ff fee2 	bl	8013254 <_printf_common>
 8013490:	3001      	adds	r0, #1
 8013492:	d14c      	bne.n	801352e <_printf_i+0x1fe>
 8013494:	f04f 30ff 	mov.w	r0, #4294967295
 8013498:	b004      	add	sp, #16
 801349a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801349e:	4835      	ldr	r0, [pc, #212]	; (8013574 <_printf_i+0x244>)
 80134a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80134a4:	6829      	ldr	r1, [r5, #0]
 80134a6:	6823      	ldr	r3, [r4, #0]
 80134a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80134ac:	6029      	str	r1, [r5, #0]
 80134ae:	061d      	lsls	r5, r3, #24
 80134b0:	d514      	bpl.n	80134dc <_printf_i+0x1ac>
 80134b2:	07df      	lsls	r7, r3, #31
 80134b4:	bf44      	itt	mi
 80134b6:	f043 0320 	orrmi.w	r3, r3, #32
 80134ba:	6023      	strmi	r3, [r4, #0]
 80134bc:	b91e      	cbnz	r6, 80134c6 <_printf_i+0x196>
 80134be:	6823      	ldr	r3, [r4, #0]
 80134c0:	f023 0320 	bic.w	r3, r3, #32
 80134c4:	6023      	str	r3, [r4, #0]
 80134c6:	2310      	movs	r3, #16
 80134c8:	e7b0      	b.n	801342c <_printf_i+0xfc>
 80134ca:	6823      	ldr	r3, [r4, #0]
 80134cc:	f043 0320 	orr.w	r3, r3, #32
 80134d0:	6023      	str	r3, [r4, #0]
 80134d2:	2378      	movs	r3, #120	; 0x78
 80134d4:	4828      	ldr	r0, [pc, #160]	; (8013578 <_printf_i+0x248>)
 80134d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80134da:	e7e3      	b.n	80134a4 <_printf_i+0x174>
 80134dc:	0659      	lsls	r1, r3, #25
 80134de:	bf48      	it	mi
 80134e0:	b2b6      	uxthmi	r6, r6
 80134e2:	e7e6      	b.n	80134b2 <_printf_i+0x182>
 80134e4:	4615      	mov	r5, r2
 80134e6:	e7bb      	b.n	8013460 <_printf_i+0x130>
 80134e8:	682b      	ldr	r3, [r5, #0]
 80134ea:	6826      	ldr	r6, [r4, #0]
 80134ec:	6961      	ldr	r1, [r4, #20]
 80134ee:	1d18      	adds	r0, r3, #4
 80134f0:	6028      	str	r0, [r5, #0]
 80134f2:	0635      	lsls	r5, r6, #24
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	d501      	bpl.n	80134fc <_printf_i+0x1cc>
 80134f8:	6019      	str	r1, [r3, #0]
 80134fa:	e002      	b.n	8013502 <_printf_i+0x1d2>
 80134fc:	0670      	lsls	r0, r6, #25
 80134fe:	d5fb      	bpl.n	80134f8 <_printf_i+0x1c8>
 8013500:	8019      	strh	r1, [r3, #0]
 8013502:	2300      	movs	r3, #0
 8013504:	6123      	str	r3, [r4, #16]
 8013506:	4615      	mov	r5, r2
 8013508:	e7ba      	b.n	8013480 <_printf_i+0x150>
 801350a:	682b      	ldr	r3, [r5, #0]
 801350c:	1d1a      	adds	r2, r3, #4
 801350e:	602a      	str	r2, [r5, #0]
 8013510:	681d      	ldr	r5, [r3, #0]
 8013512:	6862      	ldr	r2, [r4, #4]
 8013514:	2100      	movs	r1, #0
 8013516:	4628      	mov	r0, r5
 8013518:	f7ec fe7a 	bl	8000210 <memchr>
 801351c:	b108      	cbz	r0, 8013522 <_printf_i+0x1f2>
 801351e:	1b40      	subs	r0, r0, r5
 8013520:	6060      	str	r0, [r4, #4]
 8013522:	6863      	ldr	r3, [r4, #4]
 8013524:	6123      	str	r3, [r4, #16]
 8013526:	2300      	movs	r3, #0
 8013528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801352c:	e7a8      	b.n	8013480 <_printf_i+0x150>
 801352e:	6923      	ldr	r3, [r4, #16]
 8013530:	462a      	mov	r2, r5
 8013532:	4649      	mov	r1, r9
 8013534:	4640      	mov	r0, r8
 8013536:	47d0      	blx	sl
 8013538:	3001      	adds	r0, #1
 801353a:	d0ab      	beq.n	8013494 <_printf_i+0x164>
 801353c:	6823      	ldr	r3, [r4, #0]
 801353e:	079b      	lsls	r3, r3, #30
 8013540:	d413      	bmi.n	801356a <_printf_i+0x23a>
 8013542:	68e0      	ldr	r0, [r4, #12]
 8013544:	9b03      	ldr	r3, [sp, #12]
 8013546:	4298      	cmp	r0, r3
 8013548:	bfb8      	it	lt
 801354a:	4618      	movlt	r0, r3
 801354c:	e7a4      	b.n	8013498 <_printf_i+0x168>
 801354e:	2301      	movs	r3, #1
 8013550:	4632      	mov	r2, r6
 8013552:	4649      	mov	r1, r9
 8013554:	4640      	mov	r0, r8
 8013556:	47d0      	blx	sl
 8013558:	3001      	adds	r0, #1
 801355a:	d09b      	beq.n	8013494 <_printf_i+0x164>
 801355c:	3501      	adds	r5, #1
 801355e:	68e3      	ldr	r3, [r4, #12]
 8013560:	9903      	ldr	r1, [sp, #12]
 8013562:	1a5b      	subs	r3, r3, r1
 8013564:	42ab      	cmp	r3, r5
 8013566:	dcf2      	bgt.n	801354e <_printf_i+0x21e>
 8013568:	e7eb      	b.n	8013542 <_printf_i+0x212>
 801356a:	2500      	movs	r5, #0
 801356c:	f104 0619 	add.w	r6, r4, #25
 8013570:	e7f5      	b.n	801355e <_printf_i+0x22e>
 8013572:	bf00      	nop
 8013574:	0801ddd9 	.word	0x0801ddd9
 8013578:	0801ddea 	.word	0x0801ddea

0801357c <_putc_r>:
 801357c:	b570      	push	{r4, r5, r6, lr}
 801357e:	460d      	mov	r5, r1
 8013580:	4614      	mov	r4, r2
 8013582:	4606      	mov	r6, r0
 8013584:	b118      	cbz	r0, 801358e <_putc_r+0x12>
 8013586:	6983      	ldr	r3, [r0, #24]
 8013588:	b90b      	cbnz	r3, 801358e <_putc_r+0x12>
 801358a:	f7ff fc39 	bl	8012e00 <__sinit>
 801358e:	4b1c      	ldr	r3, [pc, #112]	; (8013600 <_putc_r+0x84>)
 8013590:	429c      	cmp	r4, r3
 8013592:	d124      	bne.n	80135de <_putc_r+0x62>
 8013594:	6874      	ldr	r4, [r6, #4]
 8013596:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013598:	07d8      	lsls	r0, r3, #31
 801359a:	d405      	bmi.n	80135a8 <_putc_r+0x2c>
 801359c:	89a3      	ldrh	r3, [r4, #12]
 801359e:	0599      	lsls	r1, r3, #22
 80135a0:	d402      	bmi.n	80135a8 <_putc_r+0x2c>
 80135a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80135a4:	f7ff fcdc 	bl	8012f60 <__retarget_lock_acquire_recursive>
 80135a8:	68a3      	ldr	r3, [r4, #8]
 80135aa:	3b01      	subs	r3, #1
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	60a3      	str	r3, [r4, #8]
 80135b0:	da05      	bge.n	80135be <_putc_r+0x42>
 80135b2:	69a2      	ldr	r2, [r4, #24]
 80135b4:	4293      	cmp	r3, r2
 80135b6:	db1c      	blt.n	80135f2 <_putc_r+0x76>
 80135b8:	b2eb      	uxtb	r3, r5
 80135ba:	2b0a      	cmp	r3, #10
 80135bc:	d019      	beq.n	80135f2 <_putc_r+0x76>
 80135be:	6823      	ldr	r3, [r4, #0]
 80135c0:	1c5a      	adds	r2, r3, #1
 80135c2:	6022      	str	r2, [r4, #0]
 80135c4:	701d      	strb	r5, [r3, #0]
 80135c6:	b2ed      	uxtb	r5, r5
 80135c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80135ca:	07da      	lsls	r2, r3, #31
 80135cc:	d405      	bmi.n	80135da <_putc_r+0x5e>
 80135ce:	89a3      	ldrh	r3, [r4, #12]
 80135d0:	059b      	lsls	r3, r3, #22
 80135d2:	d402      	bmi.n	80135da <_putc_r+0x5e>
 80135d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80135d6:	f7ff fcc4 	bl	8012f62 <__retarget_lock_release_recursive>
 80135da:	4628      	mov	r0, r5
 80135dc:	bd70      	pop	{r4, r5, r6, pc}
 80135de:	4b09      	ldr	r3, [pc, #36]	; (8013604 <_putc_r+0x88>)
 80135e0:	429c      	cmp	r4, r3
 80135e2:	d101      	bne.n	80135e8 <_putc_r+0x6c>
 80135e4:	68b4      	ldr	r4, [r6, #8]
 80135e6:	e7d6      	b.n	8013596 <_putc_r+0x1a>
 80135e8:	4b07      	ldr	r3, [pc, #28]	; (8013608 <_putc_r+0x8c>)
 80135ea:	429c      	cmp	r4, r3
 80135ec:	bf08      	it	eq
 80135ee:	68f4      	ldreq	r4, [r6, #12]
 80135f0:	e7d1      	b.n	8013596 <_putc_r+0x1a>
 80135f2:	4629      	mov	r1, r5
 80135f4:	4622      	mov	r2, r4
 80135f6:	4630      	mov	r0, r6
 80135f8:	f000 f81a 	bl	8013630 <__swbuf_r>
 80135fc:	4605      	mov	r5, r0
 80135fe:	e7e3      	b.n	80135c8 <_putc_r+0x4c>
 8013600:	0801dd88 	.word	0x0801dd88
 8013604:	0801dda8 	.word	0x0801dda8
 8013608:	0801dd68 	.word	0x0801dd68

0801360c <_read_r>:
 801360c:	b538      	push	{r3, r4, r5, lr}
 801360e:	4d07      	ldr	r5, [pc, #28]	; (801362c <_read_r+0x20>)
 8013610:	4604      	mov	r4, r0
 8013612:	4608      	mov	r0, r1
 8013614:	4611      	mov	r1, r2
 8013616:	2200      	movs	r2, #0
 8013618:	602a      	str	r2, [r5, #0]
 801361a:	461a      	mov	r2, r3
 801361c:	f7fc f88a 	bl	800f734 <_read>
 8013620:	1c43      	adds	r3, r0, #1
 8013622:	d102      	bne.n	801362a <_read_r+0x1e>
 8013624:	682b      	ldr	r3, [r5, #0]
 8013626:	b103      	cbz	r3, 801362a <_read_r+0x1e>
 8013628:	6023      	str	r3, [r4, #0]
 801362a:	bd38      	pop	{r3, r4, r5, pc}
 801362c:	20003700 	.word	0x20003700

08013630 <__swbuf_r>:
 8013630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013632:	460e      	mov	r6, r1
 8013634:	4614      	mov	r4, r2
 8013636:	4605      	mov	r5, r0
 8013638:	b118      	cbz	r0, 8013642 <__swbuf_r+0x12>
 801363a:	6983      	ldr	r3, [r0, #24]
 801363c:	b90b      	cbnz	r3, 8013642 <__swbuf_r+0x12>
 801363e:	f7ff fbdf 	bl	8012e00 <__sinit>
 8013642:	4b21      	ldr	r3, [pc, #132]	; (80136c8 <__swbuf_r+0x98>)
 8013644:	429c      	cmp	r4, r3
 8013646:	d12b      	bne.n	80136a0 <__swbuf_r+0x70>
 8013648:	686c      	ldr	r4, [r5, #4]
 801364a:	69a3      	ldr	r3, [r4, #24]
 801364c:	60a3      	str	r3, [r4, #8]
 801364e:	89a3      	ldrh	r3, [r4, #12]
 8013650:	071a      	lsls	r2, r3, #28
 8013652:	d52f      	bpl.n	80136b4 <__swbuf_r+0x84>
 8013654:	6923      	ldr	r3, [r4, #16]
 8013656:	b36b      	cbz	r3, 80136b4 <__swbuf_r+0x84>
 8013658:	6923      	ldr	r3, [r4, #16]
 801365a:	6820      	ldr	r0, [r4, #0]
 801365c:	1ac0      	subs	r0, r0, r3
 801365e:	6963      	ldr	r3, [r4, #20]
 8013660:	b2f6      	uxtb	r6, r6
 8013662:	4283      	cmp	r3, r0
 8013664:	4637      	mov	r7, r6
 8013666:	dc04      	bgt.n	8013672 <__swbuf_r+0x42>
 8013668:	4621      	mov	r1, r4
 801366a:	4628      	mov	r0, r5
 801366c:	f000 f92e 	bl	80138cc <_fflush_r>
 8013670:	bb30      	cbnz	r0, 80136c0 <__swbuf_r+0x90>
 8013672:	68a3      	ldr	r3, [r4, #8]
 8013674:	3b01      	subs	r3, #1
 8013676:	60a3      	str	r3, [r4, #8]
 8013678:	6823      	ldr	r3, [r4, #0]
 801367a:	1c5a      	adds	r2, r3, #1
 801367c:	6022      	str	r2, [r4, #0]
 801367e:	701e      	strb	r6, [r3, #0]
 8013680:	6963      	ldr	r3, [r4, #20]
 8013682:	3001      	adds	r0, #1
 8013684:	4283      	cmp	r3, r0
 8013686:	d004      	beq.n	8013692 <__swbuf_r+0x62>
 8013688:	89a3      	ldrh	r3, [r4, #12]
 801368a:	07db      	lsls	r3, r3, #31
 801368c:	d506      	bpl.n	801369c <__swbuf_r+0x6c>
 801368e:	2e0a      	cmp	r6, #10
 8013690:	d104      	bne.n	801369c <__swbuf_r+0x6c>
 8013692:	4621      	mov	r1, r4
 8013694:	4628      	mov	r0, r5
 8013696:	f000 f919 	bl	80138cc <_fflush_r>
 801369a:	b988      	cbnz	r0, 80136c0 <__swbuf_r+0x90>
 801369c:	4638      	mov	r0, r7
 801369e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80136a0:	4b0a      	ldr	r3, [pc, #40]	; (80136cc <__swbuf_r+0x9c>)
 80136a2:	429c      	cmp	r4, r3
 80136a4:	d101      	bne.n	80136aa <__swbuf_r+0x7a>
 80136a6:	68ac      	ldr	r4, [r5, #8]
 80136a8:	e7cf      	b.n	801364a <__swbuf_r+0x1a>
 80136aa:	4b09      	ldr	r3, [pc, #36]	; (80136d0 <__swbuf_r+0xa0>)
 80136ac:	429c      	cmp	r4, r3
 80136ae:	bf08      	it	eq
 80136b0:	68ec      	ldreq	r4, [r5, #12]
 80136b2:	e7ca      	b.n	801364a <__swbuf_r+0x1a>
 80136b4:	4621      	mov	r1, r4
 80136b6:	4628      	mov	r0, r5
 80136b8:	f000 f80c 	bl	80136d4 <__swsetup_r>
 80136bc:	2800      	cmp	r0, #0
 80136be:	d0cb      	beq.n	8013658 <__swbuf_r+0x28>
 80136c0:	f04f 37ff 	mov.w	r7, #4294967295
 80136c4:	e7ea      	b.n	801369c <__swbuf_r+0x6c>
 80136c6:	bf00      	nop
 80136c8:	0801dd88 	.word	0x0801dd88
 80136cc:	0801dda8 	.word	0x0801dda8
 80136d0:	0801dd68 	.word	0x0801dd68

080136d4 <__swsetup_r>:
 80136d4:	4b32      	ldr	r3, [pc, #200]	; (80137a0 <__swsetup_r+0xcc>)
 80136d6:	b570      	push	{r4, r5, r6, lr}
 80136d8:	681d      	ldr	r5, [r3, #0]
 80136da:	4606      	mov	r6, r0
 80136dc:	460c      	mov	r4, r1
 80136de:	b125      	cbz	r5, 80136ea <__swsetup_r+0x16>
 80136e0:	69ab      	ldr	r3, [r5, #24]
 80136e2:	b913      	cbnz	r3, 80136ea <__swsetup_r+0x16>
 80136e4:	4628      	mov	r0, r5
 80136e6:	f7ff fb8b 	bl	8012e00 <__sinit>
 80136ea:	4b2e      	ldr	r3, [pc, #184]	; (80137a4 <__swsetup_r+0xd0>)
 80136ec:	429c      	cmp	r4, r3
 80136ee:	d10f      	bne.n	8013710 <__swsetup_r+0x3c>
 80136f0:	686c      	ldr	r4, [r5, #4]
 80136f2:	89a3      	ldrh	r3, [r4, #12]
 80136f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80136f8:	0719      	lsls	r1, r3, #28
 80136fa:	d42c      	bmi.n	8013756 <__swsetup_r+0x82>
 80136fc:	06dd      	lsls	r5, r3, #27
 80136fe:	d411      	bmi.n	8013724 <__swsetup_r+0x50>
 8013700:	2309      	movs	r3, #9
 8013702:	6033      	str	r3, [r6, #0]
 8013704:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013708:	81a3      	strh	r3, [r4, #12]
 801370a:	f04f 30ff 	mov.w	r0, #4294967295
 801370e:	e03e      	b.n	801378e <__swsetup_r+0xba>
 8013710:	4b25      	ldr	r3, [pc, #148]	; (80137a8 <__swsetup_r+0xd4>)
 8013712:	429c      	cmp	r4, r3
 8013714:	d101      	bne.n	801371a <__swsetup_r+0x46>
 8013716:	68ac      	ldr	r4, [r5, #8]
 8013718:	e7eb      	b.n	80136f2 <__swsetup_r+0x1e>
 801371a:	4b24      	ldr	r3, [pc, #144]	; (80137ac <__swsetup_r+0xd8>)
 801371c:	429c      	cmp	r4, r3
 801371e:	bf08      	it	eq
 8013720:	68ec      	ldreq	r4, [r5, #12]
 8013722:	e7e6      	b.n	80136f2 <__swsetup_r+0x1e>
 8013724:	0758      	lsls	r0, r3, #29
 8013726:	d512      	bpl.n	801374e <__swsetup_r+0x7a>
 8013728:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801372a:	b141      	cbz	r1, 801373e <__swsetup_r+0x6a>
 801372c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013730:	4299      	cmp	r1, r3
 8013732:	d002      	beq.n	801373a <__swsetup_r+0x66>
 8013734:	4630      	mov	r0, r6
 8013736:	f7ff f845 	bl	80127c4 <_free_r>
 801373a:	2300      	movs	r3, #0
 801373c:	6363      	str	r3, [r4, #52]	; 0x34
 801373e:	89a3      	ldrh	r3, [r4, #12]
 8013740:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013744:	81a3      	strh	r3, [r4, #12]
 8013746:	2300      	movs	r3, #0
 8013748:	6063      	str	r3, [r4, #4]
 801374a:	6923      	ldr	r3, [r4, #16]
 801374c:	6023      	str	r3, [r4, #0]
 801374e:	89a3      	ldrh	r3, [r4, #12]
 8013750:	f043 0308 	orr.w	r3, r3, #8
 8013754:	81a3      	strh	r3, [r4, #12]
 8013756:	6923      	ldr	r3, [r4, #16]
 8013758:	b94b      	cbnz	r3, 801376e <__swsetup_r+0x9a>
 801375a:	89a3      	ldrh	r3, [r4, #12]
 801375c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013764:	d003      	beq.n	801376e <__swsetup_r+0x9a>
 8013766:	4621      	mov	r1, r4
 8013768:	4630      	mov	r0, r6
 801376a:	f000 f911 	bl	8013990 <__smakebuf_r>
 801376e:	89a0      	ldrh	r0, [r4, #12]
 8013770:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013774:	f010 0301 	ands.w	r3, r0, #1
 8013778:	d00a      	beq.n	8013790 <__swsetup_r+0xbc>
 801377a:	2300      	movs	r3, #0
 801377c:	60a3      	str	r3, [r4, #8]
 801377e:	6963      	ldr	r3, [r4, #20]
 8013780:	425b      	negs	r3, r3
 8013782:	61a3      	str	r3, [r4, #24]
 8013784:	6923      	ldr	r3, [r4, #16]
 8013786:	b943      	cbnz	r3, 801379a <__swsetup_r+0xc6>
 8013788:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801378c:	d1ba      	bne.n	8013704 <__swsetup_r+0x30>
 801378e:	bd70      	pop	{r4, r5, r6, pc}
 8013790:	0781      	lsls	r1, r0, #30
 8013792:	bf58      	it	pl
 8013794:	6963      	ldrpl	r3, [r4, #20]
 8013796:	60a3      	str	r3, [r4, #8]
 8013798:	e7f4      	b.n	8013784 <__swsetup_r+0xb0>
 801379a:	2000      	movs	r0, #0
 801379c:	e7f7      	b.n	801378e <__swsetup_r+0xba>
 801379e:	bf00      	nop
 80137a0:	20000290 	.word	0x20000290
 80137a4:	0801dd88 	.word	0x0801dd88
 80137a8:	0801dda8 	.word	0x0801dda8
 80137ac:	0801dd68 	.word	0x0801dd68

080137b0 <abort>:
 80137b0:	b508      	push	{r3, lr}
 80137b2:	2006      	movs	r0, #6
 80137b4:	f000 f954 	bl	8013a60 <raise>
 80137b8:	2001      	movs	r0, #1
 80137ba:	f7fb ffb1 	bl	800f720 <_exit>
	...

080137c0 <__sflush_r>:
 80137c0:	898a      	ldrh	r2, [r1, #12]
 80137c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137c6:	4605      	mov	r5, r0
 80137c8:	0710      	lsls	r0, r2, #28
 80137ca:	460c      	mov	r4, r1
 80137cc:	d458      	bmi.n	8013880 <__sflush_r+0xc0>
 80137ce:	684b      	ldr	r3, [r1, #4]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	dc05      	bgt.n	80137e0 <__sflush_r+0x20>
 80137d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	dc02      	bgt.n	80137e0 <__sflush_r+0x20>
 80137da:	2000      	movs	r0, #0
 80137dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80137e2:	2e00      	cmp	r6, #0
 80137e4:	d0f9      	beq.n	80137da <__sflush_r+0x1a>
 80137e6:	2300      	movs	r3, #0
 80137e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80137ec:	682f      	ldr	r7, [r5, #0]
 80137ee:	602b      	str	r3, [r5, #0]
 80137f0:	d032      	beq.n	8013858 <__sflush_r+0x98>
 80137f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80137f4:	89a3      	ldrh	r3, [r4, #12]
 80137f6:	075a      	lsls	r2, r3, #29
 80137f8:	d505      	bpl.n	8013806 <__sflush_r+0x46>
 80137fa:	6863      	ldr	r3, [r4, #4]
 80137fc:	1ac0      	subs	r0, r0, r3
 80137fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013800:	b10b      	cbz	r3, 8013806 <__sflush_r+0x46>
 8013802:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013804:	1ac0      	subs	r0, r0, r3
 8013806:	2300      	movs	r3, #0
 8013808:	4602      	mov	r2, r0
 801380a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801380c:	6a21      	ldr	r1, [r4, #32]
 801380e:	4628      	mov	r0, r5
 8013810:	47b0      	blx	r6
 8013812:	1c43      	adds	r3, r0, #1
 8013814:	89a3      	ldrh	r3, [r4, #12]
 8013816:	d106      	bne.n	8013826 <__sflush_r+0x66>
 8013818:	6829      	ldr	r1, [r5, #0]
 801381a:	291d      	cmp	r1, #29
 801381c:	d82c      	bhi.n	8013878 <__sflush_r+0xb8>
 801381e:	4a2a      	ldr	r2, [pc, #168]	; (80138c8 <__sflush_r+0x108>)
 8013820:	40ca      	lsrs	r2, r1
 8013822:	07d6      	lsls	r6, r2, #31
 8013824:	d528      	bpl.n	8013878 <__sflush_r+0xb8>
 8013826:	2200      	movs	r2, #0
 8013828:	6062      	str	r2, [r4, #4]
 801382a:	04d9      	lsls	r1, r3, #19
 801382c:	6922      	ldr	r2, [r4, #16]
 801382e:	6022      	str	r2, [r4, #0]
 8013830:	d504      	bpl.n	801383c <__sflush_r+0x7c>
 8013832:	1c42      	adds	r2, r0, #1
 8013834:	d101      	bne.n	801383a <__sflush_r+0x7a>
 8013836:	682b      	ldr	r3, [r5, #0]
 8013838:	b903      	cbnz	r3, 801383c <__sflush_r+0x7c>
 801383a:	6560      	str	r0, [r4, #84]	; 0x54
 801383c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801383e:	602f      	str	r7, [r5, #0]
 8013840:	2900      	cmp	r1, #0
 8013842:	d0ca      	beq.n	80137da <__sflush_r+0x1a>
 8013844:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013848:	4299      	cmp	r1, r3
 801384a:	d002      	beq.n	8013852 <__sflush_r+0x92>
 801384c:	4628      	mov	r0, r5
 801384e:	f7fe ffb9 	bl	80127c4 <_free_r>
 8013852:	2000      	movs	r0, #0
 8013854:	6360      	str	r0, [r4, #52]	; 0x34
 8013856:	e7c1      	b.n	80137dc <__sflush_r+0x1c>
 8013858:	6a21      	ldr	r1, [r4, #32]
 801385a:	2301      	movs	r3, #1
 801385c:	4628      	mov	r0, r5
 801385e:	47b0      	blx	r6
 8013860:	1c41      	adds	r1, r0, #1
 8013862:	d1c7      	bne.n	80137f4 <__sflush_r+0x34>
 8013864:	682b      	ldr	r3, [r5, #0]
 8013866:	2b00      	cmp	r3, #0
 8013868:	d0c4      	beq.n	80137f4 <__sflush_r+0x34>
 801386a:	2b1d      	cmp	r3, #29
 801386c:	d001      	beq.n	8013872 <__sflush_r+0xb2>
 801386e:	2b16      	cmp	r3, #22
 8013870:	d101      	bne.n	8013876 <__sflush_r+0xb6>
 8013872:	602f      	str	r7, [r5, #0]
 8013874:	e7b1      	b.n	80137da <__sflush_r+0x1a>
 8013876:	89a3      	ldrh	r3, [r4, #12]
 8013878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801387c:	81a3      	strh	r3, [r4, #12]
 801387e:	e7ad      	b.n	80137dc <__sflush_r+0x1c>
 8013880:	690f      	ldr	r7, [r1, #16]
 8013882:	2f00      	cmp	r7, #0
 8013884:	d0a9      	beq.n	80137da <__sflush_r+0x1a>
 8013886:	0793      	lsls	r3, r2, #30
 8013888:	680e      	ldr	r6, [r1, #0]
 801388a:	bf08      	it	eq
 801388c:	694b      	ldreq	r3, [r1, #20]
 801388e:	600f      	str	r7, [r1, #0]
 8013890:	bf18      	it	ne
 8013892:	2300      	movne	r3, #0
 8013894:	eba6 0807 	sub.w	r8, r6, r7
 8013898:	608b      	str	r3, [r1, #8]
 801389a:	f1b8 0f00 	cmp.w	r8, #0
 801389e:	dd9c      	ble.n	80137da <__sflush_r+0x1a>
 80138a0:	6a21      	ldr	r1, [r4, #32]
 80138a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80138a4:	4643      	mov	r3, r8
 80138a6:	463a      	mov	r2, r7
 80138a8:	4628      	mov	r0, r5
 80138aa:	47b0      	blx	r6
 80138ac:	2800      	cmp	r0, #0
 80138ae:	dc06      	bgt.n	80138be <__sflush_r+0xfe>
 80138b0:	89a3      	ldrh	r3, [r4, #12]
 80138b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80138b6:	81a3      	strh	r3, [r4, #12]
 80138b8:	f04f 30ff 	mov.w	r0, #4294967295
 80138bc:	e78e      	b.n	80137dc <__sflush_r+0x1c>
 80138be:	4407      	add	r7, r0
 80138c0:	eba8 0800 	sub.w	r8, r8, r0
 80138c4:	e7e9      	b.n	801389a <__sflush_r+0xda>
 80138c6:	bf00      	nop
 80138c8:	20400001 	.word	0x20400001

080138cc <_fflush_r>:
 80138cc:	b538      	push	{r3, r4, r5, lr}
 80138ce:	690b      	ldr	r3, [r1, #16]
 80138d0:	4605      	mov	r5, r0
 80138d2:	460c      	mov	r4, r1
 80138d4:	b913      	cbnz	r3, 80138dc <_fflush_r+0x10>
 80138d6:	2500      	movs	r5, #0
 80138d8:	4628      	mov	r0, r5
 80138da:	bd38      	pop	{r3, r4, r5, pc}
 80138dc:	b118      	cbz	r0, 80138e6 <_fflush_r+0x1a>
 80138de:	6983      	ldr	r3, [r0, #24]
 80138e0:	b90b      	cbnz	r3, 80138e6 <_fflush_r+0x1a>
 80138e2:	f7ff fa8d 	bl	8012e00 <__sinit>
 80138e6:	4b14      	ldr	r3, [pc, #80]	; (8013938 <_fflush_r+0x6c>)
 80138e8:	429c      	cmp	r4, r3
 80138ea:	d11b      	bne.n	8013924 <_fflush_r+0x58>
 80138ec:	686c      	ldr	r4, [r5, #4]
 80138ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d0ef      	beq.n	80138d6 <_fflush_r+0xa>
 80138f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80138f8:	07d0      	lsls	r0, r2, #31
 80138fa:	d404      	bmi.n	8013906 <_fflush_r+0x3a>
 80138fc:	0599      	lsls	r1, r3, #22
 80138fe:	d402      	bmi.n	8013906 <_fflush_r+0x3a>
 8013900:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013902:	f7ff fb2d 	bl	8012f60 <__retarget_lock_acquire_recursive>
 8013906:	4628      	mov	r0, r5
 8013908:	4621      	mov	r1, r4
 801390a:	f7ff ff59 	bl	80137c0 <__sflush_r>
 801390e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013910:	07da      	lsls	r2, r3, #31
 8013912:	4605      	mov	r5, r0
 8013914:	d4e0      	bmi.n	80138d8 <_fflush_r+0xc>
 8013916:	89a3      	ldrh	r3, [r4, #12]
 8013918:	059b      	lsls	r3, r3, #22
 801391a:	d4dd      	bmi.n	80138d8 <_fflush_r+0xc>
 801391c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801391e:	f7ff fb20 	bl	8012f62 <__retarget_lock_release_recursive>
 8013922:	e7d9      	b.n	80138d8 <_fflush_r+0xc>
 8013924:	4b05      	ldr	r3, [pc, #20]	; (801393c <_fflush_r+0x70>)
 8013926:	429c      	cmp	r4, r3
 8013928:	d101      	bne.n	801392e <_fflush_r+0x62>
 801392a:	68ac      	ldr	r4, [r5, #8]
 801392c:	e7df      	b.n	80138ee <_fflush_r+0x22>
 801392e:	4b04      	ldr	r3, [pc, #16]	; (8013940 <_fflush_r+0x74>)
 8013930:	429c      	cmp	r4, r3
 8013932:	bf08      	it	eq
 8013934:	68ec      	ldreq	r4, [r5, #12]
 8013936:	e7da      	b.n	80138ee <_fflush_r+0x22>
 8013938:	0801dd88 	.word	0x0801dd88
 801393c:	0801dda8 	.word	0x0801dda8
 8013940:	0801dd68 	.word	0x0801dd68

08013944 <__swhatbuf_r>:
 8013944:	b570      	push	{r4, r5, r6, lr}
 8013946:	460e      	mov	r6, r1
 8013948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801394c:	2900      	cmp	r1, #0
 801394e:	b096      	sub	sp, #88	; 0x58
 8013950:	4614      	mov	r4, r2
 8013952:	461d      	mov	r5, r3
 8013954:	da08      	bge.n	8013968 <__swhatbuf_r+0x24>
 8013956:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801395a:	2200      	movs	r2, #0
 801395c:	602a      	str	r2, [r5, #0]
 801395e:	061a      	lsls	r2, r3, #24
 8013960:	d410      	bmi.n	8013984 <__swhatbuf_r+0x40>
 8013962:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013966:	e00e      	b.n	8013986 <__swhatbuf_r+0x42>
 8013968:	466a      	mov	r2, sp
 801396a:	f000 f895 	bl	8013a98 <_fstat_r>
 801396e:	2800      	cmp	r0, #0
 8013970:	dbf1      	blt.n	8013956 <__swhatbuf_r+0x12>
 8013972:	9a01      	ldr	r2, [sp, #4]
 8013974:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013978:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801397c:	425a      	negs	r2, r3
 801397e:	415a      	adcs	r2, r3
 8013980:	602a      	str	r2, [r5, #0]
 8013982:	e7ee      	b.n	8013962 <__swhatbuf_r+0x1e>
 8013984:	2340      	movs	r3, #64	; 0x40
 8013986:	2000      	movs	r0, #0
 8013988:	6023      	str	r3, [r4, #0]
 801398a:	b016      	add	sp, #88	; 0x58
 801398c:	bd70      	pop	{r4, r5, r6, pc}
	...

08013990 <__smakebuf_r>:
 8013990:	898b      	ldrh	r3, [r1, #12]
 8013992:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013994:	079d      	lsls	r5, r3, #30
 8013996:	4606      	mov	r6, r0
 8013998:	460c      	mov	r4, r1
 801399a:	d507      	bpl.n	80139ac <__smakebuf_r+0x1c>
 801399c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80139a0:	6023      	str	r3, [r4, #0]
 80139a2:	6123      	str	r3, [r4, #16]
 80139a4:	2301      	movs	r3, #1
 80139a6:	6163      	str	r3, [r4, #20]
 80139a8:	b002      	add	sp, #8
 80139aa:	bd70      	pop	{r4, r5, r6, pc}
 80139ac:	ab01      	add	r3, sp, #4
 80139ae:	466a      	mov	r2, sp
 80139b0:	f7ff ffc8 	bl	8013944 <__swhatbuf_r>
 80139b4:	9900      	ldr	r1, [sp, #0]
 80139b6:	4605      	mov	r5, r0
 80139b8:	4630      	mov	r0, r6
 80139ba:	f7fe ff6f 	bl	801289c <_malloc_r>
 80139be:	b948      	cbnz	r0, 80139d4 <__smakebuf_r+0x44>
 80139c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80139c4:	059a      	lsls	r2, r3, #22
 80139c6:	d4ef      	bmi.n	80139a8 <__smakebuf_r+0x18>
 80139c8:	f023 0303 	bic.w	r3, r3, #3
 80139cc:	f043 0302 	orr.w	r3, r3, #2
 80139d0:	81a3      	strh	r3, [r4, #12]
 80139d2:	e7e3      	b.n	801399c <__smakebuf_r+0xc>
 80139d4:	4b0d      	ldr	r3, [pc, #52]	; (8013a0c <__smakebuf_r+0x7c>)
 80139d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80139d8:	89a3      	ldrh	r3, [r4, #12]
 80139da:	6020      	str	r0, [r4, #0]
 80139dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80139e0:	81a3      	strh	r3, [r4, #12]
 80139e2:	9b00      	ldr	r3, [sp, #0]
 80139e4:	6163      	str	r3, [r4, #20]
 80139e6:	9b01      	ldr	r3, [sp, #4]
 80139e8:	6120      	str	r0, [r4, #16]
 80139ea:	b15b      	cbz	r3, 8013a04 <__smakebuf_r+0x74>
 80139ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80139f0:	4630      	mov	r0, r6
 80139f2:	f000 f863 	bl	8013abc <_isatty_r>
 80139f6:	b128      	cbz	r0, 8013a04 <__smakebuf_r+0x74>
 80139f8:	89a3      	ldrh	r3, [r4, #12]
 80139fa:	f023 0303 	bic.w	r3, r3, #3
 80139fe:	f043 0301 	orr.w	r3, r3, #1
 8013a02:	81a3      	strh	r3, [r4, #12]
 8013a04:	89a0      	ldrh	r0, [r4, #12]
 8013a06:	4305      	orrs	r5, r0
 8013a08:	81a5      	strh	r5, [r4, #12]
 8013a0a:	e7cd      	b.n	80139a8 <__smakebuf_r+0x18>
 8013a0c:	08012d99 	.word	0x08012d99

08013a10 <_raise_r>:
 8013a10:	291f      	cmp	r1, #31
 8013a12:	b538      	push	{r3, r4, r5, lr}
 8013a14:	4604      	mov	r4, r0
 8013a16:	460d      	mov	r5, r1
 8013a18:	d904      	bls.n	8013a24 <_raise_r+0x14>
 8013a1a:	2316      	movs	r3, #22
 8013a1c:	6003      	str	r3, [r0, #0]
 8013a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8013a22:	bd38      	pop	{r3, r4, r5, pc}
 8013a24:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013a26:	b112      	cbz	r2, 8013a2e <_raise_r+0x1e>
 8013a28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013a2c:	b94b      	cbnz	r3, 8013a42 <_raise_r+0x32>
 8013a2e:	4620      	mov	r0, r4
 8013a30:	f000 f830 	bl	8013a94 <_getpid_r>
 8013a34:	462a      	mov	r2, r5
 8013a36:	4601      	mov	r1, r0
 8013a38:	4620      	mov	r0, r4
 8013a3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013a3e:	f000 b817 	b.w	8013a70 <_kill_r>
 8013a42:	2b01      	cmp	r3, #1
 8013a44:	d00a      	beq.n	8013a5c <_raise_r+0x4c>
 8013a46:	1c59      	adds	r1, r3, #1
 8013a48:	d103      	bne.n	8013a52 <_raise_r+0x42>
 8013a4a:	2316      	movs	r3, #22
 8013a4c:	6003      	str	r3, [r0, #0]
 8013a4e:	2001      	movs	r0, #1
 8013a50:	e7e7      	b.n	8013a22 <_raise_r+0x12>
 8013a52:	2400      	movs	r4, #0
 8013a54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013a58:	4628      	mov	r0, r5
 8013a5a:	4798      	blx	r3
 8013a5c:	2000      	movs	r0, #0
 8013a5e:	e7e0      	b.n	8013a22 <_raise_r+0x12>

08013a60 <raise>:
 8013a60:	4b02      	ldr	r3, [pc, #8]	; (8013a6c <raise+0xc>)
 8013a62:	4601      	mov	r1, r0
 8013a64:	6818      	ldr	r0, [r3, #0]
 8013a66:	f7ff bfd3 	b.w	8013a10 <_raise_r>
 8013a6a:	bf00      	nop
 8013a6c:	20000290 	.word	0x20000290

08013a70 <_kill_r>:
 8013a70:	b538      	push	{r3, r4, r5, lr}
 8013a72:	4d07      	ldr	r5, [pc, #28]	; (8013a90 <_kill_r+0x20>)
 8013a74:	2300      	movs	r3, #0
 8013a76:	4604      	mov	r4, r0
 8013a78:	4608      	mov	r0, r1
 8013a7a:	4611      	mov	r1, r2
 8013a7c:	602b      	str	r3, [r5, #0]
 8013a7e:	f7fb fe3f 	bl	800f700 <_kill>
 8013a82:	1c43      	adds	r3, r0, #1
 8013a84:	d102      	bne.n	8013a8c <_kill_r+0x1c>
 8013a86:	682b      	ldr	r3, [r5, #0]
 8013a88:	b103      	cbz	r3, 8013a8c <_kill_r+0x1c>
 8013a8a:	6023      	str	r3, [r4, #0]
 8013a8c:	bd38      	pop	{r3, r4, r5, pc}
 8013a8e:	bf00      	nop
 8013a90:	20003700 	.word	0x20003700

08013a94 <_getpid_r>:
 8013a94:	f7fb be2c 	b.w	800f6f0 <_getpid>

08013a98 <_fstat_r>:
 8013a98:	b538      	push	{r3, r4, r5, lr}
 8013a9a:	4d07      	ldr	r5, [pc, #28]	; (8013ab8 <_fstat_r+0x20>)
 8013a9c:	2300      	movs	r3, #0
 8013a9e:	4604      	mov	r4, r0
 8013aa0:	4608      	mov	r0, r1
 8013aa2:	4611      	mov	r1, r2
 8013aa4:	602b      	str	r3, [r5, #0]
 8013aa6:	f7fb fe87 	bl	800f7b8 <_fstat>
 8013aaa:	1c43      	adds	r3, r0, #1
 8013aac:	d102      	bne.n	8013ab4 <_fstat_r+0x1c>
 8013aae:	682b      	ldr	r3, [r5, #0]
 8013ab0:	b103      	cbz	r3, 8013ab4 <_fstat_r+0x1c>
 8013ab2:	6023      	str	r3, [r4, #0]
 8013ab4:	bd38      	pop	{r3, r4, r5, pc}
 8013ab6:	bf00      	nop
 8013ab8:	20003700 	.word	0x20003700

08013abc <_isatty_r>:
 8013abc:	b538      	push	{r3, r4, r5, lr}
 8013abe:	4d06      	ldr	r5, [pc, #24]	; (8013ad8 <_isatty_r+0x1c>)
 8013ac0:	2300      	movs	r3, #0
 8013ac2:	4604      	mov	r4, r0
 8013ac4:	4608      	mov	r0, r1
 8013ac6:	602b      	str	r3, [r5, #0]
 8013ac8:	f7fb fe86 	bl	800f7d8 <_isatty>
 8013acc:	1c43      	adds	r3, r0, #1
 8013ace:	d102      	bne.n	8013ad6 <_isatty_r+0x1a>
 8013ad0:	682b      	ldr	r3, [r5, #0]
 8013ad2:	b103      	cbz	r3, 8013ad6 <_isatty_r+0x1a>
 8013ad4:	6023      	str	r3, [r4, #0]
 8013ad6:	bd38      	pop	{r3, r4, r5, pc}
 8013ad8:	20003700 	.word	0x20003700

08013adc <_init>:
 8013adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ade:	bf00      	nop
 8013ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013ae2:	bc08      	pop	{r3}
 8013ae4:	469e      	mov	lr, r3
 8013ae6:	4770      	bx	lr

08013ae8 <_fini>:
 8013ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013aea:	bf00      	nop
 8013aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013aee:	bc08      	pop	{r3}
 8013af0:	469e      	mov	lr, r3
 8013af2:	4770      	bx	lr
